{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.18.04.28/fluentassertions.2.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dennis Doomen, Martin Opdam",
  "catalog:commitId": "fc2c6144-fd79-49ce-9db1-0476c85aa307",
  "catalog:commitTimeStamp": "2015-02-03T18:04:28.2107675Z",
  "copyright": "Copyright Dennis Doomen 2010-2013",
  "created": "2013-08-23T09:53:01.827Z",
  "description": "A very extensive set of extension methods that allow you to more naturally specify the expected outcome of a TDD or \n      BDD-style unit test. Runs on .NET 3.5, 4.0 and 4.5 (Desktop and Windows Store), Silverlight 4 and 5 and Windows Phone 7.5 and 8. Supports the unit test frameworks NUnit, XUnit, MBUnit, Gallio and MSpec.",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.18.04.28/fluentassertions.2.1.0.json#frameworkassemblygroup",
    "assembly": [
      "System.Xml",
      "System.Xml.Linq"
    ]
  },
  "id": "FluentAssertions",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/dennisdoomen/FluentAssertions/blob/master/LICENSE",
  "packageHash": "iL8+ggunffrc9OBgjN9/O/cbySXzZdWm4nvE/+Z/Xzvu7kWm4vTFE1n1k4DazMkWiQTkhWDaPjKAvFaeObF+6g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 1150514,
  "projectUrl": "https://github.com/dennisdoomen/FluentAssertions",
  "published": "2013-08-23T09:53:01.953Z",
  "releaseNotes": "What are the major features\n      * Added support for Windows Phone 8 test projects, both using the Visual Studio 2010 test harnass, as well as the new MSTest based framework introduced in Visual Studio 2012 Update 2 (#12470)\n      * Added support for AggregateExceptions in .NET 4.0 or newer so that aggregated exceptions are treated the same way as normal exceptions. This also allows you to use Should(Not)Throw() to assert a specific exception has occurred (or not), even if it is wrapped in an AggregateException (#12482).\n      * ShouldBeEquivalent() will attempt to report all differences rather than just the first one. It also supports nested dictionaries (#12472).\n      * By default the order of items in (nested) collections is ignored while asserting the equivalency of two object graphs. You can override this using the WithStrictOrder()/WithStrictOrderFor() options, with or without a specific path or predicate. Notice that for performance reasons, collections of bytes are still compared in exact order (#12484).\n\n      What other improvements are new\n      * Added support for asserting a method is decorated with a certain attribute (by Nathan Roe)\n      * Added BeWritable() to the property info assertions .\n      * XName support for all XML-related assertiosn (#12453 by Igor Khavkin)\n      * Added Should().BeApproximately() for decimal values.\n      * Added support for ShouldNotThrow() on Func<Task> so that you can verify that asynchronous functions threw a task (by Igor Khavkin)\n      * Ensured that all reference type assertions inherit from ReferenceTypeAssertions so that they all share some basic methods like (Not)BeNull.\n      * Added support for string.Should().NotStartWith() and string.Should().NotEndWith(). Also added the case-insensitive versions of them. (#12441)\n      * Allowed adding, removing and/or reordering the steps the EquivalencyValidator executes while comparing two object graphs for structural equality.\n      * By default, the exception message assertions are based on wildcards and case-insensitive. The ComparisonMode enum has been marked obsolete.\n\n      Bug fixes\n      * Added catching of FileLoadExceptions so AttributeBasedFormatter will not crash on certain circumstances.\n      * Made test framework detection based on assembly scanning case insensitive (#12483)\n      * Fixed a type-mismatch error when two nullable properties were compared using an AssertionRule.\n      * The method collection.ShouldBeEquivalent() ignored duplicates in the expectation.\n      * Applied a small improvement by Groostav to collection.HaveCount() because it was counting collections through LINQ Count() even though it has a normal Count property (#12469).\n      * Comparing a null collection with another null collection will now succeed (#12490)\n      * When a type was generic, FA wouldn't display its properties in assertion failures (#12492)\n      * On Mono, the AttributeBasedFormatter sometimes throws a NullReferenceException, but this has been fixed by Frank Ebersoll (#12487).\n      * During a structural equality check, FA would incorrectly decide to include protected properties in the comparison. This has been fixed now (#12486).\n      * FA chocked on properties overriden using the new keyword. Now it just tries to be smart about it and select the one which type matches the subject (#12481).\n      * When a floating point value representing NaN was compared with another approximate value, it didn't throw (#12479).\n      * Improved the details of any unexpected exceptions during the ShouldThrow() and ShouldNotThrow() methods (#12473).\n      * Collection.ShouldBeInAscendingOrder() wasn't reporting the correct index if an item appeared out-of-order (#12468).\n\n      Breaking changes\n      * Renamed the Execute.Verification property to Execute.Assertion and introduced an internal AssertionScope.",
  "requireLicenseAcceptance": false,
  "summary": "Fluent methods for asserting the result of TDD/BDD specs for .NET 3.5/4.0/4.5 (Desktop and Windows Store), SL 4/5, WP7.5 and WP8 (VS2010 + VS2012 SDKs). Supports the unit test frameworks NUnit, XUnit, MBUnit, Gallio and MSpec.",
  "title": "Fluent Assertions",
  "version": "2.1.0",
  "tags": [
    "MSTest",
    "xUnit",
    "NUnit",
    "MSpec",
    "Gallio",
    "MbUnit",
    "TDD",
    "BDD",
    "Fluent",
    "Silverlight",
    "WinRT",
    "WP7",
    "WP8"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}