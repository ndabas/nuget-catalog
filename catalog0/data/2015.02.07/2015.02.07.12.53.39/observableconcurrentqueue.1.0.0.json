{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.12.53.39/observableconcurrentqueue.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "cYounes",
  "catalog:commitId": "bea617ab-5162-45e5-afb9-76020f1aab64",
  "catalog:commitTimeStamp": "2015-02-07T12:53:39.2503803Z",
  "copyright": "Copyright 2015",
  "created": "2015-01-05T10:47:41Z",
  "description": "Observable Concurrent Queue based on the classic concurrent queue (System.Collections.Concurrent.ConcurrentQueue) Allows to raise events when the queue content is changed with the same events as ObservableCollection",
  "iconUrl": "https://raw.githubusercontent.com/BledSoft/ObservableConcurrentQueue/master/icon.png",
  "id": "ObservableConcurrentQueue",
  "isPrerelease": false,
  "lastEdited": "2015-01-05T22:29:44.273Z",
  "licenseUrl": "https://github.com/BledSoft/ObservableConcurrentQueue/blob/master/license.md",
  "packageHash": "/IRkwXTgpyzLxdSwvBbXsOHSsbYD34+hFc5pzJ9mDs4HrRYYMC9RJ0C11xzrvCq0mk2PvkSRVc6MkWr//trp/Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 490493,
  "projectUrl": "https://observableconcurrentqueue.codeplex.com/",
  "published": "2015-01-05T10:47:41Z",
  "releaseNotes": "Concurrent Queue raises event when queue content changed.",
  "requireLicenseAcceptance": true,
  "summary": "The classic ConcurrentQueue raises event when queue content changed.",
  "title": "Observable Concurrent Queue",
  "version": "1.0.0",
  "tags": [
    "C#",
    "Queue",
    "Observable",
    "Concurrent",
    "ConcurrentQueue",
    "Event",
    "Content"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}