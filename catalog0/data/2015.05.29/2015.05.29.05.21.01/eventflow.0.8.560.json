{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.05.29.05.21.01/eventflow.0.8.560.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "rasmus",
  "catalog:commitId": "898b22d3-f190-425f-9dc2-5b1203cd7aeb",
  "catalog:commitTimeStamp": "2015-05-29T05:21:01.9781772Z",
  "copyright": "Copyright (c) 2015 Rasmus Mikkelsen",
  "created": "2015-05-29T05:20:09.897Z",
  "description": "CQRS+ES framework",
  "iconUrl": "https://raw.githubusercontent.com/rasmus/EventFlow/master/icon-256.png",
  "id": "EventFlow",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://raw.githubusercontent.com/rasmus/EventFlow/master/LICENSE",
  "packageHash": "3J+/+HssVjm4x4EzSTA6KjwBLe57gr7Mav6viraRO7JwTFcwBaUHBFvCORKHJimNMMfquaXUvBLwjSPwPT4tHQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 151172,
  "projectUrl": "https://github.com/rasmus/EventFlow",
  "published": "2015-05-29T05:20:09.897Z",
  "releaseNotes": "Breaking: Remove _all_ functionality related to global sequence\nnumbers as it proved problematic to maintain. It also matches this\nquote:\n> Order is only assured per a handler within an aggregate root\n> boundary. There is no assurance of order between handlers or\n> between aggregates. Trying to provide those things leads to\n> the dark side.\n>> Greg Young\n- If you use a MSSQL read store, be sure to delete the\n`LastGlobalSequenceNumber` column during update, or set it to\ndefault `NULL`\n- `IDomainEvent.GlobalSequenceNumber` removed\n- `IEventStore.LoadEventsAsync` and `IEventStore.LoadEvents` taking\na `GlobalSequenceNumberRange` removed\nBreaking: Remove the concept of event caches. If you really need this\nthen implement it by registering a decorator for `IEventStore`\nBreaking: Moved `IDomainEvent.BatchId` to metadata and created\n`MetadataKeys.BatchId` to help access it\nNew: `IEventStore.DeleteAggregateAsync` to delete an entire aggregate\nstream. Please consider carefully if you really want to use it. Storage\nmight be cheaper than the historic knowledge within your events\nNew: `IReadModelPopulator` is new and enables you to both purge and\npopulate read models by going though the entire event store. Currently\nits only basic functionality, but more will be added\nNew: `IEventStore` now has `LoadAllEventsAsync` and `LoadAllEvents` that\nenables you to load all events in the event store a few at a time.\nNew: `IMetadata.TimestampEpoch` contains the Unix timestamp version\nof `IMetadata.Timestamp`. Also, an additional metadata key\n`timestamp_epoch` is added to events containing the same data. Note,\nthe `TimestampEpoch` on `IMetadata` handles cases in which the\n`timestamp_epoch` is not present by using the existing timestamp\nFixed: `AggregateRoot<>` now reads the aggregate version from\ndomain events applied during aggregate load. This resolves an issue\nfor when an `IEventUpgrader` removed events from the event stream\nFixed: `InMemoryReadModelStore<,>` is now thread safe",
  "requireLicenseAcceptance": true,
  "title": "EventFlow - CQRS+ES framework",
  "version": "0.8.560",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.05.29.05.21.01/eventflow.0.8.560.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.05.29.05.21.01/eventflow.0.8.560.json#dependencygroup/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[6.0.4, )"
        }
      ]
    }
  ],
  "tags": [
    "CQRS",
    "ES",
    "event",
    "sourceing",
    "eventstore"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}