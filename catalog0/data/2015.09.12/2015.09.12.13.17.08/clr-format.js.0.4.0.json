{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.12.13.17.08/clr-format.js.0.4.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Viktor Mitev",
  "catalog:commitId": "5e4114f9-f2c4-437a-82a9-9eabc4ad1d50",
  "catalog:commitTimeStamp": "2015-09-12T13:17:08.2128618Z",
  "created": "2015-09-12T13:16:26.947Z",
  "description": "The implementation of this string formatting function is inspired by .NET's (and other Microsoft® products') Composite Formatting feature. Therefore the final behaviour should be similar to what's described in the Getting started with the String.Format method MSDN article. The main difference is that method names in JavaScript are intrinsically camelcase therefore String.format should be used instead.\n\nThe API documentation can be refered for more details at http://clr-format.github.io/clr-format/\n\nUsage:\n  var formatted = String.format(\"Value: {0:00-00}\", 345.6); // formatted = \"Value: 03-46\"\n  formatted = String.format(\"Value: {0,-2}{1}\", 1, \"text\"); // formatted = \"Value: 1 text\"\n\n  // Using the globalization API (clr-format-intl.js)\n  Format.setCulture(\"de-DE\");\n  formatted = String.format(\"{0:N2}\", -1234.56); // formatted = \"-1.234,56\"\n  formatted = String.format(\"{0:#0.0#;(#0.0#,);-0-}\", -1234.5); // formatted = \"(1,23)\"\n\n  Format.setCurrency(\"EUR\");\n  formatted = String.format(\"{0:c}\", 1230); // formatted = \"1.230,00 €\"\n\n  // Using the configuration API (clr-format-config.js)\n  Format.Config.addFormatToPrototype();\n  formatted = \"Value:{0,10}\".format(\"prototype\"); // formatted = \"Value: prototype\"",
  "iconUrl": "https://avatars3.githubusercontent.com/u/13048800",
  "id": "clr-format.js",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "https://github.com/clr-format/clr-format/blob/master/LICENSE",
  "listed": true,
  "packageHash": "lOUYgWedthWWTONZXCN+x6uJbeh/CLxuRbONs5SgriuQCdGs8uxxVdKl1h53MrwkFaLk/ZEPceb77jqXNXSN8Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 68367,
  "projectUrl": "https://github.com/clr-format/clr-format",
  "published": "2015-09-12T13:16:26.947Z",
  "releaseNotes": "1. Support for all of .NET's standard and custom numeric format strings (except for currency with the invariant culture).\n2. Optional globalization API contained in clr-format-intl.js that allows for culture-specific number and currency formatting via the Format.setCulture and Format.setCurrency methods.\n3. Optional configuration API contained in clr-format-config.js and defined under the Format.Config namespace. See http://clr-format.github.io/clr-format/modules/format.config.html",
  "requireLicenseAcceptance": false,
  "summary": "A lightweight, modular and stand-alone JavaScript implementation of a string formatting function that supports composite format strings, globalization and customization",
  "title": "CLR Format (Javascript)",
  "verbatimVersion": "0.4.0",
  "version": "0.4.0",
  "tags": [
    "string",
    "format",
    "javascript",
    "typescript",
    "number",
    "date",
    "globalization",
    "intl"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}