{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.03.28.21.26.09/liblog.4.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Damian Hickey",
  "catalog:commitId": "ac29dc5f-0c9d-45d7-8d88-723f3369c659",
  "catalog:commitTimeStamp": "2015-03-28T21:26:09.7124408Z",
  "copyright": "Damian Hickey and Contributors 2014",
  "created": "2015-03-28T21:25:08.697Z",
  "description": "A source code package designed primarily for library and framework authors who want dependency free logging support in their component. Also useful in end applications. Works with .NET 4 and higher.\n\nIf you are a library or framework author and you wish to provide logging support in your component there are a  number of options: 1) Depend on a specific logging framework 2) Depend on Common.Logging 3) Implement your own ILog interface and make your consumers wire it up.\n\nOption 1 is not desirable because it forces your users to use a particular framework. Option 2 is not desirable because it will add yet more nuget package dependencies and project references with associated versioning concerns in addition to wiring up. Option 3 is desirable because it is dependency free but requires that your users to remember to write an adapter and wire things up.\n\nThis package is a variation of option 3 but will automatically wire things up too.\n- It will add an ILog, ILogProvider etc to YourRootNamespace.Logging\n- ILog is 2 methods to implement in comparison to Common.Logging ILog's ~65 members\n- Using optimized reflection, it transparently supports NLog, Log4Net, EntLib Logging, Serilog and Loupe without any wiring up required by an end user, if the end user simply has a reference to any of these logging frameworks.",
  "developmentDependency": "true",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.03.28.21.26.09/liblog.4.0.0.json#frameworkassemblygroup",
    "assembly": "Microsoft.CSharp"
  },
  "id": "LibLog",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/damianh/LibLog/blob/master/licence.txt",
  "packageHash": "di87uaTFmtYNx9buCM80VlyBIm4fa2IFx67xmLN8+BHtM+uR00av7z6YcOQHaDVE9h2dOxcKphmqjjAiz7tYbA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 15679,
  "projectUrl": "https://github.com/damianh/LibLog",
  "published": "2015-03-28T21:25:08.697Z",
  "releaseNotes": "- Tighted up the public API to just being ILog, LogLevel, and LogProvider.SetCurrentLogProvider\n- Can make entire code internal with a LIBLOG_INTERNAL conditional compilation symbol\n- Can hook into when a consumer of your lib sets the current log provider allowing you to forward the configuration to other, possibly internalized, libs that use LibLog.",
  "requireLicenseAcceptance": false,
  "summary": "A source code package designed primarily for library and framework authors who want dependency free logging support in their component. Also useful in end applications. Works with .NET 4 and portable-net45+win+wpa81+MonoAndroid10+MonoTouch10 and higher.",
  "version": "4.0.0",
  "tags": [
    "logging",
    "framework",
    "component",
    "nlog",
    "log4net",
    "entlib",
    "serilog",
    "loupe",
    "pcl"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}