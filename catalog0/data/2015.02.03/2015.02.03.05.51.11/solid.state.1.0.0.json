{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.05.51.11/solid.state.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "bolddp",
  "catalog:commitId": "4bd48ab2-1cc3-447b-8e59-e84d8c4e4f95",
  "catalog:commitTimeStamp": "2015-02-03T05:51:11.0175307Z",
  "created": "2013-03-22T22:22:27.583Z",
  "description": "Easy to use, powerful finite state machine implementation with a fluent configuration API.\nStates are designed as classes that implement a specific interface, which provides a great freedom when designing the state machine.\nSolid.State can also be configured to use a state resolver, which is then responsible for creating state instances. This plays very well with an IoC container, which makes it possible to use constructor or property injection on the state classes.",
  "iconUrl": "https://code.google.com/p/solid-state/logo",
  "id": "Solid.State",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/mit-license.php",
  "packageHash": "ZSG883oRHJjaoIrvJvwa2OZGTpn6XSj9KoUJgTaoAGDU4cxScDpSCzSfsBhZ8GpIN4474rzBP3CmSVYhqPbNXw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 9438,
  "projectUrl": "https://code.google.com/p/solid-state/",
  "published": "2013-03-22T22:22:27.583Z",
  "requireLicenseAcceptance": false,
  "summary": "Finite state machine implementation with a fluent configuration API.",
  "title": "Solid.State finite state machine",
  "version": "1.0.0",
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}