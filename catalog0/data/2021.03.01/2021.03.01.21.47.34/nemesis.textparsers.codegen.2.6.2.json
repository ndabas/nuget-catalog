{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.03.01.21.47.34/nemesis.textparsers.codegen.2.6.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Michał Bryłka, Leszek Kowalski",
  "catalog:commitId": "8fa87251-75a1-4324-be74-6e3b40a787a0",
  "catalog:commitTimeStamp": "2021-03-01T21:47:34.6136414Z",
  "copyright": "Copyright (c) Michał Bryłka. Icon by http://www.iconka.com",
  "created": "2021-03-01T21:45:54.887Z",
  "description": "Contains various parser optimized for speed and no allocation\n      This package was built from the source at /tree/",
  "iconFile": "review-icon.png",
  "id": "Nemesis.TextParsers.CodeGen",
  "isPrerelease": false,
  "lastEdited": "2021-03-01T21:47:26.07Z",
  "licenseExpression": "MIT OR Apache-2.0",
  "licenseUrl": "https://licenses.nuget.org/MIT%20OR%20Apache-2.0",
  "listed": true,
  "packageHash": "PeCt+gWfC7ZbHsglRu1f28viLKxAnL0FyGdbI48v9QL0FKixj2LP8Uc1XMPJxyb19oUaOB8pMfBKhh1+yazOAg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 42542,
  "projectUrl": "https://github.com/nemesissoft/Nemesis.TextParsers",
  "published": "2021-03-01T21:45:54.887Z",
  "releaseNotes": "Release v2.6.2\nAdd code gen package\n\nAdd code generation package that automatically generates necessary transformers\n## C# 9.0 Code generation\nWith introduction of new code-gen engine, you can opt to have your transformer generated automatically without any imperative code.\n```csharp \n//1. use specially provided (via code-gen) Auto.AutoDeconstructable attribute\n[Auto.AutoDeconstructable]\n//2. provide deconstructable aspect options or leave this attribute out - default options will be engaged \n[DeconstructableSettings('_', '∅', '%', '〈', '〉')]\nreadonly partial /*3. partial modifier is VERY important - you need this cause generated code is placed in different file*/ struct StructPoint3d\n{\n    public double X { get; }\n    public double Y { get; }\n    public double Z { get; }\n\n    //4. specify constructor and matching deconstructor \n    public StructPoint3d(double x, double y, double z) { X = x; Y = y; Z = z; }\n\n    public void Deconstruct(out double x, out double y, out double z) { x = X; y = Y; z = Z; }\n}\n\n//5. sit back, relax and enjoy - code-gen will do the job for you :-)\n``` \n\nThis in turn might generate the following (parts of code ommited for brevity)\n```csharp \nusing /* ... */;\n[Transformer(typeof(StructPoint3dTransformer))]\nreadonly partial struct StructPoint3d { }\n\nsealed class StructPoint3dTransformer : TransformerBase<StructPoint3d>\n{\n    private readonly ITransformer<double> _transformer_x = TextTransformer.Default.GetTransformer<double>();\n    /* specify remaining transformers... */\n    private const int ARITY = 3;\n    private readonly TupleHelper _helper = new TupleHelper('_', '∅', '%', '〈', '〉');\n\n    protected override StructPoint3d ParseCore(in ReadOnlySpan<char> input)\n    {\n        var enumerator = _helper.ParseStart(input, ARITY);\n        var t1 = _helper.ParseElement(ref enumerator, _transformer_x);        \n        /* parse Y and Z... */\n        _helper.ParseEnd(ref enumerator, ARITY);\n        return new StructPoint3d(t1, t2, t3);\n    }\n\n    public override string Format(StructPoint3d element)\n    {\n        Span<char> initialBuffer = stackalloc char[32];\n        var accumulator = new ValueSequenceBuilder<char>(initialBuffer);\n        try\n        {\n             _helper.StartFormat(ref accumulator);\n             var (x, y, z) = element;\n            _helper.FormatElement(_transformer_x, x, ref accumulator);\n            /* format Y and Z... */\n            _helper.EndFormat(ref accumulator);\n            return accumulator.AsSpan().ToString();\n        }\n        finally { accumulator.Dispose(); }\n    }\n}\n``` \n### Code gen diagnositcs\nVarious diagnositcs exist to guide end user in creation of proper types that can be consumed by automatic generation. They might for example:\n1. check if types decorated with Auto* attributes are declared partial (prerequisite for additive code generation)\n2. validate settings passed via declarative syntax\n3. validate internal structure of type (i.e. check if constructor has matching Deconstruct method)\n4. check if external dependencies are included",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "2.6.2",
  "version": "2.6.2",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.03.01.21.47.34/nemesis.textparsers.codegen.2.6.2.json#Nemesis.TextParsers.CodeGen.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1846,
      "fullName": "Nemesis.TextParsers.CodeGen.nuspec",
      "length": 4167,
      "name": "Nemesis.TextParsers.CodeGen.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.03.01.21.47.34/nemesis.textparsers.codegen.2.6.2.json#analyzers/dotnet/cs/Nemesis.TextParsers.CodeGen.dll",
      "@type": "PackageEntry",
      "compressedLength": 21499,
      "fullName": "analyzers/dotnet/cs/Nemesis.TextParsers.CodeGen.dll",
      "length": 39936,
      "name": "Nemesis.TextParsers.CodeGen.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.03.01.21.47.34/nemesis.textparsers.codegen.2.6.2.json#review-icon.png",
      "@type": "PackageEntry",
      "compressedLength": 7680,
      "fullName": "review-icon.png",
      "length": 7675,
      "name": "review-icon.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.03.01.21.47.34/nemesis.textparsers.codegen.2.6.2.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9468,
      "fullName": ".signature.p7s",
      "length": 9468,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "codegen",
    "codegeneration",
    "generation",
    "trnasformer",
    "parse",
    "ReadOnlySpan",
    "Span",
    "Memory",
    "fast",
    "allocation",
    "noAllocation"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}