{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "4501face-92f6-4bb5-b05f-406d124d3d7f",
  "catalog:commitTimeStamp": "2019-04-15T15:33:09.6417627Z",
  "copyright": "Copyright 2019",
  "created": "2019-04-15T15:28:53.513Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2019-04-15T15:33:05.887Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "v0qboAnBGbj4fdOiyhl8XrEscyVmAQw1hwu+U+whM5ojuEV8sgc0r8odTqZlOhyMkpIzqFk2XZmAmdNKJxJgcQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 449943,
  "published": "2019-04-15T15:28:53.513Z",
  "releaseNotes": "Unsigned Assembly\n\nInvestigated crashes of the software. Found that bf object initializations work fine when x.mant and x.twoexp components (of type mpz_t) have bitlength less or equal 17179869120. Found that crashes consistently occur when bitlength of either is greater than 17179869120 (when testing on three machines, with memory 7.45GB, 6GB, 16GB. one machine early Intel i5, one machine a more recent AMD processor, one machine a more recent Intel i7. Although bf intitialization worked fine at or below the indicated threshold on all three, one machine experienced crashes of the debugger near the threshold when running in debug mode.) bcr and bcp object creations would work fine if the underlying bf objects were at or below threshold. This was independent of whether the twoexp component was of type mpz_t, long, or int, and whether or not the bf objects also contained an internal BL bitlength component of type long (which was not present in earlier versions of this software).\n\nWith this version, bf object initialization will throw an exception with message \"Request exceeds capability of this software.\" if mant or twoexp components exceed the bitlength threshold. Also, a limitation of Precision values to 5171655000 or less is imposed (this value is the base 10 equivalent just under a few hundred bits of the threshold). Precision values exceeding this limit in public functions will result in an exception thrown, with message \"Precision can be no larger than 5171655000.\". In situations where internal processing might require that Precision values be increased by a substantial amount, the limit is checked and an exception is thrown, typically wth the same message, if the revised Precision exceeds that limit.  \n\nCreated and implemented the precise x.Multiply(y) functions for x of type bf, bcr, and bcp and y of various integer types. Updated the multiplication operators (x * y) to use this function if x or y is of an integer type (and unsigned, if x or y is of type bcp).\n\nUpdated the other x.Multiply and the x.Square functions to truncate results within these functions before creating output, rather than creating output and then calling x.Truncate. This avoids needlessly creating a temporary bf object which could easily exceed the bitlength limitation discussed above.\n\nRevisited x.Euler and x.Bernoulli and reversed some rather recent changes which resulted in outputs with precision below that which was requested.\n\nRevisited x.BesselJ and found that results can have less than requested Precision if inputs are computed with insufficient precision.\n \nMade public the bcr function RadiusSquared and the static bf functions DegreesToRadians, GradiansToRadians, RadiansToDegrees, and RadiansToGradians.\n\nRemoved the restriction on bf function x.Exp where x needed to be less than about 1.E+1035. It turns out, after the x.Multiply and x.Square changes discussed, that x can be much larger and x.Exp still works.\n\nRemoved the code which threw out-of-memory exceptions. The restriction on bitlengths discussed above handles crash problems much better, and the underlying software usually handles memory requirements quite well enough. \n\nCorrected an error in x.toString and x.Round in which results equal one were returned if x near one but farther away as required by rounding to Precision.\n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2017) and using Mpir.NET for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.NET and a base 2 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.4.9",
  "version": "0.4.9",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2406,
      "fullName": "LongCalc.nuspec",
      "length": 5411,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 35975,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 112128,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#content/xmpir32.dll",
      "@type": "PackageEntry",
      "compressedLength": 176893,
      "fullName": "content/xmpir32.dll",
      "length": 320000,
      "name": "xmpir32.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#content/xmpir64.dll",
      "@type": "PackageEntry",
      "compressedLength": 220506,
      "fullName": "content/xmpir64.dll",
      "length": 441856,
      "name": "xmpir64.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.15.15.33.09/longcalc.0.4.9.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}