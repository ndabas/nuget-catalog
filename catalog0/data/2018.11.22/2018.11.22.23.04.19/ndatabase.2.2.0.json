{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.22.23.04.19/ndatabase.2.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jacek Spólnik",
  "catalog:commitId": "c510be1e-a4cc-4c7f-bb90-6145861c1224",
  "catalog:commitTimeStamp": "2018-11-22T23:04:19.4839299Z",
  "copyright": "NDatabase Copyright ©  2012",
  "created": "2012-12-09T16:16:03.443Z",
  "description": "NDatabase is a simple .Net Object Database. To avoid impedance mismatch overhead between Object and Relational worlds, give a try to NDatabase. NDatabase is a new generation Object Database: a real native and transparent persistence layer for .Net.\n\n - Object because the basic persistent unit is an object, not a table.\n\n - Native and Transparent because it directly persists objects the way they exist in the native programming language, without any conversion.\n\nUsing NDatabase as your persistence layer will let you focus on your business logic allowing storing and retrieving native objects in a single line of code. No more Relational to Object mapping is necessary, NDatabase just persists objects the way they are, no matter their complexity.",
  "id": "NDatabase",
  "isPrerelease": false,
  "lastEdited": "2018-11-22T23:04:06.677Z",
  "licenseUrl": "http://www.gnu.org/licenses/lgpl.html",
  "listed": true,
  "packageHash": "mQ4E+4ZuzgRJvVloxkqEtZGdR+7SnE9JNHeGtACNUxOlN3pvu9NT/ZF0wtKbenDbandw3t9qIgfEJMqn+VD7Ew==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 447748,
  "projectUrl": "http://ndatabase.codeplex.com",
  "published": "2012-12-09T16:16:03.757Z",
  "releaseNotes": "* Add support for unsigned int, short, long and signed byte to NDatabase (http://ndatabase.codeplex.com/workitem/889)\n\n* Migration to .net 4 (http://ndatabase.codeplex.com/workitem/863)\n\t\t\n* improve Triggers API (make it similar to Index one) (BREKING CHANGE)\n** remove from IOdb interface methods like AddUpdateTrigger, AddDeleteTrigger, etc.\n** add to IOdb interface ITriggerManager TriggerManagerFor<T>() where T : class method, which allows on all CRUD operations in terms of triggers\n\n* changing base NDatabase API to be more developer friendly (BREKING CHANGE)\n** instead of GetObjects<T> methods in IOdb interface we have Query<T> methods\n** IClassRepresentation replaced with IIndexManager which controls access/creation of indexes (simplify the Index API)\n** CriteriaQuery methods of IOdb interface replaced with more meaningful CreateCriteriaQuery methods (they are factory methods)\n** Change IOdb inteface's GetName method to GetDbId (more meaningful)\n** rename IObejcts<T> inteface with IObjectSet<T> (more Soda standard here)\n\n* Update access level of NDatabase exception constructors (all are internal)\n\n* make all internal exceptions the concrete classes of OdbRuntimeException (all NDatabase exceptions are public)\n\n* UPDATE DB version to 20, earlier db files are not compatible (need to use converter) (db version compatibility runtime check)\n\n* Add Exception Handling Sample (ndatabase/tutorial/NDatabase.Tutorial/NDatabase.Tutorial.ExceptionHandling)\n\n* Add CSV Sample, which is showing how to take advantage when we will process csv file into NDatabase with index (querying data - performance about 4 times better than when using FileHelpers)\n** (ndatabase/tutorial/NDatabase.CSV.Tutorial)\n\n* Add unit test which is showing bug in NDatabase - using Invariant Equal on string with index is not working (http://ndatabase.codeplex.com/workitem/872)\n\n* cleaning api for InvariantEqual (Where static class)\n** public static IConstraint InvariantEqual<T>(string attributeName, T value) method relaced with\n** public static IConstraint InvariantEqual(string attributeName, string value)\n\n* clean CriteriaQuery internal code (preparing for LINQ Provider implementation)\n\n* more minor cleanup",
  "requireLicenseAcceptance": false,
  "summary": "C# Lightweight Object Database",
  "title": "NDatabase - C# Lightweight Object Database",
  "verbatimVersion": "2.2.0",
  "version": "2.2.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.22.23.04.19/ndatabase.2.2.0.json#NDatabase.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1689,
      "fullName": "NDatabase.nuspec",
      "length": 3815,
      "name": "NDatabase.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.22.23.04.19/ndatabase.2.2.0.json#lib/net40/NDatabase2.dll",
      "@type": "PackageEntry",
      "compressedLength": 123606,
      "fullName": "lib/net40/NDatabase2.dll",
      "length": 318976,
      "name": "NDatabase2.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.22.23.04.19/ndatabase.2.2.0.json#lib/net40/NDatabase2.pdb",
      "@type": "PackageEntry",
      "compressedLength": 309545,
      "fullName": "lib/net40/NDatabase2.pdb",
      "length": 1248768,
      "name": "NDatabase2.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.22.23.04.19/ndatabase.2.2.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9469,
      "fullName": ".signature.p7s",
      "length": 9469,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "C#",
    "Embedded",
    "Object",
    "Database"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}