{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.08.26.20.39.18/consoletoolkit.2.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jamie Davis",
  "catalog:commitId": "61c69ce4-dc94-4c66-ae31-5853ae52f5d2",
  "catalog:commitTimeStamp": "2018-08-26T20:39:18.482529Z",
  "copyright": "Jamie Davis 2014-2018",
  "created": "2018-08-26T20:34:43.167Z",
  "description": "The Console Toolkit is a sophisticated but simple to learn library providing a full set of features for building console applications. It focuses on getting out of the way as quickly as possible so that you can get on with implementing functionality without having to deal with the complications of parsing command line options, parsing user input, or formatting console output in a comprehensible format.\n\nThe library includes a declaritive mechanism for specifying command line options. You can specify your commands and options in a clear and simple way and the Toolkit will take care of the validation. You simply declare a handler and the library will call it if the user specifies valid parameters.\n\nApplications that accept multiple commands are fully supported, and the Toolkit even allows you to offer your users an interactive session in which they can issue commands into a custom command line interface. This functionality is provided free, you just need to start the session and define a command to allow the user to exit the session.\n\nCommand and command option help is provided automatically. You just need to tell the toolkit which option or command invokes the help text, and your user will be shown syntax and options. If you use the [Description(...)] attribute, your descriptions will automatically formatted and incorporated in the help text.\n\nCommand output can be formatted using a custom wrapper over the standard .NET Console object. To access this object you only need to add a parameter of type IConsoleAdapter and you can access features such as tabular data formatting and word wrapping. Colour support is provided through extension methods, so that you can specify .Red(), .Green() etc and the toolkit will worry about switching the Console output colour intelligently on your behalf. \n\nIf you need to capture console input from the user, the library provides an input parsing mechanism that supports everything from simple confirmation requests to compound data structures. The library will validate the user's input and provide you with .NET types so that you don't have to parse the strings yourself.\n\nComprehensive library documentation is available from the project website, but the library has been designed to be unobtrusive and straightforward to use. Follow the getting started guide to get a fully functional and well behaved console application up and running in minutes. You can even choose the parsing standard you prefer. If you want your commands to use DOS convetions, Unix conventions or the current Windows command line conventions, you just select an option and the Toolkit will format your help text and parse the user's arguments using the appropriate rules.",
  "id": "ConsoleToolkit",
  "isPrerelease": false,
  "lastEdited": "2018-08-26T20:38:50.12Z",
  "licenseUrl": "http://jamie-davis.github.io/ConsoleTools/LICENSE",
  "listed": true,
  "packageHash": "XnIDBngArGtk90R5N4qZpO1l+oJXBixYbWfVsxvvISWnw7WJHA9yutYobSXwZ3vVGDRTxLHCGrnTgY6mpa59SA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 130877,
  "projectUrl": "http://jamie-davis.github.io/ConsoleTools/",
  "published": "2018-08-26T20:34:43.167Z",
  "releaseNotes": "Updated the library to be a netstandard2.0 library. A later release will target an earlier netstandard version, but changes to the library will be required in order to achieve that. Version 1.4.1 will be the last version of the library compatible with .NET 4.0, but I hope to add compatibility with earlier versions than 4.7.1, which is currently the required full framework version.",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "2.0.0",
  "version": "2.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.08.26.20.39.18/consoletoolkit.2.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.08.26.20.39.18/consoletoolkit.2.0.0.json#dependencygroup/.netstandard2.0/system.reflection.emit",
          "@type": "PackageDependency",
          "id": "System.Reflection.Emit",
          "range": "[4.3.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.08.26.20.39.18/consoletoolkit.2.0.0.json#ConsoleToolkit.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1749,
      "fullName": "ConsoleToolkit.nuspec",
      "length": 3966,
      "name": "ConsoleToolkit.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.08.26.20.39.18/consoletoolkit.2.0.0.json#lib/netstandard2.0/ConsoleToolkit.dll",
      "@type": "PackageEntry",
      "compressedLength": 116767,
      "fullName": "lib/netstandard2.0/ConsoleToolkit.dll",
      "length": 278528,
      "name": "ConsoleToolkit.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.08.26.20.39.18/consoletoolkit.2.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Console",
    "Toolkit",
    ".NET"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}