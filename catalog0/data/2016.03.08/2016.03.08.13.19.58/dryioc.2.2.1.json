{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.03.08.13.19.58/dryioc.2.2.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Maksim Volkau",
  "catalog:commitId": "efb64fca-6322-4259-bacc-09f814cf1d3e",
  "catalog:commitTimeStamp": "2016-03-08T13:19:58.6376367Z",
  "copyright": "Copyright Â© 2016 Maksim Volkau",
  "created": "2016-03-08T13:19:47.64Z",
  "description": "DryIoc is fast, small, full-featured IoC Container for .NET",
  "id": "DryIoc",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "http://opensource.org/licenses/MIT",
  "listed": true,
  "packageHash": "2PNSYH3Cn2mRFXKDkdwOWGHwXNi4vH74VBYKXNd+DUleMrklNsM76DZZpG6Zm+ZXhOVM9nyQRXpBvNqaz0qF0w==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 508915,
  "projectUrl": "https://bitbucket.org/dadhi/dryioc",
  "published": "2016-03-08T13:19:47.64Z",
  "releaseNotes": "v2.2.1\n      - fixed: #245: Automatically add condition to check T constraints in Decorator of T\n      - changed: Minor Resolve speedup\n      v2.2.0\n      - added: #141: Support Decorators with open-generic factory methods of T\n      - added: #206: Track IDisposable Transients in scoped consumer's Scope\n      - added: #215: Option to specify Release action for reused services to implement pooling etc\n      - added: #227: Missing Arg.Of overload to specify default value for unresolved dependency\n      - added: #228: Make IContainer implicitly available for injection wout need for registration\n      - added: #229: Container rule to use Singleton scope as implicitly Open current scope for scoped registrations\n      - added: #239: Decorator setting to use Decoratee Reuse\n      - added: #241: Registration option to useParentReuse for dependency\n      - added: #242: Container rule for automatic concrete types resolution\n      - fixed: #94: Support for creating concrete type without storing it in Container\n      - fixed: #220: Minimize locking and therefore chances for deadlock in Singleton Scope\n      - fixed: #230: Custom initializer attached to lazily resolved dependency is called once per resolution, not once per construction\n      - fixed: #240: ConstructorWithAllResolvableArguments ignores implicitly injected dependencies and custom values",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "2.2.1",
  "version": "2.2.1",
  "tags": [
    "IoC",
    "Container",
    "Inversion-of-Control",
    "DI",
    "Dependency-Injection",
    "DRY",
    "Service-Provider",
    "Factory"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}