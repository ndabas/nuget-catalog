{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Analyze Re",
  "catalog:commitId": "790baea1-5011-434c-97b0-69b1129f5c3d",
  "catalog:commitTimeStamp": "2024-09-26T13:42:20.1889719Z",
  "copyright": "Copyright 2022",
  "created": "2024-09-26T13:38:45.7Z",
  "description": "A client library for Analyze Re high performance analytics services",
  "iconUrl": "https://docs.analyzere.net/csharp/logo64.png",
  "id": "AnalyzeRe.Client",
  "isPrerelease": false,
  "lastEdited": "2024-09-26T13:41:51.063Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "mrPXiclzc6mn33TDW38M/bUmKsq6cJlDOaijlrw0SLtTcJuCSacuXejBj8hdUk1eAzKCzdUfLQ1lqzBZQI37Zg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 230207,
  "projectUrl": "https://docs.analyzere.net/csharp/",
  "published": "2024-09-26T13:38:45.7Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/.json#gpref",
      "reference": {
        "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#gpref/ref/analyzere.client.dll",
        "file": "AnalyzeRe.Client.dll"
      }
    }
  },
  "releaseNotes": "This Client Library wraps the AnalyzeRe REST API.\n\n1.45\n- Added support for Machine-To-Machine authentication workflow.\n\n1.44\n- Now targets .NET Framework 4.8.\n- Added runtime_seconds field to the OptimizationView class.\n- Fixed a bug in the bulk loss set upload mechanism.\n\n1.43\n- New \"Perspective\" format and capabilities\n-- The \"Perspective\" argument (when requesting metrics) can now be any one or combination of the values: NetLoss, ReinstatementPremium, ReinstatementBrokerage, Premium, FixedExpense, ProfitCommission, ProportionalExpense, NoClaimsBonus, SlidingScaleCommission. It can also be set to \"LossGross\" on its own as before.\n-- As new fee types are implemented, they will be added as valid perspectives.\n-- For backwards compatibility reasons, the old \"LossNetOfAggregateTerms\" perspective value implicitly includes all currently implemented fees.\n-- If a perspective is not specified at metrics request time, it will default based on the Analysis Profile's new \"default_perspective\" parameter. For backwards-compatibility, the current default on all existing profiles is \"LossNetOfAggregateTerms\", but on new analysis profiles, this will default to \"NetLoss\".\n- The \"Perspective\" class has been given a new IEquatable implementation that should perform better as a key in Dictionaries and HashSets.\n- New static \"Perspective\" factory methods have been added to encourage the use of static singletons, even when the desired perspective isn't known at development-time.\n- The \"ValueAllocator\" layer now uses its own perspective enumeration, rather than borrowing from the Perspective.Base enumeration.\n-- Backwards-incompatibility warning - we decided that ValueAllocators were new enough that it was worthwhile correcting the implementation without the complexity of maintaining backwards compatibility.\n\n1.42\n- Added the new \"DelayedPayment\" and \"FixedDatePayment\" payment pattern structures, to assist with modelling claims.\n- Removed the warnings constantly being logged to console by the Analyze Re client library when receiving metrics responses from the server.\n- Implemented IEquatable{T} for all Fees, FeeReference, Payment and MonetaryUnit to facilitate equating these custom types, and improved the implementation for Perspective, Policy, and Reinstatement to improve null safety and performance.\n- Added some LossSet interfaces to simply type checking and member access on runtime loss set types.\n- Obsoleted the NestedLayerLossSet class, whose applications are entirely superseded by the Nested layer.\n- Clarified which resources have a functioning \"progress\" property in their model (OptimizationViews only). Formerly, this was inherited by all ResourceWithStatus derivees. Marked this property obsolete on other inheriting classes (AnalysisProfile, EventCatalog, ExchangeRateTable), with a message indicating where progress can be obtained (usually the /data/status endpoint).\n- Fixed the \"DeepCopy\" extension method converting some \"null\" properties back to their default value (e.g. an empty list or dictionary), making the copy inexact.\n- Added an optional parameter to the \"Serialize\" extension method to include properties that have a null value in the JSON (defaults to false - the prior behaviour).\n\n1.41\n- Added the new server-generated \"premium\" property to the PortfolioView class - computed and returned by the server at POST time.\n- Fixed the `.Serialize()` extension method (introduced in 1.40) to include server-managed properties (such as `id`) by default.\n - Added a new optional argument to the method for explicitly excluding these properties if needed.\n- Removed deprecated overloads of metrics requests (deprecated in v1.13 in Aug 2016) which took positional arguments rather than options objects.\n- Metrics options are now optional (defaulting to equivalent MetricsOptions.Default value)\n- Metrics requests now have a \"timeout\" parameter which can be used to override the API.DefaultRequestTimeout for individual metrics requests.\n- \"Blocking\" extension methods for metrics requests now respect the timeout specified in the polling options on the request itself.\n- Added a static API.GET method that can retrieve a single resource by id using a runtime-type\n\n1.40\n- The LossRank layer-operation has been modified to only support LargestLoss ordering, so the criterion property was removed accordingly.\n- Added the new `BackAllocatedLayer` structure type.\n - Soft-deprecated the \"back_allocation\" function on analyses in favour of this new structure.\n- Improved error message when requests time out.\n- `PollUntilReady` no longer retries timed-out requests. Temporary network failures should still be retried normally if the polled request is a standard API request.\n- Fixed a relatively harmless bug where component_perspective was included twice in a co_metrics requests URL.\n- The Reinstatement Brokerage can be referenced in a Losses category for the fees calculation.\n- Added 'allocation_ratio_basis' to the Value Allocator layer for PerEvent(by default) or PerTrial allocated values calculations.\n- Fixed a bug where enabling compression with a small chunk size could lead to incorrect offsets during upload.\n- Added additional error handling for low-level socket timeouts that should make API calls less prone to random network errors.\n- All Analyze Re objects now have a `.Serialize()` extension method, to simplify getting a JSON representation for debugging or persistence purposes.\n\n1.39\n- Added the new `ValueAllocator` structure type (a `Layer`-derived type similar to `Nested`).\n - While the intended usage of the `ValueAllocator` is to allocate event losses on the basis of a different structure's relative contribution to some group, this can serve as a more general building block for performing vector multiplication and division.\n- The `Perspective` type was enhanced with more performant `GetHashCode` and `Equals` implementations, as well as the ability to easily compare `Perspective.Base` enum values with equivalent class instances.\n\n1.38\n- Removed deprecated implicit operators for Reference instances to remove ambiguity when constructing objects that require resource references.\n - If you previously had code using the implicit operators like \"myNestedLayer.sink = someOtherLayer\", you may need to change it to \".sink = someOtherLayer.ToReference()\"\n- Surface the API's new metrics_functions and projection_functions endpoints used to manage custom optimization functions.\n- Surfaced the event_catalogs/GUID/profile endpoint, which gives information on the columns contained in the uploaded catalog.\n- Added the target_currency to the IAPIAnalysis interface shared by OptimizationView, LayerView, and PortfolioView classes.\n\n1.37\n- Surfaced the new optional \"policy\" property on all layers, which allows users to change the default behaviour of which losses are transformed and/or forwarded by the layer.\n\n1.36\n- Nested layers \"sink\" and \"sources\" types changed from being ILayer references to a new base interface called `ILayerSource` which allows either reference to Layers or to LayerViews!\n - As such, nested layer_views can now be built by referencing previously posted layer_view ids rather than requiring each level of nesting to fully inline (duplicate) the previous layer definition.\n - As the property types have changed, this may result in some code breakage. Backwards compatibility was of the utmost concern, but any reflection-based access to the sources collection may need to be adjusted.\n- Property-reflection utilities (like the GetUserFacingProperties type extension method) behave a little differently, so if you use these you may wish to check the latest documentation on those methods.\n\n1.35\n- Disabled support for TLSv1.0 and explicitly selected TLSv1.2.\n- Added RecordTypeAnyOfFilter loss filter which can filter losses by their record type\n- Added AdditionalColumn options to YELTOptions, allowing for the download of occurrence information\n\n1.34\n- Revised the AggregateQuotaShare class to enable its use as a nested layer sink that applies aggregate terms while simultaneously accumulating pro-rated reinstatement premiums and brokerages.\n\n1.33\n- User settings moved to the Registry by default.\n - This version adds the ability to toggle between storing configured settings in the native local files (the old default) and the HKCU registry (new default).\n - An application can reverted to the old behaviour using `AnalyzeRe.Properties.SharedSettingsProvider.GlobalSettingsLocation = SharedSettingsProvider.SettingsLocation.NativeLocalFile;`\n- When settings are externally modified, the static client library can be updated by invoking `API.LoadSettings`\n- The `API.UserAgent` header can now be modified to allow applications to provide custom identities to the Analyze Re sever. \n- Added the ability to download a specific trial range of a YELT through use of the `start_trial` and `end_trial` properties in `AnalyzeRe.Metrics.YELTOptions`.\n- New Fee structures which can be added to TermsLayer classes to include expenses in trial losses\n\n1.32\n- Surfaced Window Metrics (window_metrics) - a new feature on the server to support getting metrics on a range of trials without including the full tail.\n - Window metrics overloads and extension methods added to match the functionality of tail_metrics, co_metrics, and exceedance_probabilities functions.\n- New ProbabilityWindow class to support window metrics, which builds a probability range from a min and max.\n - ProbabilityWindow has some static factory methods like \"All\" and \"Tail\" for quickly querying standard probabilities.\n - For the time being, doubles can be implicitly converted to a \"Tail\" probability window for backwards-compatibility. This will go away in the future.\n- Co-Metrics methods were all updated to support a probability window.\n - Co-Metrics overloads that only take a single double probability (or list of probabilities) were soft deprecated, and redirect to use `ProbabilityWindow.Tail(p)` internally.\n- All deprecation warning messages were updated to more clearly indicate what the preferred usage is.\n- Requests for batch-requesting multiple points in metrics requests has been made more flexible by accepting any IEnumerable of values instead of a List.\n- Fixed a bug where the 16th and 17th significant digits of probabilities/thresholds could change during a metrics request.\n\n1.31\n- Added the ability to supply Query parameters during POST requests and have them be respected.\n - This means you can now do things like `ILayerView response = someLayerView.Post(API.Parameters.Fields(new[]{\"id\"}))` to speed up the request by having the server only send back the posted resource's new id.\n- Added a singleton for the AnalyzeReJsonConverter to make one-off serialization tasks easier. You can now go `string serialized = AnalyzeReJsonConverter.Default.Serialize(layerView)` to get a resource's JSON representation.\n- This update removes the redundant Analyze Re copies of RestSharp classes introduced in 1.9 in an attempt to simplify references.\n - Users of low-level request methods may need to update their source using statements to reference the RestSharp namespace.\n - History: In version 1.9, an attempt was made to internalize any RestSharp and Newtonsoft 3rd party dependencies by reimplementing those classes.\n - History: In version 1.26, it was discovered that this led to issues and the formal NuGet package references needed to be restored.\n - In this version (1.31) the deprecated wrapper classes are being removed in favour of the original RestSharp classes. This will facilitate adoption of future versions of RestSharp.\n- Added correlation property to ConditionalDistributionMetrics\n- Fixed a subtle bug whereby using ShallowCopy on a resource might invalidate its SubResource endpoints.\n\n1.30\n- Surfaced the ability to batch-retrieve a list of items by id using the new `API.Parameters.Ids` `RequestParameters`.\n - You can easily access this using the new collection extension method `GetItems`, e.g. `API.Layers.GetItems(...)`\n - You can also access this using the new static API method `BatchGet`, e.g. `API.BatchGet<ELTLossSet>(...)`\n- Surfaced the ability to create marginal PortfolioViews server-side by referencing an existing PortfolioView and LayerViews to add and remove.\n - You can easily access this feature using the new `portfolioView.PostMarginalPortfolioView(...)` instance method.\n - You can also access this using the new static `API.PortfolioViewMarginals.Post(...)` method.\n- Surfaced the new optimization `constraints` and `feasible` results on optimization candidates, which report on constraint metrics and whether the candidate meets all constraints.\n- Surfaced the new optimization endpoint for retrieving initial portfolio results, which reports on all metrics for the portfolio of all initial layer shares.\n- The OptimizationView class has new functions that make it easier to get results. (`GetInitialPortfolioMetrics`, `GetCandidateResult`, `GetCandidatePortfolioView`, `GetCandidateResultsCount`)\n- Soft-Deprecated the old endpoints/attributes for retrieving candidate and initial portfolio results.\n- Modified the CoMetrics response class to better reflect the results being returned, including renaming the \"component_metrics.variance\" property to \"covariance\".\n\n1.29\n- Fixed a bug in compression for large files that get split across multiple patch requests - which was preventing using this option in production.\n- Improved compression performance, but made the decision to have compression turned off by default (was enabled by default in 1.28).\n - In practice, compression increases client CPU usage significantly, and is not very beneficial unless upload speeds are under 5 MiBps.\n- Fixed a bug which gave LargeFileUpload.Parameters instances the appearance that they could be cloned using extension methods.\n- Formally deprecated the binary YELT format to warn against future use.\n-- Performance improvements are being made to the CSV YELT format's upload, processing, and validation, removing the need for the binary variation.\n- An \"Advanced\" search option has been added for using the API.SearchResource list command. This surfaces new API capabilities surrounding querying resources by metadata using a new Parameters.AdvancedSearch RequestParameter.\n\n1.28\n- Support for transparent compression during file upload (enabled by default)\n- Overall improvements file/stream upload performance.\n- Added an option to disable automatic binary YELT conversion.\n\n1.27\n- `target_currency` field added to OptimizationView\n- The `Reference.Value` property was deprecated, due to it's behaviour of making network requests being potentially unexpected.\n- Added explicit Reference `GetValue()` and `Resolve()` methods for retrieving the resource associated with a reference.\n- New `API.PollUntil()` functionality added to allow any request to benefit from exponential back-off polling logic built into status and metrics request polling.\n- `IAPIResourceWithStatus.PollUntilReady()` implementation now only polls the status property to improve polling performance with complex resources.\n  - If after polling you wish to see an updated property of the resource that isn't the status property (e.g. the `LossSet.profile` property), you must perform a subsequent `Get()` of the resource yourself.\n- The `Utilities.SimulationStatusMonitor` class was deprecated.\n- Minor performance enhancements by circumventing unnecessary RestSharp logic, reducing request overhead.\n- Source updated to take advantage of modern C#7 language features and their associated performance improvements.\n- Suppressed issues when saving static client library settings from concurrent instances of the same process, and the new `AnalyzeRe.API.ManagedSettingsEnabled` property can be set to false to disable automatic settings caching and management entirely.\n- All resources now inherit optional description and metadata properties.\n- Queue-Position added to NotWaitingException for reporting the final current queue position of a request that was being polled.\n\n1.26\n- New event_id parameter in ParametricLossSet lets you control what event_id you see associated with Parametric losses on YELT download.\n- New extension methods for categorization of property types.\n- New LossRank layer structure which allows selecting a subset of losses in a year based on the relative size (rank) of losses.\n- New NoClaimsBonus layer structure which can be used to apply a payout to trials which contain no losses.\n- Restored Newtonsoft.Json and RestSharpSigned as formal NuGet dependencies in light of Json.NET 10 assembly static resource interference issues.\n\n1.25\n- OptimizationView now contains a collection of candidates, and candidates now have a `portfolio_view` sub-resource.\n- OptimizationView now contains a server-generated `initial_portfolio_metrics` property.\n- As per server-side changes, the portfolio_views must now be retrieved from the candidates. The results no longer reference pre-generated portfolio_views.\n- Added support for automatically handling redirection responses, which are used for candidate portfolio_view responses.\n- Added the `IResourceCollection` interface, which supports the optimization_view's candidates sub-collection.\n- Added static `ResourceCollection` instances to the static API, which support a simplified method of performing collection operations on all root collections on the API.\n- Added the ability to order collection get results by certain properties using the \"API.Parameters.Order\" request parameters.\n\n1.24\n- Added the QCLS Loss Set (Quantile-Based Correlated Loss Sampling loss set) - a simulated parametric loss set based on Cholesky decomposition.\n- Improved the parametric distribution object model to include interfaces for stricter type definitions.\n\n1.23\n- Removed the Obsolete Inuring Terms from ELTLossSets. Inuring terms are now modelled by applying an AggXL layer to the loss set, then using it as the source to a nested layer.\n- Added Nth event argument to ILW layers, and fixed/improved documentation around this layer type.\n- Added is_optimization_enabled helper property to OPTIONS responses object.\n\n1.22\n- Adds an optional CancellationToken parameter to PollingOptions, which anything that takes PollingOptions should respect and monitor for cancellation.\n- Updated the API.PollUntilReady helper function, as well as the IStoredAPIResource_WithStatus PollUntilReady extension method to monitor the cancellation token if supplied.\n- Restored functionality to the AsyncRequestMonitor by making use of the existing polling methods.\n- Gave the AsyncRequestMonitor the ability to poll either by monitoring RetryAfter responses, or by monitoring the status of a supported resource.\n\n1.21\n- OptimizationViews now implement the new IStoredAPIResource_WithStatus interface, following a change on the server. They are now polled using their status instead of 503 responses on the results.\n- Added the ability to request only certain object properties using the \"API.Parameters.Fields\" request parameters. This speeds up status polling.\n- Renamed the \"WaitForStatusToBeReady\" extension method from the previous commit to \"PollUntilReady\" to be consistent with existing RetryAfter based polling method available in the API namespace.\n- Added the \"Queued\" TaskStatus enum value which is used in some cases and is a special distinction of \"Processing\" indicating that the resource has not yet begun processing, but will.\n\n1.20\n- Add the ability to set the data_file property to commit an existing file against a new resource.\n- New polling options parameters changed from double (seconds) to integer (milliseconds) parameters to improve consistency with other timeouts in .NET.\n- IStoredAPIResource_WithStatus interface added to describe resources that have a status indicating their validation progress.\n- WaitForStatusToBeReady extension method added which will poll resources of the above type (includes resources with data and AnalysisProfiles).\n- Exponential back-off added to existing RetryAfter polling method and the above status polling method.\n\n1.19\n- CoMetrics requests now support setting the component reporting period.\n\n1.18\n- Enhanced the copy constructors of classes that derive from `SimulationOptions` to include (as optional arguments) all parameters that cannot be copied from the base object.\n\n1.17\n- Sped up reference deserializer\n- Added NotSaveableAttribute to indicate layer types that can be inlined but not persisted to the layers collection.\n- Renamed `IsDefinedFast` to `IsAttributeDefinedFast` in the reflection utilities library, to reduce ambiguity.\n\n1.16\n- Support for probabilities and thresholds requested using exponential notation.\n\n1.15\n- ReportingPeriod parameter added to metrics requests. You can now specify a begin and/or end DateTime to get filter distributions by date.\n- Fixed PollUntilReady and all blocking metrics requests not respecting the MaxPollTotalTime (since 1.13)\n\n1.14\n- Modified BufferedBytesFromStreamProducer to allow users to limit the number of bytes read from the source stream.\n\n1.13\n- API types can now be modified on the fly with property expressions.\n  - Example: CatXL layer = someCatXL.ShallowCopy().Change(l ()=> l.participation, 0.25).Post();\n- New metrics options classes added, which bundle common request options (filter, perspective, etc.)\n  - TailMetrics, CoMetrics, ExceedanceProbabilities, etc. requests now support options objects as parameters.\n- Old metrics methods are now marked Obsolete, and will be removed at the next major version.\n\n1.11\n- Removed LossNetOfOccurrenceTerms as an input and output perspective.\n- Added bindings for the FixedRateCurrencyConverter structure.\n\n1.10\n- Warning: Minor Backwards Incompatible Changes\n- Simplified code hierarchy in preparation for open sourcing.\n- Modified some models to fall under different namespaces.\n- Improvements and bug-fixes to documentation after the recent switch to support .NET40\n\n1.9:\n- Support for projects targeting either .NET framework 4.0 or 4.5\n- Includes source and symbols for debugging.\n- Should no longer require projects to also add Json.NET or RestSharp as dependencies.\n\n1.8:\n- Support for vectorized metrics requests (batching of probabilities / thresholds)\n- No longer caches requests with resource instances - library user must implement their own caching.\n- Performance enhancements due to leaner requests, caching reflection-based requests, and improved file upload streaming.\n- Compatibility with new server features such as back-allocation, binary upload, and gzipping.\n- Automatic handling for temporary network failures such as socket noise and interrupted SSH handshakes.\n\n1.7:\n- Now targets .NET Framework 4.5 to make use of improvements to native compression algorithms\n\n1.6 and earlier features:\n- Models for all of the resource types defined by the AnalyzeRe API\n- Models for Metrics response structures and other custom API objects that appear within various resources\n- Extensive error handling and debug logging capabilities via APIRequestException\n- REST functionality via resource extension methods that allows:\n  - Creation, modification, and retrieval of resources on the server\n  - Supplying additional/custom headers and/or parameters to requests\n- Additional functionality for specific resources such as:\n  - LargeDataUpload functionality for resources with a data upload endpoint\n  - Metrics functionality and extension methods for LayerViews and PortfolioViews\n- Resource collection GET and Search capability via the API class\n- A library of custom Attributes to assist with automated validation of resources and to indicate server constraints on property values.",
  "requireLicenseAcceptance": false,
  "title": "Analyze Re Client Library",
  "verbatimVersion": "1.45.9035.24555",
  "version": "1.45.9035.24555",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#dependencygroup/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[13.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#dependencygroup/restsharpsigned",
          "@type": "PackageDependency",
          "id": "RestSharpSigned",
          "range": "[105.2.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#dependencygroup/identitymodel",
          "@type": "PackageDependency",
          "id": "IdentityModel",
          "range": "[7.0.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#AnalyzeRe.Client.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 9375,
      "fullName": "AnalyzeRe.Client.nuspec",
      "length": 24890,
      "name": "AnalyzeRe.Client.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#lib/net48/AnalyzeRe.Client.dll",
      "@type": "PackageEntry",
      "compressedLength": 116730,
      "fullName": "lib/net48/AnalyzeRe.Client.dll",
      "length": 286720,
      "name": "AnalyzeRe.Client.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#lib/net48/AnalyzeRe.Client.dll.config",
      "@type": "PackageEntry",
      "compressedLength": 521,
      "fullName": "lib/net48/AnalyzeRe.Client.dll.config",
      "length": 2257,
      "name": "AnalyzeRe.Client.dll.config"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#lib/net48/AnalyzeRe.Client.xml",
      "@type": "PackageEntry",
      "compressedLength": 88599,
      "fullName": "lib/net48/AnalyzeRe.Client.xml",
      "length": 635877,
      "name": "AnalyzeRe.Client.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.26.13.42.20/analyzere.client.1.45.9035.24555.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12929,
      "fullName": ".signature.p7s",
      "length": 12929,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "AnalyzeRe",
    "REST",
    "Client",
    "Library",
    "Insurance",
    "Reinsurance",
    "Analytics"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}