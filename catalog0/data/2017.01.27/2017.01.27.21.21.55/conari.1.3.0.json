{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "github.com/3F/Conari",
  "catalog:commitId": "9c968b0f-c86e-4589-8454-ec95ab81e282",
  "catalog:commitTimeStamp": "2017-01-27T21:21:55.3733196Z",
  "copyright": "Copyright (c) 2016-2017  Denis Kuzmin [entry.reg@gmail.com] ",
  "created": "2017-01-27T20:25:08.1Z",
  "description": "\n    \n        Binder of Unmanaged code for .NET\n        \n        The Conari engine represents flexible platform for work with unmanaged code (native C/C++ etc.): Libraries, Executable Modules, other native and binary data.\n        Lightweight and powerful binding with any exported functions and much more.\n        _ _ _ _ _ _\n        Source code and all details here: https://github.com/3F/Conari\n\n\nNew version of Conari engine contains major improvements and fixes with DLR features, ByRef types, new support of Exported-Variables, Aliases, improved Native.Core, ... But it also contains minor incompatible changes with previous versions. Look here: https://github.com/3F/Conari/wiki/Upgrade-v1.3\n\n        \n        ~~~~~~~~\n        Get it via GetNuTool:\n        ==========================================\n        gnt /p:ngpackages=\"Conari/1.3.0\"\n        ==========================================\n        * https://github.com/3F/GetNuTool         \n        \n    ",
  "iconUrl": "https://raw.githubusercontent.com/3F/Conari/master/Conari/Resources/Conari_v1.png",
  "id": "Conari",
  "isPrerelease": false,
  "lastEdited": "2017-01-27T21:21:16.223Z",
  "licenseUrl": "https://github.com/3F/Conari/blob/master/LICENSE",
  "listed": true,
  "packageHash": "FkvRhMj8B5BJUvzP/HiOm+zKK2s0eyrBGfFDYZ64R9p7S3FRV2t2ittJD0CgrnspJ7yLY/k5nMIwG3miETx/jg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 158354,
  "projectUrl": "https://github.com/3F/Conari",
  "published": "2017-01-27T20:25:08.1Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/.json#gpref",
      "reference": {
        "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#gpref/ref/conari.dll",
        "file": "Conari.dll"
      }
    }
  },
  "releaseNotes": "public release of the Conari engine - v1.3:\n\n    NEW: Improved speed >80% (DLR) & >90% (Lambda) - Issue #10\n         `*` results for regXwild x64 (Unicode) via snet tester - https://github.com/3F/regXwild\n\n    NEW: Improved DLR. Automatic detection for ByRef types & null-values for any reference-types that pushed with out/ref modifier.\n         * +UseCallingContext - To use information about types from CallingContext if it's possible.\n         * +UseByRef - To use ByRef& (reference-types) for all sent types.\n\n    NEW: Added `NullType<T>` as optional way for work with reference-types. And for other purpose to store additional information about basic type for any null values.\n    NEW: Added IProvider.NewProcAddress event - When handling new non-zero ProcAddress.\n    NEW: Started support of Exported-Variables via IExVar & DLR - Issue #7\n            ```\n            l.ExVar.DLR.ADDR_SPEC; // 0x00001CE8\n            l.ExVar.get<UInt32>(\"ADDR_SPEC\"); // 0x00001CE8\n            l.ExVar.getField(typeof(UInt32).NativeSize(), \"ADDR_SPEC\"); // Native.Core.Field via raw size\n            l.Svc.native(\"lpProcName\"); // Raw access via NativeData & Native.Core !\n            ```\n\n    NEW: Implemented aliases for Exported-Functions and Variables - Issue #9\n            ```\n            l.Aliases[\"Flag\"] = l.Aliases[\"getFlag\"] = l.Aliases[\"xFunc\"]; //Flag() -> getFlag() -> xFunc()->...\n            l.DLR.getFlag<bool>();\n            ```\n            ```\n            l.Aliases[\"gmn\"] = new ProcAlias(\n                \"GetMagicNum\",\n                new AliasCfg() { NoPrefixR = true } // false by default\n            );\n            ```\n\n    NEW: Native.Core improvements - Extensions & new `t` signatures for node (raw alignments via size and managed types)\n         +`t(Type type, string name = null)`\n         +`t(Type[] types, params string[] names)`\n         +`t(int size, string name = null)`\n\n    NEW: Aliases for 'empty' types:\n         +`Action bindFunc(string lpProcName);`\n         +`Action bind(string func);`\n\n    NEW: New group of binding via regular arguments:\n         +`Method bindFunc(string lpProcName, Type ret, params Type[] args);`\n         +`Method<T, object> bindFunc<T>(string lpProcName, Type ret, params Type[] args);`\n         +`Method bind(string func, Type ret, params Type[] args);`\n         +`Method<T, object> bind<T>(string func, Type ret, params Type[] args);`\n\n    FIXED: Fixed possible crashes - 'A heap has been corrupted' when use of shared pointer between several UnmanagedStructure.\n    CHANGED: ILoader: minor incompatible changes for PE32/PE32+ features.\n             * New `IPE PE` property for complex work with PE-file.\n             * The `ExportFunctionNames` property has been removed as obsolete. Use same `PE.ExportedProcNamesArray`\n\n    CHANGED: IProvider minor incompatible changes `funcName()` -> `procName()`\n             `string funcName(string name);` has been renamed to `string procName(string name);`\n              - as a common method for getting full lpProcName with main prefix etc.\n\n    CHANGED: `TDyn IBinder.bind(MethodInfo mi, bool prefix = false);` removed as a deprecated, because for this can be a lot of misunderstandings.\n              If you need something, use like: `prefix ? l.procName(mi.Name) : mi.Name` etc. for any available methods with MethodInfo.\n\n    CHANGED: Added User object (+`user`) for Native.Core.Field. To store any additional information that's related for specific field.\n",
  "requireLicenseAcceptance": false,
  "summary": "Binder of Unmanaged code for .NET :: Powerful engine for work with unmanaged code (native C/C++ etc.): Libraries, Executable Modules, other native and binary data ... https://github.com/3F/Conari",
  "title": "[ Conari ] Binder of Unmanaged code for .NET",
  "verbatimVersion": "1.3.0",
  "version": "1.3.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#changelog.txt",
      "@type": "PackageEntry",
      "compressedLength": 1993,
      "fullName": "changelog.txt",
      "length": 5096,
      "name": "changelog.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#Conari.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2295,
      "fullName": "Conari.nuspec",
      "length": 5873,
      "name": "Conari.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#License.txt",
      "@type": "PackageEntry",
      "compressedLength": 674,
      "fullName": "License.txt",
      "length": 1124,
      "name": "License.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#Readme.md",
      "@type": "PackageEntry",
      "compressedLength": 3171,
      "fullName": "Readme.md",
      "length": 7846,
      "name": "Readme.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#lib/net40/Conari.dll",
      "@type": "PackageEntry",
      "compressedLength": 87618,
      "fullName": "lib/net40/Conari.dll",
      "length": 369664,
      "name": "Conari.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#lib/net40/Conari.pdb",
      "@type": "PackageEntry",
      "compressedLength": 48697,
      "fullName": "lib/net40/Conari.pdb",
      "length": 230912,
      "name": "Conari.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.01.27.21.21.55/conari.1.3.0.json#lib/net40/Conari.XML",
      "@type": "PackageEntry",
      "compressedLength": 9790,
      "fullName": "lib/net40/Conari.XML",
      "length": 95315,
      "name": "Conari.XML"
    }
  ],
  "tags": [
    "exported-function",
    "unmanaged-code",
    "unmanaged-function",
    "exported-c-function",
    "unmanaged",
    "exports",
    "native",
    "c-func",
    "export",
    "API",
    "dll",
    "cpp",
    "c",
    ".net",
    "c#",
    "csharp",
    "Lua",
    "7z",
    "7zip",
    "DLR",
    "Lambda-expressions",
    "Conari"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}