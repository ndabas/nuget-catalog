{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "e80b6fc2-2d16-4dd9-a0df-4bd607f8d7e1",
  "catalog:commitTimeStamp": "2019-01-02T13:29:12.6876331Z",
  "copyright": "Copyright 2018",
  "created": "2018-10-14T19:16:21.38Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2019-01-02T13:29:12.443Z",
  "licenseUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/LICENSE.txt",
  "listed": false,
  "packageHash": "azYRxxdMYu8XjvVvhaO5PpJlwfk8fVlwuppNp06ebyQQCUPlFKSnP3+HV+FmMdhe5ZkgaNo5Jx3jUlgjLvw9mQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 442354,
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "Unsigned Assembly\n\nAddressed a problem in which some functions returned values to a precision less than requested. Examples: x.Tan for x near 0; x.Log for x near 1 (other people's software seems to have this same problem). The x.Log inaccuracy had an impact on several other functions. x.Zeta function should now agree with bf.Zeta(...) and both should be accurate to the Precision place, except possibly x.Zeta when x has a very large imaginary part.\n\nNew bf variables created from string inputs now have their implicitly or explicitly requested Precisions padded to an extra Math.Ceiling(Math.Log10(Precision)) + 4 digits.\n\nCorrected a problem in which some complex-valued functions did not return the generally-accepted Principal Value for the function.\n\nCorrected a problem in which an error like 'Attempt to write to protected memory' occurred when performing calculations with precision setting in excess of a few million decimal digits.\n\nCorrected a problem in which the .toString functions did not always properly round output to the requested Precision decimal place. Added new functions x.Round(uint _base, long Precision) which round x away from zero (half or more) at the Precision place when using output base _base.\n\nOutputs of public functions in which a Precision setting is either implicitly or explicitly required now are .Truncate'd to the Precision place. The output will have Precision + 1 decimal digits to allow for rounding to the Precision place.\n\nAdded and implemented a bf Factorial(ulong N) function which returns a bf variable equal to N! a bit faster than the corresponding Mpir.Net function.\n\nRevised the x.Gamma functions such that if the Precision setting requested is less than or equal 2000 new Spouge constants are calculated rather than overwriting any Spouge constants cached in a previous x.Gamma calculation with precision > 2000. This allows for overall faster calculations when performing repeated x.Gamma calculations at the same Precision > 2000.\n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2017) and using Mpir.net for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.net and a base 2 int64 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.3.7",
  "version": "0.3.7",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1815,
      "fullName": "LongCalc.nuspec",
      "length": 4114,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 31733,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 97792,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#content/xmpir32.dll",
      "@type": "PackageEntry",
      "compressedLength": 176893,
      "fullName": "content/xmpir32.dll",
      "length": 320000,
      "name": "xmpir32.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#content/xmpir64.dll",
      "@type": "PackageEntry",
      "compressedLength": 220506,
      "fullName": "content/xmpir64.dll",
      "length": 441856,
      "name": "xmpir64.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.02.13.29.12/longcalc.0.3.7.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}