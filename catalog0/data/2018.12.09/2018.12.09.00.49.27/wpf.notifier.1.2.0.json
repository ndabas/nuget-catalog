{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.00.49.27/wpf.notifier.1.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mario",
  "catalog:commitId": "71dd528f-e495-475e-8eb2-44810e51e3bf",
  "catalog:commitTimeStamp": "2018-12-09T00:49:27.023284Z",
  "created": "2015-12-30T17:25:31.363Z",
  "description": "WPF.Notifier shows one or more toastnotification-windows.\n\nBesides it's possible to show your own window with your viewmodel as a toastnotification.\n\n(I)NotifierManager should be a Singleton, if you use it from different classes, because all notificationwindos are saved internally and removed after closing. You can use a DI Framework like Ninject and register INotifierManager as Singleton.\n\nThen call ShowNotification/ShowCustomNotification .\n\nIf you want to show your own window, you have to handle the animations and closing by yourself.\n\nShow your own Notification:\n\ncall ShowCustomNotification(yourViewModel)\n\nin App.xaml:\n\n <Application.Resources>\n        <DataTemplate DataType=\"{x:Type local:yourViewModel}\">\n            <local:TestView />\n        </DataTemplate>\n    </Application.Resources>",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.00.49.27/wpf.notifier.1.2.0.json#frameworkassemblygroup",
    "assembly": "WPF.Notifier"
  },
  "id": "WPF.Notifier",
  "isPrerelease": false,
  "language": "de-DE",
  "lastEdited": "2018-12-09T00:49:22.473Z",
  "listed": true,
  "packageHash": "xXbt97NI5yVM2TdIDehbpIVWPb3bF4DNakCHLR8/n4IpxqlTkl5mlFJXy8dLRHlPn+wylWbnZ9yE7pkvTCImrg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 26873,
  "published": "2015-12-30T17:25:31.363Z",
  "releaseNotes": "-added NotificationBaseViewModel for custom notification window with datatemplate. Invoke OnCloseWindow to close the notificationwindow\n\n-added parameter applyStandardSettings for custom window\n\napplyStandardSettings applys WindowStyle = None\nAllowsTransparency = true\nBackground = Transparent\n\nNow you have the full control with your usercontrol.\nYou could do the same with the optional parameter settings, but this settings are mostly standard for the notification window and it would be irritating to use the settings parameter for  this",
  "requireLicenseAcceptance": false,
  "summary": "WPF.Notifier shows one or more toastnotification-Windows.",
  "title": "WPF Notifier",
  "verbatimVersion": "1.2",
  "version": "1.2.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.00.49.27/wpf.notifier.1.2.0.json#WPF.Notifier.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 938,
      "fullName": "WPF.Notifier.nuspec",
      "length": 2125,
      "name": "WPF.Notifier.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.00.49.27/wpf.notifier.1.2.0.json#lib/net35/WPF.Notifier.dll",
      "@type": "PackageEntry",
      "compressedLength": 11523,
      "fullName": "lib/net35/WPF.Notifier.dll",
      "length": 20992,
      "name": "WPF.Notifier.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.00.49.27/wpf.notifier.1.2.0.json#lib/net35/WPF.Notifier.XML",
      "@type": "PackageEntry",
      "compressedLength": 1444,
      "fullName": "lib/net35/WPF.Notifier.XML",
      "length": 8807,
      "name": "WPF.Notifier.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.00.49.27/wpf.notifier.1.2.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9462,
      "fullName": ".signature.p7s",
      "length": 9462,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "WPF",
    "Notification",
    "Toast",
    "Toaster",
    "Notifier"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}