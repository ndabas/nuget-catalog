{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "oisin",
  "catalog:commitId": "13ba6068-da98-4407-84bd-e513d63861c1",
  "catalog:commitTimeStamp": "2018-11-23T07:34:27.6171036Z",
  "copyright": "Oisin Grehan",
  "created": "2014-02-26T02:39:28.817Z",
  "description": "This is targeted for signing the contents of  NuGet packages that are using unsigned assemblies, in order to be able to link to these packages where the consuming project is strongly named. Access to the original source code is not required, and you may sign any assembly with your own strong naming key. You may also delay-sign if desired.",
  "id": "Nivot.StrongNaming",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2018-11-23T07:33:49.333Z",
  "licenseUrl": "http://opensource.org/licenses/MS-PL",
  "listed": true,
  "packageHash": "m6BYak9kK85JKy7Ki2kt/b9o1zBXxgNqzm0S0yiPKWnklHtY6KT5c6GVl+WHNNOoLiHMXX/aQ56eKyQXUzkS/g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 142204,
  "projectUrl": "https://github.com/oising/strongnaming",
  "published": "2014-02-26T02:39:28.817Z",
  "releaseNotes": "Nivot.StrongNaming\n==================\n\n* v1.0.4.1 (something fishy is going on with my package build process?)\n* v1.0.4 (fix missing mono.cecil)\n* v1.0.3.2 (fix package: second attempt; readme.txt auto-open)\n* v1.0.3.1 (fix package)\n* v1.0.3  [2014/01/26]\n  * Assembly references without a strongname will be given a  strong name using the same\n    public key token as the primary target assembly.\n* v1.0.2  [2013/04/30]\n  * Added license and project URL.\n  * Added readme.MD\n* v1.0.1  [2013/04/29]\n  * Updated metadata.\n* v1.0.0  [2013/04/29]\n  * Initial release.\n\nDetails\n=======\n\nAll cmdlets accept pipeline input. The AssemblyFile parameter is aliased to PSPath, so it will\nbind to piped files.  \n\n* Test-StrongName [-AssemblyFile] <string[]>  [<CommonParameters>]\n\n    Returns true if an assembly has a strong name.\n\n* Import-StrongNameKeyPair [-KeyFile] <string>  [<CommonParameters>]\n* Import-StrongNameKeyPair [-KeyFile] <string> -Password <securestring>  [<CommonParameters>]\n\n    Imports a simple unprotected SNK or a password-protected PFX, returning a StrongNameKeyPair\n instance for consumption by Set-StrongName. If your PFX file has a blank password, you must\n provide a SecureString of the empty string \"\". SecureString instances are returned from\n    the Read-Host cmdlet with the -AsSecureString parameter.\n\n* Set-StrongName [-AssemblyFile] <string[]> -KeyPair <StrongNameKeyPair> [-NoBackup] [-Passthru]\n    [-Force] [-DelaySign] [-WhatIf] [-Confirm]  [<CommonParameters>]\n\n    Assigns a strong name identity to an assembly.\n\n    The -KeyPair parameter accepts a System.Reflection.StrongNameKeyPair output from the\n Import-StrongNameKeyPair cmdlet., which accepts either simple unprotected SNK files or\n password-protected PFX files.\n\n    The -NoBackup switch directs the cmdlet to skip creating a .bak file alongside the newly\n signed assembly. \n\n    The -Passthru switch will output a FileInfo representing the newly signed assembly to\n the pipeline.\n\n    The -DelaySign switch will create a delay-signed assembly from a public key only SNK\n (it can also create one if the SNK contains both private and public keys.) This is useful\n if you can't get access to the full private key at your company. This will allow you to\n compile against previously unsigned nuget packages at least.\n\n    The -Force switch will allow you to overwrite an existing strong name on an assembly.\n\n    NOTE: You may supply -WhatIf to see what _would_ be done, without actually doing it.\n\n*  Get-AssemblyName [-AssemblyFile] <string[]>  [<CommonParameters>]\n\n    Returns a System.Reflection.AssemblyName instance from any assembly file.\n    \nFAQ: How Do I?\n==============\n\n# get the default package root folder\nPM> $root = join-path (split-path $dte.solution.filename) packages\n\n# load an unprotected snk \nPM> $key = Import-StrongNameKeyPair -KeyFile .\\folder\\key.snk\nPM> dir *.dll | Set-StrongName -KeyPair $key -Verbose\n\n# load a password-protected PFX\nPM> $key = Import-StrongNameKeyPair -KeyFile .\\folder\\key.pfx -Password (Read-Host -AsSecureString)\n******\n\n# sign some unsigned assemblies\nPM> cd (join-path $root unsignedPackage)\nPM> dir -rec *.dll | set-strongname -keypair $key -verbose\n\n# (re)sign some assemblies forcefully\nPM> dir -rec *.dll | set-strongname -keypair $key -force\n\n# sign only unsigned assemblies \nPM> dir -rec *.dll | where { -not (test-strongname $_) } | set-strongname -keypair $key -verbose",
  "requireLicenseAcceptance": false,
  "summary": "A set of PowerShell Cmdlets to facilitate signing of unsigned 3rd party assemblies with a key of your choice, to allow them to be referenced by strongly named projects.",
  "title": "Assembly Strong Naming Toolkit",
  "verbatimVersion": "1.0.4.2",
  "version": "1.0.4.2",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#Nivot.StrongNaming.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2007,
      "fullName": "Nivot.StrongNaming.nuspec",
      "length": 4903,
      "name": "Nivot.StrongNaming.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#tools/init.ps1",
      "@type": "PackageEntry",
      "compressedLength": 86,
      "fullName": "tools/init.ps1",
      "length": 99,
      "name": "init.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#tools/Mono.Cecil.dll",
      "@type": "PackageEntry",
      "compressedLength": 118290,
      "fullName": "tools/Mono.Cecil.dll",
      "length": 277504,
      "name": "Mono.Cecil.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#tools/Nivot.PowerShell.StrongNaming.dll",
      "@type": "PackageEntry",
      "compressedLength": 6153,
      "fullName": "tools/Nivot.PowerShell.StrongNaming.dll",
      "length": 14336,
      "name": "Nivot.PowerShell.StrongNaming.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#tools/StrongNaming.psd1",
      "@type": "PackageEntry",
      "compressedLength": 1153,
      "fullName": "tools/StrongNaming.psd1",
      "length": 5178,
      "name": "StrongNaming.psd1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#readme.md",
      "@type": "PackageEntry",
      "compressedLength": 1410,
      "fullName": "readme.md",
      "length": 3423,
      "name": "readme.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.23.07.34.27/nivot.strongnaming.1.0.4.2.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9462,
      "fullName": ".signature.p7s",
      "length": 9462,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "powershell",
    "nuget",
    "strongname",
    "assembly",
    "package",
    "gac"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}