{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.04.10.20.13.08/hopac.0.0.0.45.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Housemarque Inc.",
  "catalog:commitId": "1f676d6b-0745-4e7f-8bb1-eb83a5abab44",
  "catalog:commitTimeStamp": "2015-04-10T20:13:08.6482216Z",
  "copyright": "Copyright 2015",
  "created": "2015-04-10T20:12:16.207Z",
  "description": "Inspired by languages like Concurrent ML and Cilk, Hopac is a library for F# with the aim of making it easier to write efficient parallel, asynchronous, concurrent and reactive programs. Hopac is licensed under a MIT-style license. See project website for further information.",
  "iconUrl": "https://avatars2.githubusercontent.com/u/10173903",
  "id": "Hopac",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/Hopac/Hopac/blob/master/LICENSE.md",
  "packageHash": "bC/3xd3tOI7/stQgEE0x0ZTW1/QnJ2hi/nipngZMoqQTNUyBRo2jWqAdJ1JVew0PbAcclsHyLocAnnVLMyAmNw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 382185,
  "projectUrl": "https://github.com/Hopac/Hopac",
  "published": "2015-04-10T20:12:16.207Z",
  "releaseNotes": "Added basic `Stream.buffer` combinator.\nRenamed `Stream.subscribe*` to `Stream.consume*` to better describe semantics.\nDoc refinements.\nAdded `Stream.pullOn`, `Stream.skipWhileJob`, `Stream.skipWhileFun`, `Stream.pullOn`, `Stream.foldBack`, `Stream.mapIgnore`,\n`Stream.ambAll`, `Stream.appendAll`, `Stream.mergeAll` and `Stream.switchAll`\nFixed to start reading the serialized variable immediately as documented.\nAdded `Stream.subscribe*` as a shorthand for `Stream.iter* |> queue`.\nAdded mutable `Stream.Property<'x>` that generates property change notifications for e.g. WPF data binding.\nAdded `doFinalizeJob` and `doFinalizeFun`.\nExperimental wrapper for streams that tracks space safety via phantom types.\nChanged `groupByJob` and `groupByFun` to take an additional function/job for forming new groups.\nAdded `Stream.tailsMapFun` and `Stream.initsMapFun` these are useful for lifting the `Stream.tails` and `Stream.inits` functions.\nAdded `keepFollowing1` and renamed `keepLatest` to `keepPreceding` to make the naming more symmetric although the concepts of \"following\" and \"preceding\" aren't really fully symmetric (unless you allow time travel).\nA slightly more performant implementation of `keepLatestFuns`.\nRenamed from `lazify` to `keepLatest`.\nLazification of live streams.\nRethinking timing and throttling operations.\nGeneralized `joinWith` and `mapJoin`.\nThere is no sleep, only `timeOut`.\nAdded ability to directly bind observables in job computation expressions.\nRemoved superfluous methods from `Async.OnWithSchedulerBuilder`.",
  "requireLicenseAcceptance": false,
  "summary": "A library for Higher-Order, Parallel, Asynchronous and Concurrent programming in F#.",
  "version": "0.0.0.45",
  "tags": [
    "f#",
    "fsharp",
    "parallel",
    "async",
    "concurrent",
    "reactive"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}