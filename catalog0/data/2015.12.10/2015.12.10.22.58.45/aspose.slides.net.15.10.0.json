{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.12.10.22.58.45/aspose.slides.net.15.10.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Aspose",
  "catalog:commitId": "a689961c-baa3-4afe-95fc-8e2afc614499",
  "catalog:commitTimeStamp": "2015-12-10T22:58:45.776697Z",
  "copyright": "ï¿½ Aspose 2002-2013. All Rights Reserved.",
  "created": "2015-12-10T22:58:28.49Z",
  "description": "Aspose.Slides is a PowerPoint management library for working with Microsoft PowerPoint files without using Microsoft PowerPoint. It allows developers to work with PPT, PPS, POT, PPTX, PPSX, POTX and ODP files on ASP.NET web applications, web services and Windows applications.",
  "iconUrl": "http://www.aspose.com/images/products/dotnet/Aspose.Slides_128x128.png",
  "id": "Aspose.Slides.NET",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://www.aspose.com/corporate/purchase/end-user-license-agreement.aspx",
  "listed": true,
  "packageHash": "GLxFDYXHgttWj0czCRgaun7xFvrWVjxs5VEDDZmmwK0VbiJSdueMDV5H/JH92NJuckerosx/aYot7JqJDjH53A==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 28772668,
  "projectUrl": "http://www.aspose.com/.net/powerpoint-component.aspx",
  "published": "2015-12-10T22:58:28.49Z",
  "releaseNotes": "Minor Changes\n\nSLIDESNET-36651 - Animating chart series API\n\nOther improments and changes\nBug Fixes\n\nSLIDESNET-37012 - Empty column is missing in generated PDF\nSLIDESNET-37006 - Incorrect text on ppt to html in Chrome\nSLIDESNET-36987 - Chart label font color changed on saving pptx\nSLIDESNET-36956 - Presentation gets corrupt on adding slide notes\nSLIDESNET-36950 - Aspose.Slides corrupts PPTX file if it contains a trash folder\nSLIDESNET-36948 - Implement ODP rotate and translate frame's transformations\nSLIDESNET-36935 - Saving POT to POTX results in corrupted presenatation\nSLIDESNET-36920 - Artifacts from chart on generated thumbnail\nSLIDESNET-36911 - Background missing in generated thumbnail\nSLIDESNET-36906 - Problem with number format of list in generated PDF\nSLIDESNET-36902 - Saved pptx presentation requires recovery in PowerPoint\nSLIDESNET-36879 - Bullets are lost in generated html file\nSLIDESNET-36862 - Cell's border is not completely drawn in case of adjacent merged cells\nSLIDESNET-36848 - Layouts are distorted\nSLIDESNET-36607 - Text on pdf is lost when opened in mac\nSLIDESNET-36052 - Series Fill Color not getting applied on secondary Y axis\nSLIDESNET-35988 - Exception on exporting PPT to PDF\nSLIDESNET-35768 - Fonts are not rendered from HTML to presentation\nSLIDESNET-35590 - ArgumentException is thrown while Odp loading\nSLIDESNET-35579 - Wrong Display of Chart data when converting PPTX to JPG\nSLIDESNET-35541 - The bullet is improperly rendered in generated slide thumbnail\nSLIDESNET-35539 - Table cell border is rendered wrong\nSLIDESNET-35482 - Improper charts rendering\nSLIDESNET-35422 - Object Reference Exception is thrown on opening the PPTX file\nSLIDESNET-35404 - Aspose.Slides failed to load chart series fill if it is Automatic fill color\nSLIDESNET-34585 - Border for merged table cells is improperly applied\n\nPublic API Changes\nA new VideoPlayerHtmlController added to support export od media files to HTML\n\nThe new public class VideoPlayerHtmlController has been added to Aspose.Slides.Export namespace. Using the instance of this class user can export video and audio files into HTML.\nVideoPlayerHtmlController contructors accepts the following parameters:\npath: The path where video and audio files will be generated\nfileName: The name of the HTML file\nbaseUri: The base URI which will be used to generate links\nUsage example:\n\nusing (Presentation pres = new Presentation(\"example.pptx\"))\n{\n    const string path = \"path\";\n    const string fileName = \"video.html\";\n    const string baseUri = \"http://www.example.com/\";\n\n    VideoPlayerHtmlController controller = new VideoPlayerHtmlController(path: path, fileName: fileName, baseUri: baseUri);\n\n    HtmlOptions htmlOptions = new HtmlOptions(controller);\n    SVGOptions svgOptions = new SVGOptions(controller);\n\n    htmlOptions.HtmlFormatter = HtmlFormatter.CreateCustomFormatter(controller);\n    htmlOptions.SlideImageFormat = SlideImageFormat.Svg(svgOptions);\n\n    pres.Save(Path.Combine(path, fileName), SaveFormat.Html, htmlOptions);\n}\n\nChart series animation API has been added\n\nThe new 2 methods have been added to Aspose.Slides.Animation.ISequence interface.\n\nIEffect AddEffect(IChart chart, EffectChartMajorGroupingType type, int index, EffectType effectType, EffectSubtype subtype, EffectTriggerType triggerType);\nIEffect AddEffect(IChart chart, EffectChartMinorGroupingType type, int seriesIndex, int categoriesIndex, EffectType effectType, EffectSubtype subtype, EffectTriggerType triggerType);\n\nThese methods are intended to support the chart's elements animations:\nby series\nby categories\nby series elements\nby categories elements\n\nThe two new enums EffectChartMajorGroupingType and EffectChartMinorGroupingType related to the chart's elements animation were introduced.\n\nTo add a series animation to the chart the following code may be used:\n\nusing (Presentation pres = new Presentation(inFileName))\n{\n    var slide = pres.Slides[0] as Slide;\n    var shapes = slide.Shapes as ShapeCollection;\n    var chart = shapes[0] as IChart;\n\n    slide.Timeline.MainSequence.AddEffect(chart, EffectType.Fade, EffectSubtype.None,\n        EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.BySeries, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.BySeries, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.BySeries, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.BySeries, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    pres.Save(outFileName, SaveFormat.Pptx);\n}\n\nCategories animation:\n\nusing (Presentation pres = new Presentation(inFileName))\n{\n    var slide = pres.Slides[0] as Slide;\n    var shapes = slide.Shapes as ShapeCollection;\n    var chart = shapes[0] as IChart;\n\n    slide.Timeline.MainSequence.AddEffect(chart, EffectType.Fade, EffectSubtype.None,\n        EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.ByCategory, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.ByCategory, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.ByCategory, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMajorGroupingType.ByCategory, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    pres.Save(outFileName, SaveFormat.Pptx);\n}\n\nSeries elements animation:\n\nusing (Presentation pres = new Presentation(inFileName))\n{\n    var slide = pres.Slides[0] as Slide;\n    var shapes = slide.Shapes as ShapeCollection;\n    var chart = shapes[0] as IChart;\n\n    slide.Timeline.MainSequence.AddEffect(chart, EffectType.Fade, EffectSubtype.None,\n        EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 0, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 0, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 0, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 0, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 1, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 1, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 1, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 1, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 2, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 2, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 2, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInSeries, 2, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    pres.Save(outFileName, SaveFormat.Pptx);\n}\n\nCategories elements animation:\n\nusing (Presentation pres = new Presentation(inFileName))\n{\n    var slide = pres.Slides[0] as Slide;\n    var shapes = slide.Shapes as ShapeCollection;\n    var chart = shapes[0] as IChart;\n\n    slide.Timeline.MainSequence.AddEffect(chart, EffectType.Fade, EffectSubtype.None,\n        EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 0, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 0, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 0, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 0, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 1, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 1, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 1, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 1, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 2, 0,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 2, 1,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 2, 2,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n    ((Sequence)slide.Timeline.MainSequence).AddEffect(chart,\n        EffectChartMinorGroupingType.ByElementInCategory, 2, 3,\n        EffectType.Appear, EffectSubtype.None, EffectTriggerType.AfterPrevious);\n\n    pres.Save(outFileName, SaveFormat.Pptx);\n}",
  "requireLicenseAcceptance": true,
  "summary": "Aspose.Slides is a PowerPoint management library for working with Microsoft PowerPoint files without using Microsoft PowerPoint. It allows developers to work with PPT, PPS, POT, PPTX, PPSX, POTX and ODP files on ASP.NET web applications, web services and Windows applications. It allows you to open files and manipulate the elements of the presentation from adding slides and managing variety of shapes and working with text to more complex elements like presentation protection, slide animations, charts and SmartArt rendering.The presentations can be exported to PDF, TIFF, XPS, SVG, PNG, JPEG, BMP or EMF formats.",
  "title": "Aspose.Slides for .NET",
  "version": "15.10.0",
  "tags": [
    "PowerPoint",
    "presentations",
    "Aspose.Slides",
    "PPT",
    "PPTX",
    "POTX",
    "POT",
    "PPS",
    "PPSX",
    "ODT"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}