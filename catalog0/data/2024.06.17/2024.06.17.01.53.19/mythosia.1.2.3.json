{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "JJW",
  "catalog:commitId": "342c05cd-54d6-47be-b768-87948cade176",
  "catalog:commitTimeStamp": "2024-06-17T01:53:19.7328819Z",
  "created": "2024-06-17T01:51:15.61Z",
  "description": "This project supports custom functions for user's clean code that are not directly provided by .NET.\n\n# New functions \n\n1. Json serialize, deserialize\nusing Mythosia;\n\npublic class TestClass\n{\n    public int A { get; set; } = 10;\n    public string B { get; set; } = string.Empty;\n}\n\nvar testClass = new TestClass();\n\nvar jsonString = testClass.ToJsonStringS();   // serialize with System.Text.Json\nvar compareClass = jsonString.FromJsonStringS<TestClass>();  // deserialize with System.Text.Json\n\nvar jsonString = testClass.ToJsonStringN();  // serialize with Newtonsoft.Json\nvar compareClass = jsonString.FromJsonStringN<TestClass>(); // deserialize with Newtonsoft.Json\n\n\n\n# Existing Functions \n\nusing Mythosia;\n\n// Example for numeric (byte, short, int, etc...) extension\nvar result = 56.IsInRange(0, 100);  // result is true \nvar result = 56.IsInRange(0, 30);   // result is false\nvar data = 56000000.ToSIPrefix();   // data is \"56 M\"\nvar data = 56000000.ToSIPrefix(SIPrefixUnit.Kilo);   // data is \"56000 k\"\nvar data = 423.42031.HostToNetworkEndian(); // change to big endian\n-------------------------------------------------------------------------------\n\n// Example for Notation\nprivate List<byte> test = new List<byte>() { 10, 16, 15, 30, 45, 65 };\n\n// binary\ntest.ToBinaryString();  // result is \"000010100001000000001111000111100010110101000001\"\ntest.ToBinaryString(BinaryPartitionSize.Bit2) // result is \"00 00 10 10 00 01 00 00 00 00 11 11 00 01 11 10 00 10 11 01 01 00 00 01\"\ntest.ToBinaryString(BinaryPartitionSize.HalfByte) // result is \"0000 1010 0001 0000 0000 1111 0001 1110 0010 1101 0100 0001\"\ntest.ToBinaryString(BinaryPartitionSize.Byte) // result is \"00001010 00010000 00001111 00011110 00101101 01000001\"\ntest.ToBinaryString(BinaryPartitionSize.Byte, \"0b\") // result is \"0b00001010 0b00010000 0b00001111 0b00011110 0b00101101 0b01000001\"\n\n// hex\nvar result = test.ToHexStringL();  // result is  \"0a100f1e2d41\"\nvar result = test.ToHexStringL(HexPartitionSize.Byte);  // result is \"0a 10 0f 1e 2d 41\nvar result = test.ToHexStringL(HexPartitionSize.Byte2); // result is \"0a10 0f1e 2d41\"\n\nvar result = test.ToHexStringU(HexPartitionSize.Byte2);  // result is \"0A10 0F1E 2D41\"\nvar result = test.ToHexStringU(HexPartitionSize.Byte2, \"0x\");  // result is \"0x0A10 0x0F1E 0x2D41\"\nvar result = test.ToHexStringU(HexPartitionSize.Byte2, \"\", \"h\");  // result is \"0A10h 0F1Eh 2D41h\"\n------------------------------------------------------------------------------\n\n// Example for Enumerable extension\nnew List<byte> test = new List<byte>(){0xff, 0xab, 0x01, 0x00, 0xee};\ntest.AddExceptNull(item);  // add item if item is not null\n\nnew List<byte> newItems = new List<bye>(){ 0x01, 0x02 };\ntest.AddRangeParallel(newItems);    // add items as parallel\n------------------------------------------------------------------------------\n\n\n// WriteExAsync & ReadExAsync\nAsynchronous read and write operations for streams with custom timeout support. Defaulting to the stream's ReadTimeout and WriteTimeout when -2 is passed.\n\n-- Example ---------------------------------------------------------\nusing NetworkStream stream = new TcpClient(\"127.0.0.1\", 8000).GetStream();\n\n// 1 second timeout\nawait stream.WriteExAsync(new ReadOnlyMemory<byte>(new byte[] { 1, 2, 3 }), 1000);\n\nbyte[] buffer = new byte[3];\n// 1 second timeout\nawait stream.ReadExAsync(buffer.AsMemory(), 1000);\n----------------------------------------------------------------------",
  "id": "Mythosia",
  "isPrerelease": false,
  "lastEdited": "2024-06-17T01:53:18.003Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "Kh3m9ACNZwYpqmNGjChfRLzlpliyW7NP1SMuvLjQME/olQtjYj3ETxS85ag+Bdqz8HpqJXXEv/kSC6M3c7eA/w==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 52643,
  "projectUrl": "https://github.com/AJ-comp/Mythosia/tree/master/Mythosia",
  "published": "2024-06-17T01:51:15.61Z",
  "readmeFile": "README.md",
  "repository": "",
  "title": "Mythosia",
  "verbatimVersion": "1.2.3",
  "version": "1.2.3",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#dependencygroup/.netstandard2.1/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[13.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#dependencygroup/.netstandard2.1/system.text.json",
          "@type": "PackageDependency",
          "id": "System.Text.Json",
          "range": "[8.0.3, )"
        }
      ],
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#Mythosia.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1665,
      "fullName": "Mythosia.nuspec",
      "length": 4654,
      "name": "Mythosia.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#lib/netstandard2.1/Mythosia.dll",
      "@type": "PackageEntry",
      "compressedLength": 30549,
      "fullName": "lib/netstandard2.1/Mythosia.dll",
      "length": 79872,
      "name": "Mythosia.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#Collections/README.md",
      "@type": "PackageEntry",
      "compressedLength": 376,
      "fullName": "Collections/README.md",
      "length": 763,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#IO/README.md",
      "@type": "PackageEntry",
      "compressedLength": 675,
      "fullName": "IO/README.md",
      "length": 1575,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#README.md",
      "@type": "PackageEntry",
      "compressedLength": 2282,
      "fullName": "README.md",
      "length": 7120,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#Threading/Synchronization/README.md",
      "@type": "PackageEntry",
      "compressedLength": 830,
      "fullName": "Threading/Synchronization/README.md",
      "length": 2196,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.17.01.53.19/mythosia.1.2.3.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12922,
      "fullName": ".signature.p7s",
      "length": 12922,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "AsyncLock",
    "hex",
    "format",
    "helper",
    "binary",
    "string",
    "numeric",
    "enumerable",
    "delegate",
    "parallel",
    "extension"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}