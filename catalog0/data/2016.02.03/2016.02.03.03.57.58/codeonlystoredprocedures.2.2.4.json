{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/codeonlystoredprocedures.2.2.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Abraham Heidebrecht",
  "catalog:commitId": "7d496493-5689-45f0-a759-b0c604b5f75a",
  "catalog:commitTimeStamp": "2016-02-03T03:57:58.4196807Z",
  "created": "2016-02-03T03:57:37.18Z",
  "description": "A library for easily calling Stored Procedures in .NET. Works great with Entity Framework Code First models. \nCode Only Stored Procedures will not create any Stored Procedures on your database. Instead, its aim is to make it easy to call your existing stored procedures by writing simple code.",
  "id": "CodeOnlyStoredProcedures",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "listed": true,
  "packageHash": "YvlnNLO+DxybI9zd51MG0LlqsqUSEphQzvPt2IKXz0dOCn01ubG37iP9zJ7xkWzOuUv6xvNhmrnhnF7wNFw2/g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 257734,
  "projectUrl": "https://github.com/abe545/CodeOnlyStoredProcedures",
  "published": "2016-02-03T03:57:37.18Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/codeonlystoredprocedures.2.2.4.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/.json#gpref",
      "reference": {
        "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/codeonlystoredprocedures.2.2.4.json#gpref/ref/codeonlystoredprocedure.dll",
        "file": "CodeOnlyStoredProcedure.dll"
      }
    }
  },
  "releaseNotes": "2.2.4\nFixed bug where calling ToString on a stored procedure could print parameters with a double @.\nFixed bug where the fluent syntax would not infer the type of its parameters from the compile time generic parameter type.\n\n2.2.3\nFixed bug where dynamic stored procedures wouldn't close their connections.\n\n2.2.2\nFixed bug where null values could not be passed in the dynamic syntax.\nFixed bug where TableValuedParameters would attempt to pass set only properties, resulting in an exception.\nFixed bug where an exception would be thrown when using a mapped interface, if that interface had an IEnumerable property that was\nnot mapped in the implementing class.\n\n2.2.1\nFixed bug where Timespan and DateTimeOffset result columns would throw an exception.\n\n2.2.0\nAdded ability to pass Table Valued Parameters in the dynamic syntax, and as a property via WithInput, without decorating the class with the TableValuedParameterAttribute. It will use the class name as the TableName, and dbo as the Schema.\nAdded ability to return single rows from dynamic stored procedures in one line, so long as the stored procedure returns one or fewer items\n\n2.1.0\nAdded ability to specify the order in which multiple result sets are returned for hierarchical models.\nAdded global data transformers, that will be applied for all columns in all stored procedures. These should be specified before any StoredProcedure is created.\nAdded option to enable numeric conversions for all numeric properties. This should be specified before any StoredProcedure is created.\nFixed bug where System.Single (float in C#) property types could not be returned (it would throw an exception).\nFixed bug where StoredProcedure<dynamic> would not apply any IDataTransformers specified.\nFixed bug where expected columns that don't get returned were throwing an IndexOutOfRangeException instead of a StoredProcedureResultsException\n          \n2.0.0\nRemoved dependency on SQL Server for all stored procedures (except those that accept Table Valued Parameters)\nResults from the dynamic syntax can now be cast explicitly\nResult columns can be marked as optional, so if no value is returned, the execution will not fail.\nStored Procedures can return dynamic (which will be an ExpandoObject, with all colums returned by the stored procedure as properties).\nStored Procedures that return hierarchical objects as multiple result sets can now have their relationships automatically discovered\nPerformance improvements\n\n1.3.1\nFixed bug where none of the named properties of StoredProcedureParameterAttribute could be set on an object, because they were nullable.\nFixed bug where calling a stored procedure that returns results asynchronously could block the calling thread.\n\n1.3.0\nAdded StoredProcedure.Execute and StoredProcedure.ExecuteAsync methods to more explicitly control dynamic stored procedures.\nAdded ability to specify an implementation of an interface, so a StoredProcedure can return an IEnumerable<interface>\n\n1.2.1\nAdded better exception when a model is missing a public parameterless constructor.\n\n1.2.0\nAdded a much cleaner syntax for calling stored procedures, by using dynamic objects.",
  "requireLicenseAcceptance": false,
  "title": "Code Only Stored Proecedures",
  "verbatimVersion": "2.2.4",
  "version": "2.2.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/codeonlystoredprocedures.2.2.4.json#dependencygroup/.netframework4.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/codeonlystoredprocedures.2.2.4.json#dependencygroup/.netframework4.0/entityframework",
          "@type": "PackageDependency",
          "id": "EntityFramework",
          "range": "[6.1.3, )"
        }
      ],
      "targetFramework": ".NETFramework4.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.03.03.57.58/codeonlystoredprocedures.2.2.4.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.5"
    }
  ],
  "tags": [
    "StoredProcedure",
    "EntityFramework",
    "EF"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}