{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "tiny(tiny@sandsea.info)",
  "catalog:commitId": "3ee03283-dd17-40c2-bc01-b3f372cc0a52",
  "catalog:commitTimeStamp": "2018-12-03T20:04:05.1853073Z",
  "copyright": "Mr. Tiny (tiny@sandsea.info) 2014",
  "created": "2014-12-16T02:08:18.81Z",
  "description": "A .Net Helper Library For Rapid Development.Give You A Easy Way Send Http Request",
  "iconUrl": "https://ICON_URL_HERE_OR_DELETE_THIS_LINE",
  "id": "Nx",
  "isPrerelease": false,
  "lastEdited": "2018-12-03T20:04:04.047Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
  "listed": true,
  "packageHash": "TTlLzpJLooNzxob0odyAP76QmJ2joe2NwsXzRiVzjx3snc/alSsgGvbG76gxcS7xWu603KGKipZNeO4vA9bMXg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 362431,
  "projectUrl": "https://www.sandsea.info/svn/nxframework",
  "published": "2014-12-16T02:08:18.81Z",
  "releaseNotes": "0x01:Simulation of the HTTP request ======================================\n      \n      var ctxIn = RequestBuilder.Create(\"default\")\n          .SetUrl(\"http://sample.com/api/sendmsg\")\n          .SetUserAgent(\"Nx Framework 2.4.1.0\")\n          .SetReferer(\"http://sample.com/api/login\")\n          .SetProxy(new WebProxy(\"127.0.0.1:8888\")) //or .SetProxy(new WebProxy(\"127.0.0.1:8888\",enable:true))\n          .WithCookie(\"name=value\") //or .WithCookies(List<Cookie> cookies) and so on.\n          .AllowAutoRedirect(true)\n          .SetHttpMethod(\"POST\")\n          .WithHeader(\"X-Token\",\"x9v4d-d043b\")\n          .WithTextInput(\"user\",\"tiny\")\n          .WithFileInput(\"file1\",\"D:\\a.txt\")\n          .WithBytesInput(\"file2\",new byte[]{0x00,0x03,0x00,0x7f})\n          .SetTimeout(3000)\n          .UsingAjax()\n          .DisableProxy() //or .EnableProxy()\n          .Build();\n          \n      var ctxIn = RequestManager.GetResponse(ctxIn);\n      if(ctxIn.Exception==null)\n      {\n          //if html, we have a nice intergration from Ivony's code(http://www.nuget.org/packages/Jumony.Core/) builtin.\n          var document = respCtx.ResponseDocument;//get IHtmlDocument object.\n\n          //Filter elements like JQUERY using the extensions from Ivony\n          var theElements = document.AllElements().Find(\".pager\");\n          \n          //LINQ then\n          //var matchedElemList = theElements.Where(...).ToList();\n          \n          //Get text directly\n          var text = ctxIn.Text;\n          \n          //The stream, and other useful properties of IResponseContext\n          var ms = ctxIn.Stream;\n      }\n      \n      0x02:Read Text Based File EASY And FAST.====================================\n      \n      var file = new Nx.IO.TextFileInfo(\"d:\\\\d.txt\");\n\n      //random row\n      while(true)\n      {\n          Console.WriteLine(file.RandomRow.Text);\n      }\n\n      //row items\n      foreach(var item in file.RowItems)\n      {\n          //useful properties:\n          \n          //item.RowIndex\n          //item.Text\n          //item.IsEmptyLine\n          //item.DataLength\n      }\n\n      0x03:ThreadSafeRandom =============================================\n      \n        see class Nx.ThreadSafeRandom\n        \n        \n      0x04:Extensions\n      The usage is [using Nx.Extensions;]\n      Provide some extension method for:\n      Array \n      Compression\n      Cookie\n      MD5\n      Stream\n      Time\n      Uri\n      ...\n      For Details, see the reflection tree under Nx.Extension namespace of Nx under the VisualStudio Assembly References folder of vs project after install nx from nuget or you added reference manually.\n      \n      0x05:dynamicjson project of http://dynamicjson.codeplex.com/\n      Read and Access// Parse (from JsonString to DynamicJson)\n      var json = DynamicJson.Parse(@\"{\"\"foo\"\":\"\"json\"\", \"\"bar\"\":100, \"\"nest\"\":{ \"\"foobar\"\":true } }\");\n\n      var r1 = json.foo; // \"json\" - dynamic(string)\n      var r2 = json.bar; // 100 - dynamic(double)\n      var r3 = json.nest.foobar; // true - dynamic(bool)\n      var r4 = json[\"nest\"][\"foobar\"]; // can access indexer\n      Operatevar json = DynamicJson.Parse(@\"{\"\"foo\"\":\"\"json\"\", \"\"bar\"\":100, \"\"nest\"\":{ \"\"foobar\"\":true } }\");\n\n      // Check Defined Peroperty\n      // .name() is shortcut of IsDefined(\"name\")\n      var b1_1 = json.IsDefined(\"foo\"); // true\n      var b2_1 = json.IsDefined(\"foooo\"); // false\n      var b1_2 = json.foo(); // true            \n      var b2_2 = json.foooo(); // false;\n\n      // Add\n      json.Arr = new string[] { \"NOR\", \"XOR\" }; // Add Array\n      json.Obj1 = new { }; // Add Object\n      json.Obj2 = new { foo = \"abc\", bar = 100 }; // Add and Init\n\n      // Delete\n      // (\"name\") is shortcut of Delete(\"name\")\n      json.Delete(\"foo\");\n      json.Arr.Delete(0);\n      json(\"bar\");\n      json.Arr(1);\n\n      // Replace\n      json.Obj1 = 5000;\n\n      // Create New JsonObject\n      dynamic newjson = new DynamicJson();\n      newjson.str = \"aaa\";\n      newjson.obj = new { foo = \"bar\" };\n\n      // Serialize(to JSON String)\n      var jsonstring = newjson.ToString(); // {\"str\":\"aaa\",\"obj\":{\"foo\":\"bar\"}}\n      Enumerate// DynamicJson - (IsArray)\n      var arrayJson = DynamicJson.Parse(@\"[1,10,200,300]\");\n      foreach (int item in arrayJson)\n      {\n          Console.WriteLine(item); // 1, 10, 200, 300\n      }\n\n      // DynamicJson - (IsObject)\n      var objectJson = DynamicJson.Parse(@\"{\"\"foo\"\":\"\"json\"\",\"\"bar\"\":100}\");\n      foreach (KeyValuePair<string, dynamic> item in objectJson)\n      {\n          Console.WriteLine(item.Key + \":\" + item.Value); // foo:json, bar:100\n      }\n      Convert/Deserialize\n      public class FooBar\n      {\n          public string foo { get; set; }\n          public int bar { get; set; }\n      }\n\n      var arrayJson = DynamicJson.Parse(@\"[1,10,200,300]\");\n      var objectJson = DynamicJson.Parse(@\"{\"\"foo\"\":\"\"json\"\",\"\"bar\"\":100}\");\n\n      // (type) is shortcut of Deserialize<type>()\n      var array1 = arrayJson.Deserialize<int[]>();\n      var array2 = (int[])arrayJson; // equals array1\n      int[] array3 = arrayJson; // equals array2\n\n      // mapping by public property name\n      var foobar1 = objectJson.Deserialize<FooBar>();\n      var foobar2 = (FooBar)objectJson;\n      FooBar foobar3 = objectJson;\n\n      // with linq\n      var objectJsonList = DynamicJson.Parse(@\"[{\"\"bar\"\":50},{\"\"bar\"\":100}]\");\n      var barSum = ((FooBar[])objectJsonList).Select(fb => fb.bar).Sum(); // 150\n      var dynamicWithLinq = ((dynamic[])objectJsonList).Select(d => d.bar);\n      Serialize (to JSON String from Object)// Serialize (from Object to JsonString)\n      var obj = new\n      {\n          Name = \"Foo\",\n          Age = 30,\n          Address = new\n          {\n              Country = \"Japan\",\n              City = \"Tokyo\"\n          },\n          Like = new[] { \"Microsoft\", \"Xbox\" }\n      };\n      // {\"Name\":\"Foo\",\"Age\":30,\"Address\":{\"Country\":\"Japan\",\"City\":\"Tokyo\"},\"Like\":[\"Microsoft\",\"Xbox\"]}\n      var jsonStringFromObj = DynamicJson.Serialize(obj);\n\n      // [{\"foo\":\"fooooo!\",\"bar\":1000},{\"foo\":\"orz\",\"bar\":10}]\n      var foobar = new FooBar[] { \n              new FooBar { foo = \"fooooo!\", bar = 1000 }, \n              new FooBar { foo = \"orz\", bar = 10 } };\n      var jsonFoobar = DynamicJson.Serialize(foobar);\n      Notice: corner casevar nestJson = DynamicJson.Parse(@\"{\"\"tes\"\":10,\"\"nest\"\":{\"\"a\"\":0}\");\n\n      nestJson.nest(); // This equals json.IsDefined(\"nest\")\n      nestJson.nest(\"a\"); // This equals json.nest.Delete(\"a\")\n\n      // if name is C#'s reserved word then put prefix \"@\"\n      var json = DynamicJson.Parse(@\"{\"\"int\"\":10,\"\"event\"\":null}\");\n      var r1 = json.@int; // 10.0\n      var r2 = json.@event; // null\n      Example : TwitterAPIstatic void Main()\n      {\n          var publicTL = new WebClient().DownloadString(@\"http://twitter.com/statuses/public_timeline.json\");\n          var statuses = DynamicJson.Parse(publicTL);\n          foreach (var status in statuses)\n          {\n              Console.WriteLine(status.user.screen_name);\n              Console.WriteLine(status.text);\n          }\n      }\n      Example : TwitterAPI2static void Main(string[] args)\n      {\n          // fetch and flatten user_timeline\n          var wc = new WebClient();\n          var statuses = Enumerable.Range(1, 5)\n              .Select(i =>\n                  wc.DownloadString(\"http://twitter.com/statuses/user_timeline/neuecc.json?page=\" + i))\n              .SelectMany(s => (dynamic[])DynamicJson.Parse(s))\n              .OrderBy(j => j.id);\n\n          foreach (var status in statuses)\n          {\n              Console.WriteLine(status.text);\n          }\n      }\n\n      \n      PS:\n      I'm considering put this project on github someday.\n      For this time, any suggestions or bugs can be submited by sending email to me(tiny@sandsea.info).\n      \n      [Updated at 2014.12.12 utc+8 (Beijing time)]\n      \n\n      UPDATE LOGS\n      2.4.1.3\n      Intergrate the DynamicJson class under Nx.Data namespace, see the project page:http://dynamicjson.codeplex.com/ for more details or usage\n\n      2.4.1.2\n      * Add some http header setting method for Nx.Net.RequestBuilder:\n      * Add [Accept] with [SetAccept(string)]\n      * Add [Host] with [SetHost(string)]\n      * Use AutoSetHost() to set the host from url.If url is http://www.baidu.com/index.php, then the host will be set to www.baidu.com\n      * Set KeepAlive to false as default for HttpWebReqeust\n      * Add Dispose() method for IResponseContext to manual dispose http connection resources.\n      * Add [TransferEncoding] with [SetTransferEncoding(string)]\n      * At this version, method Nx.Net.RequestBuilder.SetProxy(WebProxy) will also enable the proxy(previous versions have not do that.)\n\n      Fixed bugs on decompress gzip stream from http response.\n      2.4.1.1\n      Fix bug on determine if a request is multipart-form when build requst context\n\n      2.4.1.0\n      Many Bugs Fixed.\n      With Ivony Html Extension Builtin.Thanks Ivony's code(http://www.nuget.org/packages/Jumony.Core/)\n      Add Chaos.NaCl's cryto class\n\n      2.3.0.0\n      add support http post file using RequestBuilder.WithFileInput.\n      the RequestBuilder.WithFormData changes to RequestBuilder.WithTextInput\n\n      2.2.1.5\n      fixed bug in Nx.TimeUtil.GetTimestamp()\n\n      2.2.1.4\n      small bug fix.\n\n      2.2.1.3\n      Add \"HttpMethod PUT\" support for the core request utils.\n\n      2.2.1.2\n      fix the bug that the post data does not submitted after use Nx.Net.RequestBuilder.SetHttpMethod(\"POST\")",
  "requireLicenseAcceptance": false,
  "title": "Nx Framework",
  "verbatimVersion": "2.4.1.3",
  "version": "2.4.1.3",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#Nx.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3864,
      "fullName": "Nx.nuspec",
      "length": 10426,
      "name": "Nx.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#lib/net40/Nx.dll",
      "@type": "PackageEntry",
      "compressedLength": 266424,
      "fullName": "lib/net40/Nx.dll",
      "length": 686080,
      "name": "Nx.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#lib/net40/Nx.XML",
      "@type": "PackageEntry",
      "compressedLength": 79365,
      "fullName": "lib/net40/Nx.XML",
      "length": 711778,
      "name": "Nx.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#content/Crypto/Internal/Salsa/replace%20regex.txt",
      "@type": "PackageEntry",
      "compressedLength": 72,
      "fullName": "content/Crypto/Internal/Salsa/replace%20regex.txt",
      "length": 80,
      "name": "replace%20regex.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#content/Useful/TextFile1.txt",
      "@type": "PackageEntry",
      "compressedLength": 173,
      "fullName": "content/Useful/TextFile1.txt",
      "length": 178,
      "name": "TextFile1.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.04.05/nx.2.4.1.3.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9461,
      "fullName": ".signature.p7s",
      "length": 9461,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Nx",
    "Tiny",
    "HttpRequest",
    "HttpWebRequest"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}