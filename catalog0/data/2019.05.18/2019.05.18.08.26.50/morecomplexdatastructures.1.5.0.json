{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.05.18.08.26.50/morecomplexdatastructures.1.5.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Alastair Wyse",
  "catalog:commitId": "e86b5fc7-d5a8-4a05-b5f6-e08698cadd5e",
  "catalog:commitTimeStamp": "2019-05-18T08:26:50.0761877Z",
  "copyright": "Copyright Â© Alastair Wyse 2019",
  "created": "2019-05-18T08:22:08.757Z",
  "description": "MoreComplexDataStructures is a class library containing a collection of data structures (plus related utility classes) more complex than those found in the standard .NET framework.\n\nThe project currently contains the following data structures and utility classes...\n\nWeightBalancedTree - An implementation of a weight-balanced tree.  The tree maintains counts of the nodes in each node's subtrees, and implements basic self balancing by performing rotations on any nodes where the subtree sizes differ, and rotation would improve the balance.  The class implements several methods to traverse based on item value comparison (e.g. GetNextLessThan(), GetNextGreaterThan(), GetAllLessThan(), GetAllGreaterThan()), and executes GetCountLessThan() and GetCountGreaterThan() in O(log(n)) time (since these values are stored and maintained at each node).  The class also provides methods to perform pre, post, and in-order depth-first search, breadth-first search, and to return a random node item.\n\nMinHeap / MaxHeap - Tree-based implementations of a min and max heap.  Insert() and ExtractMin() / ExtractMax() methods return with order O(log(n)) time complexity.  Also provides methods to traverse the nodes of the underlying trees via a breadth-first search.\n\nLongIntegerStatusStorer - Stores a true/false status for a complete set of long (Int64) integers.  Uses an underlying tree holding ranges of integers to store the statuses.  Also provides a method TraverseTree() to traverse the ranges stored in the tree via a breadth-first search.  Designed to be more memory efficient than an equivalent boolean array when large sets of the Int64 key values are contiguous (and hence can be 'condensed' into a range), and to support ranges larger than Int32.MaxValue.\n\nListRandomizer - Randomizes a List or Array using the Fisher/Yates/Knuth algorithm (O(n) time complexity).\n\nWeightedRandomGenerator - Returns items randomly based on configured weightings.  The underlying implementation uses a tree, so the Generate() method returns with order O(log(n)) time complexity (where n is the number of weightings defined).\n\nTrie - An implementation of trie / prefix tree.  Nodes of the trie maintain a count of the number of sequences in each subtree, hence the GetCountOfSequencesWithPrefix() method returns a list of sequences with the specified prefix with order O(n) time complexity (where n is the number of elements in the prefix sequence).\n\nFrequencyTable - A simple (Dictionary-based) frequency table, which stores the frequency of occurrence of objects.\n\nBinarySearchTreeBalancedInserter - Inserts a set of items into a binary search tree, ensuring that the tree is balanced, and depth is minimized.\n\nCharacterTrie - Effectively a Trie<Char>, but with special implementations of the Insert(), Delete(), and Contains() methods which accept String parameters (and avoid the overhead of having to call String.ToCharArray() as is required with a Trie<Char>).\n\nLRUCache - A simple implementation of a least-recently-used cache using an underlying Dictionary and LinkedList.  By default the cache stores a fixed number of items (defined by constructor parameter 'itemLimit'), but it optionally allows overriding the routine to check whether the cache is full (e.g. to decide instead based on total memory usage, etc...).\n\nUnflaggedNumberGenerator - Allows 'flagging' (i.e. setting true or false) for each number in a consecutive range (where the range length is <= Int64.MaxValue), and then provides methods to identify which numbers have not been flagged (GetLowestUnflaggedNumbers(), GetHighestUnflaggedNumbers(), etc...).\n\nUniqueRandomGenerator - Generates unique Int64 random numbers within a given range (where the range length is <= Int64.MaxValue). The underlying implementation uses a balanced tree of integer ranges, so the Generate() method returns with order O(log(n)) time complexity.",
  "id": "MoreComplexDataStructures",
  "isPrerelease": false,
  "lastEdited": "2019-05-18T08:26:37.99Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0",
  "listed": true,
  "packageHash": "M+MG1KCxlr8PxPMfD4ShiULnRoJbLl8FMbGVZR5rsZehNJxkYfDQVnEDceOc7n82YbuEiFwVYyDYXoQ1Uyzlfw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 56772,
  "projectUrl": "https://github.com/alastairwyse/MoreComplexDataStructures",
  "published": "2019-05-18T08:22:08.757Z",
  "releaseNotes": "Converted to .NET Standard.\nAdded LRUCache, CharacterTrie, UniqueRandomGenerator, UnflaggedNumberGenerator classes.\nImplemented automatic balancing in WeightBalancedTree.\nAdded Min and Max properties to WeightBalancedTree.\nAdded method Get() to WeightBalancedTree to return a specified node item (useful when the node items are container classes which hold additional data to that used in the IComparable<T> implementation... i.e. allowing the tree to be used as a treemap).\nTrie.GetAllSequencesWithPrefix() now returns IEnumerable<List<T>>.\nAdded an additional Trie constructor which returns the root node via an 'out' parameter (to allow custom traversals).\nAdded method FrequencyTable.Clear().\nRefactored WeightedRandomGenerator to remove Dictionary member 'weightingToItemMap' and instead store data in ItemAndWeighting<T> as each tree node item.\nRemoved TreeBasedListRandomizer class.",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.5.0",
  "version": "1.5.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.05.18.08.26.50/morecomplexdatastructures.1.5.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.05.18.08.26.50/morecomplexdatastructures.1.5.0.json#MoreComplexDataStructures.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2385,
      "fullName": "MoreComplexDataStructures.nuspec",
      "length": 5794,
      "name": "MoreComplexDataStructures.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.05.18.08.26.50/morecomplexdatastructures.1.5.0.json#lib/netstandard2.0/MoreComplexDataStructures.dll",
      "@type": "PackageEntry",
      "compressedLength": 27350,
      "fullName": "lib/netstandard2.0/MoreComplexDataStructures.dll",
      "length": 73216,
      "name": "MoreComplexDataStructures.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.05.18.08.26.50/morecomplexdatastructures.1.5.0.json#lib/netstandard2.0/MoreComplexDataStructures.xml",
      "@type": "PackageEntry",
      "compressedLength": 13943,
      "fullName": "lib/netstandard2.0/MoreComplexDataStructures.xml",
      "length": 120538,
      "name": "MoreComplexDataStructures.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.05.18.08.26.50/morecomplexdatastructures.1.5.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9468,
      "fullName": ".signature.p7s",
      "length": 9468,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "data",
    "structure",
    "weight",
    "weighted",
    "balanced",
    "tree",
    "binary",
    "search",
    "minheap",
    "maxheap",
    "trie",
    "frequency",
    "table",
    "long",
    "integer",
    "int64",
    "random",
    "randomize",
    "list",
    "array",
    "unique",
    "generate",
    "lru",
    "cache"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}