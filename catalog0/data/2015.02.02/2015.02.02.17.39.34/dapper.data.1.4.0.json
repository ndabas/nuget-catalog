{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.17.39.34/dapper.data.1.4.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Maxim Konstantinovski",
  "catalog:commitId": "1b0a403c-a267-403d-90ac-77ac4ac04743",
  "catalog:commitTimeStamp": "2015-02-02T17:39:34.8116429Z",
  "copyright": "Copyright Maxim Konstantinovski 2012",
  "created": "2012-10-12T01:49:51.647Z",
  "description": "Trivial micro-orm implemented on Dapper, streamlines connection and transaction management while preserving flexibility and usability.\n***************************************\n// To create an instance of database context inherit DbContext\nclass TestDb : DbContext\n{\n\tprivate const string ConnectionName = \"DefaultConnection\";\n\n\tprivate TestDb()\n\t\t: base(ConnectionName)\n\t{ }\n}\n\n// execute multiple statatements using same connection\n// connection and transaction (if needed)\nvar db = new TestDb();\ndb.Batch(s =>\n{\n\ts.BeginTransaction();\n\ttry\n\t{\n\t\ts.Execute([Your query]);\n\t\ts.CommitTransaction();\n\t}\n\tcatch\n\t{\n\t\ts.RollbackTransaction();\n\t\tthrow;\n\t}\n});\n\n// using it with ninject\nkernel.Bind<IDbContext>().To<TestDb>().InSingletonScope();",
  "id": "Dapper.Data",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0",
  "packageHash": "lgP8oTrv8aojV3lnTWcIavViuYHmE502p/yrOXo6Lu6hDaurPMPDs5/E7ErF59ow4KMzfVL+clPvEr3Um1QTjw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 14421,
  "projectUrl": "https://github.com/mkonstan/dapper-dot-net",
  "published": "2012-10-12T01:49:51.647Z",
  "releaseNotes": "* 1.4\n* DbServiceProvider now implements IServiceProvider\n* For is obsolete use GetService to retreave services\n* Included T4 template to use on dataset to create services. T4 name must match dataset name. Also when adding dataset clear its custom tool property. The dataset is used only as GUI designer for your POCO(s) and services. The T4 will create one interface per table and a one interface that implement's IDbService and one base class that inherit's DbService eposing all queries defined in dataset as methods.\n* 1.0\n* Streamlined connection and transaction management\n* Batch query processing\n* Can use ninject\n* Thread safe\n* Connection can be defined in .config file",
  "requireLicenseAcceptance": false,
  "summary": "Trivial micro-orm implemented on Dapper, streamlines connection and transaction management while preserving flexibility and usability.",
  "title": "Dapper.Data",
  "version": "1.4.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.17.39.34/dapper.data.1.4.0.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.17.39.34/dapper.data.1.4.0.json#dependencygroup/dapper",
          "@type": "PackageDependency",
          "id": "Dapper",
          "range": "[1.8.0, )"
        }
      ]
    }
  ],
  "tags": [
    "orm",
    "sql",
    "micro-orm",
    "ninject",
    "mvc"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}