{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Daniel Cazzulino",
  "catalog:commitId": "543f5681-e896-4b24-8f69-c8404c9ecf6a",
  "catalog:commitTimeStamp": "2018-10-15T03:58:43.2132868Z",
  "created": "2013-12-13T19:39:12.777Z",
  "description": "The most popular and friendly mocking framework for .NET",
  "id": "Moq",
  "isPrerelease": false,
  "lastEdited": "2018-10-15T03:58:25.043Z",
  "licenseUrl": "http://www.opensource.org/licenses/bsd-license.php",
  "listed": true,
  "packageHash": "qXqIDgiiILVVMa8i1YbLxtzI3GPAppHJJly5lL/79uK4yejBhBaALxOOnJ6BVosDPYehmrassHCKwg+Aid+z7g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 649478,
  "projectUrl": "http://www.moqthis.com",
  "published": "2013-12-13T19:39:12.777Z",
  "releaseNotes": "Version 4.2\n* Improved support for async APIs by making default value a completed task\n\nVersion 4.1\n* Added covariant IMock<out T> interface to Mock<T>\n* Added It.IsNotNull<T>\n* Fix: 'NullReferenceException when subscribing to an event'\n* Added overloads to Verify to accept Times as a Method Group\n* Feature request: It.IsIn(..), It.IsNotIn(...)\n* Corrected Verify method behavior for generic methods calls\n* Differentiate verification error from mock crash\n* Fix: Adding (and removing) handlers for events declared on interfaces works\nwhen CallBase = true.\n* Update to latest Castle\n* Fix: Mock.Of (Functional Syntax) doesn't work on properties with non-public setters\n* Fix: Allow to use CallBase instead of Returns\n* Fix: Solved Multi-threading issue - IndexOutOfRangeException\n* Capability of mocking delegates (event handlers)\n\nVersion 4.0\n* Linq to Mocks: Mock.Of<T>(x => x.Id == 23 && x.Title == \"Rocks!\")\n* Fixed issues:\n  *  87\tBadImageFormatException when using a mock with a Visual Studio generated Accessor object\n  *  166\tUnable to use a delegate to mock a function that takes 5 or more parameters.\n  *  168\tCall count failure message never says which is the actual invocation count\n  *  175\ttheMock.Object failing on VS2010 Beta 1\n  *  177\tGeneric constraint on interface method causes BadImageFormatException when getting Object.\n  *  183\tDisplay what invocations were recieved when the expected one hasn't been met\n  *  186\tMethods that are not virtual gives non-sense-exception message\n  *  188\tMore Callback Overloads\n  *  199\tSimplify SetupAllProperties implementation to simply iterate and call SetupProperty\n  *  200\tFluent mock does not honor parent mock CallBase setting.\n  *  202\tMock.Protected().Expect() deprecated with no work-around\n  *  204\tAllow default return values to be specified (per-mock)\n  *  205\tError calling SetupAllProperties for Mock<IDataErrorInfo>\n  *  206\tLinq-to-Mocks Never Returns on Implicit Boolean Property\n  *  207\tNullReferenceException thrown when using Mocks.CreateQuery with implicit boolean expression\n  *  208\tCan't setup a mock for method that accept lambda expression as argument.\n  *  211\tSetupAllProperties should return the Mock<T> instead of void. \n  *  223\tWhen a method is defined to make the setup an asserts mock fails\n  *  226\tCan't raise events on mocked Interop interfaces\n  *  229\tCallBase is not working for virtual events\n  *  238\tMoq fails to mock events defined in F# \n  *  239\tUse Func instead of Predicate\n  *  250\t4.0 Beta 2 regression - cannot mock MethodInfo when targetting .NET 4\n  *  251\tWhen a generic interface also implements a non-generic version, Verify does not work in some cases\n  *  254\tUnable to create mock of EnvDTE.DTE\n  *  261\tCan not use protected setter in public property\n  *  267\tGeneric argument as dependency for method Setup overrides all previous method setups for a given method\n  *  273\tAttempting to create a mock thrown a Type Load exception. The message refers to an inaccessible interface.\n  *  276\t.Net 3.5 no more supported\n\nVersion 3.0\n\n* Silverlight support! Finally integrated Jason's Silverlight contribution! Issue #73\n* Brand-new simplified event raising syntax (#130): mock.Raise(foo => foo.MyEvent += null, new MyArgs(...));\n* Support for custom event signatures (not compatible with EventHandler): mock.Raise(foo => foo.MyEvent += null, arg1, arg2, arg3);\n* Substantially improved property setter behavior: mock.VerifySet(foo => foo.Value = \"foo\");  //(also available for SetupSet\n* Renamed Expect* with Setup*\n* Vastly simplified custom argument matchers: public int IsOdd() < return Match<int>.Create(v => i % 2 == 0); >\n* Added support for verifying how many times a member was invoked: mock.Verify(foo => foo.Do(), Times.Never());\n* Added simple sample app named StoreSample\n* Moved Stub functionality to the core API (SetupProperty and SetupAllProperties)\n* Fixed sample ASP.NET MVC app to work with latest version\n* Allow custom matchers to be created with a substantially simpler API\n* Fixed issue #145 which prevented discrimination of setups by generic method argument types\n* Fixed issue #141 which prevented ref arguments matching value types (i.e. a Guid)\n* Implemented improvement #131: Add support for It.IsAny and custom argument matchers for SetupSet/VerifySet\n* Implemented improvement #124 to render better error messages\n* Applied patch from David Kirkland for improvement #125 to improve matching of enumerable parameters\n* Implemented improvement #122 to provide custom errors for Verify\n* Implemented improvement #121 to provide null as default value for Nullable<T>\n* Fixed issue #112 which fixes passing a null argument to a mock constructor\n* Implemented improvement #111 to better support params arguments\n* Fixed bug #105 about improperly overwriting setups for property getter and setter\n* Applied patch from Ihar.Bury for issue #99 related to protected expectations \n* Fixed issue #97 on not being able to use SetupSet/VerifySet if property did not have a getter\n* Better integration with Pex (http://research.microsoft.com/en-us/projects/Pex/)\n* Various other minor fixes (#134, #135, #137, #138, #140, etc.)\n    \n\nVersion 2.6\n\n* Implemented Issue #55: We now provide a mock.DefaultValue = [DefaultValue.Empty | DefaultValue.Mock] which will provide the current behavior (default) or mocks for mockeable return types for loose mock invocations without expectations.\n* Added support for stubbing properties from moq-contrib: now you can do mock.Stub(m => m.Value) and add stub behavior to the property. mock.StubAll() is also provided. This integrates with the DefaultValue behavior too, so you can stub entire hierarchies :).\n* Added support for mocking methods with out and ref parameters (Issue #50)\n* Applied patch contributed by slava for Issue #72: add support to limit numbor of calls on mocked method (we now have mock.Expect(...).AtMost(5))\n* Implemented Issue #94: Easier setter verification: Now we support ExpectSet(m = m.Value, \"foo\") and VerifySet(m = m.Value, 5) (Thanks ASP.NET MVC Team!)\n* Implemented issue #96: Automatically chain mocks when setting expectations. It's now possible to specify expectations for an entire hierarchy of objects just starting from the root mock. THIS IS REALLY COOL!!!\n* Fixed Issue #89: Expects() does not always return last expectation\n* Implemented Issue 91: Expect a method/property to never be called (added Never() method to an expectation. Can be used on methods, property getters and setters)\n* Fixed Issue 86: IsAny<T> should check if the value is actually of type T\n* Fixed Issue 88: Cannot mock protected internal virtual methods using Moq.Protected\n* Fixed Issue 90: Removing event handlers from mocked objects\n* Updated demo and added one more test for the dynamic addition of interfaces\n\nVersion 2.5\n\n* Added support for mocking protected members\n* Added new way of extending argument matchers which is now very straightforward\n* Added support for mocking events\n* Added support for firing events from expectations\n* Removed usage of MBROs which caused inconsistencies in mocking features\n* Added ExpectGet and ExpectSet to better support properties, and provide better intellisense.\n* Added verification with expressions, which better supports Arrange-Act-Assert testing model (can do Verify(m => m.Do(...)))\n* Added Throws<TException>\n* Added mock.CallBase property to specify whether the virtual members base implementation should be called\n* Added support for implementing and setting expectations and verifying additional interfaces in the mock, via the new mock.As<TInterface>() method (thanks Fernando Simonazzi!)\n* Improved argument type matching for Is/IsAny  (thanks Jeremy.Skinner!)\n\n\nVersion 2.0\n\n* Refactored fluent API on mocks. This may cause some existing tests to fail, but the fix is trivial (just reorder the calls to Callback, Returns and Verifiable)\n* Added support for retrieving a Mock<T> from a T instance created by a mock.\n* Added support for retrieving the invocation arguments from a Callback or Returns.\n* Implemented AtMostOnce() constraint \n* Added support for creating MBROs with protected constructors\n* Loose mocks now return default empty arrays and IEnumerables instead of nulls\n\n\nVersion 1.5.1\n\n* Refactored MockFactory to make it simpler and more explicit to use with regards to verification. Thanks Garry Shutler for the feedback! \n\nVersion 1.5\n\n* Added MockFactory to allow easy construction of multiple mocks with the same behavior and verification \n\nVersion 1.4\n\n* Added support for passing constructor arguments for mocked classes.\n* Improved code documentation \n\nVersion 1.3\n\n * Added support for overriding expectations set previously on a Mock. Now adding a second expectation for the same method/property call will override the existing one. This facilitates setting up default expectations in a fixture setup and overriding when necessary in a specific test.\n * Added support for mock verification. Both Verify and VerifyAll are provided for more flexibility (the former only verifies methods marked Verifiable) \n\nVersion 1.2\n\n* Added support for MockBehavior mock constructor argument to affect the way the mocks expect or throw on calls. \n\nVersion 1.1\n\n* Merged branch for dynamic types. Now Moq is based on Castle DynamicProxy2 to support a wider range of mock targets.\n* Added ILMerge so that Castle libraries are merged into Moq assembly (no need for external references and avoid conflicts) \n\nVersion 1.0\n\n* Initial release, initial documentation process in place, etc.",
  "requireLicenseAcceptance": false,
  "title": "Moq: an enjoyable mocking library",
  "verbatimVersion": "4.2.1312.1319",
  "version": "4.2.1312.1319",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#Moq.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 4329,
      "fullName": "Moq.nuspec",
      "length": 10367,
      "name": "Moq.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#lib/net35/Moq.dll",
      "@type": "PackageEntry",
      "compressedLength": 244083,
      "fullName": "lib/net35/Moq.dll",
      "length": 675328,
      "name": "Moq.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#lib/net35/Moq.xml",
      "@type": "PackageEntry",
      "compressedLength": 29691,
      "fullName": "lib/net35/Moq.xml",
      "length": 378630,
      "name": "Moq.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#lib/net40/Moq.dll",
      "@type": "PackageEntry",
      "compressedLength": 241652,
      "fullName": "lib/net40/Moq.dll",
      "length": 658432,
      "name": "Moq.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#lib/net40/Moq.xml",
      "@type": "PackageEntry",
      "compressedLength": 28159,
      "fullName": "lib/net40/Moq.xml",
      "length": 312099,
      "name": "Moq.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#lib/sl4/Moq.Silverlight.dll",
      "@type": "PackageEntry",
      "compressedLength": 61447,
      "fullName": "lib/sl4/Moq.Silverlight.dll",
      "length": 148480,
      "name": "Moq.Silverlight.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#lib/sl4/Moq.Silverlight.xml",
      "@type": "PackageEntry",
      "compressedLength": 27387,
      "fullName": "lib/sl4/Moq.Silverlight.xml",
      "length": 309702,
      "name": "Moq.Silverlight.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.15.03.58.43/moq.4.2.1312.1319.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9483,
      "fullName": ".signature.p7s",
      "length": 9483,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "tdd",
    "mocking",
    "mocks",
    "unittesting",
    "agile"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}