{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.10.04.21.08.26/languageext.1.6.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Paul Louth",
  "catalog:commitId": "0210f140-6a1d-4ad7-bf74-755d3f75dcbd",
  "catalog:commitTimeStamp": "2015-10-04T21:08:26.8527647Z",
  "copyright": "Paul Louth 2015",
  "created": "2015-10-04T21:08:05.82Z",
  "description": "This library uses and abuses the features of C# 6 to provide a functional 'Base class library', that, if you squint, can look like extensions to the language itself. It also includes an 'Erlang like' process system (actors) that can optionally persist messages and state to Redis (note you can use it without Redis for in-app messaging). The process system additionally supports Rx streams of messages and state allowing for a fully complete system of reactive events and message dispatch.\n\nThis package is a functional 'toolkit' and also solves some of the annoyances with C#, namely:\n\n            * Poor tuple support\n            * Null reference problem\n            * Lack of lambda and expression inference\n            * Void isn't a real type\n            * Mutable lists, dictionaries, sets, queues, etc.\n            * The awful 'out' parameter\n\n        The library very heavily focusses on correctness, to give you the tools needed to write safe declarative code.\n\n        Features:\n\n            Powerful 'prelude' which you include by `using static LanguageExt.Prelude` (in C# 6) that covers many of the basic functional language core library functions and types (from `using LanguageExt`):\n\n                Pattern matching\n                Lambda type-inference: `var fn = fun( (int x, int y) => x + y );`\n                `Option<T>` monad\n                `OptionUnsafe<T>` monad\n                `Either<L,R>` monad\n                `EitherUnsafe<L,R>` monad\n                `TryOption<T>` monad\n                `Try<T>` monad\n                `Writer<W, T>` monad\n                `Reader<E, T>` monad\n                `State<S, T>` monad\n                `Tuple(a,b,...)` - `Tuple` construction without typing `Tuple.Create(a,b,...)` as well as `map` to project the `Item1..ItemN` properties onto named values.\n                `Lst<T>` - immutable list \n                `Map<K,V>` - immutable map                                                \n                `Se",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.10.04.21.08.26/languageext.1.6.0.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://www.4four.org/images/lang-ext-logo.png",
  "id": "LanguageExt",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "https://github.com/louthy/language-ext/blob/master/LICENSE.md",
  "listed": true,
  "packageHash": "TVa1Qand5Vgj7fRoHhKRJS6FWIiflwXJD0PpvNBhd1z2M8bu0JwwNF+1W/dzd2f0gJpvQefm4+CwJ45xaGk8dQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 613619,
  "projectUrl": "https://github.com/louthy/language-ext",
  "published": "2015-10-04T21:08:05.82Z",
  "releaseNotes": "Removed dependency on System.Collections.Immutable.  All immutable types are implemented in-project:\n\nLst<T>\nMap<K,V>\nSet<T>\nQue<T>\nStck<T>\n\nEither and EitherUnsafe API rebalancing (between Left and Right behaviours).  Also Either and EitherUnsafe are now bifunctors, bifoldable and bitraversible.\n\nCompose and BackCompose extension methods for Func.\n\nNew compose function in the Prelude",
  "requireLicenseAcceptance": false,
  "summary": "This library uses and abuses the features of C# 6 to provide a functional 'Base class library', that, if you squint, can look like extensions to the language itself.",
  "title": "C# Functional Language Extensions",
  "verbatimVersion": "1.6.0",
  "version": "1.6.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.10.04.21.08.26/languageext.1.6.0.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.10.04.21.08.26/languageext.1.6.0.json#dependencygroup/.netframework4.5/system.collections.immutable",
          "@type": "PackageDependency",
          "id": "System.Collections.Immutable",
          "range": "[1.1.36, )"
        }
      ],
      "targetFramework": ".NETFramework4.5"
    }
  ],
  "tags": [
    "C#",
    "Functional",
    "Language",
    "Extension",
    "Monad",
    "Option",
    "Either",
    "Reader",
    "Writer",
    "State",
    "List",
    "Set",
    "Map",
    "Queue",
    "Memo",
    "Memoization",
    "Immutable",
    "Lambda",
    "Pattern",
    "Matching",
    "Tuple"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}