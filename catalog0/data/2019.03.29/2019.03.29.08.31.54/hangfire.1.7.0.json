{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Sergey Odinokov",
  "catalog:commitId": "8ad974d6-297d-4ec8-b5a6-07ba6959ef80",
  "catalog:commitTimeStamp": "2019-03-29T08:31:54.9506914Z",
  "copyright": "Copyright © 2013-2019 Sergey Odinokov",
  "created": "2019-03-29T08:27:14.063Z",
  "description": "An easy and reliable way to perform fire-and-forget, delayed and recurring, long-running, short-running, CPU or I/O intensive tasks inside ASP.NET applications. No Windows Service / Task Scheduler required. Even ASP.NET is not required.\nBacked by Redis, SQL Server, SQL Azure or MSMQ. This is a .NET alternative to Sidekiq, Resque and Celery.\nhttps://www.hangfire.io/",
  "id": "Hangfire",
  "isPrerelease": false,
  "lastEdited": "2019-03-29T08:31:27.193Z",
  "licenseUrl": "https://raw.github.com/HangfireIO/Hangfire/master/LICENSE.md",
  "listed": true,
  "packageHash": "BAWxZ+I9ORF0NECswaZl3vwL6yIqkqVU6oHqyLGn6lLb4FjNyZtTDGQy+6eb/JbsBY4amaYsqnL7eXQ42E6FHw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 16434,
  "projectUrl": "https://www.hangfire.io/",
  "published": "2019-03-29T08:27:14.063Z",
  "releaseNotes": "https://www.hangfire.io/blog/\n\n1.7.0\n\nHangfire.Core\n\n• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.\n• Added – `IGlobalConfiguration.SetDataCompatibilityLevel` to enable rolling upgrades from version 1.6.\n• Added – `IGlobalConfiguration.UseRecommendedSerializerSettings` method for new installations.\n• Added – Assemblies now loaded automatically when resolving a type when using default type resolver.\n• Added – Custom `TaskScheduler` can now be specified in `BackgroundJobServerOptions` for workers.\n• Added – `IdempotentCompletionAttribute` filter to enforce strict order for continuations.\n• Added – `IBackgroundJobClient.ContinueJobWith` methods to replace `ContinueWith` ones in future for clarity.\n• Added – `JobStorage.LinearizableReads` virtual property to avoid unnecessary waits in state changer.\n• Added – Allow async methods to run their continuations on worker thread by disabling `TaskScheduler`.\n• Added – Multi-stage shutdown to wait for graceful completion before starting to abort jobs.\n• Added – Asynchronous checks for job cancellation, `IJobCancellationToken` can be replaced with `CancellationToken` (by @pieceofsummer).\n• Added – Possibility to create millions of recurring jobs without stressing the scheduler.\n• Added – Second-based recurring jobs are fully supported now with 6-part cron expressions.\n• Added – Support for custom `TimeZoneInfo` resolvers in recurring jobs for interoperability purposes.\n• Added – Package now explicitly targets .NET Standard 2.0, and .NET Framework 4.6 target added as well.\n• Added – Type roundtrip support between .NET Core and .NET Framework for most common types.\n• Added – Allow to specify queue names based on job arguments with `QueueAttribute` via patterns.\n• Added – `PerformContext.Storage` property to allow server filters to spawn connections.\n• Added – `GetFirstByLowestScoreFromSet` connection method overload that returns multiple items (by @cdschneider).\n• Added – Entry point for custom job naming strategies available for dashboard (by @pieceofsummer).\n• Added – `JobDisplayNameAttribute` class for displaying jobs in dashboard, available on .NET Core (by @pieceofsummer).\n• Added – Support for async jobs returning ValueTask<T> (by @pieceofsummer).\n• Added – Support for asynchronous background processes, opens the road toward async storage.\n• Added – Circuit breaker pattern for background processes to reduce the logging pressure.\n• Added – Processing server is now able to detect it was expired, and restart itself with the new id.\n• Added – Ability to use custom delays for automatic retries of a background job.\n• Added – `ThreadAbortException` and `ThreadInterruptedException` handling to keep the background process running.\n• Added – Support for complex Cron expressions, including the `L`, `W`, `#` characters.\n• Added – `JobActivator.BeginScope` method overload with the full `PerformContext` (by @jeroenvervaeke).\n• Added – Support for read-only view for dashboard (by @mikechamberlain).\n• Added – Storage property to control the job expiration time (by @rsilvanet).\n• Added – Decrease the size of serialized type payloads and remove version information.\n• Changed – Make `TaskScheduler.Default` the default scheduler for async jobs to avoid breaking changes.\n• Changed – Split serializer setting to Internal and User scopes to isolate them (Version_170 Switch).\n• Changed – Don't allow to affect internal serialization even by `JsonConvert.DefaultSettings` (Version_170 Switch).\n• Changed – Share the same type binder between Hangfire itself and Newtonsoft.Json (Version_170 Switch).\n• Changed – Use more compact representation of dates when using `SerializeDateTime` (Version_170 Switch).\n• Changed – Stop using special case for `DateTime` argument serialization (Version_170 Switch).\n• Changed – Don't serialize unused `AwaitingState.Expiration` field (Version_170 Switch).\n• Changed – Specify parameter type when serializing arguments to allow using `TypeNameHandling.Auto` option.\n• Changed – Use case sensitive search when resolving a type as by default in .NET.\n• Changed – Make `SucceededState` constructor public to allow state serialization.\n• Changed – Add `IBackgroundJobFactory.StateMachine` property (breaking change for low level API).\n• Changed – Replace Rickshaw with Chart.js to have beautiful charts with less headache.\n• Changed – `DelayedJobScheduler` is able to use the new storage method to query multiple jobs at once.\n• Changed – `RecurringJobScheduler` now uses index-based checks to fetch only those jobs that should be scheduled.\n• Fixed – Worker now logs an error, when all the state change attempts failed due to an exception.\n• Fixed – Don't serialize arguments multiple times when showing job details in dashboard.\n• Fixed – `DateTimeOffset` conversion error when it was serialized with `TypeConverter`.\n• Fixed – Remove duplicate of argument deserialization code for obsolete `Job` class methods.\n• Fixed – Decorate all the exceptions with the `SerializableAttribute`.\n• Fixed – `ArgumentNullException` when job class contains method with non-resolvable generic arguments.\n• Fixed – \"Failed to initialize CoreCLR\" error, by removing reference to `Microsoft.NETCore.Portable.Compatibility`.\n• Fixed – Possible race conditions in `RecurringJobScheduler` that may lead to job duplicates.\n• Fixed – Configuration inconsistency introduced in 1.6.18 leading to issues with custom `JobActivator`.\n• Fixed – Triggering the recurring task doesn't update its last execution time.\n• Fixed – Recurring job which don't have next execution (intentionally or not) don't cause exception.\n• Fixed – Dashboard recurring jobs sorting is random (now it's based on next execution time).\n• Fixed – Performance problems with huge amount of recurring jobs.\n• Fixed – `NextExecution` field of a recurring job has delay in value getting set.\n• Fixed – Dashboard graphs have improper sizing.\n• Fixed – Server disappears from the list, but still performing the background processing.\n• Fixed – Logging is too aggressive on transient errors.\n• Fixed – Daylight saving time transitions now handled perfectly in recurring jobs thanks to Cronos.\n• Fixed – Confusing Cron scheduling, when both day-of-week and day-of-month fields set.\n• Project – Add `DataCompatibilityRangeFact` and `DataCompatibilityRangeTheory` classes for compatibility checks.\n• Project – Reduce test execution time by removing unnecessary waits.\n\nHangfire.AspNetCore\n\n• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.\n• Added – An overloaded AddHangfire method with `IServiceProvider` parameter (by @ericgreenmix and @denis-ivanov).\n• Added – `BackgroundJobServerHostedService` class based on `IHostedService` interface.\n• Added – `IServiceCollection.AddHangfireServer` method to register the server during configuration.\n• Changed – Custom services for factory, performer and state changer interfaces will be picked up only when all of them registered.\n\nHangfire.SqlServer\n\n• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.\n• Added – `Schema 7` migration to fix the `IX_HangFire_Set_Score` index to include the `Key` column.\n• Added – `Schema 6` migration with less indexes, better physical layout and `bigint` support (disabled by default).\n• Added – Blocking fetch support for sliding expiration-based fetch to avoid excessive polling.\n• Added – `SqlServerStorageOptions.EnableHeavyMigrations` switch to automatically install even heavy migrations.\n• Added – `SqlServerStorageOptions.DisableGlobalLocks` property to avoid custom locking scheme.\n• Added – `SqlServerStorageOptions.UsePageLocksOnDequeue` property to use less CPU consuming fetch.\n• Added – Callback method to allow to open the database with impersonation (by @BjoernHund).\n• Added – `SqlServerStorageOptions.UseRecommendedIsolationLevel` option to set the minimum possible level.\n• Changed – Identity columns either converted to the `bigint` type, or entirely removed.\n• Changed – Clustered indexes were organized according to the access patterns of their tables.\n• Changed – Most of secondary indexes were either removed or made filtered.\n• Changed – Optimize sliding-expiration-based fetching to use even less CPU time.\n• Changed – Use write reordering and fine-grained locking scheme to improve parallelism.\n• Changed – Monitoring API doesn't check state data to see state transition time.\n• Changed – Allow to use zero-based poll interval when sliding invisibility timeout.\n• Changed – Short paths for the `CreateExpiredJob` method to avoid some round-trips.\n• Changed – Set `SqlParameter` types explicitly to not to duplicate query plans.\n• Changed – Batch support for `AddToQueue` method when default provider is used.\n• Changed – Check `FetchedAt` has expected value to prevent prolonging others' work.\n• Changed – Use more recent Dapper 1.50.7 on all platforms except .NET Framework 4.5.\n• Changed – Dapper package is internalized now even on .NET Core to avoid possible conflicts.\n• Fixed – Avoid unnecessary waits in state changer when job was already expired.\n• Fixed – Cannot resolve the collation conflict in `CountersAggregator`.\n• Fixed – Background processing stops when identity columns exceed the `Int32.MaxValue`.\n• Fixed – Slowdown of scheduled jobs due to the missing index on the `[Set]` table.",
  "requireLicenseAcceptance": false,
  "summary": "An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications. No Windows Service required.",
  "title": "Hangfire",
  "verbatimVersion": "1.7.0",
  "version": "1.7.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netframework4.5/hangfire.core",
          "@type": "PackageDependency",
          "id": "Hangfire.Core",
          "range": "[1.7.0, 1.7.0]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netframework4.5/hangfire.sqlserver",
          "@type": "PackageDependency",
          "id": "Hangfire.SqlServer",
          "range": "[1.7.0, 1.7.0]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netframework4.5/microsoft.owin.host.systemweb",
          "@type": "PackageDependency",
          "id": "Microsoft.Owin.Host.SystemWeb",
          "range": "[3.0.0, )"
        }
      ],
      "targetFramework": ".NETFramework4.5"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard1.3",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard1.3/hangfire.core",
          "@type": "PackageDependency",
          "id": "Hangfire.Core",
          "range": "[1.7.0, 1.7.0]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard1.3/hangfire.sqlserver",
          "@type": "PackageDependency",
          "id": "Hangfire.SqlServer",
          "range": "[1.7.0, 1.7.0]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard1.3/hangfire.aspnetcore",
          "@type": "PackageDependency",
          "id": "Hangfire.AspNetCore",
          "range": "[1.7.0, 1.7.0]"
        }
      ],
      "targetFramework": ".NETStandard1.3"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard2.0/hangfire.core",
          "@type": "PackageDependency",
          "id": "Hangfire.Core",
          "range": "[1.7.0, 1.7.0]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard2.0/hangfire.sqlserver",
          "@type": "PackageDependency",
          "id": "Hangfire.SqlServer",
          "range": "[1.7.0, 1.7.0]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#dependencygroup/.netstandard2.0/hangfire.aspnetcore",
          "@type": "PackageDependency",
          "id": "Hangfire.AspNetCore",
          "range": "[1.7.0, 1.7.0]"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#Hangfire.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 4373,
      "fullName": "Hangfire.nuspec",
      "length": 12006,
      "name": "Hangfire.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 681,
      "fullName": "readme.txt",
      "length": 1846,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.29.08.31.54/hangfire.1.7.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Hangfire",
    "AspNet",
    "MVC",
    "AspNetCore",
    "SqlServer",
    "Long-Running",
    "Background",
    "Fire-And-Forget",
    "Delayed",
    "Recurring",
    "Tasks",
    "Jobs",
    "Scheduler",
    "Threading",
    "Queues"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}