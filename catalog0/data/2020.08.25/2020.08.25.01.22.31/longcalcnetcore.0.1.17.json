{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "0fc3466c-7aac-4091-9f6b-76245c12344b",
  "catalog:commitTimeStamp": "2020-08-25T01:22:31.4768247Z",
  "copyright": "Copyright Â© MarkKnows 2020",
  "created": "2020-08-25T01:20:13.43Z",
  "description": "LongCalcNetCore Arbitrary Precision Float and Complex Number Library",
  "iconFile": "Logo50x50.png",
  "id": "LongCalcNetCore",
  "isPrerelease": false,
  "lastEdited": "2020-08-25T01:22:14.877Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "W62LzJxTFyhKC9IqaIs6LsNT7589MZy76V5n9FrYWzln5TIN/bwAlqlMrSOPbUWR2iM0PsmG+Rw+VSVmxtth4g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 98914,
  "published": "2020-08-25T01:20:13.43Z",
  "releaseNotes": "Modified the software to add flexibility and additional functionality, by creating a parameter bf.Threshold of type long that specifies, for bf objects 'x', the maximum value of Log10(x) permitted for the function x.Exp. Thus, all public bf functions (except toString and ToFile) maintain a minimum internal precision for results of at least Threshold decimal digits. Allowed values of Threshold are from 1 to 100000. By permitting Threshold to be small, x.Zeta (which is an admittedly slow function) will finish in an acceptable time for some values of Precision. By permitting Threshold to be large, x.Exp can be calculated for some rather large x. Best Practice: set Threshold only once in every session using LongCalcNetCore, and immediately at the start of LongCalcNetCore, since it also helps determine the Precision of bf objects derived from string or text data. \n\nIncluded an updated version of LongCalcNetCoreDemo.\n\nPerformance was improved by ensuring that the Precision parameters were increased by bf.Threshold only in the public functions. \n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2019) and using Net Core's BigInteger for the underlying integer math, supplies a variety of math functions and utilities with precisions as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float') real values comprised of a BigInteger mantissa and base 2 exponent, bcr (for complex numbers expressed in the rectangular coordinates) comprised of a bf real part and a bf imaginary part, and bcp (for complex numbers expressed in the polar coordinates) comprised of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ. The library also includes a 'bd' (for bigdecimal) object with fractional base 10 digits up to long.MaxValue.",
  "title": "LongCalcNetCore Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.1.17",
  "version": "0.1.17",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#LongCalcNetCore.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1458,
      "fullName": "LongCalcNetCore.nuspec",
      "length": 3105,
      "name": "LongCalcNetCore.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#Logo50x50.png",
      "@type": "PackageEntry",
      "compressedLength": 2525,
      "fullName": "Logo50x50.png",
      "length": 2520,
      "name": "Logo50x50.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#lib/netcoreapp3.1/LongCalcNetCore.dll",
      "@type": "PackageEntry",
      "compressedLength": 63818,
      "fullName": "lib/netcoreapp3.1/LongCalcNetCore.dll",
      "length": 192000,
      "name": "LongCalcNetCore.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#lib/netcoreapp3.1/LongCalcNetCore.xml",
      "@type": "PackageEntry",
      "compressedLength": 16843,
      "fullName": "lib/netcoreapp3.1/LongCalcNetCore.xml",
      "length": 298411,
      "name": "LongCalcNetCore.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.01.22.31/longcalcnetcore.0.1.17.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "bigdecimal",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}