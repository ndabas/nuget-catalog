{
  "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Timo MÃ¼hlhaus, Kevin Schneider, F# open source contributors",
  "catalog:commitId": "22fefbee-11a5-4fc8-964d-5b7945890341",
  "catalog:commitTimeStamp": "2022-04-28T16:22:11.9809409Z",
  "created": "2022-04-28T16:19:57.7Z",
  "description": "plotly.js charts in .NET programming languages ðŸ“ˆðŸš€.",
  "iconFile": "logo.png",
  "id": "Plotly.NET",
  "isPrerelease": false,
  "lastEdited": "2022-04-28T16:21:59.39Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "pU5Qsnm5EDzlqUT9RSpLNA0qJC7WPP6u7qV6Gd+frXpDW3TKo5aAac9Xau6kMc8PZ3zeM4O4T/TYCojD5qrGPg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 1020922,
  "projectUrl": "https://plotly.net/",
  "published": "2022-04-28T16:19:57.7Z",
  "releaseNotes": "Plotly.NET finally has reached all milestones for 2.0 and is ready for a stable release.\nThis release is the culmination of almost **2 years of work in >500 commits by 17 contributors**.\nHere is an attempt to visualize the history of these changes in a few seconds:\n![plotly-net-gource](https://user-images.githubusercontent.com/21338071/161372870-3fe429e8-a999-403c-8a44-dba40926d9bd.gif)\n(made with [gource](https://github.com/acaudwell/Gource))\nAll APIs have changed significantly - this release is incompatible with 1.x and many 2.x-preview/beta versions.\nTL;DR**\n- All plotly chart/trace types!\n- Unified API!\n- chart rendering in notebooks!\n- programmatic static image export!\n- Exhaustive docs!\n- We have a [discord server](https://discord.gg/k3kUtFY8DB), feel free to ask questions there!\nCore library**\nGeneral**\n- The API layer model has refined and used for every type of plotly object abstraction. In brief,\n\t- There are 5 main categories of abstractions: `Trace` (chart data and type), `Layout`(non-data chart styling), `Config`(render options), `DisplayOptions`(html display options), `StyleParam`(DSL for styling options)\n\t- Many properties used in these levels are themselves objects, which are in the respective `*Objects` namespace (e.g. `Geo`, which determines map layout of geo traces is an object on the `Layout` and therefore in the `LaoutObjects` namespace.)\n\t- every object is based on `DynamicObj` and its properties can therefore be further customised by dynamic member assignment. Therefore, every plotly property can be set manually, even those which do not have direct abstractions.\n- There are now several `Trace` types for each kind of subplot (`Trace2D`, `Trace3D`, etc.) and eqivalent `Chart` types (`Chart2D`, `Chart3D`, etc). while not visible from the top level api (everything kan be accessed via the unified `Chart` API), this greatly improves correct multi chart layouting.\n- There are 3 ways of creating charts with increasing level of customization:\n1. The `Chart` API as a unified API surface for chart creation and styling\n- `Chart.<ChartType>`  (e.g. `Chart.Point`) for chart creation from data and some chart specific styling options\n- `Chart.with<Style or object>` (e.g. `Chart.withXAxisStyle`) for styling of chart objects\n2. Creation of Chart objects by manually creating `Trace`, `Layout` and `Config` objects with many more optional customization parameters\n3. Exclusive usage of `DynamicObj` - you can translate **any** plotly.js javascript with this method.\nChart/Trace abstractions**\nYou can create the following Charts with Plotly.NET's API (and many more by combining them):\n- Cartesian 2D (`Chart2D`):\n- `Scatter` (Point, Line, Spline, Bubble, Range, Area, SplineArea, StackedArea)\n- `Funnel`\n- `Waterfall`\n- `Bar` (Bar, Column, StackedBar, StackedColumn)\n- `Histogram`\n- `Histogram2D`\n- `Histogram2DContour`\n- `PointDensity`\n- `BoxPlot`\n- `Violin`\n- `Heatmap` (Heatmap, AnnotatedHeatmap)\n- `Image`\n- `Contour`\n- `OHLC` (OHLC, CandleSticks)\n- `Splom`\n- Cartesian 3D (`Chart3D`):\n- `Scatter3D` (Point3D, Line3D, Bubble3D)\n- `Surface`\n- `Mesh3D`\n- `Cone`\n- `StreamTube`\n- `Volume`\n- `IsoSurface`\n- Polar (`ChartPolar`):\n- `ScatterPolar` (PointPolar, LinePolar, SplinePolar, BubblePolar)\n- `BarPolar`\n- Maps (`ChartMap`):\n- `ChoroplethMap`\n- `ChoroplethMapbox`\n- `ScatterGeo` (PointGeo, LineGeo, BubbleGeo)\n- `ScatterMapbox` (PointMapbox, LineMapbox, BubbleMapbox)\n- `DensityMapbox`\n- Ternary (`ChartTernary`):\n- `ScatterTernary` (PointTernary, LineTernary, SplineTernary, BubbleTernary)\n- Carpet (`ChartCarpet`):\n-  `Carpet`\n- `ScatterCarpet` (PointCarpet, LineCarpet, SplineCarpet, BubbleCarpet)\n- `ContourCarpet`\n- Domain (`ChartDomain`)\n- `Pie` (Pie, Doughnut)\n- `FunnelArea`\n- `Sunburst`\n- `Treemap`\n- `ParallelCoord`\n- `ParallelCategories`\n- `Sankey`\n- `Table`\n- `Indicator`\n- `Icicle`\n- Smith (`ChartSmith)`\n-  `ScatterSmith` (PointSmith, LineSmith, BubbleSmith)\nPlotly.NET.Interactive**\nYou can directly render charts as html cell output with the dotnet interactive kernel:\n![image](https://user-images.githubusercontent.com/21338071/161376599-2afa5610-7726-41b9-87a5-20a88ed2441f.png)\nPlotly.NET.ImageExport**\nThis library provides an interface for image rendering engines to consume plots and create static image files (PNG, JPG, SVG), as well as a reference implementation using [PuppeteerSharp](https://github.com/hardkoded/puppeteer-sharp) to render charts with headless chromium.",
  "repository": "",
  "verbatimVersion": "2.0.0",
  "version": "2.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#dependencygroup/.netstandard2.0/dynamicobj",
          "@type": "PackageDependency",
          "id": "DynamicObj",
          "range": "[1.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#dependencygroup/.netstandard2.0/fsharp.core",
          "@type": "PackageDependency",
          "id": "FSharp.Core",
          "range": "[6.0.2, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#dependencygroup/.netstandard2.0/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[13.0.1, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#Plotly.NET.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2608,
      "fullName": "Plotly.NET.nuspec",
      "length": 5648,
      "name": "Plotly.NET.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#lib/netstandard2.0/Plotly.NET.pdb",
      "@type": "PackageEntry",
      "compressedLength": 75389,
      "fullName": "lib/netstandard2.0/Plotly.NET.pdb",
      "length": 274736,
      "name": "Plotly.NET.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#lib/netstandard2.0/Plotly.NET.dll",
      "@type": "PackageEntry",
      "compressedLength": 719121,
      "fullName": "lib/netstandard2.0/Plotly.NET.dll",
      "length": 3921920,
      "name": "Plotly.NET.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#lib/netstandard2.0/Plotly.NET.xml",
      "@type": "PackageEntry",
      "compressedLength": 182445,
      "fullName": "lib/netstandard2.0/Plotly.NET.xml",
      "length": 1921958,
      "name": "Plotly.NET.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#logo.png",
      "@type": "PackageEntry",
      "compressedLength": 29688,
      "fullName": "logo.png",
      "length": 45402,
      "name": "logo.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.28.16.22.11/plotly.net.2.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9483,
      "fullName": ".signature.p7s",
      "length": 9483,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "visualization",
    "charting",
    "plotly",
    "fsharp",
    "csharp"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}