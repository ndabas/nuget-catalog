{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.08.02.01.05/cqlsharp.0.40.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Joost Reuzel",
  "catalog:commitId": "fd54df6b-6b66-4cc3-aea3-b0fba4074448",
  "catalog:commitTimeStamp": "2015-02-08T02:01:05.1747602Z",
  "copyright": "Copyright 2014 Joost Reuzel",
  "created": "2014-10-12T22:25:57.23Z",
  "description": "CqlSharp is a high performance, asynchronous Cassandra CQL binary protocol client implementing the ADO.NET data provider interfaces.\n\n      It's main features are:\n      * The API implements the ADO.NET interfaces. If you are familiar with SqlConnection, SqlCommand, and SqlReader, you should be able to use CqlSharp with no difficulty.\n      * CqlSharp is an implementation of the (new) CQL Binary Protocol and therefore requires Cassandra 1.2 and up\n      * CqlSharp supports all the binary protocol v2 features: batching, paging, bound query variables, result schema caching, check-and-set (CAS) statements, and sasl-authentication\n      * Implements binary protocol v3: more queries per connection, timestamp property, UDT and Tuple types, larger collections\n      * Supports fast mapping of objects to query parameters, or query results to objects. Mapping is tunable by decorating your classes via Table and Column attributes.\n      * Query tracing, timeouts and cancellation is supported\n      * The API is predominately [asynchronous](http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx), heavily relying on the System.Threading.Tasks namespace. Synchronous alternatives are available for convenience.\n      * Configuration is done through connection strings. The simultaneous use of multiple Cassandra clusters is supported.\n      * Extensive logging, including support for custom logger implementations\n      \n      See https://github.com/reuzel/CqlSharp/wiki/Features for an extensive feature list.",
  "iconUrl": "https://raw.github.com/reuzel/CqlSharp/master/logo.png",
  "id": "CqlSharp",
  "isPrerelease": false,
  "lastEdited": "2014-10-12T22:36:50.63Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0",
  "packageHash": "IMR6ku7tLJilElEqNuPAq8N5vRpXewTjkCBZPH5r8IWwiai1OfZ+QzaVXZxy8Soxi4lNv9BRDd1kldI3x9t7YA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 137695,
  "projectUrl": "https://github.com/reuzel/CqlSharp/wiki",
  "published": "2014-10-12T22:25:57.23Z",
  "releaseNotes": "## Version 0.40.0 - Cql Binary Protocol v3 and new type system\n      * Implements binary protocol v3: more queries per connection, timestamp property, UDT and Tuple types, larger collections.\n      * Rewrite of type system, CqlType is no longer an enum but a class with subclasses for every Cassandra type.\n      * Previous CqlType enum is now called CqlTypeCode.\n      * Primitive Cql types can be accessed through CqlType.* static properties. Others can be constructed from .NET class, type string, or TypeCode + parameter via the CqlType.CreateType overloads.\n      * CqlParameter no longer accepts different CqlTypeCodes, but requires a single CqlType\n      * Added high performance and extremely flexible type conversion that prevents boxing, and even converts collection types (e.g. hashset{int} to list{long})\n      * Removed explicit references to collection key and value types. They are not used separate from the corresponding CqlTypes anymore\n      * CqlDataReader.GetDataTypeName(int i) now returns full string representation of the Cassandra type (e.g. map{varchar, int=\"\"})\n      * CqlDataReader.GetFieldCqlType added that returns the CqlType used for the given field\n      * Removed a lot of boxing/unboxing of primitive types during serialization/deserialization\n      * Implemented DbDataReader.GetFieldValue{T}(int i)\n      * Supports User Defined Types. Annotate your class with CqlUserType and CqlColumn to have it correctly mapped to a Cassandra User Defined Type\n      * Guesses protocol version from release_version shortening connection setup times for older clusters\n      \n      ## Version 0.39.0 - Performance of sync operations\n      * Many changes to have synchronous API really execute synchronously, it is no longer a sync-over-async wrapper\n      * Improved exception generation in case of query cancellation or timeout\n      * Logging cancelled queries\n      * Fix: Adding LocalOne consistency level\n      \n      ...\n\n      See https://github.com/reuzel/CqlSharp/blob/master/ChangeLog.md for the full changelog.",
  "requireLicenseAcceptance": false,
  "summary": "CqlSharp is a high performance, asynchronous Cassandra CQL binary protocol client implementing the ADO.NET data provider interfaces. \n    \n      See https://github.com/reuzel/CqlSharp/wiki/Features for an extensive feature list.",
  "title": "CQLSharp - An ADO.NET Data Provider for Cassandra",
  "version": "0.40.0",
  "tags": [
    "Cassandra",
    "CQL",
    "ADO.NET",
    "client",
    "database",
    "provider",
    "driver",
    "nosql",
    "net45",
    "TPL",
    "async",
    "high-performance",
    "CqlSharp"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}