{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Miguel de Icaza, Charlie Kindel (@tig), @BDisp",
  "catalog:commitId": "d72f4d22-70b4-4675-b9b3-3bd62a03bb8d",
  "catalog:commitTimeStamp": "2020-08-25T14:06:59.7793322Z",
  "created": "2020-08-24T17:57:25.26Z",
  "description": "Console-based user interface toolkit for .NET applications.",
  "id": "Terminal.Gui",
  "isPrerelease": false,
  "lastEdited": "2020-08-25T14:06:30.033Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": false,
  "packageHash": "Kp3142jnKK1yhrc26dcJPRMU9aduY6qR9KUTCsVYL+aM69kNkx/q9iM5LyjEX5YhR0DVrE1E9iLZEBknl+DzIw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 294719,
  "projectUrl": "https://github.com/migueldeicaza/gui.cs/",
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "0.90: Feature Complete pre-release of 1.00\n      * API documentation completely revamped and updated. Readme upated. Contributors guide added (Thanks @tig!)\n      * New sample/demo app - UI Catalog - Replaces demo.cs with an easy to use and extend set of demo scenarios. (Thanks @tig!)\n      * MenuBar can now have MenuItems directly (enables top-level menu items with no submenu). (Thanks @tig!)\n      * Apps can now get KeyUp/KeyDown events.  (Thanks @tig!)\n      * Fixes #396 - Text alignnment issues.  (Thanks @tig!)\n      * Fixes #423 - Fix putting results of ocgv on command line erases cursor. (Thanks @tig!)\n      * Example/Designer csproj files updated to latest Visual Studio model. (Thanks @tig!)\n      * Adjusted the default colors for Windows to make more readable. (Thanks @tig!)\n      * Toplevel.Ready event - Fired once the Toplevel's MainLoop has started (#445). (Thanks @tig!)\n      * Refactored several events to use event vs. Action. (BREAKING CHANGE) (Thanks @tig!)\n      * All compile warnings fixed. (Thanks @tig!)\n      * Fixed a crash in EnsureVisibleBounds. (Thanks @tig!)\n      * Application.Init/Shutdown are more robust. (Thanks @tig!)\n      * New \"Draw Window Frame\" code; consistent across Window, FrameView, and Menu. Fixes many drawing bugs. (Thanks @tig!)\n      * The project has been refactored an reorganized to reduce risk of bugs and make it easier to contribute #541. (Thanks @tig!)\n      * Fixes #522 - Last view of Frameview not drawn. (Thanks @tig!)\n      * Clipping has been fixed/restored - it now works properly. (#586) (Thanks @tig!)\n      * Added a View.LayoutComplete event (#569). (Thanks @tig!)\n      * Fixes #299 - MessageBox now auto sizes. (Thanks @tig!)\n      * Fixes #557 - MessageBoxes on small screens. (Thanks @tig!)\n      * Fixes #432 - MessageBox does not deal with long text; width/height params are goofy. (Thanks @tig!)\n      * Fixes #35 - Dialog should have 1 char padding. (Thanks @tig!)\n      * `MessageBox.Query` called with `width` and `height` == 0 get auto-size behavior. A new constructor is added making this easy to use. (Thanks @tig!)\n      * Multi-line `MessageBox`es are now supported. Just use `\\n` to add lines. The height of the MessageBox will adjust automatically. (Thanks @tig!)\n      * The `MessageBoxes` Scenario in UI Catalog provides a full demo/test-case. (Thanks @tig!)\n      * `Dialog` called with `width` and `height` == 0 are sized to 85% container. A new constructor is added making this easy to use. (Thanks @tig!)\n      * Dialog (and MessageBox `Buttons` are now dynamically laid out using Computed layout. (Thanks @tig!)\n      * A `Dialogs` Scenario has been added to UI Catalog making it easy to test the API. (Thanks @tig!)\n      * `Button` now supports BOTH specifying a hotkey with '_' and the old behavior of using the first uppercase char (if '_' is not found). (Thanks @tig!)\n      * All UI Catalog scenarios that use `Dialog` or `MessageBox` now use the simplified API. (Thanks @tig!)\n      * `Terminal.Gui.dll` now has version metadata and UI Catalog's about box displays it as a test case. (Thanks @tig!)\n      * Button, Dialog, and MessageBox API documentation has been updated/revised. (Thanks @tig!)\n      * `View`, `Window`, `FrameView`, and `Dialog` have been upgraded to use the new `ConsoleDriver.DrawFrameWindow` API directly. (Thanks @tig!)\n      * New ComboBox control (Thanks @fergusonr!)\n      * ConsoleDriver now supports improved KeyModifers (shift keys) with an expanded Keys Sceanrio in UI Catalog. (Thanks @bdisp!)\n      * Tons of mouse handling improvements. (Thanks @bdisp!)\n      * Fsharp sample updated. (Thanks @bdisp!)\n      * Fixes #562 - Background drawing issue. (Thanks @bdisp!)\n      * Fixes #517 - Focus and mouse handlers enahced (BREAKING CHANGE). (Thanks @bdisp!)\n      * Fixed resizing update and correct Toplevel colors without colors. (Thanks @bdisp!)\n      * Fixed #515, #518, #536, #540. (Thanks @bdisp!)\n      * Added Threading Scenario to UI catalog. (Thanks @bdisp!)\n      * Added support for F11 and F12 keys. (Thanks @bdisp!)\n      * Multiple improvements to Date/TimeField. (Thanks @bdisp!)\n      * Fixes #409 - Invoke does not cause Wakeup #501. (Thanks @bdisp!)\n      * Fixed Label text alignment. (Thanks @bdisp!)\n      * Added mouse features in the Unix version. Supports xterm-1006. (Thanks @bdisp!)\n      * Several StatusBar fixes. (Thanks @bdisp!)\n      * Tons of mouse improvements including mouse wheel support (e.g. #404, #409). (Thanks @bdisp!)\n      * Added a CloseFile method to the TextView as stated in #452. (Thanks @bdisp)\n      * Added a OpenSelectedItem event to the ListView #429. (Thanks @bdisp!)\n      * Fixes the return value of the position cursor in the TextField. (Thanks @bdisp!)\n      * Updates screen on Unix window resizing. (Thanks @bdisp!)\n      * Fixes the functions of the Edit-Copy-Cut-Paste menu for the TextField that was not working well. (Thanks @bdisp!)\n      * More robust error handing in Pos/Dim. Fixes #355 stack overflow with Pos based on the size of windows at startup. Added a OnResized action to set the Pos after the terminal are resized. (Thanks @bdisp!)\n      * Fixes #389 Window layouting breaks when resizing. (Thanks @bdisp!)\n      * Fixes #557 MessageBox needs to take ustrings (BREAKING CHANGE). (Thanks @tig!)\n      * Fixes ScrollView in several key ways. (Thanks @tig!)\n      *   Now supports Computed layout and has constructors that don't require parameters.\n      *   ScrollBarViews are now positioned using Computed layout versus error prone absolute\n      *   ScrollBarViews now correctly position themselves when one, either, or both are on/off.\n      *   IsVertical is now a public property that does the expected thing when changed\n      *   Mouse handling is better; there's still a bug where the mouse doesn't get grabbed by the ScrollView initially but I think this is a broader problem. I need @BDisp's help on this.\n      *   Supports \"infinite scrolling\" via the new OnDrawContent/DrawContent event on the View class.\n      *   The Scrolling Scenario was enhanced to demo dynamically adding/removing horizontal/vertical scrollbars (and to prove it was working right).\n      * The Checkbox.Toggled event is now an EventHandler event and passes previous state. (Thanks @tig!)\n      * Fixes #102 All Views now support parameterless constructors. (Thanks @Bdisp and @tig!)\n      * Fixes #583 Button can now be sized. Button now supports TextAlignment. (Thanks @Bdisp!)\n      * Fixes #447 All events are now defined in terms of Action instead of EventHanlder. BREAKING CHANGE. (Thanks @bdisp and @tig!)\n      * Fixes #421 Now builds on Linux with \"dotnet build\". (Thanks @AArnott!)\n      * MenuItem now supports checked/selected items. (Thanks @tig!)\n      * Label no longer incorreclty displays formfeed char. (Thanks @tig!)\n      * Fixes #645 - RadioGroup now supports unicode. (Thanks @tig!)\n      * Fixes #573 - RadioGroup supports Computed Layout. (Thanks @tig!)\n      * RadioGroup now uses a single, good looking, glyph. (Thanks @tig!)\n      * RadioGroup now supportrs the Action-based event pattern correctly. BREAKING CHANGE. (Thanks @tig!)\n      * ConsoleDriver and Drivers have new standard glyph definitions for things like right arrow. (Thanks @tig!)\n      * ScrollView updated to use pretty glyphs. (Thanks @tig!)\n      * Menubar now uses pretty arrow glyph for sub-menus. (Thanks @tig!)\n      * The project now has a growing set of unit tests (over 100 tests). (Thanks @tig!)\n      * View now has a Text property, implemented via the new TextFormatting class. (Thanks @tig!)\n        * TextAlignment is implemented once across all Views that support it.\n        * Unicode support is now much more robust and complete; dozens of bugs fixed.\n        * Any view dervied from View now has a Text property with multi-line text formatting, including word-wrap and hotkey support.\n        * Label is now mostly just an alias for View; supports Clicked\n        * Button is now a very thin class derived from View (no API changes).\n        * Dozens of unit tests for TextAlignment are provided reducing the chance of regressions.\n\n      0.81:\n      * Fix ncurses engine for macOS/Linux, it works again\n      * Fixes an issue with referencing views that have not been allocated yet causing a stack overflow\n      * New OnCloseMenu event on menus\n      * Button cursor position looks better\n      * Listview in single-selection mode uses a radio-button look\n      * Fixes a couple of crashes (356)\n      * Default the samples to work on Catalina\n\n      0.80: Jumbo update from BDisp:\n      * Fixed key events traversal for modal dialogs\n      * Fixes culture info of DataField from pr\n      * Fixes the rectangle drawing issue\n      * Redraw issue when setting coordinates of label\n      * Added sub menus into menu bar with mouse and key navigation\n      * Added Colors.Menu.Disabled to CursesDriver.cs\n      * Mouse text selection with cut, copy and paste on text fields\n      * Change sepChar from char to string in DateField\n      * Adding a disabled menu item in the demo file\n      * Fixes Button repainting issue when changing the text length to one smaller\n      * Fixes Redraw issue when setting coordinates of label\n      * Fixes ScrollView does not render some content\n      * Fixed bug in Button that caused a loop redraw calling TerminalResized\n      * Fixes a repaint issue (282)\n      * Mouse features added to FileDialog including wheel support.\n      * Switch netcoreapp target to netstandard2.0\n      * Added TextView.TextChanged event\n      * Fixes issue #306 async/await hang (#312)\n      * Replaced static driver initialization with property getter for reference passing in Core.cs::View class, this allows the library to be reinitialized at any time.\n      * Made the Shutdown method on Core.cs::Application class public, since there is no reason to keep it private. Applications can shutdown the library and revert the console to the initial stage by calling it.\n      * Fixed a memory-leak on Drivers/WindowsDriver class by destroying the generated screen buffers at library shutdown by calling CloseHandle.\n      * Minor change to Core.cs::Application.Init(Func) for better initialization status tracking, via backend property instead of relying on the Top field.\n      * Moved `ListView.ListWrapper` out of `ListView` migueldeicaza/gui.cs#313` (#315)\n      * Resizing the MessageBox width to accommodate all message text (#299)\n      * Timefield format with bounds values (#303)\n      * Implemented lower and upper bounds to TimeField\n      * Passing old text to the Changed event handler\n      * Extract methods on ListView to make it controlable from other controls\n\n      0.70: Bug fixes (320, 321, 306, 304, 291, 299, 303);  Surface ListView.ListWrapper, surface various internal methods for use in ListView; Allow list item selection; ; 0.65: Added new TimeField from Jörg Preiß; Fixes for Backtab by Martin Björkström;  ListView now supports simple selection;  Bug fixes by giladlevi, Daniel Cazzulino and Marius Ungureanu;  New Application.Run of T entry point by Daniel Cazzulino;   Added various View methods to bring forward, backwards and move views in the hierarchy;  Switch to Portable PDBs by Daniel Cazzulino;  Dims can now be compared by Daniel Cazzulino; OnMenuOpen handler by giladlevi;  Various memory usage optimizations by giladlevi;  FileDialog.FilePath is now a full path by Yanwei Wang;  ISupportInitialize/ISupportInitializeNotification is now supported thanks to the work from Daniel Cazzulino; Support for non-modal TopLevels by Daniel Cazzulino and Adrian Alonso; 0.24: the Windows driver implements WakeUp, allowing some scenarios like bug #207 to be fixed;\n      0.23: Better support for disabled menu items;  Raises text changed event after the internals have been updated; Fix Caps-NumLock;  Alt-HotKey now work on menus\n      0.22: Correct vertical scrollview behavior, Small curses driver fix for terminals without mouse support, TextView support for scrolling, Surface Used property on TextField, Surface Cursor on RadioGroup.\n\n      0.21: Introudce Attribute.Make to more easily create attributes, and fix a bug in the file panel.\n      0.20: Expose some of the CursesDriver APIs\n      0.19: PageUpDown updates (GaikwadPratik); Fixes in multi-line labels (hlfrye@gmail.com);  Support Delete char in TextView (Greg Amidon); Prevent empty TextViews from crashing;  Allow TextFields to be updated on the Changed event.\n      0.18: Fixes hotkeys for menus (Sang Kil); Fixes RemoveAll for all containers;  Allows Toplevels with no views; Fixes FileDialog layout; Prevent crash in TextView\n      0.17: Unix, dynamically load ncurses library to support different configurations, and not require -dev on Linux, various bug fixes.\n\n      0.16: Support for Shift-Tab on Windows (fix by @mholo65)\n\n      0.15: WindowsDriver fix for Legacy Console keyboard input (issue #105)\n\n      0.14: WindowsDriver fix for EventType size.\n\n      0.13: Fixes keyboard input for Alt-Gr and numbers.\n\n      0.12: Fixes the text editor merge line command.\n\n      0.11: Simplify TextField implementation, fixes a couple of editing bugs.\n\n      0.10: Fix unicode rendering for TextField, and bring F# example\n\n      0.9: File Open/File Save dialogs, HexView, Windows Driver allows resizing, mouse events, faster (thanks to Nick Van Dyck, nickvdyck for the contribution!), smaller bug fixes,\n\n      0.8: Completes keyboard support on Windows;  Fixes delete on Windows, some layout fixes.\n      0.7: terminal resizing on Linux propagates sizes with new layout system, and new features on the layout system (documented)\n      0.6: new layout system, multi-line textview editor, Linux bug fix for .NET Core\n      0.5: support Linux with .NET Core, Windows driver fixes.\n      0.4: hotkey handling fix for RadioButtons\n      0.3: Fix Windows key input to not echo characters on console, proper Fkey mapping\n      0.2: Auto-detect the best console",
  "requireLicenseAcceptance": false,
  "title": "Terminal.Gui is a framework for creating console user interfaces",
  "verbatimVersion": "0.89.4",
  "version": "0.89.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#dependencygroup/.netframework4.7.2",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#dependencygroup/.netframework4.7.2/microsoft.netframework.referenceassemblies",
          "@type": "PackageDependency",
          "id": "Microsoft.NETFramework.ReferenceAssemblies",
          "range": "[1.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#dependencygroup/.netframework4.7.2/nstack.core",
          "@type": "PackageDependency",
          "id": "NStack.Core",
          "range": "[0.14.0, )"
        }
      ],
      "targetFramework": ".NETFramework4.7.2"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#dependencygroup/.netstandard2.0/microsoft.netframework.referenceassemblies",
          "@type": "PackageDependency",
          "id": "Microsoft.NETFramework.ReferenceAssemblies",
          "range": "[1.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#dependencygroup/.netstandard2.0/nstack.core",
          "@type": "PackageDependency",
          "id": "NStack.Core",
          "range": "[0.14.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#Terminal.Gui.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 5870,
      "fullName": "Terminal.Gui.nuspec",
      "length": 15391,
      "name": "Terminal.Gui.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#lib/net472/Terminal.Gui.dll",
      "@type": "PackageEntry",
      "compressedLength": 95286,
      "fullName": "lib/net472/Terminal.Gui.dll",
      "length": 224768,
      "name": "Terminal.Gui.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#lib/net472/Terminal.Gui.xml",
      "@type": "PackageEntry",
      "compressedLength": 43328,
      "fullName": "lib/net472/Terminal.Gui.xml",
      "length": 335866,
      "name": "Terminal.Gui.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#lib/netstandard2.0/Terminal.Gui.dll",
      "@type": "PackageEntry",
      "compressedLength": 95252,
      "fullName": "lib/netstandard2.0/Terminal.Gui.dll",
      "length": 224768,
      "name": "Terminal.Gui.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#lib/netstandard2.0/Terminal.Gui.xml",
      "@type": "PackageEntry",
      "compressedLength": 43328,
      "fullName": "lib/netstandard2.0/Terminal.Gui.xml",
      "length": 335866,
      "name": "Terminal.Gui.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.08.25.14.06.59/terminal.gui.0.89.4.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9469,
      "fullName": ".signature.p7s",
      "length": 9469,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "csharp",
    "terminal",
    "c#",
    "f#",
    "gui",
    "toolkit",
    "console"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}