{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Thomas PIERRAIN, Cyrille DUPUYDAUBY, Rui CARVALHO, Marc-Antoine LATOUR",
  "catalog:commitId": "0831cd20-6f1d-427b-9713-7e324b5377e6",
  "catalog:commitTimeStamp": "2018-10-31T21:51:05.5693387Z",
  "copyright": "Copyright 2014-2017  Thomas PIERRAIN, Cyrille Dupuydauby",
  "created": "2018-02-10T08:49:31.423Z",
  "description": "NFluent is an ergonomic check library which aims to fluent your .NET TDD experience (based on simple Check.That() check statements). NFluent aims your tests to be fluent to write (with an happy 'dot' auto completion experience), fluent to read (i.e. as close as possible to plain English expression), but also fluent to troubleshoot, in a less-error-prone way comparing to the classical .NET test frameworks. NFluent is directly, but also freely, inspired by the awesome Java FEST fluent check/reflection library (http://fest.easytesting.org/).",
  "iconUrl": "https://raw.github.com/tpierrain/NFluent/master/Images/Icon.png",
  "id": "NFluent",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2018-10-31T21:50:58.793Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0",
  "listed": true,
  "packageHash": "rhbb3TQR5Rm9g+n33G7Lw8gr7sJ/h1LU0pzWpncPKIJW7UdkUR7ObDCKbLdiGAUPADpvyCS7CtLbOV5S/QEX9Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 614635,
  "projectUrl": "http://www.n-fluent.net/",
  "published": "2018-02-10T08:49:31.423Z",
  "releaseNotes": "## V 2.2.0\n\n---------------\n\nFlexible property and field based comparison is now available. Examples:\n\n* Check.That(sut)**.Considering().Public.Properties**.IsEqualTo(expected);\n\n* Check.That(sut)**.Considering().Public.Fields.And.Public.Properties**.IsEqualTo(expected);\n\n* Check.That(sut)**.Considering().Public.Fields.Excluding(\"coordX\", \"child.address\")**.IsEqualTo(expected);\n\nSyntax is:\n\n* Check.That(sut)**.Considering().(Public|NonPublic|All).(Fields.Properties)[.And.(Public|NonPublic|All).(Fields.Properties)][Excluding(\"fielda\", \"sub.fieldb\")]**.IsEqualTo(expected);\n\n* **Considering()** is supported by: _IsEqualTo(), IsNotEqualTo(), AsSameValueAs(), HasDifferentValueThan(), IsInstanceOf\\<type\\>()_ [checks if fields/properties are present],\n\n_IsNotInstanceOf\\<type\\>()_,  _HasSameValueAs()_, _IsSameReferenceAs(), _IsDistinctFrom()_, _HasDifferentValueThan()_\n\n### New feature(s)\n\n* **Object**\n\n* New check **IsInstanceOfType(Type type)** which is equivalent to *IsInstanceOf\\<type\\>()*, in a non generic form for parameterized tests.\n\n* New check **IsNoInstanceOfType(Type type)** which is equivalent to *IsNotInstanceOf\\<type\\>()*, in a non generic form for parameterized tests.\n\n* New check **InheritsFromType(Type type)** which is equivalent to *InheritsFrom\\<type\\>()*, in a non generic form for parameterized tests.\n\n* **Enum**\n\n- New check **HasFlag(xxx)** that checks if a flag is present in an enum value.\n\n* **Code**\n\n* New check **ThrowsType(Type type)** which is equivalent to *Throws\\<type\\>*, in a non generic form for parameterized tests.\n\n### Changes\n\n* Improved error messages for missing fields(and properties) for reflection based checks.\n\n### Fixes\n\n* Fix issue with overloaded member/properties for HasFieldswithSameValues(...) (#219)\n\n### GitHub Issues\n\n* #219, #218, #216, #215, #214, #121\n\n## V 2.1.1\n\n---------------\n\nBug fix(es):\n\n* fix issue #215: null reference exception triggered by HasFields... on null interface fields.\n\nV 2.1.0\n\n--------------\n\nNew feature(s):\n\n- Enumerable:\n\n- Breaking change: equality for Enumerable is now content based (instead of reference based). See issue #209. You can revert adding: Check.EqualMode = EqualityMode.Equals in your test set up code\n\n- New check ContainsOnlyElementsThatMatch which checks that all items verify a given predicate.\n\n- New Check: IsOneOf checks if the value belongs to a list of authorized value. Check.That(sut).IsOneOf(a, b, c, ...) fails if sut is different from all valid values\n\n- Improved error messages for IsEqualTo() on floating point types. Difference is displayed when small, suggestion to use IsCloseTo when difference is really small (#205).\n\n- Initial support for dynamics (issue #85):\n\n- Entry point is: Check.ThatDynamic()\n\n- Available checks are: IsNotNull(), IsEqualTo(...), IsSameReferenceAs(...)\n\n- And keyword is available\n\n- Not keyword is available\n\n- You can specify the maximum size (before truncate) for strings in error messages using **Check.StringTruncationLength** property\n\n--------------\n\nBug Fixe(s):\n\n- Fixed support of array types for HasFielsWithSameValues (issue #200)\n\n- Fixed some stack overflow exceptions (issue #210).\n\n- Fixed confusing examples about array item related checks in the readme\n\nV 2.00\n\n--------------\n\nNew feature(s):\n\n* Support for NetStandard > 1.3\n\n* Support for Net.Core > 1.0\n\n* Compatible for Net > 2.0\n\n* Built for: 2.0, 3.0, 3.5, 4.0, 4.5, NetStandard 1.3\n\n* All: introduce: HasSameValueAs(x) that perform comparison using 'operator==' instead of 'Equals'.\n\n* All: introduce: HasAValueDifferentFrom(x) that perform comparison using 'operator!=' instead of '!Equals'.\n\n* Streams: introduce HasSameSequenceOfBytesAs() check.\n\n* Numbers: introduce IsPositiveOrZero() check.\n\n* Numbers: introduce IsNegativeOrZero() check.\n\n* FloatingNumbers (float, double): introduce IsCloseTo(expected, within) check for estimated value.\n\n* Exception: introduce the DueTo\\<InnerException\\> as an extension to Throws\\<Exception\\>. It verifies that the checked exception was triggered by a specific exception. This is done by scanning the 'innerException' chain until the expected type is identified. Further checking is done on the inner exception.\n\n* Exception: introduce WithProperties( expression, expectedValue) to check the value of any exception members, thanks to a selector expression.\n\n* IEnumerable: introduce HasElementAt(int index) which checks for an item as a specific index. Furthermore, this item can be checked as well thanks to 'Which'. E.g: Check.That(_collection).HasElementAt(3).Which.IsEqualTo(\"foo\").\n\n* IEnumerable: introduce HasFirstElement() which checks for the first item. Furthermore, this item can be checked as well thanks to 'Which'. E.g: Check.That(_collection).HasFirstElement().Which.IsEqualTo(\"foo\").\n\n* IEnumerable: introduce HasLastElement() which checks for the last item. Furthermore, this item can be checked as well thanks to 'Which'. E.g: Check.That(_collection).HasLastElement().Which.IsEqualTo(\"foo\").\n\n* IEnumerable: introduce HasOneElementOnly() which checks for the first and single item. Furthermore, this item can be checked as well thanks to 'Which'. E.g: Check.That(_collection).HasOneElementOnly().Which.IsEqualTo(\"foo\").\n\n* IEnumerable: introduce HasElementThatMatches( bool predicate()) which checks that an enumerable has at least on item matching the given predicate. You can use 'Which' to check further this item. E.g.: Check.That(_collection).HasItemThatMatches((_) => _.StartWith(\"foo\")).Which.IsEqualTo(\"foobar\").\n\n* IDictionary\\<K,V\\>: now explicitely supported.\n\n* IDictionary\\<K,V\\>: introduce ContainsEntry\\<K, V\\>(K key, V value) which checks that a dictionary contains a specific value for a given key.\n\n* Hashtable: now explicitely supported.\n\n--------------\n\nChange(s):\n\n* IEnumerable: improved description within error messages: partial dump around first difference for large sets\n\n* IDictionnary: no longer supported. Hashtable is supported instead\n\n* Numbers: introduce IsStrictlyPositive() as a substitute for IsPositive() which is now obsolete.\n\n* Numbers: introduce IsStrictlyNegative() as a substitute for IsNegative() which is now obsolete.\n\n* Numbers: introduce IsStrictlyGreaterThan() as a substitute for IsGreaterThan() which is now obsolete.\n\n* Numbers: introduce IsStrictlyLessThan() as a substitute for IsLessThan() which is now obsolete.\n\n* Floating Numbers: introduce IsCloseTo() to check if a number is close to another one.\n\n* Check.ThatCode(...).Throws\\<T\\>() now requires T to be an exception. This restriction ensures only Exceptions are proposed in autocompletion.\n\n* Improve error messages (consistency and relevance).\n\n* Strings: generate specific error message using IsEqualTo() when the actual string is empty\n\n* Strings: generate specific error message using IsEqualTo() when the expected string is empty\n\n* Strings: provides part of string where first difference occurs even when strings have different lenghts\n\n* Objects: IsSameReferenceAs supersede IsSameReferenceThan (now flagged as obsolete)\n\n* Objects: Dump hascodes only when NFluent cannot highligth difference.\n\n* Check.That(Action) can no longer be used (error, obsolete)\n\n* Check.That(Func\\<T\\>) can no longer be used (error, obsolete)\n\n* Simplify the way you can extend NFluent by adding your own checks. Now, you can call: var checker = ExtensibilityHelper.ExtractChecker(check);\n\nat the beginning of your check extension method, and then rely on its ExecuteCheck() or BuildMessage() helper methods to do the job. Note: the Checker is part of the NFluent.Extensibility namespace.\n\n* Reviewing of public elements: Some classes are no longer public. They should never have been in the first case.\n\n* Signature of ILambdaExceptionCheck has been updated to refer the checked exception type (instead of RunTrace). This is a breaking change for edge cases, that will impact your extension method on exceptions, if any; it can also impact your tests if you use the explicit signature.\n\n--------------\n\nBug Fixe(s):\n\n* Fix the inversion between expected and actual error message for the .WithMessage checks on exception.\n\n* Fix the issue with null value on Check.That(...).IsBefore(...)\n\n* HasFieldsWithSameValues now recurse along the hierarchy class (Fix for #141)\n\n* Fix stack overflow triggered by HasFieldsWithSameValues() on object with reference loop (#148)\n\n* Properly escaped strings when generating error messages.\n\n* GitHub issues: #124, #133, #141, #148, #153, #154, #156, #159, #164, #165, #167, #174, #177, #178, #179, #187",
  "requireLicenseAcceptance": false,
  "summary": "NFluent is an ergonomic check library which aims to fluent your .NET TDD experience.",
  "title": "NFluent, smooth your .NET TDD experience!",
  "verbatimVersion": "2.2.0",
  "version": "2.2.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#NFluent.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3789,
      "fullName": "NFluent.nuspec",
      "length": 10438,
      "name": "NFluent.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/netstandard1.3/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 61792,
      "fullName": "lib/netstandard1.3/NFluent.dll",
      "length": 169472,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/netstandard1.3/NFluent.xml",
      "@type": "PackageEntry",
      "compressedLength": 25781,
      "fullName": "lib/netstandard1.3/NFluent.xml",
      "length": 321774,
      "name": "NFluent.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net45/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 60975,
      "fullName": "lib/net45/NFluent.dll",
      "length": 165376,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net45/NFluent.xml",
      "@type": "PackageEntry",
      "compressedLength": 25781,
      "fullName": "lib/net45/NFluent.xml",
      "length": 321774,
      "name": "NFluent.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net40/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 58961,
      "fullName": "lib/net40/NFluent.dll",
      "length": 159232,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net40/NFluent.XML",
      "@type": "PackageEntry",
      "compressedLength": 25228,
      "fullName": "lib/net40/NFluent.XML",
      "length": 316984,
      "name": "NFluent.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net35/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 58791,
      "fullName": "lib/net35/NFluent.dll",
      "length": 158720,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net35/NFluent.XML",
      "@type": "PackageEntry",
      "compressedLength": 25228,
      "fullName": "lib/net35/NFluent.XML",
      "length": 316984,
      "name": "NFluent.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net30/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 59448,
      "fullName": "lib/net30/NFluent.dll",
      "length": 160768,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net30/NFluent.xml",
      "@type": "PackageEntry",
      "compressedLength": 25395,
      "fullName": "lib/net30/NFluent.xml",
      "length": 317760,
      "name": "NFluent.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net20/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 59436,
      "fullName": "lib/net20/NFluent.dll",
      "length": 160768,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/net20/NFluent.xml",
      "@type": "PackageEntry",
      "compressedLength": 25395,
      "fullName": "lib/net20/NFluent.xml",
      "length": 317760,
      "name": "NFluent.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/portable-net45%2Bsl5%2Bnetcore45%2BMonoAndroid1%2BMonoTouch1/NFluent.dll",
      "@type": "PackageEntry",
      "compressedLength": 59882,
      "fullName": "lib/portable-net45%2Bsl5%2Bnetcore45%2BMonoAndroid1%2BMonoTouch1/NFluent.dll",
      "length": 163328,
      "name": "NFluent.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#lib/portable-net45%2Bsl5%2Bnetcore45%2BMonoAndroid1%2BMonoTouch1/NFluent.XML",
      "@type": "PackageEntry",
      "compressedLength": 25470,
      "fullName": "lib/portable-net45%2Bsl5%2Bnetcore45%2BMonoAndroid1%2BMonoTouch1/NFluent.XML",
      "length": 319306,
      "name": "NFluent.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.10.31.21.51.05/nfluent.2.2.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "tdd",
    "bdd",
    "test",
    "fluent",
    "check",
    "checks",
    "easy",
    "nunit",
    "xunit",
    "mbunit",
    "mstestsucks"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}