{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.00.57.33/sqlserverdialog.sqlserverfolderfiledialog.1.0.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Watcharachai Kanjaikaew",
  "catalog:commitId": "a2ee7556-3b03-4084-8b5f-1dac69d22bed",
  "catalog:commitTimeStamp": "2015-02-06T00:57:33.913454Z",
  "created": "2014-08-04T11:16:09.073Z",
  "description": "\"SQL Server Dialog\" is a library for different a Dialog use to connect to remote SQL Server host for access folder and file path. This dialogs is written in C# with .NET Framework 3.5. It is very easy to use, just input Server, User and Password. Then use it as you use SaveFileDialog, OpenFileDialog or FolderBrowserDialog.",
  "id": "SQLServerDialog.SQLServerFolderFileDialog",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/mit-license.php",
  "packageHash": "KXNmd6u3qZGLCGYRAxNgM1yCUwv2GcoEpIbUcXex8IKBf55DR9O2MBAqY/CPEEKtKkzoZk91bez74xAwyd2H6g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 11581,
  "projectUrl": "https://sqlserverdialog.codeplex.com/",
  "published": "2014-08-04T11:16:09.073Z",
  "releaseNotes": "- Input server, user and password\n- Show folder and file in treeview\n- Customize icon\n- Filter file extension\n- Skip system generate folder and file",
  "requireLicenseAcceptance": false,
  "title": "SQL Server Folder File Dialog",
  "version": "1.0.3",
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}