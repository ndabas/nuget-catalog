{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Michał Bryłka, Leszek Kowalski",
  "catalog:commitId": "b1972e09-ce0b-4890-b897-41083e846496",
  "catalog:commitTimeStamp": "2024-01-01T22:43:31.5101288Z",
  "copyright": "Copyright © Michał Bryłka. Icon by http://www.iconka.com",
  "created": "2024-01-01T22:40:28.653Z",
  "description": "Contains various parser optimized for speed and no allocation.\n\t\t\t\tThis package was built from the source at /tree/c1aa68474b5c7a8b1d8386c0b724b31b61573308",
  "iconFile": "properties\\icon.png",
  "id": "Nemesis.TextParsers",
  "isPrerelease": true,
  "lastEdited": "2024-01-01T22:43:29.133Z",
  "licenseExpression": "MIT OR Apache-2.0",
  "licenseUrl": "https://licenses.nuget.org/MIT%20OR%20Apache-2.0",
  "listed": true,
  "packageHash": "ESK2cdYjIJyN5r+SBq599PdXJcS5je7is5m9855rt8Os8V4SjYsHR0v5LUaclbMKCAUqhi8H5aWnGXcsdGmOUg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 491927,
  "projectUrl": "https://github.com/nemesissoft/Nemesis.TextParsers",
  "published": "2024-01-01T22:40:28.653Z",
  "readmeFile": "properties\\README.md",
  "releaseNotes": "# Release 2.9 - Source code generator for enum types\n\n## What's Changed\n* Implement source code generator for enum by @MichalBrylka in https://github.com/nemesissoft/Nemesis.TextParsers/pull/16\n\n**Full Changelog**: https://github.com/nemesissoft/Nemesis.TextParsers/compare/v2.7.2...2.9\n\n## Code generator for enum types\nWith this feature it is enough to annotate enum with 2 attributes:\n```csharp\n[Auto.AutoEnumTransformer(\n    //1. optionally pass parser settings\n    CaseInsensitive = true, AllowParsingNumerics = true, \n    //2. TransformerClassName can be left blank. In that case the name of enum is used with \"Transformer\" suffix\n    TransformerClassName = \"MonthCodeGenTransformer\",\n    //3. optionally pass namespace to generate the transformer class within. If not provided the namespace of the enum will be used\n    TransformerClassNamespace = \"ABC\"\n)]\n//4. decorate enum with TransformerAttribute that points to automatically generated transformer\n[Transformer(typeof(ABC.MonthCodeGenTransformer))]\npublic enum Month : byte\n{\n    None = 0,\n    January = 1, February = 2, March = 3,\n    April = 4, May = 5, June = 6,\n    July = 7, August = 8, September = 9,\n    October = 10, November = 11, December = 12\n}\n```\nThis in turn generates the following parser using best practices (some lines are ommited for brevity):\n\n<details>\n<summary>Source code for generated parser</summary>\n\n```csharp\npublic sealed class MonthCodeGenTransformer : TransformerBase<Nemesis.TextParsers.CodeGen.Sample.Month>\n{\n    public override string Format(Nemesis.TextParsers.CodeGen.Sample.Month element) => element switch\n    {\n        Nemesis.TextParsers.CodeGen.Sample.Month.None => nameof(Nemesis.TextParsers.CodeGen.Sample.Month.None),\n        Nemesis.TextParsers.CodeGen.Sample.Month.January => nameof(Nemesis.TextParsers.CodeGen.Sample.Month.January),\n        \n        // ...\n\n        Nemesis.TextParsers.CodeGen.Sample.Month.December => nameof(Nemesis.TextParsers.CodeGen.Sample.Month.December),\n        _ => element.ToString(\"G\"),\n    };\n\n    protected override Nemesis.TextParsers.CodeGen.Sample.Month ParseCore(in ReadOnlySpan<char> input) =>\n        input.IsWhiteSpace() ? default : (Nemesis.TextParsers.CodeGen.Sample.Month)ParseElement(input);\n\n    private static byte ParseElement(ReadOnlySpan<char> input)\n    {\n        if (input.IsEmpty || input.IsWhiteSpace()) return default;\n        input = input.Trim();\n        if (IsNumeric(input) && byte.TryParse(input\n#if NETFRAMEWORK\n    .ToString() //legacy frameworks do not support parsing from ReadOnlySpan<char>\n#endif\n            , out var number))\n            return number;\n        else\n            return ParseName(input);\n\n\n        static bool IsNumeric(ReadOnlySpan<char> input) =>\n            input.Length > 0 && input[0] is var first &&\n            (char.IsDigit(first) || first is '-' or '+');    \n    }\n\n    private static byte ParseName(ReadOnlySpan<char> input)\n    {    \n        if (IsEqual(input, nameof(Nemesis.TextParsers.CodeGen.Sample.Month.None)))\n            return (byte)Nemesis.TextParsers.CodeGen.Sample.Month.None;            \n\n        else if (IsEqual(input, nameof(Nemesis.TextParsers.CodeGen.Sample.Month.January)))\n            return (byte)Nemesis.TextParsers.CodeGen.Sample.Month.January;            \n\n        else if (IsEqual(input, nameof(Nemesis.TextParsers.CodeGen.Sample.Month.February)))\n            return (byte)Nemesis.TextParsers.CodeGen.Sample.Month.February;            \n\n        // ...         \n\n        else if (IsEqual(input, nameof(Nemesis.TextParsers.CodeGen.Sample.Month.December)))\n            return (byte)Nemesis.TextParsers.CodeGen.Sample.Month.December;            \n\n        else throw new FormatException(@$\"Enum of type 'Nemesis.TextParsers.CodeGen.Sample.Month' cannot be parsed from '{input.ToString()}'.\nValid values are: [None or January or February or March or April or May or June or July or August or September or October or November or December] or number within byte range. \nIgnore case option on.\");        \n\n        static bool IsEqual(ReadOnlySpan<char> input, string label) =>\n            MemoryExtensions.Equals(input, label.AsSpan(), StringComparison.OrdinalIgnoreCase);\n    }\n}\n```\n\n</details>",
  "repository": "",
  "verbatimVersion": "0.0.0-alpha.0.335",
  "version": "0.0.0-alpha.0.335",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#dependencygroup/net6.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net6.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#dependencygroup/net7.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net7.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#dependencygroup/.netstandard2.0/system.memory",
          "@type": "PackageDependency",
          "id": "System.Memory",
          "range": "[4.5.5, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#dependencygroup/.netstandard2.1/system.runtime.compilerservices.unsafe",
          "@type": "PackageDependency",
          "id": "System.Runtime.CompilerServices.Unsafe",
          "range": "[6.0.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#Nemesis.TextParsers.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2186,
      "fullName": "Nemesis.TextParsers.nuspec",
      "length": 5884,
      "name": "Nemesis.TextParsers.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/net6.0/Nemesis.TextParsers.pdb",
      "@type": "PackageEntry",
      "compressedLength": 33741,
      "fullName": "lib/net6.0/Nemesis.TextParsers.pdb",
      "length": 72120,
      "name": "Nemesis.TextParsers.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/net7.0/Nemesis.TextParsers.pdb",
      "@type": "PackageEntry",
      "compressedLength": 34148,
      "fullName": "lib/net7.0/Nemesis.TextParsers.pdb",
      "length": 73052,
      "name": "Nemesis.TextParsers.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/netstandard2.0/Nemesis.TextParsers.pdb",
      "@type": "PackageEntry",
      "compressedLength": 33828,
      "fullName": "lib/netstandard2.0/Nemesis.TextParsers.pdb",
      "length": 74352,
      "name": "Nemesis.TextParsers.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/netstandard2.1/Nemesis.TextParsers.pdb",
      "@type": "PackageEntry",
      "compressedLength": 32326,
      "fullName": "lib/netstandard2.1/Nemesis.TextParsers.pdb",
      "length": 69636,
      "name": "Nemesis.TextParsers.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/net6.0/Nemesis.TextParsers.dll",
      "@type": "PackageEntry",
      "compressedLength": 81781,
      "fullName": "lib/net6.0/Nemesis.TextParsers.dll",
      "length": 200704,
      "name": "Nemesis.TextParsers.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/net7.0/Nemesis.TextParsers.dll",
      "@type": "PackageEntry",
      "compressedLength": 82846,
      "fullName": "lib/net7.0/Nemesis.TextParsers.dll",
      "length": 203776,
      "name": "Nemesis.TextParsers.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/netstandard2.0/Nemesis.TextParsers.dll",
      "@type": "PackageEntry",
      "compressedLength": 84248,
      "fullName": "lib/netstandard2.0/Nemesis.TextParsers.dll",
      "length": 205824,
      "name": "Nemesis.TextParsers.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#lib/netstandard2.1/Nemesis.TextParsers.dll",
      "@type": "PackageEntry",
      "compressedLength": 80493,
      "fullName": "lib/netstandard2.1/Nemesis.TextParsers.dll",
      "length": 196608,
      "name": "Nemesis.TextParsers.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#properties/icon.png",
      "@type": "PackageEntry",
      "compressedLength": 7680,
      "fullName": "properties/icon.png",
      "length": 7675,
      "name": "icon.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#properties/README.md",
      "@type": "PackageEntry",
      "compressedLength": 3898,
      "fullName": "properties/README.md",
      "length": 11258,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.01.01.22.43.31/nemesis.textparsers.0.0.0-alpha.0.335.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11517,
      "fullName": ".signature.p7s",
      "length": 11517,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "split",
    "stringSplit",
    "tokenize",
    "token",
    "parse",
    "format",
    "list",
    "dictionary",
    "TextConverter",
    "ReadOnlySpan",
    "Span",
    "Memory",
    "fast",
    "allocation",
    "noAllocation"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}