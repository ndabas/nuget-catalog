{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.17.07.32.19/managedbass.0.12.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mathew Sachin",
  "catalog:commitId": "7b4f1905-1ee1-435e-a404-dcb977f2d8c0",
  "catalog:commitTimeStamp": "2016-02-17T07:32:19.5321594Z",
  "copyright": "(c) 2015 Mathew Sachin",
  "created": "2016-02-17T07:31:43.8Z",
  "description": "Free OpenSource .Net Wrapper around un4seen Bass and most of its addons.\nThis project is currently in development.\nYou can contribute to it on GitHub.\n\nSamples available on GitHub Repository\n\nThe Library is compiled for AnyCPU.\nBut the Bass dlls need to be checked for x64 or x86.\nPut the Bass dlls in the same folder as ManagedBass.dll.\nManagedBass does not need to be licensed for Commercial use, but bass and many of the addons have to be.\nCheck the below website for more details\nBass dlls are available at http://www.un4seen.com/bass\nBass and its Addons are trademarks of their respective owners.",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.17.07.32.19/managedbass.0.12.0.json#frameworkassemblygroup/.netframework4.0",
    "assembly": "System",
    "targetFramework": ".NETFramework4.0"
  },
  "id": "ManagedBass",
  "isPrerelease": false,
  "language": "en-GB",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "http://mit-license.org/",
  "listed": true,
  "packageHash": "BEVLn+qblve+Tx6cQr8Y/WuKAcwYX5RRCh9bFsmnNmr839NgeDfDx0GQy+odgLDV0+LgaSr+784dZXIsD87dtA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 148282,
  "projectUrl": "https://github.com/MathewSachin/ManagedBass/",
  "published": "2016-02-17T07:31:43.8Z",
  "releaseNotes": "* More XML Documentation.\n* Doing [In][Out] mashalling where manual pinning can be avoided.\n* Improved WaveFileWriter.\n* Common Recording/Loopback Sample.\n* Added Extensions.SpeakerN().\n* Device objecs can now be retrieved by user using static Get(int Device);\n\nBass\n-------------------------\n* Added ChannelGetData() byte[], short[], int[], float[] overloads.\n* Added SampleSetData() byte[], short[], int[], float[] overloads.\n* Added SampleGetData() byte[], short[], int[], float[] overloads.\n* Added IsSlidableAttribute()\n* Added StreamPutData() byte[], short[], int[], float[] overloads.\n* Added StreamPutFileData() byte[], short[], int[], float[] overloads.\n* Init() provides Win, ClsID defaulted to IntPtr.Zero.\n* Added DeviceInitFlags.DMix.\n* Added MemoryChannel short[] constructor.\n* virtual Channel.Start(), Pause(), Stop().\n* virtual Channel.Read().\n* Fix Recording.Stop().\n* Added PlaybackDevice.Start(), Pause(), Stop()\n\nBassMix\n-------------------------\n* Added ChannelGetData() byte[], short[], int[], float[] overloads.\n\nBassEnc\n-------------------------\n* Added AddChunk() byte[] overload.\n* Added EncodeWrite() byte[], short[], int[], float[] overloads.\n\nBassWasapi\n-------------------------\n* Renamed Read to GetData and added float[] overload.\n* Renamed Write to PutData and added float[] overload.\n* Removed WasapiDevice.Read() int[], byte[], short[] overloads.\n* Removed WasapiDevice.Write() int[], byte[], short[] overloads.\n* Loopback constructor: IncludeSilence defaults to true.\n\nBassWma\n-------------------------\n* Corrected EncodeOpenNetwork(): EntryPoint = \"BASS_WMA_EncodeOpenNetworkMulti\".",
  "requireLicenseAcceptance": false,
  "summary": "Free OpenSource .Net Wrapper for Un4seen Bass.",
  "title": "ManagedBass",
  "verbatimVersion": "0.12.0",
  "version": "0.12.0",
  "tags": [
    "C#",
    "Bass",
    "Bass.Net",
    "ManagedBass",
    "wasapi",
    "asio",
    "mo3",
    "recording",
    "microphone",
    "loopback",
    "Audio",
    "music",
    "un4seen",
    "mix",
    "midi",
    "mixer",
    "aac",
    "ac3",
    "alac",
    "flac",
    "tta",
    "mp3",
    "wav",
    "adx",
    "aix",
    "ape",
    "mpc",
    "ofr",
    "opus",
    "spx",
    "wv",
    "free",
    "open",
    "source",
    "cd",
    "enc",
    "encode",
    "encoder",
    "decoder",
    "playback",
    "fx",
    "reverse",
    "tempo",
    "pitch",
    "frequency",
    "pan",
    "balance",
    "plugin",
    "wma",
    "effects",
    "reverb",
    "autowah",
    "bqf",
    "chorus",
    "compressor",
    "damp",
    "distortion",
    "dsp",
    "echo",
    "peak",
    "level",
    "phaser",
    "rotate",
    "ping",
    "pong",
    "tags",
    "id3",
    "mp4",
    "mod",
    "ogg",
    "mp2",
    "mp1",
    "aiff",
    "m2a",
    "mpa",
    "m1a",
    "mpg",
    "mpeg",
    "aif",
    "mp3pro",
    "bwf",
    "mus",
    "s3m",
    "xm",
    "it",
    "mtm",
    "umx",
    "mdz",
    "s3z",
    "float",
    "itz",
    "xmz",
    "cda",
    "disc",
    "url",
    "bpm",
    "eax",
    "winamp",
    "hls",
    "streaming",
    "live",
    "http"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}