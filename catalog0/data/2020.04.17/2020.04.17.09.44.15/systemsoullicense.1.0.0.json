{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Prashant Vijay Manjule",
  "catalog:commitId": "89116584-3c59-4575-8ebf-54d0ef29e8bb",
  "catalog:commitTimeStamp": "2020-04-17T09:44:15.3499037Z",
  "copyright": "SystemSoulSoftware",
  "created": "2020-04-17T09:42:01.21Z",
  "description": "1. Creates unique UID for client software based on System Hardware(CPU,Motherboard,Hard-drive)\n(UID acts as Private Key for that unique system)\n2. Allows to send Encrypted license string very easily to client system, It verifies license string and works on only that particular system\n3. This method allows software developers or company to store more information about software/developer/distributor services/features/client\n4. It gives control for locking and unlocked the client software features, saving time of developers for making more version for same software with changing features\n5. It take cares about trial version too for any number of days\n6. It secures the License timeline by Checking DateTime online during registration\n7. It unlocks all hardware information to developers\n8. It has all pre-build and custom function that developer can access at every process of licensing for making more complex secure code\n\n​",
  "iconFile": "logo_l.png",
  "id": "SystemSoulLicense",
  "isPrerelease": false,
  "lastEdited": "2020-04-17T09:44:03.867Z",
  "licenseFile": "tac.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "XiiQ65nM1EEcrnrtcOGbfQztM4zh3iX82HOUs5mObmjUn4MMjSDkMDFIhFnlyTek88qDZPzpQo+ytZQFYqzLOw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 65202,
  "projectUrl": "https://www.systemsoulsoftwares.com/license-api",
  "published": "2020-04-17T09:42:01.21Z",
  "releaseNotes": "Developers can use this DLL in their code but they need to download our Software to easily create secure license... visit https://www.systemsoulsoftwares.com/license-api for more updates\n\nLicense API (SystemSoulLicense.dll) (you will find API in secureLicense Pro setup files)\n\n​\n\n[CheckValidness]\nbool bool_result = CheckValidness.isValid(string _licensePath, string _UID, string _securekey, string _softwareName,string _registryName)\n\n_licensePath    : file path of license file(.ssLic)\n_UID        : UID of target/client system\n_securekey    : complex string for making license more secure\n_softwareName    : name of the software(unique identifier if your company has other softwares for license)\n_registryName    : for protected trial mode create registry name(unique for different softwares)\n\nbool_result     : true     = (1.if License provided is valid of current desktop having '_UID' for the software '_softwareName' or 2. If the Free Trial period is still valid)\n        : false    = (1.if License provided is not for current system, license is not real or 2. Trial Period is over)\n\n-------------------------------------------------------------------\n\n[TrialModeInfo]\n\nTrialModeInfo.createTrial(string _registryName, string UID, string _securekey,int _trialDays)                      \n_trialDays    : no of trial days you want to add\n\n----------\nNullable<bool> bool_result = TrialModeInfo.isTrial(string _licensePath,string _UID,string _securekey,string _softwareName,string _registryName)\nbool_result     : null     = if license is found and trial period is not going to check\n        : true     = (If the Free Trial period is still valid)\n        : false    = (Trial Period is over)\n\n----------\nNullable<bool> bool_result = TrialModeInfo.Trial_RegistryExists(string _registryName)\nbool_result     : true    = if trial registry key not found\n        : false    = if trial registry key found\n\n----------\nNullable<DateTime> dt    = TrialModeInfo.Trial_Starts(string _registryName)\ndt        : if trial starting date exists in registry it returns decrypted date, if date is manupulated or not exists yet it returns null\n----------\nNullable<DateTime> dt    = TrialModeInfo.Trial_Ends(string _registryName)\ndt        : if trial ending date exists in registry it returns decrypted date, if date is manupulated or not exists yet it returns null\n\n----------\ndouble _double    : TrialModeInfo.TrialEndDays(string _registryName, string UID, string _securekey)\n_double        : decrypts the trial period from dates stored in registry (left trial period days basically it returns integer as number of days)\n\n-------------------------------------------------------------------\n\n[GetLicense_Info]\n    \n//Reload the license for getting license info anytime untile the software running\nNullable<bool> bool_result= GetLicense_Info.Reload(string _licensePath, string _UID, string _securekey,string _softwareName)\nbool_result     : null     = license not exists at path\n        : true     = (if the license is valid for running system)\n        : false    = (if license is not valid for running system)\n\n\n//after the realod if license is valid you can get any information from license from these functions\n    public class GetLicense_Info\n    {\n        public string UID ()\n\n        public string Customer_Id ()\n        public string Customer_Name ()\n        public string Customer_Business ()\n        public string Customer_Location ()\n        public string Customer_Contact ()\n        public string Customer_Mail ()\n\n        public string Distributor_Id ()\n        public string Distributor_Name ()\n        public string Distributor_Location ()\n        public DateTime Distributor_Service_starts ()\n        public DateTime Distributor_Service_ends ()\n        public string Distributor_Contact ()\n        public string Distributor_Mail ()\n\n        public DateTime License_Creation ()\n        public DateTime License_Starts ()\n        public DateTime License_Ends ()\n        public DateTime License_Updated ()\n\n        public string Software_Name ()\n        public int Max_Users ()\n\n        public Nullable<bool> Software_Feature_1 ()\n        public Nullable<bool> Software_Feature_2 ()\n        public Nullable<bool> Software_Feature_3 ()\n        public Nullable<bool> Software_Feature_4 ()\n        public Nullable<bool> Software_Feature_5 ()\n        public Nullable<bool> Software_Feature_6 ()\n        public Nullable<bool> Software_Feature_7 ()\n        public Nullable<bool> Software_Feature_8 ()\n        public Nullable<bool> Software_Feature_9 ()\n        public Nullable<bool> Software_Feature_10 ()\n        public Nullable<bool> Software_Feature_11 ()\n        public Nullable<bool> Software_Feature_12 ()\n        public Nullable<bool> Software_Feature_13 ()\n        public Nullable<bool> Software_Feature_14 ()\n        public Nullable<bool> Software_Feature_15 ()\n        public Nullable<bool> Software_Feature_16 ()\n        public Nullable<bool> Software_Feature_17 ()\n        public Nullable<bool> Software_Feature_18 ()\n        public Nullable<bool> Software_Feature_19 ()\n        public Nullable<bool> Software_Feature_20 ()\n\n    }\n\n-----------------------------------\n\n[GenerateLicense]\n\nstring _result     = GenerateLicense.StartProcess(string _licensekey,string _softwareName,string UID,string _securekey,string _licensePath, bool _checkDateTimeOnline)\n_result        : \"Done\" (license generated from _licensekey)\n        : \"License not Started yet! Will start from :\" (system datetime is not in between license period datetime)\n        : \"License is Expired! Ended at : \" (system datetime is greater than license period datetime)\n        : \"Connect to Internet\" (connect to internet for checking datetime online for more security)\n        : \"License Key is not valid for this Computer System\" (license and running system UID are not same)\n        : \"Wrong key for this System, Try again!\" (invalid license key)\n        : \"License key is Empty\" (provided license has no string)\n\n\n-------------------------------------\n[HardwareInfo]\n\nstring _result     = HardwareInfo.GenerateUID(string _softwareName,string _securekey)\n_result        : UID (unique identification for system generated from same CPU and Motherboard)\n\n\n//other features that may you can use for license security\nstring HardwareInfo.GetLocalIPAddress()\nstring GetPublicIpAddress()\nList<string> GetDrives()\nstring myDrives_info(string drivename)\nstring GetDiskVolumeSerialNumber()\nstring GetProcessorId()\nstring GetMotherboardID()\nstring GetMacAddress()\n\n-------------------------------------\n[InternetConn]\n\nbool _result    = InternetConn.CheckConnection()\n_result    : true,false\n\nNullable<DateTime> _dt    = InternetConn.GetDateTime()\n_dt    : gets date from internet (depending of CultureInfo and DateTimeStyles.AssumeUniversal of system)",
  "requireLicenseAcceptance": true,
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#dependencygroup/.netstandard2.0/microsoft.win32.registry",
          "@type": "PackageDependency",
          "id": "Microsoft.Win32.Registry",
          "range": "[4.7.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#dependencygroup/.netstandard2.0/system.management",
          "@type": "PackageDependency",
          "id": "System.Management",
          "range": "[4.7.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#SystemSoulLicense.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2695,
      "fullName": "SystemSoulLicense.nuspec",
      "length": 9058,
      "name": "SystemSoulLicense.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#lib/netstandard2.0/SystemSoulLicense.dll",
      "@type": "PackageEntry",
      "compressedLength": 30617,
      "fullName": "lib/netstandard2.0/SystemSoulLicense.dll",
      "length": 52736,
      "name": "SystemSoulLicense.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#logo_l.png",
      "@type": "PackageEntry",
      "compressedLength": 16526,
      "fullName": "logo_l.png",
      "length": 16817,
      "name": "logo_l.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#tac.txt",
      "@type": "PackageEntry",
      "compressedLength": 3475,
      "fullName": "tac.txt",
      "length": 7970,
      "name": "tac.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.04.17.09.44.15/systemsoullicense.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9473,
      "fullName": ".signature.p7s",
      "length": 9473,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}