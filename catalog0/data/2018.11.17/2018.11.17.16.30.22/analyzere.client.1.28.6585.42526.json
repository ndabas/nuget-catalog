{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Analyze Re",
  "catalog:commitId": "5cdf5af5-f76e-44a0-b399-6a34cd1c2629",
  "catalog:commitTimeStamp": "2018-11-17T16:30:22.9466906Z",
  "copyright": "Copyright 2017",
  "created": "2018-01-12T03:38:28.623Z",
  "description": "A client library for Analyze Re high performance analytics services",
  "iconUrl": "http://docs.analyzere.net/csharp/logo64.png",
  "id": "AnalyzeRe.Client",
  "isPrerelease": false,
  "lastEdited": "2018-11-17T16:29:59.31Z",
  "licenseUrl": "http://opensource.org/licenses/MIT",
  "listed": true,
  "packageHash": "kpH1DgpuFxP3oG3NGAWMz64k5PFUNUryZJ8uTkNgk7J6guA6/bNWKoavY+70X9znypmUfooq2+QkrNiIgJfllw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 920419,
  "projectUrl": "http://docs.analyzere.net/csharp/",
  "published": "2018-01-12T03:38:28.623Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/.json#gpref",
      "reference": {
        "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#gpref/ref/analyzere.client.dll",
        "file": "AnalyzeRe.Client.dll"
      }
    }
  },
  "releaseNotes": "This Client Library wraps the AnalyzeRe REST API.\n1.28\n- Support for transparent compression during file upload (enabled by default)\n- Overall improvements file/stream upload performance.\n\n1.27\n- `target_currency` field added to OptimizationView\n- The `Reference.Value` property was deprecated, due to it's behaviour of making network requests being potentially unexpected.\n- Added explicit Reference `GetValue()` and `Resolve()` methods for retrieving the resource associated with a reference.\n- New `API.PollUntil()` functionality added to allow any request to benefit from exponential back-off polling logic built into status and metrics request polling.\n- `IAPIResourceWithStatus.PollUntilReady()` implementation now only polls the status property to improve polling performance with complex resources.\n  - If after polling you wish to see an updated property of the resource that isn't the status property (e.g. the `LossSet.profile` property), you must perform a subsequent `Get()` of the resource yourself.\n- The `Utilities.SimulationStatusMonitor` class was deprecated.\n- Minor performance enhancements by circumventing unnecessary RestSharp logic, reducing request overhead.\n- Source updated to take advantage of modern C#7 language features and their associated performance improvements.\n- Suppressed issues when saving static client library settings from concurrent instances of the same process, and the new `AnalyzeRe.API.ManagedSettingsEnabled` property can be set to false to disable automatic settings caching and management entirely.\n- All resources now inherit optional description and metadata properties.\n- Queue-Position added to NotWaitingException for reporting the final current queue position of a request that was being polled.\n\n1.26\n- New event_id parameter in ParametricLossSet lets you control what event_id you see associated with Parametric losses on YELT download.\n- New extension methods for categorization of property types.\n- New LossRank layer structure which allows selecting a subset of losses in a year based on the relative size (rank) of losses.\n- New NoClaimsBonus layer structure which can be used to apply a payout to trials which contain no losses.\n- Restored Newtonsoft.Json and RestSharpSigned as formal NuGet dependencies in light of Json.NET 10 assembly static resource interference issues.\n\n1.25\n- OptimizationView now contains a collection of candidates, and candidates now have a `portfolio_view` sub-resource.\n- OptimizationView now contains a server-generated `initial_portfolio_metrics` property.\n- As per server-side changes, the portfolio_views must now be retrieved from the candidates. The results no longer reference pre-generated portfolio_views.\n- Added support for automatically handling redirection responses, which are used for candidate portfolio_view responses.\n- Added the `IResourceCollection` interface, which supports the optimization_view's candidates sub-collection.\n- Added static `ResourceCollection` instances to the static API, which support a simplified method of performing collection operations on all root collections on the API.\n- Added the ability to order collection get results by certain properties using the \"API.Parameters.Order\" request parameters.\n\n1.24\n- Added the QCLS Loss Set (Quantile-Based Correlated Loss Sampling loss set) - a simulated parametric loss set based on Cholesky decomposition.\n- Improved the parametric distribution object model to include interfaces for stricter type definitions.\n\n1.23\n- Removed the Obsolete Inuring Terms from ELTLossSets. Inuring terms are now modelled by applying an AggXL layer to the loss set, then using it as the source to a nested layer.\n- Added Nth event argument to ILW layers, and fixed/improved documentation around this layer type.\n- Added is_optimization_enabled helper property to OPTIONS responses object.\n\n1.22\n- Adds an optional CancellationToken parameter to PollingOptions, which anything that takes PollingOptions should respect and monitor for cancellation.\n- Updated the API.PollUntilReady helper function, as well as the IStoredAPIResource_WithStatus PollUntilReady extension method to monitor the cancellation token if supplied.\n- Restored functionality to the AsyncRequestMonitor by making use of the existing polling methods.\n- Gave the AsyncRequestMonitor the ability to poll either by monitoring RetryAfter responses, or by monitoring the status of a supported resource.\n\n1.21\n- OptimizationViews now implement the new IStoredAPIResource_WithStatus interface, following a change on the server. They are now polled using their status instead of 503 responses on the results.\n- Added the ability to request only certain object properties using the \"API.Parameters.Fields\" request parameters. This speeds up status polling.\n- Renamed the \"WaitForStatusToBeReady\" extension method from the previous commit to \"PollUntilReady\" to be consistent with existing RetryAfter based polling method available in the API namespace.\n- Added the \"Queued\" TaskStatus enum value which is used in some cases and is a special distinction of \"Processing\" indicating that the resource has not yet begun processing, but will.\n\n1.20\n- Add the ability to set the data_file property to commit an existing file against a new resource.\n- New polling options parameters changed from double (seconds) to integer (milliseconds) parameters to improve consistency with other timeouts in .NET.\n- IStoredAPIResource_WithStatus interface added to describe resources that have a status indicating their validation progress.\n- WaitForStatusToBeReady extension method added which will poll resources of the above type (includes resources with data and AnalysisProfiles).\n- Exponential back-off added to existing RetryAfter polling method and the above status polling method.\n\n1.19\n- CoMetrics requests now support setting the component reporting period.\n\n1.18\n- Enhanced the copy constructors of classes that derive from `SimulationOptions` to include (as optional arguments) all parameters that cannot be copied from the base object.\n\n1.17\n- Sped up reference deserializer\n- Added NotSaveableAttribute to indicate layer types that can be inlined but not persisted to the layers collection.\n- Renamed `IsDefinedFast` to `IsAttributeDefinedFast` in the reflection utilities library, to reduce ambiguity.\n\n1.16\n- Support for probabilities and thresholds requested using exponential notation.\n\n1.15\n- ReportingPeriod parameter added to metrics requests. You can now specify a begin and/or end DateTime to get filter distributions by date.\n- Fixed PollUntilReady and all blocking metrics requests not respecting the MaxPollTotalTime (since 1.13)\n\n1.14\n- Modified BufferedBytesFromStreamProducer to allow users to limit the number of bytes read from the source stream.\n\n1.13\n- API types can now be modified on the fly with property expressions.\n  - Example: CatXL layer = someCatXL.ShallowCopy().Change(l ()=> l.participation, 0.25).Post();\n- New metrics options classes added, which bundle common request options (filter, perspective, etc.)\n  - TailMetrics, CoMetrics, ExceedanceProbabilities, etc. requests now support options objects as parameters.\n- Old metrics methods are now marked Obsolete, and will be removed at the next major version.\n\n1.11\n- Removed LossNetOfOccurrenceTerms as an input and output perspective.\n- Added bindings for the FixedRateCurrencyConverter structure.\n\n1.10\n- Warning: Minor Backwards Incompatible Changes\n- Simplified code hierarchy in preparation for open sourcing.\n- Modified some models to fall under different namespaces.\n- Improvements and bug-fixes to documentation after the recent switch to support .NET40\n\n1.9:\n- Support for projects targeting either .NET framework 4.0 or 4.5\n- Includes source and symbols for debugging.\n- Should no longer require projects to also add Json.NET or RestSharp as dependencies.\n\n1.8:\n- Support for vectorized metrics requests (batching of probabilities / thresholds)\n- No longer caches requests with resource instances - library user must implement their own caching.\n- Performance enhancements due to leaner requests, caching reflection-based requests, and improved file upload streaming.\n- Compatibility with new server features such as back-allocation, binary upload, and gzipping.\n- Automatic handling for temporary network failures such as socket noise and interrupted SSH handshakes.\n\n1.7:\n- Now targets .NET Framework 4.5 to make use of improvements to native compression algorithms\n\n1.6 and earlier features:\n- Models for all of the resource types defined by the AnalyzeRe API\n- Models for Metrics response structures and other custom API objects that appear within various resources\n- Extensive error handling and debug logging capabilities via APIRequestException\n- REST functionality via resource extension methods that allows:\n  - Creation, modification, and retrieval of resources on the server\n  - Supplying additional/custom headers and/or parameters to requests\n- Additional functionality for specific resources such as:\n  - LargeDataUpload functionality for resources with a data upload endpoint\n  - Metrics functionality and extension methods for LayerViews and PortfolioViews\n- Resource collection GET and Search capability via the API class\n- A library of custom Attributes to assist with automated validation of resources and to indicate server constraints on property values.",
  "requireLicenseAcceptance": false,
  "title": "Analyze Re Client Library",
  "verbatimVersion": "1.28.6585.42526",
  "version": "1.28.6585.42526",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#dependencygroup/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[10.0.0, 11.0.0)"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#dependencygroup/restsharpsigned",
          "@type": "PackageDependency",
          "id": "RestSharpSigned",
          "range": "[105.2.3, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#AnalyzeRe.Client.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 4323,
      "fullName": "AnalyzeRe.Client.nuspec",
      "length": 10637,
      "name": "AnalyzeRe.Client.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net40/AnalyzeRe.Client.dll",
      "@type": "PackageEntry",
      "compressedLength": 94540,
      "fullName": "lib/net40/AnalyzeRe.Client.dll",
      "length": 229376,
      "name": "AnalyzeRe.Client.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net40/AnalyzeRe.Client.dll.config",
      "@type": "PackageEntry",
      "compressedLength": 525,
      "fullName": "lib/net40/AnalyzeRe.Client.dll.config",
      "length": 2297,
      "name": "AnalyzeRe.Client.dll.config"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net40/AnalyzeRe.Client.xml",
      "@type": "PackageEntry",
      "compressedLength": 62701,
      "fullName": "lib/net40/AnalyzeRe.Client.xml",
      "length": 524934,
      "name": "AnalyzeRe.Client.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net40/Newtonsoft.Json.dll",
      "@type": "PackageEntry",
      "compressedLength": 201059,
      "fullName": "lib/net40/Newtonsoft.Json.dll",
      "length": 522240,
      "name": "Newtonsoft.Json.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net40/RestSharp.dll",
      "@type": "PackageEntry",
      "compressedLength": 72126,
      "fullName": "lib/net40/RestSharp.dll",
      "length": 169984,
      "name": "RestSharp.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net45/AnalyzeRe.Client.dll",
      "@type": "PackageEntry",
      "compressedLength": 94622,
      "fullName": "lib/net45/AnalyzeRe.Client.dll",
      "length": 229376,
      "name": "AnalyzeRe.Client.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net45/AnalyzeRe.Client.dll.config",
      "@type": "PackageEntry",
      "compressedLength": 525,
      "fullName": "lib/net45/AnalyzeRe.Client.dll.config",
      "length": 2297,
      "name": "AnalyzeRe.Client.dll.config"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net45/AnalyzeRe.Client.xml",
      "@type": "PackageEntry",
      "compressedLength": 62652,
      "fullName": "lib/net45/AnalyzeRe.Client.xml",
      "length": 524478,
      "name": "AnalyzeRe.Client.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net45/Newtonsoft.Json.dll",
      "@type": "PackageEntry",
      "compressedLength": 242753,
      "fullName": "lib/net45/Newtonsoft.Json.dll",
      "length": 652288,
      "name": "Newtonsoft.Json.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#lib/net45/RestSharp.dll",
      "@type": "PackageEntry",
      "compressedLength": 72116,
      "fullName": "lib/net45/RestSharp.dll",
      "length": 169984,
      "name": "RestSharp.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.17.16.30.22/analyzere.client.1.28.6585.42526.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9483,
      "fullName": ".signature.p7s",
      "length": 9483,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "AnalyzeRe",
    "REST",
    "Client",
    "Library",
    "Insurance",
    "Reinsurance",
    "Analytics"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}