{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.10.18.18.49/excelautomationwrapper.1.0.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Brad Wood",
  "catalog:commitId": "602f8db7-4a3e-40a2-8c65-0cefdcb89964",
  "catalog:commitTimeStamp": "2018-12-10T18:18:49.534876Z",
  "copyright": "Copyright 2015",
  "created": "2015-11-09T14:43:35.607Z",
  "description": "Working with large Excel files is problematic.  After reading an article by Joel Spolsky which advocated using Excel to work with Excel files because nobody else has put in everything necessary to optimize the experience like the real thing, I decided to try it out.  It turns out that the Excel automation object is difficult to work with, but does some amazing things.  It was able to copy/paste columns of data in huge files (200K rows) around fast while not spiking memory at all.  The same operation using EPPlus brought the server down.\n\nThis package has never actually been in production, but has gone through a fair amount of testing - the main concern always being whether it's leaving the automation object behind (it seems to clean up consistently).\n\nYou can use this as your wrapper for the automation object and do anything it does, but built in are these functions:\n• ColumnReorder (as mentioned above)\n• Sort\n• CSV to XLSX\n• XLSX to CSV",
  "id": "ExcelAutomationWrapper",
  "isPrerelease": false,
  "lastEdited": "2018-12-10T18:18:37.02Z",
  "listed": true,
  "packageHash": "lkLvVAKZvH52Ssn6aSBKou3zcLwX5Ms3kHjgUCmD15eil2lQBsFFKoume1wreXSZAOYMTTOtBhaZ+LFvA7EwHQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 25083,
  "published": "2015-11-09T14:43:35.607Z",
  "requireLicenseAcceptance": false,
  "summary": "Working with large Excel files is problematic.  After reading an article by Joel Spolsky which advocated using Excel to work with Excel files because nobody else has put in everything necessary to optimize the experience like the real thing, I decided to try it out.  It turns out that the Excel automation object is difficult to work with, but does some amazing things.  It was able to copy/paste columns of data in huge files (200K rows) around fast while not spiking memory at all.  The same operation using EPPlus brought the server down.\n\nThis package has never actually been in production, but has gone through a fair amount of testing - the main concern always being whether it's leaving the automation object behind (it seems to clean up consistently).\n\nYou can use this as your wrapper for the automation object and do anything it does, but built in are these functions:\n• ColumnReorder (as mentioned above)\n• Sort\n• CSV to XLSX\n• XLSX to CSV",
  "verbatimVersion": "1.0.2",
  "version": "1.0.2",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.10.18.18.49/excelautomationwrapper.1.0.2.json#ExcelAutomationWrapper.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 800,
      "fullName": "ExcelAutomationWrapper.nuspec",
      "length": 2406,
      "name": "ExcelAutomationWrapper.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.10.18.18.49/excelautomationwrapper.1.0.2.json#lib/net452/ExcelAutomationRunner.dll",
      "@type": "PackageEntry",
      "compressedLength": 12047,
      "fullName": "lib/net452/ExcelAutomationRunner.dll",
      "length": 27648,
      "name": "ExcelAutomationRunner.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.10.18.18.49/excelautomationwrapper.1.0.2.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9461,
      "fullName": ".signature.p7s",
      "length": 9461,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Excel",
    "Automation"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}