{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "PDFTron Systems Inc.",
  "catalog:commitId": "0726546d-9f52-4e8c-8449-7af41124cefe",
  "catalog:commitTimeStamp": "2020-02-19T01:20:20.6784687Z",
  "copyright": "Copyright 2020",
  "created": "2020-02-19T01:16:43.827Z",
  "description": "[PDF Reader. PDF Control. PDF Component]\n\nPDFNet SDK is the ultimate PDF toolkit.\n\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\n\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000). The extensive PDF library API supports most common use-case scenarios such as:\n*        PDF Viewing & Collaboration\n*        PDF Rasterization\n*        PDF Printing\n*        PDF Form filling and flattening\n*        PDF Split & Merge\n*        PDF Stamping\n*        Dynamic PDF generation (e.g. FlowDocument & Xaml to PDF)\n*        PDF Text extraction and indexing\n*        PDF Packages\n*        PDF Layers (OCGs)\n*        PDF Editing\n*        PDF Encryption\n*        Manipulate PDF bookmarks, links, and annotations.\n*        PDF Optimization\n*        PDF conversion to XML, HTML, XPS, SVG, TIF, etc.\n*        PDF/A Validation and Conversion\n*        PDF Redaction\n*        PDF Conversion from XPS, MS Office, HTML, XAML, TXT, TIFF etc.\n*        HTML to PDF Conversion",
  "iconFile": "images\\pdftron.png",
  "iconUrl": "https://pdftron.com/brand-assets/nuget.png",
  "id": "PDFNet",
  "isPrerelease": false,
  "lastEdited": "2020-02-19T01:19:49Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "cIt+9TJlyGh8uSrUcjQGWxl5VbXsCYW8u0nWgYEIS4xAs4yEFBMHl0tAUsbDnTtYd9sCl6XSBhu1670DycDh/Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 47518555,
  "projectUrl": "http://www.pdftron.com/pdfnet",
  "published": "2020-02-19T01:16:43.827Z",
  "releaseNotes": "New Features\n* Digital Signature Verification\n* Added support for creation of Viewer Optimized PDF files (PDFDoc.SaveViewerOptimized).\n* Viewers have been updated to take advantage of Viewer Optimized PDF.\n* Added annotation API to read, write and delete custom data. (Annot.SetCustomData, Annot.GetCustomData and Annot.DeleteCustomData).\n* Added the SetRequiredFieldBorderColor() method to PDFView and PDFViewCtrl.\n* Added functions Ink.SetHighlight and Ink.GetHighlight to choose whether the Ink will display like a highlighter.\n* Added ElementWriter.WriteGStateChanges() which can simplify use cases where the intention is to only write the graphics state of an element.\n* Added options for line weight and auto rotation to CADConvertOptions.\n* Added DPI option for to OCROptions.\n* Added built-in support the ppt format, can now view and convert these files to pdf.\nChanged Behaviour\n* .Net Framework builds are now dependent on the Microsoft Visual C++ Redistributable Packages for Visual Studio 2013 rather than the Microsoft Visual C++ 2010 Redistributable.\n* Digital Signatures will now be signed with SHA256. (previously SHA1).\n* Ink.SetBlendMode and Ink.GetBlendMode functions have been deprecated. Customers are encouraged to use `Ink.SetHighlight` and `Ink.GetHighlight` instead, as they are more aligned with the PDF specification, and offer greater compatibility with other PDF readers, such as Adobe Acrobat.\nOther Changes\nRoughly categorized, not an exhaustive list.\nImprovements\n[pdf] Page labels are now included when converting PDF -> EPUB\n[pdf] When generating appearances for Widgets, only use a font if it can represent all of the glyphs that are meant to be drawn in the widget.\n[pdf] Adjusted XFDF import of Widgets to not be dependent on the position of elements within the XFDF document.\n[xod] Added logic to upsample the smaller of the soft mask or associated image when converting to XPS/XOD. This allows us to export the entire image as RGBA, which greatly improves rendering performance and memory usage.\n[pdf] Updated Annot.Flatten and ElementBuilder.CreateForm to have complete support for nozoom, norotate and sticky note annotations.\n[pdf] Improved FieldIterator support for invalid/null/free Field entries.\n[pdf] Updated FDFUpdate to be less strict about certain differences in the XFDF. This allows it to maintain original annotation appearances more often.\n[pdf] Added support for multi-select list boxes when exporting and importing XFDF.\n[xod] Added an option for image smoothing in XOD. This is important to allow XOD to exactly match PDF rendering.\n[pdf] FileAttachment annotations can now be imported from XFDF.\n[pdf] Can now initialize the SDK with a full license key after initializing with an empty key within the same session.\n[xps|office] Optimization for finding the zip signature in damaged zip files/non-zip files. About 1000 times faster for these cases.\n[office] Added support for balanced column layouts.\n[office] Added support for images with the 3D camera rotation properties.\n[office] Added support for embedded hyperlinks, they are not converted to the equivalent PDF annotation.\n[office] Added support for clipping content within text box and table cell.\n[xlsx] Added support for diagonal cell decorations.\n[office] Added support for extended cell border styles.\n[xlsx] Improved memory usage for sheets with large numbers of columns and/or rows\nFixes\n[pdf] Fixed a potential crash when importing XFDF Widgets.\n[pdf] Fixed a potential race condition when running PDF/A conversion in multiple threads.\n[pdf] Fixed a crash exporting XFDF on very specific PDF files.\n[pdf] More lenient handling of oddly formed floating point numbers.\n[pdf] Fix for issue where importing PDF pages was not pulling in OCG layers used only in annotations.\n[pdf] Fixed issue where we could incorrectly identify large glyph indices as UTF16 surrogates.\n[pdf] Improved internal unicode data paths to fully support codepoints off the Basic MultiLingual Plane.\n[pdf] Work around Java string behaviour where an added null terminator could make the string not equal.\n[xod] Adjusted XOD flattening logic to detect and flatten transparency groups containing blend modes. This is because XOD support for these groups works differently than PDF groups.\n[xod] Adjusted XOD flattening and rendering logic to handle the case where special blend modes are used within transparency groups. This is necessary because these cases cannot be easily represented in xod/xps.\n[pdf] Fix for potential performance issue when skipping a lot of nulls at the end of a file.\n[pdf] Fixed XFDF import error, where if an arrow had the xml attribute \"end\" before \"start\" the points could be switched around.\n[pdf] Avoided exception from being thrown in XFDF export when encountering zero length action arrays.\n[pdf] Sanitizing metadata strings in PDF/A to avoid erroneously reporting errors when there are trailing nulls.\n[pdf] Fixed a problem in TextExtraction where e_remove_hidden_text would malfunction when the page is rotated.\n[pdf] Fixed a problem in TextExtraction where fully clipped text was not actually skipped.\n[pdf] Fixed a bug in RemoveAppearance where it wouldn't do anything without an appearance state dictionary. This means it would fail for all common annotation types.\n[xod] Annotations appearances are now always included even if the annotation is hidden, so they can be shown by consumers (like WebViewer) when the setting is changed.\n[pdf] Adjusted stamp appearance exporting logic in XFDF to take page rotation into account. This is important to avoid losing image quality when importing and exporting.\n[pdf] Added repair logic for corrupt PDF documents with multiple Field objects with the same name. This is only applied when NeedAppearances = true.\n[pdf] Fixed problem with importing XFDF destinations where some values are treated as default.\n[pdf] Adding logic to remove unused popups when importing XFDF. This could appear as extra invisible annotations in certain viewers.\n[pdf] Adjusted hint stream writing for linearized save to align bytes between sections for embedded thumbnail data.\n[pdf] THead, TBody, TFoot are mapped to nonstruct when converting to PDFA-1. Previously conversion of files containing these would not pass validation for other vendors.\n[pdf] Flattener public API could watermark even if a user had the permission. Now properly handles license permission.\n[pdf] Fixed XFDF Widget Import issues that would typically lead to an exception being thrown.\n[html|epub] Fixed bug where under certain circumstances the same HTML element with the same ID could be injected (malformed HTML).\n[xod] Fixed a problem in PDF to encrypted XOD conversion where the appearance file could be inaccessible from WebViewer.\n[pdf] Sorted out a problem where certain corrupt PDF files would throw exception on Linearized save.\n[pdf] Added support for non-integer intensity for cloudy annotations.\n[pdf] Fix some cases where we would not properly render field highlights with no appearance.\n[pdf] Fix a rare issue with viewer render tiles not being invalidated correctly.\n[pdfview] Fixed an issue where goto actions could scroll the view away from the destination page.\n[pdf] Fixed an issue where temp files would potentially not get cleaned up after XOD creation.\n[pdfview, c++] Fix for potential crash when rendering annotations with 1-pixel bounding boxes.\n[pdfview, c++] Fixed a bug that could cause a refresh loop in some cases involving annotations with the nozoom flag set.\n[pdfview, c++] Fix for annotation edit control not updating correctly on zoom + pan of the document.\n[pdf] Added support for the \"Matte\" softmask property.\n[pdf] Handle the case where a DeviceN CS is specified as being an NChannel subtype, but is missing the Colorants array.\n[pdf] Fix for isolated cases where the stroke and fill for a softmask should be obtained from the parent context.\n[pdf] Fix for rare crash when rendering content with constant alpha value of 0.\n[pdf] No longer render fileattachment annotations when there is no icon set.\n[OCR] Improved handling of scaling with rotated pages.\n[pdf] Improved internal unicode data paths to fully support codepoints off the Basic MultiLingual Plane\n[pdf] Fix for rare errors when expanding CCIT encoded images on linux.\n[pdf] Improved handling of the \"All\" separation in some cases when rendering in overprint preview mode.\n[pdf] Fix for bad text extraction in some cases where isolated vertical text lines could improperly change our treatmetn of the page.\n[CAD] Will now determine the ideal page size automatically in more cases.\n[CAD] Better reporting of error conditions.\n[CAD] PDFs converted from DWG files now convert the page labels.\n[pdf] Improved handling of ttc font files. More complete enumeration of fonts within the collection.\n[pdf] More robust font substitution when dealing with edge cases and non-typical font name formatting.\n[pdfview, c++] Fix for unresponsive behaviour when progressive rendering is disabled.\n[pdfview] Fixed case where GetAnnotationAt() could return incorrect results when handling highlight annotations with multiple quads.\n[pdf] Fix for slight over-clipping of curved shapes which are flush with the edge of a clipping path.\n[pdf] Fix for handling of linearized saves when the Undo/Redo manager is in use.\n[pdf] When using ElementBuilder, now correctly generate CID fonts containing glyphs for codepoints outside the basic Mulilingual Plane.\n[docx] Improved support for positional tabs.\n[office] Better support for fonts with non-standard name formatting.\n[office] Improved support for incomplete embedded fonts.\n[office] Improved support for symbol fonts.\n[office] Improved support for bullet list with custom bullets.\n[docx] Improved support for east Asian text placement, in particular when grid placement is enabled.\n[xlsx] Fixed bug where certain equations within conditional formatting rules would not be evaluated.\n[docx] Fix for smart art with nested text rotations exceeding 360 degrees.\n[docx] Make use of AlternateContent->fallback content in the case where the primary content cannot be used.\n[docx] A number of fixes for positioning of floating elements within table cells.\n[docx] Improvements to the placement of floating elements anchored to paragraphs.\n[office] Fixes for positioning of floating tables.\n[office] A number of fixes for positioning of floating content in multi-column layouts.\n[office] Improved support for change tracking. Now support style-only changes, changes within bullet lists, and multiple-user changes.\n[docx] Improved handling of first-line indentation in a number of situations.\n[xlsx] Added support for the ISBLANK function.\n[pptx, docx] Many refinements to spacing of vertical placement of text lines, both within and between paragraphs.\n[xlsx] A number of improvements to placement of chart labels, data, and axes.\n[xlsx] Fixed case where empty sheets could cause us to ignore other non-empty sheets in the document.\n[xlsx] Now handle \"automatic\" cell coloring correctly.\n[docx] Corrected conversion of form checkboxes.\n[pptx] Fixed bug that could apply the default text style to empty lines in some cases.\n[xlsx] Correctly handle the case where the font list has no \"count\" attribute.\n[xlsx] Multiple improvements to date and number formatting.\n[office] Improved handling of fonts that have a negative line gap (like Courier New).\n[docx] More precise handling of text positioning around floating elements.\n[office] More robust font subsitution handling with text containing unusual whitespace codepoints.\n[office] Fix for incorrectly adding an outline to text with the draw_outline attribute set to 0.\n[docx] Fix for infrequent table layout error that could sometimes skip table rows when breaking across pages.\n[docx] Corrected placement of some headers and footers on even pages.\n[docx] Fix for occasionally placing an empty row at the end of a page when splitting tables across pages.\n[xlsx] Fix for skipping cell borders in isolated cases involving horizontally merged cells.\n[xlsx] Ensure that the page size is sufficient to contain all drawings and charts.\n[xlsx] Fix for incorrect handling of some unicode elements in format strings.\n[doc] Fixed bug that resulted in incorrect enumeration of section properties.",
  "requireLicenseAcceptance": false,
  "summary": "PDFNet SDK is the ultimate PDF toolkit.\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000).",
  "title": "PDFNet SDK",
  "verbatimVersion": "7.1.0.74119",
  "version": "7.1.0.74119",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#dependencygroup/.netframework4.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#PDFNet.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 5723,
      "fullName": "PDFNet.nuspec",
      "length": 15110,
      "name": "PDFNet.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#lib/net40/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 14763791,
      "fullName": "lib/net40/PDFNet.dll",
      "length": 33329792,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#lib/net40/PDFNetLoader.dll",
      "@type": "PackageEntry",
      "compressedLength": 6897,
      "fullName": "lib/net40/PDFNetLoader.dll",
      "length": 11904,
      "name": "PDFNetLoader.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#build/net40/PDFNet.targets",
      "@type": "PackageEntry",
      "compressedLength": 496,
      "fullName": "build/net40/PDFNet.targets",
      "length": 1040,
      "name": "PDFNet.targets"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#build/net40/PDFNet/x86/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 14763791,
      "fullName": "build/net40/PDFNet/x86/PDFNet.dll",
      "length": 33329792,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#build/net40/PDFNet/x86/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 241298,
      "fullName": "build/net40/PDFNet/x86/PDFNet.xml",
      "length": 1725252,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#build/net40/PDFNet/x64/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 17265040,
      "fullName": "build/net40/PDFNet/x64/PDFNet.dll",
      "length": 40566912,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#build/net40/PDFNet/x64/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 241482,
      "fullName": "build/net40/PDFNet/x64/PDFNet.xml",
      "length": 1725267,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 141,
      "fullName": "tools/install.ps1",
      "length": 203,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 1575,
      "fullName": "readme.txt",
      "length": 4102,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#PDFNet_License.pdf",
      "@type": "PackageEntry",
      "compressedLength": 213378,
      "fullName": "PDFNet_License.pdf",
      "length": 242941,
      "name": "PDFNet_License.pdf"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#images/pdftron.png",
      "@type": "PackageEntry",
      "compressedLength": 1722,
      "fullName": "images/pdftron.png",
      "length": 1748,
      "name": "pdftron.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 60,
      "fullName": "LICENSE.txt",
      "length": 64,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.19.01.20.20/pdfnet.7.1.0.74119.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "PDF",
    "viewer",
    "control",
    "component",
    "reader",
    "print",
    "forms",
    "split",
    "merge",
    "stamp",
    "XPS",
    "SVG",
    "HTML",
    "convert",
    "optimize",
    "redact",
    "encrypt",
    "pdftron",
    "pdfviewer",
    "rasterizer",
    "pdf2image",
    "converter",
    "WPF",
    "WinForms",
    "extract",
    "sign",
    "annotate",
    "pdf2html",
    "html2pdf",
    "pdf2svg"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}