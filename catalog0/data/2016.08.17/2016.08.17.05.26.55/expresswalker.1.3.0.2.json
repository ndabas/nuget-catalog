{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.17.05.26.55/expresswalker.1.3.0.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Ivan Kopcanski",
  "catalog:commitId": "4adab822-16b8-46c8-a4f5-14ef4c2d32c9",
  "catalog:commitTimeStamp": "2016-08-17T05:26:55.8839101Z",
  "copyright": "Ivan Kopcanski 2016",
  "created": "2016-08-17T05:26:28.243Z",
  "description": "ExpressWalker provides a generic way to examine and change any object graph in fashion similar to \"Visitor Pattern\". You can build generic hierarchy composition (visitor) capable to \"visit\" and change any object's property, basing on configuration. Uses reflection only while building a visitor and relies purely on expression trees while visiting objects. That's why IT IS WAY FASTER than custom solutions usually built with reflection.\n\nIt is optionally protected from circular references so you can avoid StackOverflowException easily. Provides fluent API while building a visitor which increases code readability in terms of recognizing the hierarchy being built right away from the code. Some of functionalities: are visiting properties by matching owner type and name (or only type), visiting through items in collecitons, specifying depth, custom expression for changing property value, cloning etc.\n\t\n//example 1 - IVisitor that visits properties by property names and/or types (start from TypeWalker class):\n\n  var typeVisitor = TypeWalker<Parent>.Create()\n                  .ForProperty<Parent, string>(p => p.TestString1, (old, met) => old + met)\n                  .ForProperty<Child, DateTime>(p => p.TestDate1, (old, met) => old.AddYears(10))\n                  .ForProperty<CommonType>((old, met) => new CommonType { CommonString = \"...\" })\n                  .Build();\n\n  var parentClone = new Parent();\n  var propertyValues = new HashSet<PropertyValue>()\n  typeVisitor.Visit(parentObject, parentClone, 10, new InstanceGuard(), propertyValues); \n  \n//example 2 - IVisitor that visits properties by explicit configuration (start from ManualWalker class):\n\n  var manualVisitor = ManualWalker.Create<A1>()\n                                    .Property<A1, DateTime>(a1 => a1.A1Date, (va1, met) => va1.AddYears(10))\n                                    .Element<A1, B1>(a1 => a1.B1, b1 =>\n                                            b1.Property<B1, string>(x => x.B1Name, (vb1, met) => vb1 + \"Test2\"))\n                                    .Collection<A1, B2>(a1 => a1.B2List, b2 => b2\n                                            .Property<B2, DateTime>(x => x.B2Date, (vb2, met) => vb2.AddYears(10)))\n                                .Build();\n\n  var parentClone = new A1();\n  var propertyValues = new HashSet<PropertyValue>()\n  manualVisitor.Visit(parentObject, parentClone, 10, new InstanceGuard(), propertyValues);\n\t\t\t\n//Paremeter 'met' in expressions above is optional metadata object set in design-time. \n//It can be set by [VisitorMetadata] property attribute in visited class.\n//e.g. in example above, there is [VisitorMetadata(\"AnyString\")] on property Parent.TestString1.\n\nMany thanks to Francisco José Rey Gozalo for contributing with ideas and solutions.\nRead more on https://github.com/kopalite/ExpressWalker",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.17.05.26.55/expresswalker.1.3.0.2.json#frameworkassemblygroup",
    "assembly": [
      "System",
      "System.Core",
      "Microsoft.CSharp"
    ]
  },
  "id": "ExpressWalker",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/kopalite/ExpressWalker/blob/master/LICENSE",
  "listed": true,
  "packageHash": "mspeLrgScqBbJHOzHu+y+7oY898r1eU8ROBwVfi8Zls0BIHpyCcW9jy4NmjtDSPiw7YuacxyTkqFmRnVBk8D6Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 19698,
  "projectUrl": "https://github.com/kopalite/ExpressWalker",
  "published": "2016-08-17T05:26:28.243Z",
  "releaseNotes": "More refinded and comprihensive unit tests are added. Visits based on depth are tested and fixed.",
  "requireLicenseAcceptance": true,
  "summary": "ExpressWalker provides a generic way to examine and change any object graph in fashion similar to \"Visitor Pattern\". You can build generic hierarchy composition (visitor) capable to \"visit\" and change any property, basing on configuration. Uses refleciton only while building a visitor and relies purely on expression trees while visiting objects (Many thanks to Francisco José Rey Gozalo for contributing with ideas and solutions).",
  "title": "ExpressWalker",
  "verbatimVersion": "1.3.0.2",
  "version": "1.3.0.2",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.17.05.26.55/expresswalker.1.3.0.2.json#ExpressWalker.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1626,
      "fullName": "ExpressWalker.nuspec",
      "length": 4515,
      "name": "ExpressWalker.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.17.05.26.55/expresswalker.1.3.0.2.json#lib/ExpressWalker.dll",
      "@type": "PackageEntry",
      "compressedLength": 12619,
      "fullName": "lib/ExpressWalker.dll",
      "length": 30720,
      "name": "ExpressWalker.dll"
    }
  ],
  "tags": [
    "ExpressWalker",
    "Expressions",
    "Visitor"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}