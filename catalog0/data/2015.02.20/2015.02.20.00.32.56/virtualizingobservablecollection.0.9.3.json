{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.20.00.32.56/virtualizingobservablecollection.0.9.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Andrewwhiddett",
  "catalog:commitId": "408c6ec2-9b67-43b8-95c0-f5347a1dcd59",
  "catalog:commitTimeStamp": "2015-02-20T00:32:56.9641322Z",
  "copyright": "(c) AlphaChi Technology 2015",
  "created": "2015-02-20T00:31:54.76Z",
  "description": "See:\n\nhttp://alphachitech.wordpress.com/2015/01/31/virtualizing-observable-collection/\n\nGitHub is here: https://github.com/anagram4wander/VirtualizingObservableCollection\n\nThere are no performant large data set observable collections that support write operations in .NET, so we wrote the VirtualizingObservableCollection, which does the following:\n◾Implements the same interfaces as ObsevableCollection<T> so you can use it anywhere you’d use an ObsevableCollection<T> – no need to change any of your existing controls.\n◾Supports true multi-user read/write without resets (maximizing performance for large-scale concurrency scenarios).\n◾Manages memory on its own so it never runs out of memory, no matter how large the data set is (especially important for mobile devices).\n◾Natively works asynchronously – great for slow network connections and occasionally-connected models.\n◾Works great out of the box, but is flexible and extendable enough to customize for your needs.\n◾Has a data access performance curve nearly as good as the regular ObsevableCollection – the cost of using it is negligible.\n◾Works in any .NET project because it’s implemented in a Portable Code Library (PCL).",
  "iconUrl": "http://alphachitech.files.wordpress.com/2015/01/voc_logo_300x300.png",
  "id": "VirtualizingObservableCollection",
  "isPrerelease": false,
  "language": "",
  "lastEdited": "0001-01-01T00:00:00Z",
  "packageHash": "clenlOxMFS0r4tZUvDeYx4PPwQAC5/+e63M0xqiwugMtABBhGWwCcaF6NPz4DezlsZ4kk2IHVFnnw3Q3364RJQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 50157,
  "projectUrl": "https://alphachitech.wordpress.com/2015/01/31/virtualizing-observable-collection/",
  "published": "2015-02-20T00:31:54.76Z",
  "releaseNotes": "Unless anyone reports issues - i think i am done, and the next release will be 1.0.0.0 !\n\n0.9.3.0\n\nGreatly optimized if you do a lot of Inserts or Removes at the head of the VOC.\n\nImplemented BulkMode:-\n\nusing(myVOC.EnterBulkMode())\n{\n   : do lots of add/insert/removes\n} // Now does a reset.\n\n0.9.1.0:\n\nRewrote the core page/offset getter - works much better with large updates now.\n\nAdded AddRange.\n\nFixed a couple of ASync bugs related to cancelation.\n\nImplemented Clear - so it does a reset/get count.\n\n0.9.0.0:\nMinor change to Async GetPlaceHold to pass in the index\n\nRe-worked the Add/Append implementation to create new pages..\n\nAsync seems stable now: Implement IPagedSourceProviderAsync<T> and pass that to the PagingManager constructor.\n\nChanged rest of the DateTimes to Object so you can implement any type of IPageExpiryComparer you want.",
  "requireLicenseAcceptance": false,
  "summary": "PCL Implementation of a VirtualizingObservableCollection that implements full editing and is highly performing.",
  "title": "Virtualizing Observable Collection",
  "version": "0.9.3",
  "tags": [
    "mvvm",
    "wpf",
    "windowsstore",
    "win8",
    "windowsphone",
    "windowsphone8",
    "xamarin",
    "xaramin.forms",
    "virtualization"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}