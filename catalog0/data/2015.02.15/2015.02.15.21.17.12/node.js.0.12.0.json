{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.15.21.17.12/node.js.0.12.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Joyent,Inc.",
  "catalog:commitId": "bbcf9c78-6ce6-4c57-976b-15143f8d8c48",
  "catalog:commitTimeStamp": "2015-02-15T21:17:12.4977883Z",
  "copyright": "Â© 2015 Joyent, Inc.",
  "created": "2015-02-15T21:16:31.683Z",
  "description": "Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.",
  "iconUrl": "https://bitpay.com/img/js64.png",
  "id": "Node.js",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://raw.github.com/joyent/node/v0.12.0/LICENSE",
  "packageHash": "ebdkS9f69X17ugZAvyw0oK1bkVB9Q5L85YwaYWuSGtp4z1gVLhnuuHa7ZBBZWr8UzIVJkcengGPBOnOW5CURAg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 4501170,
  "projectUrl": "http://nodejs.org/",
  "published": "2015-02-15T21:16:31.683Z",
  "releaseNotes": "Following are some highlights of v0.12 release:\n\n* Streams 3\n  - The Streams implementation now works the way you thought it already should, without introducing any changes to the API. Basically this means no more getting stuck in \"old mode\", there are only streams that are flowing or not.\n  - Streams now support the use of cork and uncork mechanisms to prevent flushing writes out to the system if an application is going to be performing many writes in a row. There is an implicit uncork performed when you end a writable stream.\n\n* HTTP\n  - maxSockets are no longer limited to 5. The default is now set to Infinity with the developer and the operating system given control over how many simultaneous connections an application can keep open to a given host.\n  - Proper KeepAlive support means that sockets will stay open until they timeout at the configured time, are closed by the remote side, or the process exits. Developer's no longer have to make sure requests have been pipelined to keep the socket open, or use an alternative module to get that support.\n  - Developers can also now explicitly flushHeaders to ensure time to first byte is low and proxied connections are held open.\n\n* Cluster\n  - Now has two modes of operation, the new default is a round robin distribution mechanism where the master accepts new connections and distributes them to your workers. If you want you can still opt back into the old method where your workers are responsible for acception connections.\n\n* TLS\n  - We have the new TLSWrap mechanism under the hood, this eliminates quite a few of the hops back and forth between JavaScript and our C++ implementations.\n  - Added APIs for asynchronous SNI callbacks, OCSP stapling, and storage events.\n\n* Buffer\n  - We use a more accurate mechanism for allocating memory for buffers now, which means you'll see less overhead and impact from holding onto to small slices of Buffers. This reduces the amount of memory pressure on the system, which means GC runs are quicker, which means Node.js is on CPU less, and thus lower latency for your applications.\n\n* child_process\n  - spawnSync/execSync have been added to facilitate synchronous child processes, warning your node process won't make forward progress while waiting for the child to exit, caveat emptor!\n\n* Crypto\n  - Added APIs for loading custom engines for use with compiled in OpenSSL.\n  - More APIs support supplying the pass phrases.\n  - Added APIs for RSA public/private key encryption/decryption.\n\n* VM\n  - The module is now based on the Contextify module, which shares values from the sandbox to avoid missing changes inside the execution from appearing in the parent context.\n\n* Initial support for ECMAScript Internationalization API 1.0 (ECMA-402)\n  - By default, Node.js v0.12.0 binaries are shipped with ECMA-402 support, but only for the English language. In other words, the ECMA-402 API is working as you would expect, but only data for the English language is included. You can find more info on how to include more languages in the Wiki.",
  "requireLicenseAcceptance": false,
  "summary": "Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications.",
  "title": "Node.js",
  "version": "0.12.0",
  "tags": [
    "nodejs",
    "exe",
    "javascript",
    "runtime",
    "server"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}