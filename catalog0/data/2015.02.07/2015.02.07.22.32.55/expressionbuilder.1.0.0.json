{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.22.32.55/expressionbuilder.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Kendar.org",
  "catalog:commitId": "0ecce94f-096d-4ebf-9e3f-34e73e1a827b",
  "catalog:commitTimeStamp": "2015-02-07T22:32:55.3988732Z",
  "copyright": "Copyright Kendar.org",
  "created": "2013-12-09T08:01:25.687Z",
  "description": "Fluent C# interface to generate C# linq expressions.",
  "id": "ExpressionBuilder",
  "isPrerelease": false,
  "lastEdited": "2013-12-10T19:11:10.627Z",
  "packageHash": "Uh4vXf4R9gEVPvgTYfbANc3vGeFHeH6iCnzzJzPY7W8kRpt+XSOWNnPEJSBWVdZIB3wX83QORSHp72Sm5yfUSQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 17098,
  "projectUrl": "http://www.kendar.org/?p=/dotnet/expressionsbuilder",
  "published": "2013-12-09T08:01:25.687Z",
  "releaseNotes": "Available Operations: Parameters passing, Variables, Assignments, Logical operators, Comparison, If/Then/Else/ElseIf, While, Cast, Lambda",
  "requireLicenseAcceptance": false,
  "summary": "Recently I had to create lambda functions on the fly. I could'nt use the various code providers like the CSharpCodeProvider, since there would have been too much code to write. So i started to explore the wonders of Expressions. But it's a steep hill to climb.\n\nAt the same time i were exploring fluent interfaces, then i managed to build this library with a somehow fluent interface.",
  "title": "C# Expression Builder",
  "version": "1.0.0",
  "tags": [
    "Expression",
    "C#",
    "Dynamic",
    "Fluent",
    "Lambda",
    "Linq"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}