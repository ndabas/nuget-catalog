{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.29.01.07.51/asyncenumerator.1.0.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Serge Semenov",
  "catalog:commitId": "ff35a6f3-0acf-47e4-9983-256c72e62473",
  "catalog:commitTimeStamp": "2016-08-29T01:07:51.4537681Z",
  "created": "2016-03-16T19:12:11.567Z",
  "description": "Introduces IAsyncEnumerable, IAsyncEnumerator, and ForEachAsync()\nGitHub: https://github.com/tyrotoxin/AsyncEnumerable\n\nPROBLEM SPACE\n\nHelps to (a) create an element provider, where producing an element can take a lot of time\ndue to dependency on other asynchronous events (e.g. wait handles, network streams), and\n(b) a consumer that processes those element as soon as they are ready without blocking\nthe thread (the processing is scheduled on a worker thread instead).\n\n\nEXAMPLE\n\nusing System.Collections.Async;\n\nstatic IAsyncEnumerable<int> ProduceAsyncNumbers(int start, int end)\n{\n  return new AsyncEnumerable<int>(async yield => {\n\n    // Just to show that ReturnAsync can be used multiple times\n    await yield.ReturnAsync(start);\n\n    for (int number = start + 1; number <= end; number++)\n      await yield.ReturnAsync(number);\n\n    // You can break the enumeration loop with the following call:\n    yield.Break();\n\n    // This won't be executed due to the loop break above\n    await yield.ReturnAsync(12345);\n  });\n}\n\n// Just to compare with synchronous version of enumerator\nstatic IEnumerable<int> ProduceNumbers(int start, int end)\n{\n  yield return start;\n\n  for (int number = start + 1; number <= end; number++)\n    yield return number;\n\n  yield break;\n\n  yield return 12345;\n}\n\nstatic async Task ConsumeNumbersAsync()\n{\n  var asyncEnumerableCollection = ProduceAsyncNumbers(start: 1, end: 10);\n  await asyncEnumerableCollection.ForEachAsync(async number => {\n    await Console.Out.WriteLineAsync($\"{number}\");\n  });\n}\n\n// Just to compare with synchronous version of enumeration\nstatic void ConsumeNumbers()\n{\n  // NOTE: IAsyncEnumerable is derived from IEnumerable, so you can use either\n  var enumerableCollection = ProduceAsyncNumbers(start: 1, end: 10);\n  //var enumerableCollection = ProduceNumbers(start: 1, end: 10);\n\n  foreach (var number in enumerableCollection) {\n    Console.Out.WriteLine($\"{number}\");\n  }\n}",
  "id": "AsyncEnumerator",
  "isPrerelease": false,
  "lastEdited": "2016-08-29T01:07:38.843Z",
  "licenseUrl": "https://opensource.org/licenses/MIT",
  "listed": false,
  "packageHash": "ZqR5+EqvOZif0fV27DviA7BkWVxzWhj/P4WU4BKWE+9dpbGjrincN3i/klqWwSnXnClPn5OS/m334oHeb5FTFw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 14924,
  "projectUrl": "https://github.com/tyrotoxin/AsyncEnumerable",
  "published": "1900-01-01T00:00:00Z",
  "requireLicenseAcceptance": false,
  "summary": "Introduces IAsyncEnumerable, IAsyncEnumerator, and ForEachAsync()",
  "verbatimVersion": "1.0.0.1",
  "version": "1.0.0.1",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.29.01.07.51/asyncenumerator.1.0.0.1.json#AsyncEnumerator.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1074,
      "fullName": "AsyncEnumerator.nuspec",
      "length": 2674,
      "name": "AsyncEnumerator.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.29.01.07.51/asyncenumerator.1.0.0.1.json#lib/AsyncEnumerable.dll",
      "@type": "PackageEntry",
      "compressedLength": 7264,
      "fullName": "lib/AsyncEnumerable.dll",
      "length": 17408,
      "name": "AsyncEnumerable.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.29.01.07.51/asyncenumerator.1.0.0.1.json#lib/AsyncEnumerable.XML",
      "@type": "PackageEntry",
      "compressedLength": 2042,
      "fullName": "lib/AsyncEnumerable.XML",
      "length": 17238,
      "name": "AsyncEnumerable.XML"
    }
  ],
  "tags": [
    "IAsyncEnumerable",
    "IAsyncEnumerator",
    "ForEachAsync",
    "async",
    "await",
    "foreach"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}