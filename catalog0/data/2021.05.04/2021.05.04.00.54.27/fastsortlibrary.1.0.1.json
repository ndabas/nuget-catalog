{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.04.00.54.27/fastsortlibrary.1.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Shuji Kaya",
  "catalog:commitId": "d58013f1-0c13-4318-b5b9-6e1332f00a46",
  "catalog:commitTimeStamp": "2021-05-04T00:54:27.9270678Z",
  "copyright": "Shuji Kaya",
  "created": "2021-05-04T00:52:19.237Z",
  "description": "Sort faster than Array.Sort(). [Still under debugging]\n\nBothSidesNowSort()\t: Multi-task. Time is less than half on my intel i5 note(2 core 4 threads). Still, I can't solve unknown reason sort miss.\nMiceSort()\t\t\t: Single-task. Time is a little faster. More reliable.\n\n1. Usage\n\n\tvar\t\tsort = new SortEnvironment<T>() {\t\t// Change T -> class or value type of array\n\t\tData = {IList<T> Data},\t\t\t\t\t// Name of T[] or List<T> or other array based structure\n\t\tCompare = {Comparison<T> Compare},\t// Compare function\n//\t\tInverseOrder = true,\t\t\t// Set true if Descending\n//\t\tAlmostSorted = true,\t\t\t// Set true if the array is almost sorted (Time may be shortened. Normally time becomes longer.)\n//\t\tCoreCacheAmount = 256,\t\t// Data amount that can be stored each core cache. 2^N. Left value is my PC experimental one and used if this setting is omitted.\n// Below setting is only for 'BothSidesNowSort'\n//\t\tTaskAmount = 4\t\t\t\t\t// Parallel task amount. Environment.ProcessorCount (Thread amount) is used if this setting is omitted.\n//  RedZone = true           // Set true if wanting full throttle. Faster but danger. False is more safety under limiter.\n\t};\n\tsort.BothSidesNowSort(); // or sort.MiceSort();\n\nOr call like one of below. Array<T>.Sort() compatible shape.\n\tArraySort<T>.BothSidesNowSort(T[] Data);\n\tArraySort<T>.BothSidesNowSort(T[] Data, IComparer<T> Comparer);\n\tArraySort<T>.BothSidesNowSort(T[] Data, Comparison<T> Compare);\n\tListSort<T>.BothSidesNowSort(List<T> Data);\n\tListSort<T>.BothSidesNowSort(List<T> Data, IComparer<T> Comparer);\n\tListSort<T>.BothSidesNowSort(List<T> Data, Comparison<T> Compare);\n\n2. Character\n Method  : In-place merge sort, Bottom-up approach. \n Stable\t : Yes\n Memory\t : [log2(N/M) * 3 * int size * task amount] stack is used. (N is Data length. M is CoreCacheAmount.)\n         : I set 100 instead of log2(N/M). [I think it is sufficient safty value and present PC don't mind this size.]\n\t\t : And additionally, for BothSidesNowSort() multi-core control, [N/M * int size] array is used.\n Time    : Comparison: O(NlogN)\n         : Move: O(NlogN^2) when N is small, O(NlogN) when N is large. [My persume. Not decision]\n\n3. Notice\n - For chalenger and human sacrifice to brand new technology only\n   This is good tool for confirming your PC CPU core/thread true ability.\n   I still met unknown reason sort miss in continuous tests of \"Both sides now sort(RedZone = true)\".\n   Multi-task occasional bug is very difficult to guess the reason. Still under debugging.\n   In my test of present version, all faults are sort misses by some data broken. And when the sort is OK, all data is held.\n   And sort miss occurs always background of different application work in my test.\n   \"Mice sort\" or \"Both sides now sort(RedZone = flase)\" are more reliable.\n   But my purpose is only fastest sort. So I have not checked these long time.\n - If the comparison function is only subtraction like common sort benchmark, these are slower than Array.Sort().\n   Only when comparison function is time consuming, these sorts are faster than Array.Sort().\n - This function is available to IList<T> interface implemented array structure class. (T[], List<T>)\n   It can't sort LinkedList<T> because the class has no link patch function.\n   (C# LinkedList<T> originally has no sort function. Array shape or LinQ(not In-place) may be standard if sorting is necessary in C#.\n   I think In-place sort of linked list is possible and there is the demand.) \n\n4. Algorithm\n   Below article includes almost theory I using but the list in it includes many bugs. (A little previous version)\nhttps://www.codeproject.com/Articles/5275988/Fastest-Sort-Algorithm",
  "id": "FastSortLibrary",
  "isPrerelease": false,
  "lastEdited": "2021-05-04T00:54:23.74Z",
  "listed": true,
  "packageHash": "ZeChbM9XyvlIVMcCb8Z49Cr5SUor4jmw98cmULzqhq/DxkOyY9W+VrGJAnioy8+ZmZaolwutwx9zdI0OQUcWoA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 26432,
  "published": "2021-05-04T00:52:19.237Z",
  "releaseNotes": "Modify 2 bugs\nAdd parameter List<T>",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.1",
  "version": "1.0.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.04.00.54.27/fastsortlibrary.1.0.1.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.04.00.54.27/fastsortlibrary.1.0.1.json#FastSortLibrary.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2012,
      "fullName": "FastSortLibrary.nuspec",
      "length": 4397,
      "name": "FastSortLibrary.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.04.00.54.27/fastsortlibrary.1.0.1.json#lib/netstandard2.0/SortLibrary.dll",
      "@type": "PackageEntry",
      "compressedLength": 11543,
      "fullName": "lib/netstandard2.0/SortLibrary.dll",
      "length": 27648,
      "name": "SortLibrary.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.04.00.54.27/fastsortlibrary.1.0.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}