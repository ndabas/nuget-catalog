{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.01.12.36.00/ikvm.7.0.4335.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Alexei Ripenko",
  "catalog:commitId": "4e33e4c9-e705-410f-aa82-fd1d7a83f7dd",
  "catalog:commitTimeStamp": "2015-02-01T12:36:00.0922295Z",
  "created": "2011-12-29T10:39:59.867Z",
  "description": "With IKVM.NET you can run compiled Java code (bytecode) directly on Microsoft .NET or Mono. The bytecode is converted on the fly to CIL and executed.",
  "id": "IKVM",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://sourceforge.net/apps/mediawiki/ikvm/index.php?title=License",
  "packageHash": "zMxhdkYPGTQ8khk8VaQWVcQUF79FGvevK4BLxQEhJdcMkPf3TLUoaCk2e22DcWkkNDvhTE1YdaSALs0lSCikjQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 21668407,
  "projectUrl": "http://www.ikvm.net/",
  "published": "2011-12-29T10:40:02.85Z",
  "releaseNotes": "What's New (relative to IKVM.NET 0.46):\nhttp://weblog.ikvm.net/PermaLink.aspx?guid=692505a6-f9e7-45ec-90b9-ec7a75d3b509\nIntegrated OpenJDK 7 b147.\nImplemented Java 7 JVM changes.\nJava annotations on statically compiled code are now returned as java.lang.reflect.Proxy objects for compability with broken code that assumes this is always the case.\nAdded delegate conversion for java.lang.reflect.InvocationHandler to ikvm.runtime.Delegates.\nVarious remap file improvements.\nChanged build and JNI code to use different names for the Windows x86 and x64 versions of the native dll.\nRetain reflection field ordering for ikvmc compiled code (not required by spec, but to improve compatibility with broken code).\nVarious AWT fixes.\nInterop between java.lang.AutoCloseable and System.IDisposable.\nVarious build system improvements.\nAdded ikvmc -warnaserror option.\nFixed java.io.FileOutputStream in append mode to use atomic append.\nVarious performance improvements.\nAdded -Xnoglobbing option to ikvm.exe.\nVarious minor fixes.\nImplemented dual stack sockets (Windows Vista and up only).\nImplemented platform MBean server.\nImplemented SocketChannel.sendOutOfBandData().\nImplemented DatagramChannel multicast methods.\nRemoved mapping of System.Security.VerificationException to java.lang.VerifyError.\nIKVM.Reflection: Massive enhancements to support a very large portion of the managed PE capabilities (much more than System.Reflection.Emit).\nRuntime\n\nCode unloading (aka class GC) is not supported.\nIn Java static initializers can deadlock, on .NET some threads can see uninitialized state in cases where deadlock would occur on the JVM.\nJNI\n \nOnly supported in the default AppDomain.\nOnly the JNICALL calling convention is supported! (On Windows, HotSpot appears to also support the cdecl calling convention).\nCannot call string contructors on already existing string instances\nA few limitations in Invocation API support\n \nThe Invocation API is only supported when running on .NET.\nJNI_CreateJavaVM: init options \"-verbose[:class|:gc|:jni]\", \"vfprintf\", \"exit\" and \"abort\" are not implemented. The JDK 1.1 version of JavaVMInitArgs isn't supported.\nJNI_GetDefaultJavaVMInitArgs not implemented\nJNI_GetCreatedJavaVMs only returns the JavaVM if the VM was started through JNI or a JNI call that retrieves the JavaVM has already occurred.\nDestroyJVM is only partially implemented (it waits until there are no more non-daemon Java threads and then returns JNI_ERR).\nDetachCurrentThread doesn't release monitors held by the thread.\nNative libraries are never unloaded (because code unloading is not supported).\nThe JVM allows any reference type to be passed where an interface reference is expected (and to store any reference type in an interface reference type field), on IKVM this results in an IncompatibleClassChangeError.\nmonitorenter / monitorexit cannot be used on unitialized this reference.\nFloating point is not fully spec compliant.\nA method returning a boolean that returns an integer other than 0 or 1 behaves differently (this also applies to byte/char/short and for method parameters).\nSynchronized blocks are not async exception safe.\nGhost arrays don't throw ArrayStoreException when you store an object that doesn't implement the ghost interface.\nClass loading is more eager than on the reference VM.\nInterface implementation methods are never really final (interface can be reimplemented by .NET subclasses).\nJSR-133 finalization spec change is not fully implemented. The JSR-133 changes dictate that an object should not be finalized unless the Object constructor has run successfully, but this isn't implemented.\nStrict class-file checking is not implemented.\nStatic Compiler (ikvmc)\n\nSome subtle differences with ikvmc compiled code for public members inherited from non-public base classes (so called \"access stubs\"). Because the access stub lives in a derived class, when accessing a member in a base class, the derived cctor will be run whereas java (and ikvm) only runs the base cctor.\nTry blocks around base class ctor invocation result in unverifiable code (no known compilers produce this type of code).\nTry/catch blocks before base class ctor invocation result in unverifiable code (this actually happens with the Eclipse compiler when you pass a class literal to the base class ctor and compile with -target 1.4).\nOnly code compiled together during a single compilation fully obeys the JLS binary compatibility rules.",
  "requireLicenseAcceptance": false,
  "title": "IKVM.NET",
  "version": "7.0.4335",
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}