{
  "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dr. Gavin T.D. Greig",
  "catalog:commitId": "c7106657-762f-4678-a911-81b274b89be7",
  "catalog:commitTimeStamp": "2023-03-24T23:37:46.6848437Z",
  "copyright": "Â© Copyright 2023, Dr. Gavin T.D. Greig",
  "created": "2023-03-24T23:35:43.757Z",
  "description": "The library for things that may or may not exist.\n\nExistential is a utility library that contains parameter validation methods, a Maybe monad, and more. It can be used to work effectively with nulls, to efficiently resolve Code Analysis issues CA1062 and CA2000, to help generate a hash code, and to convert the names of generic types into a familiar string representation.",
  "iconFile": "Existential256.png",
  "id": "Existential.Net",
  "isPrerelease": false,
  "lastEdited": "2023-03-24T23:37:46.283Z",
  "licenseExpression": "MS-PL OR MIT",
  "licenseUrl": "https://licenses.nuget.org/MS-PL%20OR%20MIT",
  "listed": true,
  "packageHash": "IBy/bzHqn0Ix5vWe9a5OA15p5fPcFKPkUqEaiz84QsYcCcHmngKkMx/OwfUu0M1HakCmXQbzI2z/LBnYxqnlBg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 113414,
  "projectUrl": "https://existential.ggreig.com/",
  "published": "2023-03-24T23:35:43.757Z",
  "readmeFile": "ReadMe.md",
  "releaseNotes": "In this version (3.0.0):\n========================\nBreaking changes:\n* Removed support for .Net Framework 4.6.1. Consider upgrading to 4.6.2 or later.\n* Removed support for .Net Core 3.1. Consider upgrading to .Net 6.0 or later.\n* Removed support for .Net 5.0. Consider upgrading to .Net 6.0 or later.\n\nNew features:\n* Added support for .Net 7.0\n* Added extension method for Maybe<T>:\n  * ToNullable<T>(this Maybe<T>)\n* Added extension method for IEnumerable<T>:\n  * ToCollectionOfMaybe<T>(this IEnumerable<T>T)\n* Added extension method for IEnumerable<Maybe<T>>:\n  * ToCollectionOfNullable<T>(this IEnumerable>Maybe<T>>)\n* Added extension methods for Exception to support logging in exception filters:\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, Exception>, ILogger, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, Exception>, ILogger, TextWriter? inFallbackWriter = null)\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, T1, Exception>, ILogger, T1, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, T1, Exception>, ILogger, T1, TextWriter? inFallbackWriter = null)\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, T1, T2, Exception>, ILogger, T1, T2, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, T1, T2, Exception>, ILogger, T1, T2, TextWriter? inFallbackWriter = null)\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, T1, T2, T3, Exception>, ILogger, T1, T2, T3, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, T1, T2, T3, Exception>, ILogger, T1, T2, T3, TextWriter? inFallbackWriter = null)\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, T1, T2, T3, T4, Exception>, ILogger, T1, T2, T3, T4, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, T1, T2, T3, T4, Exception>, ILogger, T1, T2, T3, T4, TextWriter? inFallbackWriter = null)\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, T1, T2, T3, T4, T5, Exception>, ILogger, T1, T2, T3, T4, T5, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, T1, T2, T3, T4, T5, Exception>, ILogger, T1, T2, T3, T4, T5, TextWriter? inFallbackWriter = null)\n  * ShouldBeUnhandledLog(this Exception, Action<ILogger, T1, T2, T3, T4, T5, T6, Exception>, ILogger, T1, T2, T3, T4, T5, T6, TextWriter? inFallbackWriter = null)\n  * ShouldBeHandledLog(this Exception, Action<ILogger, T1, T2, T3, T4, T5, T6, Exception>, ILogger, T1, T2, T3, T4, T5, T6, TextWriter? inFallbackWriter = null)\n* Added extension methods for ILogger to support logging in exception filters:\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, Exception>, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, Exception>, TextWriter? inFallbackWriter = null)\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, T1, Exception>, T1, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, T1, Exception>, T1, TextWriter? inFallbackWriter = null)\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, T1, T2, Exception>, T1, T2, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, T1, T2, Exception>, T1, T2, TextWriter? inFallbackWriter = null)\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, T1, T2, T3, Exception>, T1, T2, T3, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, T1, T2, T3, Exception>, T1, T2, T3, TextWriter? inFallbackWriter = null)\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, T1, T2, T3, T4, Exception>, T1, T2, T3, T4, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, T1, T2, T3, T4, Exception>, T1, T2, T3, T4, TextWriter? inFallbackWriter = null)\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, T1, T2, T3, T4, T5, Exception>, T1, T2, T3, T4, T5, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, T1, T2, T3, T4, T5, Exception>, T1, T2, T3, T4, T5, TextWriter? inFallbackWriter = null)\n  * LogsThenRethrow(this ILogger, Exception, Action<ILogger, T1, T2, T3, T4, T5, T6, Exception>, T1, T2, T3, T4, T5, T6, TextWriter? inFallbackWriter = null)\n  * LogsThenHandle(this ILogger, Exception, Action<ILogger, T1, T2, T3, T4, T5, T6, Exception>, T1, T2, T3, T4, T5, T6, TextWriter? inFallbackWriter = null)\n\nBug fixes:\n  * For an empty Maybe<T>, where T was a value type, the method TryGetValue(out T)\nwould incorrectly return true and populate the out value with default(T).\n\nFuller history of changes at https://existential.ggreig.com/articles/version_history.html",
  "repository": "",
  "verbatimVersion": "3.0.0",
  "version": "3.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net6.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net6.0/microsoft.extensions.logging.abstractions",
          "@type": "PackageDependency",
          "id": "Microsoft.Extensions.Logging.Abstractions",
          "range": "[7.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net6.0/system.memory",
          "@type": "PackageDependency",
          "id": "System.Memory",
          "range": "[4.5.5, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net6.0/system.security.cryptography.algorithms",
          "@type": "PackageDependency",
          "id": "System.Security.Cryptography.Algorithms",
          "range": "[4.3.1, )"
        }
      ],
      "targetFramework": "net6.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net7.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net7.0/microsoft.extensions.logging.abstractions",
          "@type": "PackageDependency",
          "id": "Microsoft.Extensions.Logging.Abstractions",
          "range": "[7.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net7.0/system.memory",
          "@type": "PackageDependency",
          "id": "System.Memory",
          "range": "[4.5.5, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/net7.0/system.security.cryptography.algorithms",
          "@type": "PackageDependency",
          "id": "System.Security.Cryptography.Algorithms",
          "range": "[4.3.1, )"
        }
      ],
      "targetFramework": "net7.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/.netstandard2.0/microsoft.extensions.logging.abstractions",
          "@type": "PackageDependency",
          "id": "Microsoft.Extensions.Logging.Abstractions",
          "range": "[7.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#dependencygroup/.netstandard2.0/system.memory",
          "@type": "PackageDependency",
          "id": "System.Memory",
          "range": "[4.5.5, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#Existential.Net.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1565,
      "fullName": "Existential.Net.nuspec",
      "length": 7445,
      "name": "Existential.Net.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#lib/net6.0/Existential.Net.dll",
      "@type": "PackageEntry",
      "compressedLength": 18257,
      "fullName": "lib/net6.0/Existential.Net.dll",
      "length": 43520,
      "name": "Existential.Net.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#lib/net6.0/Existential.Net.xml",
      "@type": "PackageEntry",
      "compressedLength": 12550,
      "fullName": "lib/net6.0/Existential.Net.xml",
      "length": 158601,
      "name": "Existential.Net.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#lib/net7.0/Existential.Net.dll",
      "@type": "PackageEntry",
      "compressedLength": 18246,
      "fullName": "lib/net7.0/Existential.Net.dll",
      "length": 43520,
      "name": "Existential.Net.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#lib/net7.0/Existential.Net.xml",
      "@type": "PackageEntry",
      "compressedLength": 12550,
      "fullName": "lib/net7.0/Existential.Net.xml",
      "length": 158601,
      "name": "Existential.Net.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#lib/netstandard2.0/Existential.Net.dll",
      "@type": "PackageEntry",
      "compressedLength": 18933,
      "fullName": "lib/netstandard2.0/Existential.Net.dll",
      "length": 45056,
      "name": "Existential.Net.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#lib/netstandard2.0/Existential.Net.xml",
      "@type": "PackageEntry",
      "compressedLength": 13457,
      "fullName": "lib/netstandard2.0/Existential.Net.xml",
      "length": 169520,
      "name": "Existential.Net.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#ReadMe.md",
      "@type": "PackageEntry",
      "compressedLength": 1211,
      "fullName": "ReadMe.md",
      "length": 3102,
      "name": "ReadMe.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#Existential256.png",
      "@type": "PackageEntry",
      "compressedLength": 2204,
      "fullName": "Existential256.png",
      "length": 2375,
      "name": "Existential256.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.24.23.37.46/existential.net.3.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11510,
      "fullName": ".signature.p7s",
      "length": 11510,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "validation",
    "validate",
    "optional",
    "types",
    "maybe",
    "Optional<T>",
    "Maybe<T>",
    "null",
    "nulls",
    "generic",
    "names",
    "reflection",
    "exception",
    "filter",
    "logging",
    "when"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}