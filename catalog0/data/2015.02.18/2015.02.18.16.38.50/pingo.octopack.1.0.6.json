{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.18.16.38.50/pingo.octopack.1.0.6.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Herb Stahl",
  "catalog:commitId": "9b4f6edb-a125-48b7-b2dc-8acc77e9ff69",
  "catalog:commitTimeStamp": "2015-02-18T16:38:50.1735688Z",
  "created": "2015-02-18T16:38:06.713Z",
  "description": "REQUIREMENT.\nIn the project folder must exist a $(projectname).nuspec.  I use a custom implementation of TextTransform(TT) to always build a new nuspec that has the correct version number.\n\nexample:\n\n<?xml version=\"1.0\"?>\n\n<package >\n  <metadata>\n    <id>Packer</id>\n    <version>1.0.6</version>\n    <title>Packer</title>\n    <authors>Herb Stahl</authors>\n    <owners>Herb Stahl</owners>\n    <licenseUrl>https://localhost/License.txt</licenseUrl>\n    <projectUrl>https://localhost/Packer</projectUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <summary>Some Summary</summary>\n    <description>Some Description.</description>\n    <releaseNotes></releaseNotes>\n    <copyright>Copyright Â© Pingo LLC 2015</copyright>\n    <tags></tags>\n   \n  </metadata>\n  <files>\n    <file src=\"obj\\Release\\Package\\PackageTmp\\**\\*.*\" target=\"\" />\n  </files>\n</package>\n\n\nUsage: \n\"c:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe\" TheSolution.sln /t:Build /p:DeployOnBuild=true;PublishProfile=WebDeployPackage \n/p:Configuration=Release \n/p:RunPingoOctoPack=true",
  "developmentDependency": "true",
  "id": "Pingo.OctoPack",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/MIT",
  "packageHash": "CmkHAf/1MpUgSrZy6DBMgbtH6VmDQY76FJFWlpajCCx3DaAILbtHwoKfmmkr9raL6euCSbuWd7cqCugjA/7eQA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 7585,
  "published": "2015-02-18T16:38:06.713Z",
  "releaseNotes": "",
  "requireLicenseAcceptance": false,
  "summary": "Shamelessly based upon OctopusDeploy's OctoPack project.  This version makes use of the Publish feature that an ASP.NET MVC application has.  Let Microsoft do all the work of gathering the files, we j",
  "version": "1.0.6",
  "tags": [
    "Octopus"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}