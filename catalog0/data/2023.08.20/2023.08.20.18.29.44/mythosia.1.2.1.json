{
  "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "JJW",
  "catalog:commitId": "f6e9e30a-3b6a-43c4-8218-77ac4fd4894e",
  "catalog:commitTimeStamp": "2023-08-20T18:29:44.7917709Z",
  "created": "2023-08-20T18:26:57.897Z",
  "description": "This project supports custom functions for user's clean code that are not directly provided by .NET.\n\n# New functions \n===============================================================\n## 1. To numeric array\nList<byte> test = new List<byte>() { 10, 16, 15, 30, 45, 65, 90, 32 };\n\nvar result = test.ToUShortArray();  // result is 0x100a, 0x1e0f, 0x412d, 0x205a (when little endian)\nvar result = test.ToUIntArray();  // result is 0x1e0f100a, 0x205a412d (when little endian)\nvar result = test.ToULongArray(); // result is 0x205a412d1e0f100a (when little endian)\n===============================================================\n\n===============================================================\n## 2. To binary string\nprivate List<byte> test = new List<byte>() { 10, 16, 15, 30, 45, 65 };\n\n// binary\ntest.ToBinaryString();  // result is \"000010100001000000001111000111100010110101000001\"\ntest.ToBinaryString(BinaryPartitionSize.Bit2) // result is \"00 00 10 10 00 01 00 00 00 00 11 11 00 01 11 10 00 10 11 01 01 00 00 01\"\ntest.ToBinaryString(BinaryPartitionSize.HalfByte) // result is \"0000 1010 0001 0000 0000 1111 0001 1110 0010 1101 0100 0001\"\ntest.ToBinaryString(BinaryPartitionSize.Byte) // result is \"00001010 00010000 00001111 00011110 00101101 01000001\"\ntest.ToBinaryString(BinaryPartitionSize.Byte, \"0b\") // result is \"0b00001010 0b00010000 0b00001111 0b00011110 0b00101101 0b01000001\"\n===============================================================\n\n\n# Fixed\n===============================================================\nToPrefixedHexString and ToUnPrefixedHexString function is replaced with the ToHexString function but the function will have remained until 1.3.0 ver.\nPlease use the ToHexString.\n\n// hex\nvar result = test.ToHexStringL();  // result is  \"0a100f1e2d41\"\nvar result = test.ToHexStringL(HexPartitionSize.Byte);  // result is \"0a 10 0f 1e 2d 41\nvar result = test.ToHexStringL(HexPartitionSize.Byte2); // result is \"0a10 0f1e 2d41\"\nvar result = test.ToHexStringU(HexPartitionSize.Byte2); // result is \"0A10 0F1E 2D41\"\n===============================================================\n\n\n\n# Existing Functions \nusing Mythosia;\n\n// Example for string extension\nvar data = \"12345\".ToDefaultArray(); // Equal with Encoding.Default.GetBytes(\"12345\");\nvar data = \"12345\".ToASCIIArray(); // Equal with Encoding.ASCII.GetBytes(\"12345\");\nvar data = \"=\".Repeat(10); // data is \"==========\"\n\n// Example for numeric (byte, short, int, etc...) extension\nvar result = 56.IsInRange(0, 100);  // result is true \nvar result = 56.IsInRange(0, 30);   // result is false\nvar data = 56000000.ToSIPrefix();   // data is \"56 M\"\nvar data = 56000000.ToSIPrefix(SIPrefixUnit.Kilo);   // data is \"56000 k\"\nvar data = 423.42031.HostToNetworkEndian(); // change to big endian\n\n// Example for Enumerable extension\nnew List<byte> test = new List<byte>(){0xff, 0xab, 0x01, 0x00, 0xee};\ntest.AddExceptNull(item);  // add item if item is not null\n\nnew List<byte> newItems = new List<bye>(){ 0x01, 0x02 };\ntest.AddRangeParallel(newItems);    // add items as parallel",
  "id": "Mythosia",
  "isPrerelease": false,
  "lastEdited": "2023-08-20T18:29:28.317Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "+8lFRadIKvU3TaTcPJpp38tv3t9VH036IkTR2olDizhZi4qh4QPq08CdyRyQ009voug+c91m+IppMuJ926Gh0Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 47945,
  "projectUrl": "https://github.com/AJ-comp/Mythosia/tree/master/Mythosia",
  "published": "2023-08-20T18:26:57.897Z",
  "readmeFile": "README.md",
  "repository": "",
  "title": "Mythosia",
  "verbatimVersion": "1.2.1",
  "version": "1.2.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#Mythosia.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1380,
      "fullName": "Mythosia.nuspec",
      "length": 3951,
      "name": "Mythosia.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#lib/netstandard2.1/Mythosia.dll",
      "@type": "PackageEntry",
      "compressedLength": 28797,
      "fullName": "lib/netstandard2.1/Mythosia.dll",
      "length": 75264,
      "name": "Mythosia.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#Collections/README.md",
      "@type": "PackageEntry",
      "compressedLength": 376,
      "fullName": "Collections/README.md",
      "length": 763,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#README.md",
      "@type": "PackageEntry",
      "compressedLength": 2002,
      "fullName": "README.md",
      "length": 5863,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#Threading/Synchronization/README.md",
      "@type": "PackageEntry",
      "compressedLength": 830,
      "fullName": "Threading/Synchronization/README.md",
      "length": 2196,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.08.20.18.29.44/mythosia.1.2.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11509,
      "fullName": ".signature.p7s",
      "length": 11509,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "AsyncLock",
    "string",
    "numeric",
    "enumerable",
    "delegate",
    "parallel",
    "extension",
    "hex",
    "format",
    "helper"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}