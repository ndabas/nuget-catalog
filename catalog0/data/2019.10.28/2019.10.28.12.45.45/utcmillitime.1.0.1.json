{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.10.28.12.45.45/utcmillitime.1.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "John Kusumi",
  "catalog:commitId": "b578ca69-71e3-4018-bfba-be519573284c",
  "catalog:commitTimeStamp": "2019-10-28T12:45:45.6548844Z",
  "copyright": "2019",
  "created": "2019-10-28T12:42:57.2Z",
  "description": "Improve .NET to Unix time compatibility. UtcMilliTime is for Windows devs to get timestamps in the Unix Time Milliseconds format, from a software defined clock that syncs with NTP (network) time.\n\nIn JavaScript, there is the Date.now() function. It yields Unix time * 1000 + milliseconds, or 'UtcMilliTime' for short. That format of timestamp is our goal. As it is UTC time - not localized - it is unambiguous (not subject to adjustment for time zone or daylight saving time). As it is a whole number of milliseconds (integer), intervals (when expressed in milliseconds) can be added or subtracted to easily find the time immediately before or after the interval.\n\nIn .NET, the simple standard above becomes complicated. In common .NET projects, developers may feel it necessary to use .NET's DateTime, which counts ticks of a different precision in a different Epoch. It has been awkward to convert between these two formats as mentioned.\n\nNow UtcMilliTime - an open source package on GitHub - brings the Time.Now idiom to .NET code running on Windows. It is open source, MIT licensed, and maintained by J.P. Kusumi (at https://github.com/JPKusumi/UtcMilliTime).\n\nUsing UtcMilliTime, you can say var timestamp = Time.Now; and, it's a whole integer of the same scale and format as Date.now() in JavaScript. This component is not just a converter. It is a software defined clock that can reach out to an NTP (Network Time Protocol) server to synchronize itself with network time. It uses the Windows kernel, so this solution is only for running on Windows.",
  "id": "UtcMilliTime",
  "isPrerelease": false,
  "lastEdited": "2019-10-28T12:45:18.497Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "DFVAU7iTmGThExorZBF1dxaT09uk1lgBQWB8T2Eqzu0gsGqoCdoqlqxbfBXDorNN4S/Ry2QWdnQXKJA5nbIN9Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 23042,
  "projectUrl": "https://github.com/JPKusumi/UtcMilliTime",
  "published": "2019-10-28T12:42:57.2Z",
  "releaseNotes": "For a source of timestamps, you can use UtcMilliTime.dll, a less-than-20KB library. Install the NuGet package or otherwise set a reference to the dll. Add\n\nusing UtcMilliTime;\n\nto the top of the code file where you will use it. At class level or early in your code, say-\n\nITime Time = Clock.Time;\n\nor you may prefer to use dependency injection which would allow you to mock the ITime interface. Then, in the normal course of your code, you can say:\n\nvar timestamp = Time.Now;\n\nThat will get you an Int64 (long) timestamp value expressing the whole number of milliseconds that have elapsed in the Unix Epoch since 1/1/1970 00:00:00, excluding leap seconds. Also, just once at the beginning of run time, you should use this line-\n\nTime.SuppressNetworkCalls = false;\n\nBy default, the component would pass along device time - the time set on the local device by Windows and perhaps the user. The line above gives the clock permission to use the network, for synchronization with an NTP (Network Time Protocol) server. The clock then updates itself (asynchronously) to network time, and it leaves device time alone. Device time will be ignored for the rest of run time.\n\n(However, if permission is not given as above, then the clock yields device time, and network time will be ignored.)\n\nFor more info, see the ReadMe at https://github.com/JPKusumi/UtcMilliTime",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.1",
  "version": "1.0.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.10.28.12.45.45/utcmillitime.1.0.1.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.10.28.12.45.45/utcmillitime.1.0.1.json#UtcMilliTime.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1788,
      "fullName": "UtcMilliTime.nuspec",
      "length": 3872,
      "name": "UtcMilliTime.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.10.28.12.45.45/utcmillitime.1.0.1.json#lib/netstandard2.0/UtcMilliTime.dll",
      "@type": "PackageEntry",
      "compressedLength": 8378,
      "fullName": "lib/netstandard2.0/UtcMilliTime.dll",
      "length": 18432,
      "name": "UtcMilliTime.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.10.28.12.45.45/utcmillitime.1.0.1.json#ReadMe.txt",
      "@type": "PackageEntry",
      "compressedLength": 734,
      "fullName": "ReadMe.txt",
      "length": 1377,
      "name": "ReadMe.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.10.28.12.45.45/utcmillitime.1.0.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "time",
    "timestamp",
    "csharp",
    "c-sharp",
    "clock",
    "ntp",
    "ntp-client",
    "unix-timestamp",
    "milliseconds",
    "windows",
    "date",
    "datetime",
    "timezone",
    "calendar",
    "unix-epoch",
    "timestamps",
    "ntpclient-library",
    "utcmillitime",
    "unixtimemilliseconds"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}