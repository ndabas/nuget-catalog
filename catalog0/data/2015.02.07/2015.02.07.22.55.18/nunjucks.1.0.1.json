{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.22.55.18/nunjucks.1.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "James Long",
  "catalog:commitId": "e315844a-c8ab-4e71-a1f9-d28ee891e7ec",
  "catalog:commitTimeStamp": "2015-02-07T22:55:18.9230122Z",
  "created": "2014-01-28T05:23:43.093Z",
  "description": "You've been looking for a more sophisticated templating engine for JavaScript. Here it is. \n- Rich Powerful language with block inheritance, autoescaping, macros, asynchronous control, and more. Heavily inspired by jinja2\n- Fast & Lean High-performant. Small 8K gzipped runtime with precompiled templates in the browser\n- Extensible Crazy extensible with custom filters and extensions\n- Everywhere Available in node and all modern web browsers, with thorough precompilation options",
  "id": "Nunjucks",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2014-01-28T05:23:57.927Z",
  "licenseUrl": "https://github.com/jlongster/nunjucks/master/LICENSE",
  "packageHash": "P43m78FdfJUOz5aCpfEc4C3/3EpQlp2ewzbhlcbfjZcoYMa0UjncxHO82w1umpDW+0zZpHImATLb7iL9QIhIUw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 72446,
  "projectUrl": "http://jlongster.github.io/nunjucks/",
  "published": "2014-01-28T05:23:43.093Z",
  "releaseNotes": "v1.0.1 (December 16, 2013)\n\nThis is mostly bugfix and code cleanup release. The only added things are:\n- New `nunjucks.compile` function which takes a string and returns a `Template` object\n- The `urlize` filter has been added\n\nv1.0.0 (October 24, 2013)\n\nWe've hit 1.0! Thanks for helping nunjucks stabilize and become\nawesome. I've added many good features recently and several people\nhave been using them, and everything seems stable. I think it's time\nto cut 1.0.\n\nBig changes:\n\n- An asynchronous API is now available, and async filters, extensions, and\n  loaders is supported. The async API is optional and if you don't do\n  anything async (the default), nothing changes for you. You can read\n  more about this http://jlongster.github.io/nunjucks/api.html#asynchronous-support\n  \n- Much simpler higher-level API for initiating/configuring nunjucks is\n  available. Read more http://jlongster.github.io/nunjucks/api.html#simple-api\n  \n- An official grunt plugin is available for precompiling templates: [grunt-nunjucks](https://github.com/jlongster/grunt-nunjucks)\n  \n- The browser files have been renamed**. nunjucks.js is now the full\n  library with compiler, and nunjucks-slim.js is the small version\n  that only works with precompiled templates\n\nSmaller changes:\n\n- urlencode filter has been added\n  \n- The express integration has been refactored and isn't a kludge\n  anymore. Should avoid some bugs and be more future-proof;\n  \n- The order in which variables are lookup up in the context and frame\n  lookup has been reversed. It will now look in the frame first, and\n  then the context. This means that if a `for` loop introduces a new\n  var, like `{% for name in names %}`, and if you have `name` in the\n  context as well, it will properly reference `name` from the for loop\n  inside the loop. (fixes #122 and #119)",
  "requireLicenseAcceptance": false,
  "summary": "Nunjucks is a full featured templating engine for javascript. It is heavily inspired by jinja2.",
  "version": "1.0.1",
  "tags": [
    "javascript",
    "nunjucks",
    "jinja2",
    "templating"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}