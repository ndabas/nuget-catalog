{
  "@id": "https://api.nuget.org/v3/catalog0/data/2023.11.07.14.16.54/jwtfacade.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Milward Kadzitaye",
  "catalog:commitId": "cd4ca992-0a5f-4a7a-a90b-314061b0522f",
  "catalog:commitTimeStamp": "2023-11-07T14:16:54.6321642Z",
  "created": "2023-11-07T14:14:12.443Z",
  "description": "Compose the below json in appsettings.json \"JwtInfo\": { \"Issuer\": \"http://localhost:4200\", \"Audience\": \"http://localhost:4200\", \"SigningKey\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IkY1Qzc1QUEwQTE1M0M1OTI4NzE0\", \"ExpiryTime\": 3600, \"SaveToken\": false, \"RequestHttpsMetaData\": false, \"ValidateIssuer\": true, \"ValidateAudience\": true, \"ValidateLifetime\": true, \"ValidateIssuerSigningKey\": true } Replace the SigningKey with your own key. Do the same for Issuer and Audience.\n\nCall builder.InjectJwtSettingsToServices() in program cs to add all the necessary settings to builder.Services collection Calling InjectJwtSettingsToServices() is equivalent to the below 3 lines builder.InjectJwtInfo(); builder.AddAuthenticationToServices(TokenConfigManager.GetJwtInfo(builder.Configuration)); builder.AddAuthorizationToServices();\n\nAdd authentication in the middleware Remember in middleware order is important\n\napp.UseHttpsRedirection();\n\napp.UseAuthentication(); // add authentication in the middleware app.UseAuthorization();\n\napp.MapControllers();\n\nCall var result = await TokenConfigManager.GenerateTokenAsync(_jwtInfo, tokenInfo); to generate the token Remember IJwtInfo has been injected by builder.InjectJwtInfo(); as such can be passed in the constructor or method without being created manually Token info can be created like below, but more options are available var tokenInfo = new TokenUserInfo { Sub = \"MY_SUBJECT\", UniqueName = \"example@gmail.com\", Email = \"example@gmail.com\" };\n\nAdd [Authorize] to the desired controller or action like below [Authorize] [HttpGet] [Route(\"testAuth\")] public async Task<IActionResult> TestAuth() { return Ok(); }\n\nTo inject predefined multiple schemes, call\nbuilder.InjectMultiSchemeAuth();\n\nAnd add [Authorize(policy : name)] on a controller\n\nwhere name is IdentityScheme, TellerScheme or MultiAuthSchemes\n\nOne can also compose custom schemes as shown below:\n\nvar jwtInfo = GetJwtInfo(builder.Configuration);\n            var schemes = new string[]",
  "id": "JwtFacade",
  "isPrerelease": false,
  "lastEdited": "2023-11-07T14:16:44.84Z",
  "listed": true,
  "packageHash": "6SKVthoh2ygTBui69Gmkp5RGkX3R3UbVjffMcqmnaDlchSF8DzBOkgV7XsPvibkn225yWce3uxYLZ2nBk6q7tg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 23859,
  "published": "2023-11-07T14:14:12.443Z",
  "releaseNotes": "Compose the below json in appsettings.json \"JwtInfo\": { \"Issuer\": \"http://localhost:4200\", \"Audience\": \"http://localhost:4200\", \"SigningKey\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IkY1Qzc1QUEwQTE1M0M1OTI4NzE0\", \"ExpiryTime\": 3600, \"SaveToken\": false, \"RequestHttpsMetaData\": false, \"ValidateIssuer\": true, \"ValidateAudience\": true, \"ValidateLifetime\": true, \"ValidateIssuerSigningKey\": true } Replace the SigningKey with your own key. Do the same for Issuer and Audience.\n\nCall builder.InjectJwtSettingsToServices() in program cs to add all the necessary settings to builder.Services collection Calling InjectJwtSettingsToServices() is equivalent to the below 3 lines builder.InjectJwtInfo(); builder.AddAuthenticationToServices(TokenConfigManager.GetJwtInfo(builder.Configuration)); builder.AddAuthorizationToServices();\n\nAdd authentication in the middleware Remember in middleware order is important\n\napp.UseHttpsRedirection();\n\napp.UseAuthentication(); // add authentication in the middleware app.UseAuthorization();\n\napp.MapControllers();\n\nCall var result = await TokenConfigManager.GenerateTokenAsync(_jwtInfo, tokenInfo); to generate the token Remember IJwtInfo has been injected by builder.InjectJwtInfo(); as such can be passed in the constructor or method without being created manually Token info can be created like below, but more options are available var tokenInfo = new TokenUserInfo { Sub = \"MY_SUBJECT\", UniqueName = \"example@gmail.com\", Email = \"example@gmail.com\" };\n\nAdd [Authorize] to the desired controller or action like below [Authorize] [HttpGet] [Route(\"testAuth\")] public async Task<IActionResult> TestAuth() { return Ok(); }\n\nTo inject predefined multiple schemes, call\nbuilder.InjectMultiSchemeAuth();\n\nAnd add [Authorize(policy : name)] on a controller\n\nwhere name is IdentityScheme, TellerScheme or MultiAuthSchemes\n\nOne can also compose custom schemes as shown below:\n\npublic static void InjectMultiSchemeAuth(this WebApplicationBuilder builder)\n        {\n            var jwtInfo = GetJwtInfo(builder.Configuration);\n            var schemes = new string[]\n            {\n                TELLER_SCHEME,\n                IDENTITY_SCHEME\n            };\n\n            var list = new JwtSchemeInfo[]\n            {\n                new JwtSchemeInfo\n                {\n                    JwtInfo = jwtInfo,\n                    Scheme = JwtBearerDefaults.AuthenticationScheme\n                },\n                new JwtSchemeInfo\n                {\n                    JwtInfo = jwtInfo,\n                    Scheme = TELLER_SCHEME\n                }\n            };\n\n            builder.InjectJwtInfo();\n\n            builder.AddAuthorizationToServices(schemes); // step 2 but since in services order does not matter\n\n            var authBuilder = builder.AddAuthenticationToServices(list,\n                configureForIdentityServer: true,\n                configurationScheme: MULTI_SCHEME\n                );\n\n            builder.AddAuthPolcy(authBuilder,\n                MULTI_SCHEME,\n                TELLER_SCHEME,\n                IDENTITY_SCHEME,\n                jwtInfo.Issuer);\n        }",
  "requireLicenseAcceptance": false,
  "summary": "A simple library for adding JWT support to dotnet core web apis.",
  "title": "Jwt Facade",
  "verbatimVersion": "1.0.4",
  "version": "1.0.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.11.07.14.16.54/jwtfacade.1.0.4.json#dependencygroup/net6.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.11.07.14.16.54/jwtfacade.1.0.4.json#dependencygroup/net6.0/microsoft.aspnetcore.authentication.jwtbearer",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Authentication.JwtBearer",
          "range": "[6.0.24, )"
        }
      ],
      "targetFramework": "net6.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.11.07.14.16.54/jwtfacade.1.0.4.json#JwtFacade.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1650,
      "fullName": "JwtFacade.nuspec",
      "length": 5923,
      "name": "JwtFacade.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.11.07.14.16.54/jwtfacade.1.0.4.json#lib/net6.0/JwtFacade.dll",
      "@type": "PackageEntry",
      "compressedLength": 8106,
      "fullName": "lib/net6.0/JwtFacade.dll",
      "length": 18432,
      "name": "JwtFacade.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.11.07.14.16.54/jwtfacade.1.0.4.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11512,
      "fullName": ".signature.p7s",
      "length": 11512,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}