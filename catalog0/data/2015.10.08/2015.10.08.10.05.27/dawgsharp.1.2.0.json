{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.10.08.10.05.27/dawgsharp.1.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Sergey Slepov",
  "catalog:commitId": "5af9949c-1319-4f69-bf11-2f599a9bbf16",
  "catalog:commitTimeStamp": "2015-10-08T10:05:27.1013171Z",
  "copyright": "2014, 2015 Sergey Slepov",
  "created": "2015-10-08T10:04:56.713Z",
  "description": "DAWG (Directed Acyclic Word Graph) is a data structure for storing and searching large word lists while keeping your memory footprint small and lookups fast. DawgSharp is an open-source C# implementation featuring a linear time graph reduction algorithm and out-of-the-box persistence support. \n\nThe two main objects in the library are Dawg and DawgBuilder. Dawg is immutable, you must use DawgBuilder to build a Dawg and then save it to a stream. Then use Dawg.Load to rehydrate the data. Once reloaded, Dawg re-emerges as a completely different data structure (but, oddly, the same class) that is nearly as fast as a HashSet for lookups and is much, much more memory-efficient (factors of 30x - 40x are not uncommon). Please note that the Save/Load step is necessary to get the full potential out of the Dawg object. Use a MemoryStream if disk interaction is not desired.\n\nThe Dawg class can be thought of as a read-only Dictionary <string, Value> type. It has the [\"\"] indexer and implements IEnumerable <KeyValuePair <string, Value>>. \n\nOne other very useful feature of Dawg (not found in Dictionary) is the ability to quickly find all words that start with a particular substring: dawg.MatchPrefix (\"star\") could possibly yield \"star\", \"starch\", \"start\", \"starting\", etc.\n\nThis package is provided under the terms of the GNU GPL v3. Source code and documentation are available on GitHub: https://github.com/bzaar/DawgSharp. Commercial licenses are also available.",
  "id": "DawgSharp",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "https://github.com/bzaar/DawgSharp/blob/master/LICENSE.txt",
  "listed": true,
  "packageHash": "ara9dB1TJcMlQ0KqZqkIZ/jX3eOMVwVU512OyqaxgBfJ9l7ueylZi++iPbSrpcDwf5+4GrQ1MoFNzjzCP8q52Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 36342,
  "projectUrl": "https://github.com/bzaar/DawgSharp",
  "published": "2015-10-08T10:04:56.713Z",
  "releaseNotes": "This version has been optimized to use EIGHT times less RAM than the previous version. In a typical benchmark test, it used 2.5M RAM to store 2.5 million words (yes, one byte per word) while maintaining a lookup speed of around one million words per second. The .NET Dictionary object uses 87M RAM under the same conditions.\n\nThe new version is fully compatible with the previous version on both source-code and binary levels and it will happily read files produced by its predecessor.\nThe assembly is now CLS-compliant which ensures it can be used from VB.NET and F#.\nThe assembly has been signed to allow side-by-side installations.\nThe SaveTo method has been changed slightly not to close the stream after itâ€™s done.\nThe license was changed to GPL for this release. If you need a commercial license, please contact the author.",
  "requireLicenseAcceptance": false,
  "summary": "Space and time efficient string dictionary in C#",
  "verbatimVersion": "1.2.0",
  "version": "1.2.0",
  "tags": [
    "DAWG",
    "string",
    "dictionary"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}