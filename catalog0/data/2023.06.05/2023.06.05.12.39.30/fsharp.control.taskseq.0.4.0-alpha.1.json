{
  "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Abel Braaksma,Don Syme",
  "catalog:commitId": "7e8c189f-ec36-4265-a976-3bbd869621e6",
  "catalog:commitTimeStamp": "2023-06-05T12:39:30.1797914Z",
  "copyright": "Copyright 2023",
  "created": "2023-06-05T12:37:08.123Z",
  "description": "This library brings C#'s concept of 'await foreach' to F#, with a seamless implementation of IAsyncEnumerable<'T>.\n\nThe 'taskSeq' computation expression adds support for awaitable asynchronous sequences with similar ease of use and performance to F#'s 'task' CE, with minimal overhead through ValueTask under the hood. TaskSeq brings 'seq' and 'task' together in a safe way.\n\nGenerates optimized IL code through resumable state machines, and comes with a comprehensive set of functions in module 'TaskSeq'. See README for documentation and more info.",
  "iconFile": "taskseq-icon.png",
  "id": "FSharp.Control.TaskSeq",
  "isPrerelease": true,
  "lastEdited": "2023-06-05T12:39:09.39Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "k8lspeOyL0w6mEMMbiMTvoP2uODAhaeheUl18um/sFAvw00H8VvOWF5XCGBowEomdmgAgKL7m0sdypCrXCRPlg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 157276,
  "projectUrl": "https://github.com/fsprojects/FSharp.Control.TaskSeq",
  "published": "2023-06-05T12:37:08.123Z",
  "readmeFile": "nuget-package-readme.md",
  "releaseNotes": "Release notes:\n0.4.x (unreleased)\n    - fix documentation\n\t\n0.4.0-alpha.1\n    - fixes not calling Dispose for 'use!', 'use', or `finally` blocks #157 (by @bartelink)\n    - BREAKING CHANGE: null args now raise ArgumentNullException instead of NullReferenceException, #127\n    - adds `let!` and `do!` support for F#'s Async<'T>, #79, #114\n    - adds TaskSeq.takeWhile, takeWhileAsync, takeWhileInclusive, takeWhileInclusiveAsync, #126 (by @bartelink)\n    - adds AsyncSeq vs TaskSeq comparison chart, #131\n    - removes release-notes.txt from file dependencies, but keep in the package, #138\n    \n0.3.0\n    - internal renames, improved doc comments, signature files for complex types, hide internal-only types, fixes #112.\n    - adds support for static TaskLike, allowing the same let! and do! overloads that F# task supports, fixes #110.\n    - implements 'do!' for non-generic Task like with Task.Delay, fixes #43.\n    - adds support for 'for .. in ..' with task sequences in F# tasks and async, #75, #93 and #99 (with help from @theangrybyrd).\n    - adds TaskSeq.singleton, #90 (by @gusty).\n    - fixes overload resolution bug with 'use' and 'use!', #97 (thanks @peterfaria).\n    - improves TaskSeq.empty by not relying on resumable state, #89 (by @gusty).\n    - does not throw exceptions anymore for unequal lengths in TaskSeq.zip, fixes #32.\n\n0.2.2\n    - removes TaskSeq.toSeqCachedAsync, which was incorrectly named. Use toSeq or toListAsync instead.\n    - renames TaskSeq.toSeqCached to TaskSeq.toSeq, which was its actual operational behavior.\n\n0.2.1\n    - fixes an issue with ValueTask on completed iterations.\n    - adds `TaskSeq.except` and `TaskSeq.exceptOfSeq` async set operations.\n\n0.2\n    - moved from NET 6.0, to NetStandard 2.1 for greater compatibility, no functional changes.\n    - move to minimally necessary FSharp.Core version: 6.0.2.\n    - updated readme with progress overview, corrected meta info, added release notes.\n\n0.1.1\n    - updated meta info in nuget package and added readme.\n\n0.1\n    - initial release\n    - implements taskSeq CE using resumable state machines\n        - with support for: yield, yield!, let, let!, while, for, try-with, try-finally, use, use!\n        - and: tasks and valuetasks\n    - adds toXXX / ofXXX functions\n    - adds map/mapi/fold/iter/iteri/collect etc with async variants\n    - adds find/pick/choose/filter etc with async variants and 'try' variants\n    - adds cast/concat/append/prepend/delay/exactlyOne\n    - adds empty/isEmpty\n    - adds findIndex/indexed/init/initInfinite\n    - adds head/last/tryHead/tryLast/tail/tryTail\n    - adds zip/length",
  "repository": "",
  "title": "Computation expression 'taskSeq' for processing IAsyncEnumerable sequences and module functions",
  "verbatimVersion": "0.4.0-alpha.1",
  "version": "0.4.0-alpha.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#dependencygroup/.netstandard2.1/fsharp.core",
          "@type": "PackageDependency",
          "id": "FSharp.Core",
          "range": "[6.0.1, )"
        }
      ],
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#FSharp.Control.TaskSeq.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2008,
      "fullName": "FSharp.Control.TaskSeq.nuspec",
      "length": 4359,
      "name": "FSharp.Control.TaskSeq.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#lib/netstandard2.1/FSharp.Control.TaskSeq.dll",
      "@type": "PackageEntry",
      "compressedLength": 128076,
      "fullName": "lib/netstandard2.1/FSharp.Control.TaskSeq.dll",
      "length": 392192,
      "name": "FSharp.Control.TaskSeq.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#lib/netstandard2.1/FSharp.Control.TaskSeq.xml",
      "@type": "PackageEntry",
      "compressedLength": 6518,
      "fullName": "lib/netstandard2.1/FSharp.Control.TaskSeq.xml",
      "length": 52634,
      "name": "FSharp.Control.TaskSeq.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#taskseq-icon.png",
      "@type": "PackageEntry",
      "compressedLength": 1314,
      "fullName": "taskseq-icon.png",
      "length": 1392,
      "name": "taskseq-icon.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#nuget-package-readme.md",
      "@type": "PackageEntry",
      "compressedLength": 5300,
      "fullName": "nuget-package-readme.md",
      "length": 26603,
      "name": "nuget-package-readme.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.06.05.12.39.30/fsharp.control.taskseq.0.4.0-alpha.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11528,
      "fullName": ".signature.p7s",
      "length": 11528,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "taskseq",
    "f#",
    "computation",
    "expression",
    "IAsyncEnumerable",
    "task",
    "async",
    "asyncseq"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}