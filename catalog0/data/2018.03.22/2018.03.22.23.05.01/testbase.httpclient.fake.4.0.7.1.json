{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.03.22.23.05.01/testbase.httpclient.fake.4.0.7.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Chris F Carroll",
  "catalog:commitId": "c2361907-88e6-4406-bdfc-1d6c9fd7c0c8",
  "catalog:commitTimeStamp": "2018-03-22T23:05:01.0900743Z",
  "copyright": "(c) Chris F. Carroll, 2013-2018",
  "created": "2018-03-22T23:00:15.413Z",
  "description": "*TestBase* gives you a flying start with \n- fluent assertions that are easy to extend\n- tools for testing with dependencies on AspNetMvc, HttpClient, Ado.Net, Streams\n\nChainable fluent assertions get you to the point concisely\n------------------\n```\n- ShouldEqualByValue(), ShouldEqualByValueExceptFor() \n  work with all kinds of object and collections, and report what differed.\n- string.ShouldMatch().ShouldEqualIgnoringCase(), ...\n- numeric.ShouldBeBetween().ShouldEqualWithTolerance(), ...\n- IEnumerable.ShouldAll().ShouldContain().ShouldNotContain(), ...\n- Stream.ShouldHaveSameStreamContentAs(), Stream.ShouldContain()\n\nUnitUnderTest.Action()\n    .ShouldNotBeNull()\n    .ShouldEqualByValue(new {Id=1, Payload=expected} )\n    .Payload\n        .ShouldMatchIgnoringCase(\"I expected this\")\n\t\t    .Should(somePredicate);\n```\n\nTestBase.HttpClient.Fake\n------------------------\n\n```\n  var uut = new FakeHttpClient()\n        .Setup(x=>x.RequestUri.PathAndQuery.StartsWith(\"/this\")).Returns(response)\n        .Setup(x=>x.Method==HttpMethod.Put).Returns(new HttpResponseMessage(HttpStatusCode.Accepted))\n```\n\nTestBase.FakeDb\n------------------\n`FakeDbConnection` \n\n```\n- db.SetupForQuery(…)\n- db.SetupForExecuteNonQuery(…)\n- db.ShouldHaveUpdated(\"tableName\", …)\n- db.ShouldHaveSelected(\"tableName\", …)\n- db.ShouldHaveUpdated(\"tableName\", …)\n- db.ShouldHaveDeleted(\"tableName\", …)\n- db.ShouldHaveInvoked(cmd => predicate(cmd))\n- db.ShouldHaveXXX().ShouldHaveParameter(\"name\", value)\n- db.Verify(x=>x.CommandText.Matches(\"Insert [case] .*\") && x.Parameters[\"id\"].Value==1)\n```\n\nTestBase.Mvc\n------------\n```\nControllerUnderTest.Action()\n  .ShouldbeViewResult()\n  .ShouldHaveModel<TModel>()\n  .ShouldEqualByValue(expected)\nControllerUnderTest.Action()\n  .ShouldBeRedirectToRouteResult()\n  .ShouldHaveRouteValue(\"expectedKey\", [Optional] \"expectedValue\");\n\nShouldHaveViewDataContaining(), ShouldBeJsonResult() etc.\n```\n\nTestBase.Mvc Version 4 for netstandard20 & AspNetCore Mvc\n---------------------------------------------------------\n\n- Test most controllers with zero setup using `controllerUnderTest.WithControllerContext(actionUnderTest)` :\n\n```\n[Test]\npublic void ShouldBeViewWithModel_ShouldAssertViewResultAndNameAndModel()\n{\n    var controllerUnderTest = new AController().WithControllerContext(\"Action\");\n    \n    controllerUnderTest\n        .Action().ShouldBeViewWithModel<AClass>(\"ViewName\")\n        .ShouldBeOfType<AClass>()\n        .FooterLink.ShouldBe(\"/AController/ActionName\");\n}\n\n```\n\n- Test more complex controller/application dependencies using `HostedMvcTestFixtureBase` and specify your MVCApplications `Startup` class:\n\n```\n[TestCase(\"/dummy\")]\npublic async Task Put_Should_ReturnA(string url)\n{\n    var something= new Fixture().Create<Something>();\n    var jsonBody= new StringContent(something.ToJSon(), Encoding.UTF8, \"application/json\");\n    var httpClient=GivenClientForRunningServer<Startup>();\n    GivenRequestHeaders(httpClient, \"CustomHeader\", \"HeaderValue1\");\n\n    var result = await httpClient.PutAsync(url, jsonBody);\n\n    result.ShouldBe_202Accepted();\n    DummyController.Putted.ShouldEqualByValue( something );\n}\n```\n\nTestBase.Mvc Version 3 for Net4\n-------------------------------\n\n`Controller.WithHttpContextAndRoutes()` fakes your http request &amp; context. \nUse the RegisterRoutes method of your actual application to test Controller.Url with your application's configured routes.\n\n```\nControllerUnderTest\n  .WithHttpContextAndRoutes(\n    RouteConfig.RegisterRoutes, \n    \"/incomingurl\")\n\nApiControllerUnderTest.WithWebApiHttpContext&lt;T&gt;(\n    httpMethod, \n    requestUri,\n    routeTemplate)\n```\n\nTestable Logging with `StringListLogger`.\nMix and match with your favourite test runners and frameworks.\n\n- Building on Mono : define compile symbol NoMSTest to remove dependency on Microsoft.VisualStudio.QualityTools.UnitTestFramework",
  "id": "TestBase.HttpClient.Fake",
  "isPrerelease": false,
  "lastEdited": "2018-03-22T23:03:34.98Z",
  "listed": true,
  "packageHash": "k3BA7NUFbOL94nSpGZkTQwAee8JR4RaunewjnRn+4IsnN0YPn2L1gbLsAbM33ZswjQ0XNfOtNnZvlAy1zCpW1Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 10181,
  "projectUrl": "http://github.com/chrisfcarroll/TestBase",
  "published": "2018-03-22T23:00:15.413Z",
  "releaseNotes": "ChangeLog\n---------\n4.0.7.0 Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)\n4.0.6.2 TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()\n4.0.5.2 TestBase.Mvc partially ported to netstandard20 / AspNetCore\n4.0.4.1 StreamShoulds\n4.0.3.0 StringListLogger as MS Logger and as Serilogger\n4.0.1.0 Port to NetCore\n3.0.3.0 Improves FakeDb setup\n3.0.x.0 adds and/or corrects missing Shoulds()\n2.0.5.0 adds some intellisense and FakeDbConnection.Verify(..., message,args) overload",
  "repository": "",
  "requireLicenseAcceptance": false,
  "title": "TestBase – Rich, fluent assertions and useful fakes for HttpClient and more",
  "verbatimVersion": "4.0.7.1",
  "version": "4.0.7.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.03.22.23.05.01/testbase.httpclient.fake.4.0.7.1.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.03.22.23.05.01/testbase.httpclient.fake.4.0.7.1.json#TestBase.HttpClient.Fake.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2370,
      "fullName": "TestBase.HttpClient.Fake.nuspec",
      "length": 5575,
      "name": "TestBase.HttpClient.Fake.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.03.22.23.05.01/testbase.httpclient.fake.4.0.7.1.json#lib/netstandard2.0/TestBase.HttpClient.Fake.dll",
      "@type": "PackageEntry",
      "compressedLength": 4454,
      "fullName": "lib/netstandard2.0/TestBase.HttpClient.Fake.dll",
      "length": 9728,
      "name": "TestBase.HttpClient.Fake.dll"
    }
  ],
  "tags": [
    "nunit",
    "test",
    "unittest",
    "tdd",
    "fluent",
    "assertions",
    "mock",
    "httpclient",
    "system.net",
    "httprequestmessage"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}