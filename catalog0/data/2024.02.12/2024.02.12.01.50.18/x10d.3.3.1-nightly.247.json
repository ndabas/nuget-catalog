{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Oliver Booth",
  "catalog:commitId": "9a63dff8-0a3e-4ac2-bc36-e64fd133655c",
  "catalog:commitTimeStamp": "2024-02-12T01:50:18.8922694Z",
  "created": "2024-02-12T01:47:21.027Z",
  "description": "Extension methods on crack.",
  "iconFile": "branding_Icon.png",
  "id": "X10D",
  "isPrerelease": true,
  "lastEdited": "2024-02-12T01:49:54.697Z",
  "licenseFile": "LICENSE.md",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "hDqJF59rbi8E3llvNtxKQeM59xQZMiEtkAK1inxmw3KermMY53qV2ep7D+pjYD0e9ooS0B/2N6ldh0Xvyqg+lg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 364906,
  "published": "2024-02-12T01:47:21.027Z",
  "readmeFile": "README.md",
  "releaseNotes": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [3.3.1] - 2023-08-21\n\n### Fixed\n\n- X10D.Hosting: Fixed `AddHostedSingleton` not accepting an interface as the service type.\n\n## [3.3.0] - 2023-08-21\n\n### Added\n\n- X10D.Hosting: Added support for service/implementation registration with `AddHostedSingleton`.\n\n## [3.2.2] - 2023-06-05\n\n### Added\n\n- X10D.DSharpPlus: Added support for new usernames. See https://discord.com/blog/usernames\n\n## 3.2.1 - 2023-06-05\n\nERRONEOUS RELEASE.\n\n## [3.2.0] - 2023-04-03\n\n### Added\n\n- Added new library X10D.DSharpPlus.\n- Added new library X10D.Hosting.\n- Added .NET 7 target.\n- X10D: Added `IntrinsicExtensions` and `IntrinsicUtility` which offer methods for vectors in `System.Runtime.Instrinsics`. (#70)\n- X10D: Added `MathUtility.Bias(float, float)` and `MathUtility.Bias(double, double)`.\n- X10D: Added `MathUtility.ExponentialDecay(float, float, float)` and `MathUtility.ExponentialDecay(double, double, double)`.\n- X10D: Added `MathUtility.InverseLerp(float, float, float)` and `MathUtility.InverseLerp(double, double, double)`.\n- X10D: Added `MathUtility.Pulse(float, float, float)` and `MathUtility.Pulse(double, double, double)`.\n- X10D: Added `MathUtility.Sawtooth(float)` and `MathUtility.Sawtooth(double)`.\n- X10D: Added `MathUtility.ScaleRange(float, float, float, float, float)`\n  and `MathUtility.ScaleRange(double, double, double, double, double)`\n- X10D: Added `MathUtility.Sigmoid(float)` and `MathUtility.Sigmoid(double)`.\n- X10D: Added `MathUtility.SmoothStep(float, float, float)` and `MathUtility.SmoothStep(double, double, double)`.\n- X10D: Added `Circle`, `CircleF`, `Cuboid`, `Ellipse`, `EllipseF`, `Line3D`, `Line`, `LineF`, `Polygon`, `PolygonF`, `Polyhedron`,\n  and `Sphere`, to complement System.Drawing structs such as `Point` and `Rectangle`.\n- X10D: Added `Color.Deconstruct()` - with optional alpha parameter.\n- X10D: Added `Color.GetClosestConsoleColor()`.\n- X10D: Added `DateTime.GetIso8601WeekOfYear()` and `DateTimeOffset.GetIso8601WeekOfYear()`.\n- X10D: Added `DirectoryInfo.Clear()`.\n- X10D: Added `double.LinearToGamma([gamma])` and `float.LinearToGamma([gamma])`. (#60)\n- X10D: Added `double.GammaToLinear([gamma])` and `float.GammaToLinear([gamma])`. (#60)\n- X10D: Added `GreatestCommonFactor` for built-in integer types.\n- X10D: Added `IEnumerable<T>.ConcatOne(T)`.\n- X10D: Added `IEnumerable<T>.CountWhereNot(Func<T, bool>)`.\n- X10D: Added `IEnumerable<T>.FirstWhereNot(Func<T, bool>)`.\n- X10D: Added `IEnumerable<T>.FirstWhereNotOrDefault(Func<T, bool>)`.\n- X10D: Added `IEnumerable<T>.LastWhereNot(Func<T, bool>)`.\n- X10D: Added `IEnumerable<T>.LastWhereNotOrDefault(Func<T, bool>)`.\n- X10D: Added `IEnumerable<T>.MinMax()` and `IEnumerable<T>.MinMaxBy()`. (#72)\n- X10D: Added `IEnumerable<T>.WhereNot(Func<T, bool>)`.\n- X10D: Added `IEnumerable<T>.WhereNotNull()`.\n- X10D: Added `IEnumerable<string>.Grep(string[, bool])`.\n- X10D: Added `IList<T>.RemoveRange(Range)`.\n- X10D: Added `IList<T>.Swap(IList<T>)`. (#62)\n- X10D: Added `IReadOnlyList<T>.IndexOf(T[, int[, int]])`.\n- X10D: Added `IReadOnlyList<T>.Slice(int[, int]])`.\n- X10D: Added `LowestCommonMultiple` for built-in integer types.\n- X10D: Added `Wrap(T[, T])` for built-in numeric types. (#60)\n- X10D: Added `Nullable<T>.TryGetValue(out T)`. (#61)\n- X10D: Added `Point.IsOnLine(LineF)`, `Point.IsOnLine(PointF, PointF)`, and `Point.IsOnLine(Vector2, Vector2)`.\n- X10D: Added `PointF.IsOnLine(LineF)`, `PointF.IsOnLine(PointF, PointF)`, and `PointF.IsOnLine(Vector2, Vector2)`.\n- X10D: Added `Point.ToSize()`.\n- X10D: Added `Point.ToSizeF()`.\n- X10D: Added `Point.ToVector2()`.\n- X10D: Added `PointF.Round([float])`.\n- X10D: Added `PointF.ToSizeF()`.\n- X10D: Added `PointF.ToVector2()` for .NET < 6.\n- X10D: Added `PopCount()` for built-in integer types.\n- X10D: Added `Quaternion.ToAxisAngle(out float, out float)`.\n- X10D: Added `Quaternion.ToVector3()`.\n- X10D: Added `Random.NextFrom(Span<T>)` and `Random.NextFrom(ReadOnlySpan<T>)`.\n- X10D: Added `ReadOnlySpan<char>.CountSubstring(char)`.\n- X10D: Added `ReadOnlySpan<char>.CountSubstring(ReadOnlySpan<char>[, StringComparison])`.\n- X10D: Added `ReadOnlySpan<char>.ToTimeSpan()`.\n- X10D: Added `ReadOnlySpan<T>.Split(T)`.\n- X10D: Added `ReadOnlySpan<T>.Split(ReadOnlySpan<T>)`.\n- X10D: Added `RoundUpToPowerOf2()` for built-in integer types.\n- X10D: Added `Saturate()` for built-in floating-point types.\n- X10D: Added `Size.ToPoint()`.\n- X10D: Added `Size.ToPointF()`.\n- X10D: Added `Size.ToVector2()`.\n- X10D: Added `Span<char>.CountSubstring(char)`.\n- X10D: Added `Span<char>.CountSubstring(Span<char>[, StringComparison])`.\n- X10D: Added `Span<T>.Split(T)`.\n- X10D: Added `Span<T>.Split(Span<T>)`.\n- X10D: Added `string.CountSubstring(char)`.\n- X10D: Added `string.CountSubstring(string[, StringComparison])`.\n- X10D: Added `string.EnsureStartsWith()` and `string.EnsureEndsWith()`.\n- X10D: Added `string.IsEmpty()`.\n- X10D: Added `string.IsWhiteSpace()`.\n- X10D: Added `string.IsNullOrEmpty()`.\n- X10D: Added `string.IsNullOrWhiteSpace()`.\n- X10D: Added `TextReader.EnumerateLines()` and `TextReader.EnumerateLinesAsync()`.\n- X10D: Added `TimeSpan.TryParse(ReadOnlySpan<char>, out TimeSpan)`.\n- X10D: Added `Quaternion.Multiply(Vector3)` - this functions as an equivalent to Unity's `Quaternion * Vector3` operator.\n- X10D: Added `Vector2.Deconstruct()`.\n- X10D: Added `Vector2.IsOnLine(LineF)`, `Vector2.IsOnLine(PointF, PointF)`, and `Vector2.IsOnLine(Vector2, Vector2)`.\n- X10D: Added `Vector2.Round([float])`.\n- X10D: Added `Vector2.ToPointF()`.\n- X10D: Added `Vector2.ToSizeF()`.\n- X10D: Added `Vector3.Deconstruct()`.\n- X10D: Added `Vector3.Round([float])`.\n- X10D: Added `Vector4.Deconstruct()`.\n- X10D: Added `Vector4.Round([float])`.\n- X10D: `ComplexSqrt` is now exposed for all frameworks.\n- X10D.Unity: Added `DebugUtility`, which mimics `UnityEngine.Debug` while offering more useful primitive drawing methods.\n- X10D.Unity: Added `System.Drawing.Color.ToUnityColor()`.\n- X10D.Unity: Added `System.Drawing.Color.ToUnityColor32()`.\n- X10D.Unity: Added `Color.Deconstruct()` - with optional alpha parameter.\n- X10D.Unity: Added `Color.GetClosestConsoleColor()`.\n- X10D.Unity: Added `Color.ToSystemDrawingColor()`.\n- X10D.Unity: Added `Color32.Deconstruct()` - with optional alpha parameter.\n- X10D.Unity: Added `Color32.GetClosestConsoleColor()`.\n- X10D.Unity: Added `Color32.ToSystemDrawingColor()`.\n- X10D.Unity: Added `Point.ToUnityVector2()`.\n- X10D.Unity: Added `Point.ToUnityVector2Int()`.\n- X10D.Unity: Added `PointF.ToUnityVector2()`.\n- X10D.Unity: Added `Rect.ToSystemRectangleF()`.\n- X10D.Unity: Added `RectInt.ToSystemRectangle()`.\n- X10D.Unity: Added `RectInt.ToSystemRectangleF()`.\n- X10D.Unity: Added `Rectangle.ToUnityRect()`.\n- X10D.Unity: Added `Rectangle.ToUnityRectInt()`.\n- X10D.Unity: Added `RectangleF.ToUnityRect()`.\n- X10D.Unity: Added `Size.ToUnityVector2()`.\n- X10D.Unity: Added `Size.ToUnityVector2Int()`.\n- X10D.Unity: Added `SizeF.ToUnityVector2()`.\n- X10D.Unity: Added `Vector2.Deconstruct()`.\n- X10D.Unity: Added `Vector2.IsOnLine(LineF)`, `Vector2.IsOnLine(PointF, PointF)`, and `Vector2.IsOnLine(Vector2, Vector2)`.\n- X10D.Unity: Added `Vector2Int.IsOnLine(LineF)`, `Vector2Int.IsOnLine(PointF, PointF)`, `Vector2Int.IsOnLine(Vector2, Vector2)`,\n  and `Vector2Int.IsOnLine(Vector2Int, Vector2Int)`.\n- X10D.Unity: Added `Vector2.Round([float])`.\n- X10D.Unity: Added `Vector2.ToSystemPointF()`.\n- X10D.Unity: Added `Vector2.ToSystemSizeF()`.\n- X10D.Unity: Added `Vector2Int.Deconstruct()`.\n- X10D.Unity: Added `Vector2Int.ToSystemPoint()`.\n- X10D.Unity: Added `Vector2Int.ToSystemSize()`.\n- X10D.Unity: Added `Vector2Int.ToSystemVector()`.\n- X10D.Unity: Added `Vector2Int.WithX()`.\n- X10D.Unity: Added `Vector2Int.WithY()`.\n- X10D.Unity: Added `Vector3.Deconstruct()`.\n- X10D.Unity: Added `Vector3.Round([float])`.\n- X10D.Unity: Added `Vector3Int.Deconstruct()`.\n- X10D.Unity: Added `Vector3Int.ToSystemVector()`.\n- X10D.Unity: Added `Vector3Int.WithX()`.\n- X10D.Unity: Added `Vector3Int.WithY()`.\n- X10D.Unity: Added `Vector3Int.WithZ()`.\n- X10D.Unity: Added `Vector4.Deconstruct()`.\n- X10D.Unity: Added `Vector4.Round([float])`\n- X10D.Unity: Added `WaitForFrames` yield instruction.\n- X10D.Unity: Added `WaitForKeyDown` yield instruction.\n- X10D.Unity: Added `WaitForKeyUp` yield instruction.\n- X10D.Unity: Added `WaitForSecondsNoAlloc` yield instruction.\n- X10D.Unity: Added `WaitForSecondsRealtimeNoAlloc` yield instruction.\n- X10D.Unity: Added `WaitForTimeSpanNoAlloc` yield instruction.\n- X10D.Unity: Added `WaitForTimeSpanRealtimeNoAlloc` yield instruction.\n\n### Fixed\n\n- X10D: `T[].Clear` will now correctly clear the specified range of elements by\n  using the [GetOffsetAndLength](https://learn.microsoft.com/en-us/dotnet/api/system.range.getoffsetandlength?view=net-7.0)\n  method.\n- X10D: `Stream.ReadSingle(Endianness)` now returns a float instead of a double.\n- X10D: Fixed `Stream.ReadDouble(Endianness)`, `Stream.ReadSingle(Endianness)`, `Stream.WriteDouble(double, Endianness)`,\n  `Stream.WriteSingle(float, Endianness)` writing and reading the wrong endianness.\n\n### Changed\n\n- X10D: Performance for integer `Unpack` has been dramatically improved using vector parallelization. (#70)\n- X10D: Performance for `MemberInfo.HasCustomAttribute` has been improved. (#70)\n- X10D: Performance for `Rune.Repeat` has been improved. (#70)\n- X10D: `TimeSpanParser.TryParse` now accepts a nullable string, and returns false if this input is null or empty.\n- X10D.Unity: `Singleton<T>` now caches instance where possible.\n- X10D.Unity: Conversions between equivalent structures in `System.Numerics` and `UnityEngine` now make use of \"unsafe\"\n  reinterpretation, rather than constructing new instances. (#70)\n\n## [3.1.0] - 2022-05-13\n\n### Added\n\n- Reintroduced Unity support\n- X10D: Added `Color.Inverted()`. (#54)\n- X10D: Added `Color.WithA()`. (#55)\n- X10D: Added `Color.WithB()`. (#55)\n- X10D: Added `Color.WithG()`. (#55)\n- X10D: Added `Color.WithR()`. (#55)\n- X10D: Added `ICollection<T>.ClearAndDisposeAll()`.\n- X10D: Added `ICollection<T>.ClearAndDisposeAllAsync()`.\n- X10D: Added `IEnumerable<T>.For()`. (#50)\n- X10D: Added `IEnumerable<T>.ForEach()`. (#50)\n- X10D: Added `IEnumerable<T>.DisposeAll()`.\n- X10D: Added `IEnumerable<T>.DisposeAllAsync()`.\n- X10D: Added `char.IsEmoji`.\n- X10D: Added `ReadOnlySpan<T>.Count(Predicate<T>)`.\n- X10D: Added `Rune.IsEmoji`.\n- X10D: Added `Span<T>.Count(Predicate<T>)`.\n- X10D: Added `string.IsEmoji`.\n- X10D: Added `Vector2.WithX()`. (#56)\n- X10D: Added `Vector2.WithY()`. (#56)\n- X10D: Added `Vector3.WithX()`. (#56)\n- X10D: Added `Vector3.WithY()`. (#56)\n- X10D: Added `Vector3.WithZ()`. (#56)\n- X10D: Added `Vector4.WithX()`. (#56)\n- X10D: Added `Vector4.WithY()`. (#56)\n- X10D: Added `Vector4.WithZ()`. (#56)\n- X10D: Added `Vector4.WithW()`. (#56)\n- X10D.Unity: Added `Singleton<T>` class.\n- X10D.Unity: Added `Color.Inverted()`. (#54)\n- X10D.Unity: Added `Color.WithA()`. (#55)\n- X10D.Unity: Added `Color.WithB()`. (#55)\n- X10D.Unity: Added `Color.WithG()`. (#55)\n- X10D.Unity: Added `Color.WithR()`. (#55)\n- X10D.Unity: Added `Color32.Inverted()`. (#54)\n- X10D.Unity: Added `Color32.WithA()`. (#55)\n- X10D.Unity: Added `Color32.WithB()`. (#55)\n- X10D.Unity: Added `Color32.WithG()`. (#55)\n- X10D.Unity: Added `Color32.WithR()`. (#55)\n- X10D.Unity: Added `Component.GetComponentsInChildrenOnly<T>()`.\n- X10D.Unity: Added `GameObject.GetComponentsInChildrenOnly<T>()`.\n- X10D.Unity: Added `GameObject.LookAt(GameObject[, Vector3])`.\n- X10D.Unity: Added `GameObject.LookAt(Transform[, Vector3])`.\n- X10D.Unity: Added `GameObject.LookAt(Vector3[, Vector3])`.\n- X10D.Unity: Added `GameObject.SetLayerRecursively(int)`. (#57)\n- X10D.Unity: Added `GameObject.SetParent(GameObject[, bool])`.\n- X10D.Unity: Added `GameObject.SetParent(Transform[, bool])`.\n- X10D.Unity: Added `System.Numerics.Quaternion.ToUnityQuaternion()`.\n- X10D.Unity: Added `Quaternion.ToSystemQuaternion()`.\n- X10D.Unity: Added `Random.NextColorArgb()`.\n- X10D.Unity: Added `Random.NextColor32Argb()`.\n- X10D.Unity: Added `Random.NextColorRgb()`.\n- X10D.Unity: Added `Random.NextColor32Rgb()`.\n- X10D.Unity: Added `Random.NextRotation()`.\n- X10D.Unity: Added `Random.NextRotationUniform()`.\n- X10D.Unity: Added `Random.NextUnitVector2()`.\n- X10D.Unity: Added `Random.NextUnitVector3()`.\n- X10D.Unity: Added `Transform.LookAt(GameObject[, Vector3])`.\n- X10D.Unity: Added `Transform.SetParent(GameObject[, bool])`.\n- X10D.Unity: Added `System.Numerics.Vector2.ToUnityVector()`.\n- X10D.Unity: Added `System.Numerics.Vector3.ToUnityVector()`.\n- X10D.Unity: Added `System.Numerics.Vector4.ToUnityVector()`.\n- X10D.Unity: Added `Vector2.ToSystemVector()`.\n- X10D.Unity: Added `Vector3.ToSystemVector()`.\n- X10D.Unity: Added `Vector4.ToSystemVector()`.\n- X10D.Unity: Added `Vector2.WithX()`. (#56)\n- X10D.Unity: Added `Vector2.WithY()`. (#56)\n- X10D.Unity: Added `Vector3.WithX()`. (#56)\n- X10D.Unity: Added `Vector3.WithY()`. (#56)\n- X10D.Unity: Added `Vector3.WithZ()`. (#56)\n- X10D.Unity: Added `Vector4.WithX()`. (#56)\n- X10D.Unity: Added `Vector4.WithY()`. (#56)\n- X10D.Unity: Added `Vector4.WithZ()`. (#56)\n- X10D.Unity: Added `Vector4.WithW()`. (#56)\n\n## [3.0.0] - 2022-04-30\n\nIn the midst of writing these release notes, I may have missed some important changes. If you notice an API change that is not\ndocumented here,\nplease [open an issue](https://github.com/oliverbooth/X10D/issues)!\n\n### Added\n\n- Added `T.AsArrayValue()`.\n- Added `T.AsEnumerableValue()`.\n- Added `T.RepeatValue(int)`.\n- Added `T.ToJson([JsonSerializerOptions])`.\n- Added `string.FromJson([JsonSerializerOptions])`.\n- Added `T[].AsReadOnly()`.\n- Added `T[].Clear([Range])` and `T[].Clear(int, int)`.\n- Added `DateTime.IsLeapYear()`.\n- Added `DateTimeOffset.IsLeapYear()`.\n- Added `Endianness` enum.\n- Added `FileInfo.GetHash<T>()`.\n- Added `FileInfo.TryWriteHash<T>(Span<byte>, out int)`.\n- Added `IComparable<T>.Clamp(T, T)` - this supersedes `Clamp` defined for hard-coded numeric types. (#24)\n- Added `IComparable<T1>.GreaterThan(T2)`. (#22)\n- Added `IComparable<T1>.GreaterThanOrEqualTo(T2)`. (#22)\n- Added `IComparable<T1>.LessThan(T2)`. (#22)\n- Added `IComparable<T1>.LessThanOrEqualTo(T2)`. (#22)\n- Added `IComparable<T1>.Max(T)`. (#23)\n- Added `IComparable<T1>.Min(T)`. (#23)\n- Added `IDictionary<TKey, TValue>.AddOrUpdate()`\n- Added `IEnumerable<TSource>.Product()` and `IEnumerable<TSource>.Product<TResult>(Func<TSource>, TResult)` for all built-in\n  numeric types, computing the product of all (optionally transformed) elements.\n- Added `IList<T>.Fill(T)` and `IList<T>.Fill(T, int, int)`.\n- Added `IPAddress.IsIPv4()` and `IPAddress.IsIPv6()`.\n- Added `IReadOnlyList<byte>.Pack8Bit()`.\n- Added `IReadOnlyList<byte>.Pack16Bit()`.\n- Added `IReadOnlyList<byte>.Pack32Bit()`.\n- Added `IReadOnlyList<byte>.Pack64Bit()`.\n- Added `MemberInfo.HasCustomAttribute<T>()` and `MemberInfo.HasCustomAttribute(Type)`.\n- Added `defaultValue` overload for `MemberInfo.SelectFromCustomAttribute<TAttr, TReturn>()`.\n- Added `Random.Next<T>()` (returns a random field from a specified enum type).\n- Added `Random.NextByte([byte[, byte]])`.\n- Added `Random.NextColorArgb()`, returning a random color in RGB space, including random alpha.\n- Added `Random.NextColorRgb()`, returning a random color in RGB space with alpha 255.\n- Added `Random.NextDouble(double[, double])`.\n- Added `Random.NextInt16([short[, short]])`.\n- Added `Random.NextSingle(float[, float])`. (#34)\n- Added `Random.NextUnitVector2()`.\n- Added `Random.NextUnitVector3()`.\n- Added `Random.NextRotation()`.\n- Added `Rune.Repeat(int)`.\n- Added `byte.IsEven()`.\n- Added `byte.IsOdd()`.\n- Added `byte.IsPrime()`.\n- Added `byte.UnpackBits()`.\n- Added `byte.RangeTo(byte)`, `byte.RangeTo(short)`, `byte.RangeTo(int)`, and `byte.RangeTo(long)`.\n- Added `int.Mod(int)`.\n- Added `int.RangeTo(int)`, and `int.RangeTo(long)`.\n- Added `int.UnpackBits()`.\n- Added `long.Mod(long)`.\n- Added `long.RangeTo(long)`.\n- Added `long.UnpackBits()`.\n- Added `sbyte.IsEven()`.\n- Added `sbyte.IsOdd()`.\n- Added `sbyte.IsPrime()`.\n- Added `sbyte.Mod(sbyte)`.\n- Added `short.IsEven()`.\n- Added `short.IsOdd()`.\n- Added `short.Mod(short)`.\n- Added `short.RangeTo(short)`, `short.RangeTo(int)`, and `short.RangeTo(long)`.\n- Added `short.UnpackBits()`.\n- Added `string.IsPalindrome()`.\n- Added `Stream.GetHash<T>()`.\n- Added `Stream.TryWriteHash<T>(Span<byte>, out int)`.\n- Added `Stream.ReadInt16([Endian])`.\n- Added `Stream.ReadInt32([Endian])`.\n- Added `Stream.ReadInt64([Endian])`.\n- Added `Stream.ReadUInt16([Endian])`.\n- Added `Stream.ReadUInt32([Endian])`.\n- Added `Stream.ReadUInt64([Endian])`.\n- Added `Stream.Write(short, [Endian])`.\n- Added `Stream.Write(int, [Endian])`.\n- Added `Stream.Write(long, [Endian])`.\n- Added `Stream.Write(ushort, [Endian])`.\n- Added `Stream.Write(uint, [Endian])`.\n- Added `Stream.Write(ulong, [Endian])`.\n- Added `TimeSpan.Ago()`.\n- Added `TimeSpan.FromNow()`.\n- Added `TimeSpanParser.TryParse` which supersedes `TimeSpanParser.Parse`.\n- Added `Sqrt()` and `ComplexSqrt()` for all built-in decimal types.\n- Added `All()` and `Any()` for `Span<T>` and `ReadOnlySpan<T>`, mimicking the corresponding methods in `System.Linq`.\n- Added `Sign()` for built-in numeric types. For unsigned types, this never returns -1.\n- Added `Type.Implements<T>()` and `Type.Implements(Type)`. (#25)\n- Added `Type.Inherits<T>()` and `Type.Inherits(Type)`. (#25)\n- Added `DigitalRoot` function for built-in integer types.\n- Added `Factorial` function for built-in integer types.\n- Added `HostToNetworkOrder` and `NetworkToHostOrder` for `short`, `int`, and `long`.\n- Added `IsLeapYear` function for `DateTime` and `DateTimeOffset`, as well as built-in numeric types.\n- Added `MultiplicativePersistence` function for built-in integer types.\n- Added `RotateLeft` and `RotateRight` for built-in integer types.\n- Added trigonometric functions for built-in numeric types,\n  including `Acos()`, `Asin()`, `Atan()`, `Atan2()`, `Cos()`, `Sin()`, `Tan()` (#49)\n- Added time-related extension methods for built-in numeric types,\n  including `Milliseconds()`, `Seconds()`, `Minutes()`, `Hours()`, `Days()`, and `Weeks()`. `Ticks()` is also available, but only\n  for integers; not floating point.\n- Added `StringBuilderReader` (inheriting `TextReader`) which allows reading from a `StringBuilder` without consuming the\n  underlying string.\n- Added extension methods for `System.Decimal`.\n\n### Changed\n\n- Updated to .NET 6. (#45)\n- Methods defined to accept `byte[]` have been changed accept `IReadOnlyList<byte>`.\n- Extension methods are now defined in appropriate child namespaces to reduce the risk of name collisions. (#7)\n- `char[].Random(int)`, `char[].Random(int, int)`, `IEnumerable<char>.Random(int)`, and `IEnumerable<char>.Random(int, int)` have\n  been redefined as `Random.NextString(IReadOnlyList<char>, int)`.\n- `IComparable<T>.Between(T, T)` has been redefined as `IComparable<T1>.Between(T2, T3, [InclusiveOptions])` to allow comparison\n  of disparate yet comparable types, and also offers inclusivity options.\n- `DateTime` extensions now wrap `DateTimeOffset` extensions.\n- `DateTime.ToUnixTimestamp([bool])` has been redefined as `DateTime.ToUnixTimeMilliseconds()` and `DateTime.ToUnixTimeSeconds()`.\n- `Dictionary<T1, T2>.ToGetParameters()`, `IDictionary<T1, T2>.ToGetParameters()`,\n  and `IReadOnlyDictionary<T1, T2>.ToGetParameters()`, has been redefined as `IEnumerable<KeyValuePair<T1, T2>>.ToGetParameters()`.\n- `Dictionary<T1, T2>.ToConnectionString()`, `IDictionary<T1, T2>.ToConnectionString()`,\n  and `IReadOnlyDictionary<T1, T2>.ToConnectionString()`, has been redefined\n  as `IEnumerable<KeyValuePair<T1, T2>>.ToConnectionString()`.\n- `IList<T>.OneOf([Random])` and `IEnumerable<T>.OneOf([Random])` have been redefined as `Random.NextFrom<T>(IEnumerable<T>)` to\n  fall in line with the naming convention of `System.Random`. (#21)\n- `IList<T>.Shuffle([Random])` now uses a Fisher-Yates shuffle implementation.\n- `IList<T>.Shuffle([Random])` has been repurposed to shuffle the list in place, rather than returning a new enumerable.\n    - `IEnumerable<T>.Shuffle([Random])` has been renamed to `IEnumerable<T>.Shuffled([Random])` to avoid confusion\n      with `IList<T>.Shuffle([Random])`.\n- `Random.CoinToss()` has been redefined as `Random.NextBoolean()` to fall in line with the naming convention of `System.Random`.\n- `Random.OneOf<T>(T[])` and `Random.OneOf<T>(IList<T>)` have been redefined as `Random.NextFrom<T>(IEnumerable<T>)` to fall in\n  line with the naming convention of `System.Random`.\n- `Enum.Next([bool])` and `Enum.Previous([bool])` have been redefined.\n  as `Enum.Next()`, `Enum.Previous()`, `Enum.NextUnchecked()`, `Enum.PreviousUnchecked()`. The `Unchecked` variants of these\n  methods do not perform index validation, and will throw `IndexOutOfRangeException` when attempting to access an invalid index.\n  The checked variants will perform a modulo to wrap the index.\n- Seperated `string.WithAlternative(string, [bool])` to `string.WithEmptyAlternative(string)`\n  and `string.WithWhiteSpaceAlternative(string)`.\n- `string.AsNullIfEmpty()` and `string.AsNullIfWhiteSpace()` now accept a nullable `string`.\n- `IEnumerable<byte>.GetString([Encoding])` has been renamed to `IReadOnlyList<byte>.ToString` and its `Encoding` parameter has\n  been made non-optional.\n- Fixed a bug where `IEnumerable<KeyValuePair<K,V>>.ToConnectionString()` would not sanitize types with custom `ToString()`\n  implementation. (#20)\n  Renamed `string.Random(int[, Random])` to `string.Randomize(int[, Random])`.\n- Redefined `char[].Random(int)`, `char[].Random(int, Random)`, `IEnumerable<char>.Random(int)`,\n  and `IEnumerable<char>.Random(int, Random)`, as `Random.NextString(IReadOnlyList<char>, int)`.\n- Improved performance for:\n    - `string.IsLower()`\n    - `string.IsUpper()`\n    - `string.Reverse()`\n    - `TimeSpanParser`\n\n### Removed\n\n- Indefinitely suspended Unity support, until such a time that Unity can be updated to a newer version of .NET.\n  See: https://forum.unity.com/threads/unity-future-net-development-status.1092205/\n- Removed `bool.And(bool)`.\n- Removed `bool.NAnd(bool)`.\n- Removed `bool.NOr(bool)`.\n- Removed `bool.Not(bool)`.\n- Removed `bool.Or(bool)`.\n- Removed `bool.ToByte()`.\n- Removed `bool.ToInt16()`.\n- Removed `bool.ToInt64()`.\n- Removed `bool.XNOr()`.\n- Removed `bool.XOr()`.\n- Removed `IConvertible.To<T>([IFormatProvider])`. (#13)\n- Removed `IConvertible.ToOrDefault<T>([IFormatProvider])`. (#13)\n- Removed `IConvertible.ToOrDefault<T>(out T, [IFormatProvider])`. (#13)\n- Removed `IConvertible.ToOrNull<T>([IFormatProvider])`. (#13)\n- Removed `IConvertible.ToOrNull<T>(out T, [IFormatProvider])`. (#13)\n- Removed `IConvertible.ToOrOther<T>(T, [IFormatProvider])`. (#13)\n- Removed `IConvertible.ToOrOther<T>(out T, T, [IFormatProvider])`. (#13)\n- Removed `IEnumerable<T>.Split(int)` - this functionality is now provided by .NET in the form of the `Chunk` method.\n  See: https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.chunk?view=net-6.0.\n- Removed `MemberInfo.GetDefaultValue()` (use `SelectFromCustomAttribute()` instead).\n- Removed `MemberInfo.GetDescription()` (use `SelectFromCustomAttribute()` instead).\n- Removed `int.ToBoolean()`.\n- Removed `long.ToBoolean()`.\n- Removed `short.ToBoolean()`.\n- Removed `uint.ToBoolean()`.\n- Removed `ushort.ToBoolean()`.\n- Removed `ulong.ToBoolean()`.\n- Removed `WaitHandle.WaitOneAsync()`. For suspensions of execution during asynchronous operations, favour `TaskCompletionSource`\n  or `TaskCompletionSource<T>`.\n  See: https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource?view=net-6.0\n  and https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1?view=net-6.0\n\n## [2.6.0] - 2020-10-20\n\n### Added\n\n- Add `string.AsNullIfEmpty()`.\n    - Returns the current string, or `null` if the current string is null or empty.\n- Add `string.AsNullIfWhiteSpace()`.\n    - Returns the current string, or `null` if the current string is null, empty, or consists of only whitespace.\n- Add `string.Reverse()`.\n    - Reverses the current string.\n- Add `string.WithAlternative()`.\n    - Returns the current string, or an alternative value if the current string is null or empty, or optionally if the current\n      string consists of only whitespace.\n\n### Changed\n\n- n/a\n\n### Removed\n\n- n/a\n\n## [2.5.0] - 2020-07-15\n\n### Added\n\n- `WaitHandle.WaitOneAsync()`.\n    - Wraps `WaitHandle.WaitOne` as a `Task`.\n- Add support for Unity 2019.4.3f1.\n    - Add `GameObject.LookAt(GameObject)`.\n        - Rotates the Transform on the current GameObject so that it faces the Transform on another GameObject.\n    - Add `GameObject.LookAt(Transform)`.\n        - Rotates the Transform on the current GameObject so that it faces another transform.\n    - Add `Transform.LookAt(GameObject)`\n        - Rotates the current Transform so that it faces the Transform on another GameObject.\n    - Add `Vector3.Round([float])`.\n        - Returns a rounded Vector3 by calling `float.Round()` on each component.\n    - Add `Vector3.WithX(float)`.\n        - Returns a Vector3 with a new X component value.\n    - Add `Vector3.WithY(float)`.\n        - Returns a Vector3 with a new Y component value.\n    - Add `Vector3.WithZ(float)`.\n        - Returns a Vector3 with a new Z component value.\n    - Add `Vector3.WithXY(float, float)`.\n        - Returns a Vector3 with new X and Y component values.\n    - Add `Vector3.WithXZ(float, float)`.\n        - Returns a Vector3 with new X and Z component values.\n    - Add `Vector3.WithYZ(float, float)`.\n        - Returns a Vector3 with new Y and Z component values.\n    - Add `BetterBehavior` (experimental wrapper over `MonoBehaviour`).\n\n### Changed\n\n- n/a\n\n### Removed\n\n- n/a\n\n## [2.2.0] - 2020-04-21\n\n### Added\n\n- Add `string.ChangeEncoding(Encoding, Encoding)`.\n    - Converts this string from one encoding to another.\n- Add `string.IsLower()`.\n    - Determines if all alpha characters in this string are considered lowercase.\n- Add `string.IsUpper()`.\n    - Determines if all alpha characters in this string are considered uppercase.\n\n- Various extension methods with regards to reflection:\n    - `GetDefaultValue` and `GetDefaultValue<T>` - gets the value stored in the member's `DefaultValue` attribute.\n    - `GetDescription`- gets the value stored in the member's `Description` attribute.\n    - `SelectFromCustomAttribute<T1, T2>` - Internally calls `GetCustomAttribute<T1>` and passes it to a `Func<T1, T2>` so that\n      specific members may be selected.\n\n### Changed\n\n- n/a\n\n### Removed\n\n- n/a\n\n## [2.1.0] - 2020-04-18\n\n### Added\n\n- Add `bool bool.And(bool)`.\n    - Performs logical AND.\n- Add `bool bool.Or(bool)`.\n    - Performs logical OR.\n- Add `bool bool.Not(bool)`.\n    - Performs logical NOT.\n- Add `bool bool.XOr(bool)`.\n    - Performs Logical XOR.\n- Add `bool bool.NAnd(bool)`.\n    - Performs logical NAND.\n- Add `bool bool.NOr(bool)`.\n    - Performs logical NOR.\n- Add `bool bool.XNOr(bool)`.\n    - Performs logical XNOR.\n- Add `byte bool.ToByte()`.\n    - 1 if `true`, 0 otherwise.\n- Add `short bool.ToInt16()`.\n    - 1 if `true`, 0 otherwise.\n- Add `long bool.ToInt64()`.\n    - 1 if `true`, 0 otherwise.\n\n### Changed\n\n- n/a\n\n### Removed\n\n- n/a\n\n## [2.0.0] - 2020-04-18\n\n### Added\n\n- Add `IEnumerable<T>.Split(int)`.\n    - Performs the same operation as the previously defined `IEnumerable<byte>.Chunkify(int)`, except now accepts any type `T`.\n\n### Changed\n\n- Fix `DateTime.Last(DayOfWeek)` implementation.\n    - Now returns the correct date/time for a given day of the week.\n\n### Removed\n\n- Remove `IEnumerable<byte>.Chunkify(int)`.\n    - Replaced by a method of the same behaviour `IEnumerable<T>.Split(int)`.\n\n## Earlier versions\n\nEarlier versions of this package are undocumented and unlisted from package results.\n\n[unreleased]: https://github.com/oliverbooth/X10D/compare/v3.3.1...main\n[3.3.1]: https://github.com/oliverbooth/X10D/releases/tag/v3.3.1\n[3.3.0]: https://github.com/oliverbooth/X10D/releases/tag/v3.3.0\n[3.2.2]: https://github.com/oliverbooth/X10D/releases/tag/v3.2.2\n[3.2.0]: https://github.com/oliverbooth/X10D/releases/tag/v3.2.0\n[3.1.0]: https://github.com/oliverbooth/X10D/releases/tag/v3.1.0\n[3.0.0]: https://github.com/oliverbooth/X10D/releases/tag/v3.0.0\n[2.6.0]: https://github.com/oliverbooth/X10D/releases/tag/2.6.0\n[2.5.0]: https://github.com/oliverbooth/X10D/releases/tag/2.5.0\n[2.2.0]: https://github.com/oliverbooth/X10D/releases/tag/2.2.0\n[2.1.0]: https://github.com/oliverbooth/X10D/releases/tag/2.1.0\n[2.0.0]: https://github.com/oliverbooth/X10D/releases/tag/2.0.0",
  "repository": "",
  "verbatimVersion": "3.3.1-nightly.247",
  "version": "3.3.1-nightly.247",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#dependencygroup/net6.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net6.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#dependencygroup/net7.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net7.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#X10D.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 7404,
      "fullName": "X10D.nuspec",
      "length": 30567,
      "name": "X10D.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#lib/net6.0/X10D.dll",
      "@type": "PackageEntry",
      "compressedLength": 67240,
      "fullName": "lib/net6.0/X10D.dll",
      "length": 183296,
      "name": "X10D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#lib/net6.0/X10D.xml",
      "@type": "PackageEntry",
      "compressedLength": 44570,
      "fullName": "lib/net6.0/X10D.xml",
      "length": 708925,
      "name": "X10D.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#lib/net7.0/X10D.dll",
      "@type": "PackageEntry",
      "compressedLength": 67253,
      "fullName": "lib/net7.0/X10D.dll",
      "length": 183296,
      "name": "X10D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#lib/net7.0/X10D.xml",
      "@type": "PackageEntry",
      "compressedLength": 44570,
      "fullName": "lib/net7.0/X10D.xml",
      "length": 708925,
      "name": "X10D.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#lib/netstandard2.1/X10D.dll",
      "@type": "PackageEntry",
      "compressedLength": 62245,
      "fullName": "lib/netstandard2.1/X10D.dll",
      "length": 173056,
      "name": "X10D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#lib/netstandard2.1/X10D.xml",
      "@type": "PackageEntry",
      "compressedLength": 42709,
      "fullName": "lib/netstandard2.1/X10D.xml",
      "length": 688176,
      "name": "X10D.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#branding_Icon.png",
      "@type": "PackageEntry",
      "compressedLength": 6016,
      "fullName": "branding_Icon.png",
      "length": 7817,
      "name": "branding_Icon.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#LICENSE.md",
      "@type": "PackageEntry",
      "compressedLength": 636,
      "fullName": "LICENSE.md",
      "length": 1074,
      "name": "LICENSE.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#README.md",
      "@type": "PackageEntry",
      "compressedLength": 1113,
      "fullName": "README.md",
      "length": 2828,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#CHANGELOG.md",
      "@type": "PackageEntry",
      "compressedLength": 6943,
      "fullName": "CHANGELOG.md",
      "length": 28882,
      "name": "CHANGELOG.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.12.01.50.18/x10d.3.3.1-nightly.247.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11516,
      "fullName": ".signature.p7s",
      "length": 11516,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "dotnet",
    "extension-methods"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}