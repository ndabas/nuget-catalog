{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Tom Brewer",
  "catalog:commitId": "a931194b-9481-452b-8e51-5fd710f8b91d",
  "catalog:commitTimeStamp": "2018-12-11T14:17:46.4965837Z",
  "copyright": "Â©2015 Tom Brewer",
  "created": "2015-11-30T22:01:00.71Z",
  "description": "A class library for managing multi-threaded sequential write access to one or more files.\nIt is capable of flushing writes from multiple threads in batches by either hitting a specified size threshold or a specified inactivity time limit. It is also possible to write this batching information within the output file(s).\nNote: This class should be injected as a single or static instance shared across all process threads.\nFiles will be locked exclusively from the first Write() call until FlushAndClose() or Dispose() is called (presently one of these *must* be explicitly called to ensure all data is flushed).\n\nThe ConcurrentFileWriter class can be found as an extension of System.IO\n\n*** Full debugging source/symbols are available from http://srv.symbolsource.org/pdb/Public\n\nUsage Example:\n\nvar cfw = new ConcurrentFileWriter(new ConcurrentFileWriterSettings {\n             flushTimeInMilliseconds = 5000,\n             flushSizeInBytes = 10000,\n             showWriteBatchingMarkers = true\n                });\n\n//Pre-lock file (not required)\ncfw.Write(@\"c:\\temp\\test.log\", null);\n\n//Append a string (byte arrays can also be directly written)\ncfw.WriteUtf8Line(@\"c:\\temp\\test.log\", \"Test Line\");\n\n//Flush and unlock specified file (stop managing)\ncfw.CloseManagedFile(@\"c:\\temp\\test.log\");\n\n//Flush and unlock all managed files\ncfw.Dispose();",
  "id": "ConcurrentFileWriter",
  "isPrerelease": false,
  "lastEdited": "2018-12-11T14:17:11.707Z",
  "listed": true,
  "packageHash": "c85jPJSEst8U5VMnY3U9btBORgS0UjMnSwnAnVoLWET1/usk8ykhE7uVSKM/oOsuziH/hOG8B90Afw0juGQxeA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 20530,
  "published": "2015-11-30T22:01:00.71Z",
  "releaseNotes": "*** Still requires an explicit call to FlushAndClose() for a specific managed file or Dispose() on the ConcurrentFileWriter instance at the end of use.",
  "requireLicenseAcceptance": false,
  "summary": "A class library for managing multi-threaded sequential write access to one or more files.",
  "title": "ConcurrentFileWriter",
  "verbatimVersion": "1.0.2.0",
  "version": "1.0.2",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.2.json#ConcurrentFileWriter.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1119,
      "fullName": "ConcurrentFileWriter.nuspec",
      "length": 2423,
      "name": "ConcurrentFileWriter.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.2.json#lib/net40/ConcurrentFileWriter.dll",
      "@type": "PackageEntry",
      "compressedLength": 5879,
      "fullName": "lib/net40/ConcurrentFileWriter.dll",
      "length": 12800,
      "name": "ConcurrentFileWriter.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.2.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9463,
      "fullName": ".signature.p7s",
      "length": 9463,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "log",
    "logging",
    "sequential",
    "append",
    "appender",
    "file",
    "writer",
    "parallel",
    "concurrent",
    "multi-thread",
    "thread-safe",
    "cross-thread",
    "managed",
    "manager",
    "fast",
    "optimized",
    "high-performance",
    "batch",
    "batches",
    "batched",
    "batching",
    "auto",
    "flush",
    "timer"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}