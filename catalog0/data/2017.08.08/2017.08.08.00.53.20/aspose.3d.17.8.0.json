{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Aspose",
  "catalog:commitId": "4dd61d8b-431c-454c-ae08-85147790bb9d",
  "catalog:commitTimeStamp": "2017-08-08T00:53:20.0145785Z",
  "copyright": "© Aspose 2002-2017. All Rights Reserved.",
  "created": "2017-08-08T00:52:42.103Z",
  "description": "Aspose.3D is a class library for working with 3D files. It allows developers to create/manipulate/render 3D scene and work with FBX,STL,OBJ,3DS,U3D,DAE,PDF,DRC,GLTF files. It allows you to open files and manipulate the elements in the 3D scene, from line,mesh,nurbs curve, to more complex elements animation, and then export to FBX ASCII, FBX binary, STL ASCII, STL binary, Collada, Wavefront .obj, 3DS, PDF formats, glTF, glTF2, Google Draco.",
  "iconUrl": "http://www.aspose.com/images/products/dotnet/Aspose.3D%20for%20.NET%2092%20x%2092.png",
  "id": "Aspose.3D",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://www.aspose.com/corporate/purchase/end-user-license-agreement.aspx",
  "listed": true,
  "packageHash": "tu5D+JUGo0U9wHrAX+RdTZrDh/hxnl6bKAjdfrKCb4Iedjq6Dmliau08T+ZfXb4+I2kjXt+t/0fVVySyL45Gzw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 7534607,
  "projectUrl": "http://www.aspose.com/.net/3d-component.aspx",
  "published": "2017-08-08T00:52:42.103Z",
  "releaseNotes": "This page contains release notes for Aspose.3D for .NET 17.8.\n\n                    \n    \nOther Improvements and Changes\nKey Summary Category \n\nTHREEDNET-279 Render scene into a cube map with 6 faces. \nNew feature\n \n\nTHREEDNET-280 Add post-processing of equirectangular projection. New feature \n\nTHREEDNET-281 Render cube map to fisheye. New feature \n\nTHREEDNET-276 Incorrect conversion of OBJ to GLTF and GLB. Bug \n\nPublic API and Backwards Incompatible Changes\nSee the list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.3D for .NET. If you have concerns about any change listed, please raise it on the Aspose.3D support forum.\nMethods marked as obsoleted and will be removed in the end of this year 2017\n\nBefore the 17.8 all texture units (used by the renderer) are represented by the interface ITextureUnit but this design is not working well for the cube map and 3D texture in the future (not implemented yet), so these methods are all marked as obsolete, to make sure that the code will not break the compiler, developers should use the methods with same name from ITexture1D/ITexture2D/ITextureCubemap.\nC#\n\ninterface ITextureUnit\n{\n    void Load(TextureData bitmap);\n    void Save(string path, ImageFormat format);\n    void Save(Bitmap bitmap);\n    Bitmap ToBitmap();\n} \n\n\nAdded new enum type Aspose.ThreeD.Render.CubeFace\n\nThis type works with Aspose.ThreeD.Render.CubeFaceData<> and Aspose.ThreeD.Render.ITextureCubemap to access data as per the face of cubemap.\nC#\n\n/// <summary>\n/// Each face of the cube map texture \n/// </summary>\npublic enum CubeFace\n{\n    /// <summary>\n    /// The +X face\n    /// </summary>\n    PositiveX,\n    /// <summary>\n    /// The -X face\n    /// </summary>\n    NegativeX,\n    /// <summary>\n    /// The +Y face\n    /// </summary>\n    PositiveY,\n    /// <summary>\n    /// The -Y face\n    /// </summary>\n    NegativeY,\n    /// <summary>\n    /// The +Z face\n    /// </summary>\n    PositiveZ,\n    /// <summary>\n    /// The -Z face\n    /// </summary>\n    NegativeZ\n}\n\n\nAdded new class Aspose.ThreeD.Render.CubeFaceData<>\nThis class is a generic class to describe per cubemap face's data like file name or bitmap.\nAdded new class Aspose.ThreeD.Render.ITextureCubemap\nC#\n\n/// <summary>\n/// Cube map texture\n/// </summary>\npublic interface ITextureCubemap : ITextureUnit\n{\n    /// <summary>\n    /// Load texture content from specified files\n    /// </summary>\n    /// <param name=\"fileNames\"></param>\n    void Load(CubeFaceData<string> fileNames);\n    /// <summary>\n    /// Load texture content from specified <see cref=\"TextureData\"/>\n    /// </summary>\n    /// <param name=\"data\"></param>\n    void Load(CubeFaceData<TextureData> data);\n    /// <summary>\n    /// Load the data into specified face\n    /// </summary>\n    /// <param name=\"face\"></param>\n    /// <param name=\"data\"></param>\n    void Load(CubeFace face, TextureData data);\n    /// <summary>\n    /// Save the cube&#39;s sides texture content to external files.\n    /// </summary>\n    /// <param name=\"path\">File names to save.</param>\n    /// <param name=\"format\">Image format</param>\n    void Save(CubeFaceData<string> path, ImageFormat format);\n    /// <summary>\n    /// Save the texture content to memory.\n    /// </summary>\n    /// <param name=\"bitmap\">Result bitmap to save.</param>\n    void Save(CubeFaceData<Bitmap> bitmap);\n\n    /// <summary>\n    /// Save the specified side to memory\n    /// </summary>\n    /// <param name=\"side\"></param>\n    /// <param name=\"bitmap\"></param>\n    void Save(CubeFace side, Bitmap bitmap);\n\n    /// <summary>\n    /// Convert the texture unit to <see cref=\"Bitmap\"/> instance\n    /// </summary>\n    Bitmap ToBitmap(CubeFace side);    \n}\n\nC#\n\n//The model used in this sample can be found at https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/1.0/VC/glTF-Binary\nstring path = @\"D:\\Projects\\glTF-Sample-Models\\1.0\\VC\\glTF-Binary\\VC.glb\";\n//load the scene\nScene scene = new Scene(path);\n//create a camera for capturing the cube map\nCamera cam = new Camera(ProjectionType.Perspective)\n{\n    NearPlane = 0.1,\n    FarPlane = 200,\n    RotationMode = RotationMode.FixedDirection\n};\nscene.RootNode.CreateChildNode(cam).Transform.Translation = new Vector3(5, 6, 0);\n//create two lights to illuminate the scene\nscene.RootNode.CreateChildNode(new Light() {LightType = LightType.Point}).Transform.Translation = new Vector3(-10, 7, -10);\nscene.RootNode.CreateChildNode(new Light()\n{\n    Color = new Vector3(Color.CadetBlue)\n}).Transform.Translation = new Vector3(49, 0, 49);\n\n//create a renderer\nusing (var renderer = Renderer.CreateRenderer())\n{\n    //Create a cube map render target with depth texture, depth is required when rendering a scene.\n    IRenderTexture rt = renderer.RenderFactory.CreateCubeRenderTexture(new RenderParameters(false), 512, 512);\n    //a viewport is required on the render target\n    rt.CreateViewport(cam, RelativeRectangle.FromScale(0, 0, 1, 1));\n    renderer.Render(rt);\n    //now lets get the cubemap texture\n    ITextureCubemap cubemap = rt.Targets[0] as ITextureCubemap;\n    //we can directly save each face to disk by specifing the file name\n    CubeFaceData<string> fileNames = new CubeFaceData<string>()\n    {\n        Right = \"right.png\",\n        Left = \"left.png\",\n        Back = \"back.png\",\n        Front = \"front.png\",\n        Bottom = \"bottom.png\",\n        Top = \"top.png\"\n    };\n    //and call Save method\n    cubemap.Save(fileNames, ImageFormat.Png);\n    //or we just need to use the render result in memory, we can save it to CubeFaceData<Bitmap>\n    CubeFaceData<Bitmap> bitmaps = new CubeFaceData<Bitmap>();\n    cubemap.Save(bitmaps);\n    bitmaps.Back.Save(\"back.bmp\", ImageFormat.Bmp);\n}\n\n\nAdded new class Aspose.ThreeD.Render.ITexture1D\nThis interface is used to represent an 1D texture object\nAdded new class Aspose.ThreeD.Render.ITexture2D\nThis interface is used to represent a 2D texture object\nAdded new methods to class Aspose.ThreeD.Render.RenderFactory:C#\n\n// this is an overloaded version for method IRenderTexture CreateRenderTexture(Aspose.ThreeD.Render.RenderParameters parameters, int targets, int width, int height) with targets to 1\npublic Aspose.ThreeD.Render.IRenderTexture CreteRenderTexture(Aspose.ThreeD.Render.RenderParameters parameters, int width, int height)\n//Create a render target that will render the scene into a cube map\npublic Aspose.ThreeD.Render.IRenderTexture CreateCubeRenderTexture(Aspose.ThreeD.Render.RenderParameters parameters, int width, int height)\n// allow user to create ITexture1D/ITexture2D/ITextureCubemap manually\npublic Aspose.ThreeD.Render.ITextureUnit CreateTextureUnit(Aspose.ThreeD.Render.TextureType textureType)\n\nAdded new method in class Aspose.ThreeD.Render.Renderer:\n\nIn the previous versions the post processing can only be used by providing a chain of post processing effects to Aspose.ThreeD.Render.Renderer.PostProcessings, now with this method user can manually execute the post processing procedure, this is useful in the new feature THREEDNET-280 and THREEDNET-281, means you can render a cubemap into a panaroma image or fisheye image.\nC#\n\npublic void Execute(Aspose.ThreeD.Render.PostProcessing postProcessing, Aspose.ThreeD.Render.IRenderTarget result)\n\n\n \n\n \n\n \n\nGenerate a Panaroma Image in 3D Scene\n\nDevelopers can use 3rd party tools like three.js/Pano2VR to visualize the result.\nC#\n\n//The model used in this sample can be found at https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/1.0/VC/glTF-Binary\nstring path = @\"D:\\Projects\\glTF-Sample-Models\\1.0\\VC\\glTF-Binary\\VC.glb\";\n//load the scene\nScene scene = new Scene(path);\n//create a camera for capturing the cube map\nCamera cam = new Camera(ProjectionType.Perspective)\n{\n    NearPlane = 0.1,\n    FarPlane = 200,\n    RotationMode = RotationMode.FixedDirection\n};\nscene.RootNode.CreateChildNode(cam).Transform.Translation = new Vector3(5, 6, 0);\n\n//create two lights to illuminate the scene\nscene.RootNode.CreateChildNode(new Light() {LightType = LightType.Point}).Transform.Translation = new Vector3(-10, 7, -10);\nscene.RootNode.CreateChildNode(new Light()\n{\n    Color = new Vector3(Color.CadetBlue)\n}).Transform.Translation = new Vector3(49, 0, 49);\n//create a renderer\nusing (var renderer = Renderer.CreateRenderer())\n{\n    //Create a cube map render target with depth texture, depth is required when rendering a scene.\n    IRenderTexture rt = renderer.RenderFactory.CreateCubeRenderTexture(new RenderParameters(false), 512, 512);\n    //create a 2D texture render target with no depth texture used for image processing\n    IRenderTexture final = renderer.RenderFactory.CreateRenderTexture(new RenderParameters(false, 32, 0, 0), 1024 * 3 , 1024);\n\n    //a viewport is required on the render target\n    rt.CreateViewport(cam, RelativeRectangle.FromScale(0, 0, 1, 1));\n    renderer.Render(rt);\n\n    //execute the equirectangular projection post-processing with the previous rendered cube map as input\n    PostProcessing equirectangular = renderer.GetPostProcessing(\"equirectangular\");\n    //Specify the cube map rendered from the scene as this post processing&#39;s input\n    equirectangular.Input = rt.Targets[0];\n    //Execute the post processing effect and save the result to render target final\n    renderer.Execute(equirectangular, final);\n    //save the texture into disk\n    ((ITexture2D)final.Targets[0]).Save(\"panaroma.png\", ImageFormat.Png);\n}\n\n\n \n\n \n\n \n\n\nGenerate Fisheye Lens Effect in 3D Scene\nC#\n\n//The model used in this sample can be found at https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/1.0/VC/glTF-Binary\nstring path = @\"D:\\Projects\\glTF-Sample-Models\\1.0\\VC\\glTF-Binary\\VC.glb\";\n//load the scene\nScene scene = new Scene(path);\n//create a camera for capturing the cube map\nCamera cam = new Camera(ProjectionType.Perspective)\n{\n    NearPlane = 0.1,\n    FarPlane = 200,\n    RotationMode = RotationMode.FixedDirection\n};\nscene.RootNode.CreateChildNode(cam).Transform.Translation = new Vector3(5, 6, 0);\n\n//create two lights to illuminate the scene\nscene.RootNode.CreateChildNode(new Light() {LightType = LightType.Point}).Transform.Translation = new Vector3(-10, 7, -10);\nscene.RootNode.CreateChildNode(new Light()\n{\n    Color = new Vector3(Color.CadetBlue)\n}).Transform.Translation = new Vector3(49, 0, 49);\n\n//create a renderer\nusing (var renderer = Renderer.CreateRenderer())\n{\n    //Create a cube map render target with depth texture, depth is required when rendering a scene.\n    IRenderTexture rt = renderer.RenderFactory.CreateCubeRenderTexture(new RenderParameters(false), 512, 512);\n    //create a 2D texture render target with no depth texture used for image processing\n    IRenderTexture final = renderer.RenderFactory.CreateRenderTexture(new RenderParameters(false, 32, 0, 0), 1024, 1024);\n\n    //a viewport is required on the render target\n    rt.CreateViewport(cam, RelativeRectangle.FromScale(0, 0, 1, 1));\n    renderer.Render(rt);\n\n    //execute the fisheye projection post-processing with the previous rendered cube map as input\n    //the fisheye can have field of view more than 180 degree, so a cube map with all direction is required.\n    PostProcessing fisheye = renderer.GetPostProcessing(\"fisheye\");\n    // we can change the fov to 360 instead of the default value 180.\n    fisheye.FindProperty(\"fov\").Value = 360.0; \n    //Specify the cube map rendered from the scene as this post processing&#39;s input\n    fisheye.Input = rt.Targets[0];\n    //Execute the post processing effect and save the result to render target final\n    renderer.Execute(fisheye, final);\n    //save the texture into disk\n    ((ITexture2D)final.Targets[0]).Save(\"fisheye.png\", ImageFormat.Png);\n}\n\n\nAdded methods to struct Aspose.ThreeD.Utilities.FVector3:\n\n\nThese are the two primitive operations of vectors.\nC#\n\n//Calculate the normalized vector of the FVector3, equivalent implementation of Vector3.Normalize\npublic Aspose.ThreeD.Utilities.FVector3 Normalize()\n//Calculate the cross product of two FVector3, equivalent implementation of Vector3.Cross\npublic Aspose.ThreeD.Utilities.FVector3 Cross(Aspose.ThreeD.Utilities.FVector3 rhs)\n\n\n\n\n\nUsage Examples\n\nPlease check the list of help topics added or updated in the Aspose.3D Wiki docs:\n\n    \n        \n\n        \nhttps://docs.aspose.com/display/3dnet/Aspose.3D+for+.NET+17.8+Release+Notes",
  "requireLicenseAcceptance": true,
  "summary": "Aspose.3D is a class library for working with 3D files.",
  "title": "Aspose.3D for .NET",
  "verbatimVersion": "17.8",
  "version": "17.8.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#Aspose.3D.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3801,
      "fullName": "Aspose.3D.nuspec",
      "length": 14176,
      "name": "Aspose.3D.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net35/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 940477,
      "fullName": "lib/net35/Aspose.3D.dll",
      "length": 1906688,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net35_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 944172,
      "fullName": "lib/net35_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1911792,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net35_ClientProfile/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 939253,
      "fullName": "lib/net35_ClientProfile/Aspose.3D.dll",
      "length": 1906688,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net35_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 943045,
      "fullName": "lib/net35_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1911792,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net40/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 938349,
      "fullName": "lib/net40/Aspose.3D.dll",
      "length": 1902080,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net40_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 942266,
      "fullName": "lib/net40_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1907184,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net40_ClientProfile/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 937563,
      "fullName": "lib/net40_ClientProfile/Aspose.3D.dll",
      "length": 1902080,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.08.08.00.53.20/aspose.3d.17.8.0.json#lib/net40_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 941586,
      "fullName": "lib/net40_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1907184,
      "name": "Aspose.3D.dll"
    }
  ],
  "tags": [
    "3D",
    "Aspose.3D",
    "FBX",
    "STL",
    "OBJ",
    "Wavefront",
    "3DS",
    "U3D",
    "Collada",
    "PDF",
    "glTF",
    "glTF2",
    "DXF",
    "PLY"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}