{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.03.12.00.34/expresswalker.1.0.0.7.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Ivan Kopcanski",
  "catalog:commitId": "99637695-7661-483b-a64f-cb451f16c461",
  "catalog:commitTimeStamp": "2016-08-03T12:00:34.0842991Z",
  "copyright": "Ivan Kopcanski 2016",
  "created": "2016-08-03T12:00:29.243Z",
  "description": "ExpressWalker provides a generic way to examine and change any object graph in fashion similar to \"Visitor Pattern\". You can build generic hierarchy composition (visitor) capable to \"visit\" and change any property, basing on configuration. Uses refleciton only while building a visitor and relies purely on expression trees while visiting objects.\n\nThat's why IT IS WAY FASTER than custom solutions usually built with reflection.\n\nIt is optionally protected from circular references so you can avoid StackOverflowException easily. Provides fluent API while building a visitor which increases code readability in terms of recognizing the hierarchy being built right away from the code. The optional and configurable things available are:\n\nvisiting properties by matching owner type and property name\nvisiting properties by matching property type only\nspecifying depth of visit in run-time (not during configuration)\ncustom expression for changing property value\ncloning of visited object\netc.\n\n//building a visitor + visiting an object (with optional clone, visit depth and circular reference protection):\n\nvar visitor = TypeWalker<Parent>.Create()\n                  .ForProperty<Parent, string>(p => p.TestString1, null, (old, met) => old + met)\n                  .ForProperty<Child, DateTime>(p => p.TestDate1, null, (old, met) => old.AddYears(10))\n                  .ForProperty<CommonType>(null, (old, met) => new CommonType { CommonString = \"...\" })\n                  .Build();\n\n  var parentClone = new Parent();\n\n  visitor.Visit(parentObject, parentClone, 10, new InstanceGuard()); \n\n// The properties that are being visited and change here are:\n// 1. 'TestString1' property of Parent objects, anywhere in Parent's hierarchy\n// 2. 'TestDate1' property of Child objects, anywhere in Parent's hierarchy\n// 3.  Any property of type CommonType, anywhere in Parent's hierarchy\n\n//Property setter: new value for property 'TestString1' is set by compiled expression '(old, met) => old + met'\n//'old' is old value, 'met' is metadata obj. coming from [VisitorMetadata] attribute on 'TestString1' property.\n\nThere is also an option of ManualWaler for building more specific visitor that will visit only nodes in specific place in object graph (e.g. only a 'Child' element at level 3 and only it's 'TestString1' property).\n\nMany thanks to Francisco José Rey Gozalo for contributing with ideas and solutions.",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.03.12.00.34/expresswalker.1.0.0.7.json#frameworkassemblygroup",
    "assembly": [
      "System",
      "System.Core",
      "Microsoft.CSharp"
    ]
  },
  "id": "ExpressWalker",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/kopalite/ExpressWalker/blob/master/LICENSE",
  "listed": true,
  "packageHash": "xoyTVlFpMgEgFfe8RMVLdMtWgkvl1TcX4lzocT/w0MsLnNtc7Z00g+Q9kVqGGMPfVM/4i2N7BdI9xJdp4UYRKA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 14589,
  "projectUrl": "https://github.com/kopalite/ExpressWalker",
  "published": "2016-08-03T12:00:29.243Z",
  "releaseNotes": "Initial stable version",
  "requireLicenseAcceptance": true,
  "summary": "ExpressWalker provides a generic way to examine and change any object graph in fashion similar to \"Visitor Pattern\". You can build generic hierarchy composition (visitor) capable to \"visit\" and change any property, basing on configuration. Uses refleciton only while building a visitor and relies purely on expression trees while visiting objects (Many thanks to Francisco José Rey Gozalo for contributing with ideas and solutions).",
  "title": "ExpressWalker",
  "verbatimVersion": "1.0.0.7",
  "version": "1.0.0.7",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.03.12.00.34/expresswalker.1.0.0.7.json#ExpressWalker.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1506,
      "fullName": "ExpressWalker.nuspec",
      "length": 3940,
      "name": "ExpressWalker.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.08.03.12.00.34/expresswalker.1.0.0.7.json#lib/ExpressWalker.dll",
      "@type": "PackageEntry",
      "compressedLength": 8130,
      "fullName": "lib/ExpressWalker.dll",
      "length": 18432,
      "name": "ExpressWalker.dll"
    }
  ],
  "tags": [
    "ExpressWalker",
    "Expressions",
    "Visitor"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}