{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.11.20.16.06.09/transformations.0.0.125.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dmitri Rechetilov",
  "catalog:commitId": "c5d0d981-8aba-42bf-91b9-9965065a4634",
  "catalog:commitTimeStamp": "2015-11-20T16:06:09.131672Z",
  "copyright": "Copyright 2015 by Dmitri Rechetilov",
  "created": "2015-11-20T16:05:55.563Z",
  "description": "Conversion between data types. Envisaged as a possible alternative to the Universal Type Converter http://www.codeproject.com/Articles/248440/Universal-Type-Converter, with the provision for default values, and some extra features.",
  "iconUrl": "http://sweetclipart.com/multisite/sweetclipart/files/monarch_butterfly_vector.png",
  "id": "Transformations",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "listed": true,
  "packageHash": "EYgCmt5TDCHoN2YEHlUKXbjvvF23XeisWLTtB3cu5GY+7JJsqXZE7rNGDWACIv9xox1tmZGMmtDEp6bubsiOzw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 269018,
  "projectUrl": "http://www.codeproject.com/Articles/767549/Transformations",
  "published": "2015-11-20T16:05:55.58Z",
  "releaseNotes": "* You don't need to reference the transformations namespace with Using statement (type conversions are meant to be universal if you choose to use this). \n\nGenerally you would just do: \n\n  var newValue = oldValue.ConvertTo<newType>(optionalDefaultValue); \n\n* You can use TryConvertTo if you need to get the result of the conversion process. \n\n* You can do some conversions on DataTables and Lists , for example convert a data table to an object list, if the names of the columns match the object properties. \n\n* The date conversion is set to British date format by default, not the project's current format. This may have to change to make the library more \"universal\". \n\n* From some basic tests I have performed on universal type converter and this library, I found it to be a bit faster than the universal type converter... \n\n******************************************** \nSome examples of use: \n******************************************** \nstring valueInput = \"7F8C14B6-B3A8-4F71-8EFC-E5A7B35923B6\"; \nGuid actual = valueInput.ConvertTo<Guid>(Guid.Empty);\n// where Guid.Empty is the default value if the conversion fails.\n// ----------------------------------------------- \nstring valueInput = \"0.1\"; \nfloat actual = valueInput.ConvertTo<float>(0.0f);\n// where 0.0f is the default value if the conversion fails.\n// result = 0.1f; \n// ----------------------------------------------- \nstring valueInput = \"15/02/2014\"; \nDateTime actual = valueInput.ConvertTo<DateTime>(new DateTime(2000, 01, 01)); \n// where 2000-01-01 is the default value if the conversion fails.\n// result = new DateTime(2014, 02, 15); \n// ----------------------------------------------- \nfloat? f = 123.524f; \nint? i = f.ConvertTo<int>(); \n// result = 124; \n// ----------------------------------------------- \n\n* You can convert date to 'excel'-type value: \nDateTime d = new DateTime(2005, 5, 5); \nd.ToDouble(); \n// or d.ToInt(); \n\nList conversions examples: \n// ----------------------------------------------- \nList<int> l1 = new List<int>(new int[] { 2, 3, 4 }); \nList<float> l2 = l1.ConvertToList<int, float>(); \n// ----------------------------------------------- \n\n\n\n************************************************** \n\nSome additional helper methods are added as extensions as well: \n\n// ----------------------------------------------- \n\n*Proper Case* \n\nstring name = \"mr john smith\"; \nname.ProperCase(); \n// result = \"Mr John Smith\"; \n\n// ----------------------------------------------- \n\n*Insert Spaces* \n\nstring name = \"MrJohnSmith\"; \nname.InsertSpaces(); \n// result = \"Mr John Smith\"; \n\n// ----------------------------------------------- \n\n*Remove Chars* - removes multiple instances of the same string pattern from the string. \n\nstring name = \"Mr John John Smith\"; \nname.RemoveChars(\"John \"); \n// result = \"Mr Smith\"; \n\n// ----------------------------------------------- \n\n*Replace Ex* - replace multiple instances of the same string pattern in the string. \nstring s = \"12345678901234567890\"; \ns.ReplaceEx(\"2\", \"X\"); \n// result = \"1X345678901X34567890\"; \n\n// ----------------------------------------------- \n\n*Is Date* - check if string is a date! assumes en-Gb as default culture at present.. \n\nstring s = \"14/02/2014\"; \nif (IsDate(s)) \n{ ... } \nif (IsDate(s, \"en-GB\")) \n{ ... } \n\n// ----------------------------------------------- \n\n.ToSqlParameter() extension methods make it easier to effectively make the swift conversion to SqlParameters from most types, but please always check that the correct SqlDbType is supplied...\n\nFor example, if you wanted to supply myChar parameter to a stored procedure - a char conversion could be:\n\nchar c = 'a';\nc.ToSqlParameter('myChar');\n- and you would probably want to add SqlParameter to the list of parameters.\n\nWhen converting a string to a varchar / nvarchar, a size of the string is required. It's usually the best practice to supply the string size to avoid runtime errors.\n\nI'm thinking of adding a completely separate validation method to SqlParameter list, which will test that each conversion can be performed correctly.\n\n// ----------------------------------------------- \n\nNew:\n\nAdded DataTable.HasRows()\n// ie: dataTable != null && dataTable.Rows.Count > 0\n\nAdded DataRow.GetValue<T>()\n- Gets the value as required type.",
  "requireLicenseAcceptance": false,
  "summary": "Conversion between data types. Envisaged as an alternative to the Universal Type Converter, with additional provision for setting the default values, DataTable to object list conversion, etc.",
  "title": "Transformations Type Converter (Alpha version)",
  "verbatimVersion": "0.0.125",
  "version": "0.0.125",
  "tags": [
    "typeconverter",
    "typeconversion",
    "typeconverting",
    "conversion",
    "converting",
    "converter",
    "convert",
    "convertible",
    "type",
    "types",
    "universal"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}