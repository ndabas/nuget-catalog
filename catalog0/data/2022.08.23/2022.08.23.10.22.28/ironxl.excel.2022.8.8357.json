{
  "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "https://ironsoftware.com/csharp/excel/",
  "catalog:commitId": "18e6bba6-e1bb-425d-b0bd-79d1c2b3bbc9",
  "catalog:commitTimeStamp": "2022-08-23T10:22:28.2247425Z",
  "copyright": "(C) 2019-2022 IronSoftware.com",
  "created": "2022-08-23T10:20:03.457Z",
  "description": "IronXL allows developers to Read, Generate and Edit Excel (and other Spreadsheet files) in .NET Applications  & websites.\n\nA fast and natural approach to work with Excel and Other Spreadsheet files in C#.\n\nFor code samples, docs & more visit https://ironsoftware.com/csharp/excel/\n\nNo utilization of Office Excel Interop. Works well with .NET Framework, .NET Core and Azure. All without extra dependancies or the need to install MS Office.\n\nKey library features include:\n* Import Data from XLS/XLSX/CSV/TSV.\n* Export Work Sheets to XLS/XLSX/CSV/TSV/JSON.\n* Encrypt and decrypt XLSX/XLSM/XLTX files with passwords.\n* Work with Spreadsheets as System.Data.DataSet and System.Data.DataTable objects.\n* Excel Formulas recalculated every time a sheet it edited.\n* Intuitive Ranges setting with a WorkSheet[\"A1:B10\"] syntax.\n* Sort Ranges, Columns and Rows.\n* Style Cells - Font, Size, Background pattern, Border, Alignment and Number formats.\n\nIronXL works well in C#, VB.NET, MVC, ASP.NET projects for Websites, Console & Desktop APPs.\n\nWorks with:\n- .NET Core 2 , 3.1\n- .NET 5\n- .NET 6\n- .NET Standard 2  & 3\n- .NET Framework 4.7.2 and above\n- Xamarin, SharePoint, Mono\n- Azure, AWS, Cloud hosting\n- Windows, Linux, Mac, Mobile\n\nLicensing  & Support available for commercial deployments.\n\nFind full documentation at: https://ironsoftware.com/csharp/excel/\n\nFor support please contact us: developers@ironsoftware.com",
  "iconUrl": "https://ironsoftware.com/brand/iron-logo-128.png",
  "id": "IronXL.Excel",
  "isPrerelease": false,
  "lastEdited": "2022-08-23T10:22:11.137Z",
  "licenseUrl": "https://ironsoftware.com/csharp/excel/license/",
  "listed": true,
  "packageHash": "3k8imUZFL2E8PTD92EnC5yHKjXMxqTqzueXmY9W6Va7+5S3rGU/dVd1hMOxM0cOlAOFlpi+KdzHvTP4YiY93eQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 10315730,
  "projectUrl": "https://ironsoftware.com/csharp/excel/",
  "published": "2022-08-23T10:20:03.457Z",
  "readmeFile": "docs\\README.md",
  "releaseNotes": "* Adds a feature of encrypting and decrypting \".xlsx\", \".xlsm\" and \".xltx\" files with a password. Use WorkBook.SaveAs(string fileName, string password) method to encrypt the WorkBook with provided password when saving it. Use WorkBook.Load(string filename, string password) method to decrypt file with provided password when loading the workbook. Password can also be specified with following:\n  - using WorkBook.Password property (workbook will be encrypted on save if this property is not null, and will not be encrypted if it is null)\n  - using SavingOptions object with SavingOptions.Password property, when calling WorkBook.SaveAs(string fileName, SavingOptions options) method\n  - using LoadingOptions object with LoadingOptions.Password property, when calling WorkBook.Load(string filename, LoadingOptions options) method\nTo check if the WorkBook object will be encrypted on save use WorkBook.IsEncrypted boolean property. Encryption can also be turned off by assigning WorkBook.IsEncrypted = false (Note: workbook cannot be encrypted by assigning WorkBook.IsEncrypted = true, this will throw an exception at runtime, asking to instead specify a password).\nSetting passwords to a workbook of a type other than \".xlsx\", \".xlsm\" and \".xltx\" will also throw an exception at runtime alerting user that the workbook could not be encrypted\n* Adds support for .Net 6.0\n* Removes dependency on System.Common.Drawing\n* Removes support for .Net Framework 4.5. Minimum supported .Net Framework version is now 4.6.2\n* Breaking change: WorkBook.SaveAs(string filename, string listDelimiter) method was renamed to WorkBook.SaveAsWithCustomDelimiter(string filename, string listDelimiter) to remove ambiguity between SaveAs(string filename, string listDelimiter) and SaveAs(string fileName, string password) methods\n* Breaking change: IronXL.Drawing.Images.IImage.ToBitmap() method is removed, as System.Common.Drawing is no longer supported.\n* Breaking change: IronXL.Drawing.Images.IImage.ToImage() method now returns a SixLabors.ImageSharp.Image object used as a replacement for removed System.Common.Drawing objects.\n* Fixes a bug where a background color set to a cell or a range in XLSX workbook didn't render in Excel.\n* Fixes a bug where Thai language locale throwed license exception\n* Fixes a bug where each time a new cell was assigned a DateTime value in XLSX workbook a new cell style was created for each cell, overflowing the style table and breaking the resulting file if the number of cells was > 64000.\n* Improves speed of creating large amounts of cells with a DateTime value and format. For example, creating a workbook with 80K DateTime value and format cells on a single worksheet used to take 25 seconds, and now takes less then 0.8 seconds (actual performance will depend on the environment the code is executed in).",
  "requireLicenseAcceptance": false,
  "title": "IronXL - The C# Excel SpreadSheet Library.",
  "verbatimVersion": "2022.8.8357",
  "version": "2022.8.8357",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#IronXL.Excel.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2357,
      "fullName": "IronXL.Excel.nuspec",
      "length": 5431,
      "name": "IronXL.Excel.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#docs/README.md",
      "@type": "PackageEntry",
      "compressedLength": 2186,
      "fullName": "docs/README.md",
      "length": 6513,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#images/iron-logo-128.png",
      "@type": "PackageEntry",
      "compressedLength": 7700,
      "fullName": "images/iron-logo-128.png",
      "length": 8046,
      "name": "iron-logo-128.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#lib/netstandard2.0/IronXL.dll",
      "@type": "PackageEntry",
      "compressedLength": 10256302,
      "fullName": "lib/netstandard2.0/IronXL.dll",
      "length": 25874944,
      "name": "IronXL.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#lib/netstandard2.0/IronXL.dll.config",
      "@type": "PackageEntry",
      "compressedLength": 296,
      "fullName": "lib/netstandard2.0/IronXL.dll.config",
      "length": 521,
      "name": "IronXL.dll.config"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#lib/netstandard2.0/IronXL.xml",
      "@type": "PackageEntry",
      "compressedLength": 30287,
      "fullName": "lib/netstandard2.0/IronXL.xml",
      "length": 245955,
      "name": "IronXL.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#EULA.txt",
      "@type": "PackageEntry",
      "compressedLength": 2255,
      "fullName": "EULA.txt",
      "length": 5885,
      "name": "EULA.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#readme-setup.txt",
      "@type": "PackageEntry",
      "compressedLength": 767,
      "fullName": "readme-setup.txt",
      "length": 1926,
      "name": "readme-setup.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 702,
      "fullName": "readme.txt",
      "length": 1429,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.08.23.10.22.28/ironxl.excel.2022.8.8357.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Excel",
    "C#",
    "Csharp",
    "VB.NET",
    "IRONXL",
    "IRON",
    "XML",
    "XLSX",
    "CSV",
    "XLS",
    "TSV",
    "JSON",
    "MAC",
    "WINDOWS",
    "LINUX",
    "AZURE",
    "AWS",
    "DOCKER",
    "ENCRYPTION",
    "DECRYPTION",
    "SPREADSHEET",
    "FORUMLA",
    "CELLS",
    "SORTING",
    "STYLING",
    "BORDER",
    "SPREADSHEET-FORMULA"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}