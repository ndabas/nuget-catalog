{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.12.18.06.48/asyncenumerator.1.5.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Serge Semenov",
  "catalog:commitId": "05f9f0a2-22db-4eb0-bb14-762350cb005e",
  "catalog:commitTimeStamp": "2017-02-12T18:06:48.7689945Z",
  "created": "2017-02-12T18:06:41.737Z",
  "description": "Introduces IAsyncEnumerable, IAsyncEnumerator, ForEachAsync(), and ParallelForEachAsync()\nGitHub: https://github.com/tyrotoxin/AsyncEnumerable\n\nPROBLEM SPACE\n\nHelps to (a) create an element provider, where producing an element can take a lot of time\ndue to dependency on other asynchronous events (e.g. wait handles, network streams), and\n(b) a consumer that processes those element as soon as they are ready without blocking\nthe thread (the processing is scheduled on a worker thread instead).\n\n\nEXAMPLE\n\nusing System.Collections.Async;\n\nstatic IAsyncEnumerable<int> ProduceAsyncNumbers(int start, int end)\n{\n  return new AsyncEnumerable<int>(async yield => {\n\n    // Just to show that ReturnAsync can be used multiple times\n    await yield.ReturnAsync(start);\n\n    for (int number = start + 1; number <= end; number++)\n      await yield.ReturnAsync(number);\n\n    // You can break the enumeration loop with the following call:\n    yield.Break();\n\n    // This won't be executed due to the loop break above\n    await yield.ReturnAsync(12345);\n  });\n}\n\n// Just to compare with synchronous version of enumerator\nstatic IEnumerable<int> ProduceNumbers(int start, int end)\n{\n  yield return start;\n\n  for (int number = start + 1; number <= end; number++)\n    yield return number;\n\n  yield break;\n\n  yield return 12345;\n}\n\nstatic async Task ConsumeNumbersAsync()\n{\n  var asyncEnumerableCollection = ProduceAsyncNumbers(start: 1, end: 10);\n  await asyncEnumerableCollection.ForEachAsync(async number => {\n    await Console.Out.WriteLineAsync($\"{number}\");\n  });\n}\n\n// Just to compare with synchronous version of enumeration\nstatic void ConsumeNumbers()\n{\n  // NOTE: IAsyncEnumerable is derived from IEnumerable, so you can use either\n  var enumerableCollection = ProduceAsyncNumbers(start: 1, end: 10);\n  //var enumerableCollection = ProduceNumbers(start: 1, end: 10);\n\n  foreach (var number in enumerableCollection) {\n    Console.Out.WriteLine($\"{number}\");\n  }\n}",
  "id": "AsyncEnumerator",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://opensource.org/licenses/MIT",
  "listed": true,
  "packageHash": "0THdHlJU5yPqaRYvBe/TDhfCSayfsTIjsuSffwCpyOETITrLR7rAio97HWcPfM+Mtzhe9QtWZuYe6FycpFmwKw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 77135,
  "projectUrl": "https://github.com/tyrotoxin/AsyncEnumerable",
  "published": "2017-02-12T18:06:41.737Z",
  "releaseNotes": "1.5.0: Add support for .NET Standard, minor improvements.\n1.4.2: Add finalizer to AsyncEnumerator and call Dispose in ForEachAsync and ParallelForEachAsync extension methods.\n1.4.0: Add new generic type AsyncEnumeratorWithState for performance optimization.\n       Now IAsyncEnumerator<T> is covariant.\n       Add ForEachAsync, ParallelForeachAsync, and LINQ-style extension methods for IAsyncEnumerator.\n1.3.0: Significantly improve performance of AsyncEnumerator by reducing thread switching and re-using instances of TaskCompletionSource.\n       Add support for a state object that can be passed into AsyncEnumerable and AsyncEnumerator for performance optimization.\n       Remove CancellationToken from Select/Take/Skip/Where extension methods - fix improper implementation.\n       Move AsyncEnumerationCanceledException out of the generic AsyncEnumerator type.\n       Change default behavior of the ToAsyncEnumerable extension method - now MoveNextAsync will run synchronously by default.\n1.2.3: AsyncEnumerationCanceledException is thrown to the async enumeration function when the AsyncEnumerator is disposed before reaching the end of enumeration, what allows to do the clean-up.\n       Fixed MoveNextAsync() that threw an exception sometimes only when you passed the end of enumeration.\n1.2.2: Fix exception propagation in AsyncEnumerator. \n1.2.1: New Linq-style extension methods in System.Collections.Async namespace.\n1.2.0: Contract breaking changes in ParallelForEachAsync: introduce ParallelForEachException to unify error outcome of the loop.\n1.1.0: Add ParallelForEachAsync extension methods for IEnumerable<T> and IAsyncEnumerable<T> in System.Collections.Async namespace.",
  "requireLicenseAcceptance": false,
  "summary": "Introduces IAsyncEnumerable, IAsyncEnumerator, ForEachAsync(), and ParallelForEachAsync()",
  "verbatimVersion": "1.5.0",
  "version": "1.5.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.12.18.06.48/asyncenumerator.1.5.0.json#AsyncEnumerator.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1731,
      "fullName": "AsyncEnumerator.nuspec",
      "length": 4496,
      "name": "AsyncEnumerator.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.12.18.06.48/asyncenumerator.1.5.0.json#lib/net45/AsyncEnumerable.dll",
      "@type": "PackageEntry",
      "compressedLength": 29207,
      "fullName": "lib/net45/AsyncEnumerable.dll",
      "length": 80384,
      "name": "AsyncEnumerable.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.12.18.06.48/asyncenumerator.1.5.0.json#lib/net45/AsyncEnumerable.xml",
      "@type": "PackageEntry",
      "compressedLength": 5921,
      "fullName": "lib/net45/AsyncEnumerable.xml",
      "length": 103560,
      "name": "AsyncEnumerable.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.12.18.06.48/asyncenumerator.1.5.0.json#lib/netstandard1.4/AsyncEnumerable.dll",
      "@type": "PackageEntry",
      "compressedLength": 29375,
      "fullName": "lib/netstandard1.4/AsyncEnumerable.dll",
      "length": 80896,
      "name": "AsyncEnumerable.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.12.18.06.48/asyncenumerator.1.5.0.json#lib/netstandard1.4/AsyncEnumerable.xml",
      "@type": "PackageEntry",
      "compressedLength": 5921,
      "fullName": "lib/netstandard1.4/AsyncEnumerable.xml",
      "length": 103560,
      "name": "AsyncEnumerable.xml"
    }
  ],
  "tags": [
    "IAsyncEnumerable",
    "IAsyncEnumerator",
    "ForEachAsync",
    "ParallelForEachAsync",
    "async",
    "await",
    "foreach",
    "parallel"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}