{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.10.08.46.24/xamarin.agora.full.ios.2.3.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "dreamteammobile",
  "catalog:commitId": "dd8319be-5fd5-4683-b273-224ba185397f",
  "catalog:commitTimeStamp": "2021-05-10T08:46:24.6251192Z",
  "created": "2018-09-04T22:12:14.63Z",
  "description": "Xamarin bindings to the native iOS Agora.io Full SDK.",
  "id": "Xamarin.Agora.Full.iOS",
  "isPrerelease": false,
  "lastEdited": "2021-05-10T08:46:07.993Z",
  "listed": true,
  "packageHash": "STdAQKDjioqvYeHI99CidUULh1xF1sS/ow6v3rOLS4VzmWvI5+i59HbqZJ06t4qk2PW5s6VDwBiNYSEqjUqVoQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 105689265,
  "projectUrl": "http://www.agora.io/",
  "published": "2018-09-04T22:12:14.63Z",
  "releaseNotes": "v2.3.0 (Released Aug 31st, 2018)\nBefore Reading\nTo support scenarios with video rotation and enable better quality for custom video source, this release deprecates the setVideoProfile interface and uses setVideoEncoderConfiguration instead to set the video encoding configurations. You can still use setVideoProfile but Agora recommends using setVideoEncoderConfiguration to set the video profile because:\nDuring a live broadcast, users can set the video orientation mode as adaptive, under which the SDK can transfer rotated video frames without cropping them, thus avoiding the “big headshot” or blurry images at the Player.\nIn scenarios involving external video source, the SDK adjusts the width and height of the output video frames on basis of the inputting video frames, avoiding unnecessary cropping and thereby renderering more image frames at the Player.\nAn Accelerate.framework library was added to the SDK in v2.3.0, which is capable of large-scale mathemetical computations and image calculations, optimzed for high performance.\nThe security keys are improved and updated in v2.1.0. If you are using an Agora SDK version earlier than v2.1.0 and wish to migrate to the latest version, see Token Migration Guide.\nNew Features\n1. Fallback options for a live broadcast under unreliable network conditions\nThe audio and video quality of a live broadcast will deteriorate under unreliable network conditions. To improve the efficiency of a live broadcast, the setLocalPublishFallbackOption and setRemoteSubscribFallbackOption interfaces are added. These interfaces allow the SDK to automatically disable the video stream when the network condition cannot support both audio and video, and enable the video when the network conditions improve. didLocalPublishFallbackToAudioOnly or didRemoteSubscribeFallbackToAudioOnly is triggered when the stream falls back to audio-only or when the stream switches back to the video.\n\n2. Notifies the user that the Token will expire in 30 seconds\nThe SDK returns the tokenPrivilegeWillExpire callback 30 seconds before a Token expires to notify the app to renew it. When this callback is received, you need to generate a new Token on your server and call renewToken to pass the newly-generated Token to the SDK.\n\n3. Returns user-specific upstream and downstream statistics, including the bitrate, frame rate, packet loss rate and time delay\nThe audioTransportStatsOfUid and videoTransportStatsOfUid callbacks are added to provide user-specific upstream and downstream statistics, including the bitrate, frame rate, and packet loss rate. During a call or a live broadcast, these callbacks are triggered every two seconds after the user receives audio/video packets from a remote user. The callbacks include the user ID, audio bitrate at the receiver, packet loss rate, and time delay (ms).\n\n4. Sets the SDK’s Control over an Audio Session\nThe SDK and app both have control over the audio session. However, the app may restrict the SDK’s control over an audio session and allow another app or a third-party component to control it by using the setAudioSessionOperationRestriction method. You can implement different levels of control by choosing the corresponding restriction. You can call this method before or after joining the channel.\n\n5. Sets the video encoder configurations\nTo support scenarios with video rotation and enable better quality for custom video source, this release deprecates the setVideoProfile interface and uses setVideoEncoderConfiguration instead to set the video encoding configurations. You can still use setVideoProfile but Agora recommends using setVideoEncoderConfiguration to set the video profile because:\n\nDuring a live broadcast, users can set the video orientation mode as adaptive, under which the SDK can transfer rotated video frames without cropping them, thus avoiding the “big headshot” or blurry images at the Player.\nIn scenarios involving external video source, the SDK adjusts the width and height of the output video frames on basis of the inputting video frames, avoiding unnecessary cropping and thereby renderering more image frames at the Player.\nThe AgoraVideoEncoderConfiguration class provides a set of configurable video parameters, including the dimension, frame rate, bitrate, and orientation. For more information on the API, see descriptions in Set the Video Encoder Configuration.\n\n6. Adds support for background image settings in setLiveTranscoding\nThe backgroundImage parameter is added to the setLiveTranscoding method allowing you to set the background image in the combined video of a live broadcast.\n\nImprovements\nImproved the quality for one-on-one voice/video scenarios with optimized latency and smoothness, especially for areas like Southeast Asia, South America, Africa and Middle East.\nImproved the audio encoder efficiency in a live broadcast to reduce user traffic while ensuring the call quality.\nImproved the audio quality during a call or a live broadcast using the deep-learning algorithm.\nIssues Fixed\nIncreased memory usage when multiple delegated hosts broadcast in the channel.\nOccasional video renderer crashes when the app switches to the background on some iOS devices.\nOccasional app crashes on some iOS devices.\nThe remote view does not display on some devices.\nOccasional black screens on some iOS devices.\nOccasional ghost images.\nOccasional green line at the bottom of the video when a user switches from low stream to high stream in the communication mode.\nCrashes after publishing streams from some iOS devices.\nOccasional crashes on some iOS devices.\nCrash when a user frequently mutes and resumes all sound effects on some iOS devices.\nExcessive increase in memory usage associated with a host when he/she frequently joins and leaves a channel of multiple delegated hosts.\nOccasional issue that the remote user cannot hear the host when the host swithces to AUDIENCE and then back to BROADCASTER.\nOccasional issue that settings to the background image of live transcoding do not take effect.\nOccasional issue that some devices have video height and width swapped in communication mode.\nOccasional failure to respond to the destroy method after a user enables video and joins a channel.\nOccasional issue on some iOS devices that a user fails to hear any sound after returnning to the channel from a system phone call.\nThe audience cannot adjust the channel volume on some special occasions.\nOccasional crashes when a user frequently joins and leaves the channel.\nOccasional crashes when frequently setting the video encoder profile on some iOS devices.\nOccasional issue on iOS devices that videos from a remote user in a communication channel cannot be seen.\nOccasional failure to capture video of the delegated host when the hosts and the audience frequently change roles.\nOccasional issue on some iOS devices that a Web user can subscribe to the low video stream even when the iOS device does not have the dual-stream mode enabled.\nOccasional crashes when calling the setCameraFocusPositionInPreview method on some devices.\nOccasional crashes when one of the two broadcasters mutes or disables the local audio while playing the background music.\nOccasional crashes on the iOS device when the device interoperates with the web and when a Web user frequently joins and leaves a channel.\nA user cannot join a communication channel after frequently changing his/her video encoder profiles.\nOccasional crashes on some devices when preloading the sound effects.\nVideo resolution inconsistency between the encoder end and the decoder end in the live broadcast mode.\nOccasional video freeze in the communication or live broadcast mode.\nOccasional crashes when calling the muteRemoteVideoStream method after joinning the channel.\nOccasional issue that some iOS devices can still receive the video fallback-specific callbacks even when the video fallback option is not enabled.\nIncorrect video orientation on some iOS devices when setting the video profile of an external video source during a live broadcast.\nAn iOS issue that the bitrates cannot reach the target values when manually setting the video profile.\nOccasional failure to interoperate between an iOS and a macOS device.\nOccasional crashes on some iOS devices when a user leaves the live broadcast channel while playing music using a third-party application.\nOccasional crashes on some iOS devices when leaving the channel.\nAn iOS issue that when a host has injected a stream to a broadcast channel other hosts can still inject a second stream to the channel.\nOccasional crashes on some iOS devices when the user frequently turns on and off the camera.\nOccasional video freezes when tswitching from multiple hosts to one single host.\nOccasional interoperability failures between the SIP devices and the SDK.\nOccasional echoes when using a specific audio card.\nOccasional video delay on some iOS devices.\nThe video window size jumps from small to big on some iOS devices.\nImage blurs on some iOS devices when the camera vibrates.\nFailure to adjust the volume on some iOS devices.\nAPI Changes\nTo improve user experience, Agora has cleaned up and made the following changes to its APIs:\n\nTo avoid adding too many users with the same UID into the CDN publishing channel, the following APIs are added in v2.3.0:\n\naddUser\nremoveUser\nThe following APIs are deleted and no longer supported in v2.3.0. Agora provides the Recording SDK for better recording services. For more information on the Recoding SDK, see Release Notes for Agora Recording SDK.\n\nstartRecordingService\nstopRecordingService\nrefreshRecordingServiceStatus\nThe following deprecated APIs are deleted and no longer supported from v2.3.0:\n\nswitchView\nsetSpeakerphoneVolume\nBackwards Compatibility Breaking Changes\nNone.\n\nKnown Issues\nNone.\n\norigin: https://docs.agora.io/en/2.4/product/Video/Product%20Overview/release_ios_video",
  "requireLicenseAcceptance": false,
  "summary": "Xamarin Agora iOS SDK lets you use Agora.in-powered video sessions in apps",
  "title": "Xamarin bindings to the native iOS Agora Video SDK.",
  "verbatimVersion": "2.3.0",
  "version": "2.3.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.10.08.46.24/xamarin.agora.full.ios.2.3.0.json#Xamarin.Agora.Full.iOS.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3628,
      "fullName": "Xamarin.Agora.Full.iOS.nuspec",
      "length": 10689,
      "name": "Xamarin.Agora.Full.iOS.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.10.08.46.24/xamarin.agora.full.ios.2.3.0.json#lib/Xamarin.iOS10/Xamarin.Agora.Full.iOS.dll",
      "@type": "PackageEntry",
      "compressedLength": 105674341,
      "fullName": "lib/Xamarin.iOS10/Xamarin.Agora.Full.iOS.dll",
      "length": 124539904,
      "name": "Xamarin.Agora.Full.iOS.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.10.08.46.24/xamarin.agora.full.ios.2.3.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9500,
      "fullName": ".signature.p7s",
      "length": 9500,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Agora",
    "Agora.io",
    "Full",
    "SDK",
    "Xamarin",
    "iOS",
    "Xamarin.iOS",
    "MonoTouch",
    "Binding",
    "DreamTeam",
    "DreamTeamMobile"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}