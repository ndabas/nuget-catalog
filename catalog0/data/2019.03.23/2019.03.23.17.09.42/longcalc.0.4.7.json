{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "7b3b08eb-2d45-408d-91ed-9371ca8084b7",
  "catalog:commitTimeStamp": "2019-03-23T17:09:42.9328711Z",
  "copyright": "Copyright 2019",
  "created": "2019-03-23T17:05:17.413Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2019-03-23T17:09:28.8Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "rbKZrh11eFOBnvZgJd5IadpylWJ4vV+M+PBXGcGbj2S9AkkRYblliT8bE3+DOZPH80G6UcjFqX1ajvYj/U90iw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 447168,
  "published": "2019-03-23T17:05:17.413Z",
  "releaseNotes": "Unsigned Assembly\n\nRevisited the decision to implement x.Add(y, Precision) for all occurrances of x.Add:\nThat decision was ill-advised. For most occurrances of x.Add within the code, no truncation would occur anyway, and the function x.Add is less efficient with the Precision parameter than is the precise x.Add without the Precision parameter. For these situations, the precise x.Add without the Precision parameter is used.\nFor other situations (such as the hyperbolic functions) x.Add(1, Precision) is used to permit a calculation in which there is some confidence in the results returned, even for very large x.\nHowever, for the situation of the inverse hyperbolic functions, use of x.Add(1, Precision) returned inaccurate results for very large x, and the use of x.Add(1) would have brought most machines to an impasse if x were very large.\nIn this version 0.4.7, a third variation of x.Add (internal use only) is employed in which the precise Add would occur if no truncation were needed and an error is thrown in those cases where the use of x.Add(1) would otherwise result in an impasse.\nThis third version is employed where appropriate in the inverse hyperbolic functions, Gamma, and Zeta. \n\nAlso in this version, the x.NormalizeAngle function is permitted to error-out if x is very large. This handles the situation of inaccurate results which were returned for large real x or complex-valued hyperbolic functions in which x.imaginary was very large.\n\nAlso in this version, there is a return to an earlier approach for x.Sin, x.Cos, x.Tan which was more efficient than that used in earlier versions 0.4.x. \n\nAlso in this version, there is a return to an approach for x.ArcTan which existed as early as version 0.1.5 and was rather more efficient than the corrupted code that occurred in later versions, especially for larger Precision.\n\nThere are also some other simple changes to improve the efficiency of functions x.toString, x.Round, x.Zeta, x.Euler, x.Bernoulli, x.Exp, and the trigonometric functions. Changes in which there is confidence.\n\nAlso some other simple changes to address possible inaccuracies in the hyperbolic functions, among others. Changes in which there is confidence.\n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2017) and using Mpir.net for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.net and a base 2 int64 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.4.7",
  "version": "0.4.7",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1817,
      "fullName": "LongCalc.nuspec",
      "length": 4293,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 33785,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 101376,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#content/xmpir32.dll",
      "@type": "PackageEntry",
      "compressedLength": 176893,
      "fullName": "content/xmpir32.dll",
      "length": 320000,
      "name": "xmpir32.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#content/xmpir64.dll",
      "@type": "PackageEntry",
      "compressedLength": 220506,
      "fullName": "content/xmpir64.dll",
      "length": 441856,
      "name": "xmpir64.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.03.23.17.09.42/longcalc.0.4.7.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}