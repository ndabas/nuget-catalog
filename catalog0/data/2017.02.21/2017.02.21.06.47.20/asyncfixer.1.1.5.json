{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.21.06.47.20/asyncfixer.1.1.5.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Semih Okur",
  "catalog:commitId": "bdd5657f-dd1f-4dde-b8d2-15a2b51aa831",
  "catalog:commitTimeStamp": "2017-02-21T06:47:20.1386275Z",
  "copyright": "Copyright (c) AsyncFixer 2015-2017",
  "created": "2017-02-21T06:43:49.83Z",
  "description": "AsyncFixer helps developers in finding and correcting common async/await misuses (anti-patterns). AsyncFixer was tested with hundreds of open-source C# apps and successfully handles many corner cases. Here are anti-patterns that AsyncFixer can detect:\n\n1) AsyncFixer01: Unnecessary async/await Methods\n\nThere are some async methods where there is no need to use async/await keywords. It is important to detect this kind of misuse because adding the async modifier comes at a price. AsyncFixer automatically removes async/await keywords from those methods.\n\n2) AsyncFixer02: Using Long-running Operations under Async Methods\n\nDevelopers use some potentially long running or blocking operations under async methods even though there are corresponding asynchronous versions of these methods in .NET or third-party libraries. Some example for such operations: Task.Wait(), Task.Result, Task.WaitAll(...), StreamReader.ReadToEnd(...), Thread.Sleep(...), etc.\n\nAsyncFixer automatically replaces these operations with their corresponding asynchronous operations and inserts 'await' expression. For instance, it converts 'Thread.Sleep(...)' to 'await Task.Delay(...)'.\n\n3) AsyncFixer03: Fire & Forget Async Void Methods\n\nSome async methods are 'fire & forget', which return void. Unless a method is only called as an event handler, it must be awaitable. Otherwise, it is a code smell because it complicates control flow and makes error detection & correction difficult.\n\n4) AsyncFixer04: Fire & Forget Async Call In the Using Block\n\nIn an using block, developers use a fire & forget async call which uses disposable object as a parameter or target object. It can cause potential exception or wrong result. For instance, developers create a Stream in the using statement, pass it to the asynchronous method, and then stream will be implicitly disposed via using block. When the asynchronous method comes around to writing to the Stream, it is (very likely) already disposed and you will have an exception.\n\n5) AsyncFixer05: Implicit Downcasting from Task<T> to Task\n\nImplicit downcasting from Task<T> to Task is dangerous. There is no efficient way to get the result of the Task<T> after downcasting. It is even more dangerous to downcast from Task<Task> to Task. \n\nUsage:\nThe nuget package will work as a project-local analyzer that participates in builds. Attaching an analyzer to a project means that the analyzer travels with the project to source control and so it is easy to apply the same rule for the team. It also means that commandline builds report the issues reported by the analyzer. Download the nuget package from here: https://www.nuget.org/packages/AsyncFixer\n\nIf you want AsyncFixer to work just in the IDE and to work as an analyzer on every project you open in Visual Studio, please download the VSIX extension instead of this nuget package from here: https://visualstudiogallery.msdn.microsoft.com/03448836-db42-46b3-a5c7-5fc5d36a8308\n\nNotes: \n- The detection and fixing of more concurrency anti-patterns are being implemented.\n- Please send your bug report or feedback to semih.okur@gmail.com\n- Learn more information about these misuses from our website: LearnAsync.NET",
  "developmentDependency": "true",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.21.06.47.20/asyncfixer.1.1.5.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://learnasync.net/icon.png",
  "id": "AsyncFixer",
  "isPrerelease": false,
  "lastEdited": "2017-02-21T06:46:56.223Z",
  "licenseUrl": "http://learnasync.net/LICENSE.txt",
  "listed": true,
  "packageHash": "+ZTUFZrjB5YhtLJC4V6V5MQIivsbfUkM1XIxXfz2KV/dJ2t6eBGpmJXouRfXnv8YFsHwaU5pelJ1JMQclU0Ezg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 20321,
  "projectUrl": "http://learnasync.net/",
  "published": "2017-02-21T06:43:49.83Z",
  "releaseNotes": "v1.1.5 @ 02.20.2017: Added a license. Changed nuspec as a development dependency. Fixed several bugs in fixing anti-patterns.\nv1.1.4 @ 09.06.2016: Fixed false positives.\nv1.1.3 @ 03.22.2016: Depending on CodeAnalysis 1.0.0 instead of 1.1.1 due to compatibility issues for some users.\nv1.1.2 @ 03.21.2016: Fixed false positives for new analyzers.\nv1.1.0 @ 03.13.2016: Added 2 new code analyzers and improved accuracy of existing analyzers.\nv1.0.0 @ 07.29.2015: 3 code analyzers to detect and fix very common async anti-patterns.",
  "requireLicenseAcceptance": true,
  "summary": "AsyncFixer helps developers in finding and correcting common async/await misuses for C#.",
  "title": "AsyncFixer",
  "verbatimVersion": "1.1.5",
  "version": "1.1.5",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.21.06.47.20/asyncfixer.1.1.5.json#AsyncFixer.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2104,
      "fullName": "AsyncFixer.nuspec",
      "length": 4849,
      "name": "AsyncFixer.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.21.06.47.20/asyncfixer.1.1.5.json#analyzers/dotnet/cs/AsyncFixer.dll",
      "@type": "PackageEntry",
      "compressedLength": 14460,
      "fullName": "analyzers/dotnet/cs/AsyncFixer.dll",
      "length": 35328,
      "name": "AsyncFixer.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.21.06.47.20/asyncfixer.1.1.5.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 400,
      "fullName": "tools/install.ps1",
      "length": 1341,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.02.21.06.47.20/asyncfixer.1.1.5.json#tools/uninstall.ps1",
      "@type": "PackageEntry",
      "compressedLength": 426,
      "fullName": "tools/uninstall.ps1",
      "length": 1477,
      "name": "uninstall.ps1"
    }
  ],
  "tags": [
    "asyncfixer",
    "analyzers",
    "async/await",
    "asynchronous",
    "diagnostics",
    "codefix",
    "roslyn",
    "codeanalysis"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}