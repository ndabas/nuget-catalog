{
  "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "PDFTron Systems Inc.",
  "catalog:commitId": "19b8fb88-ebd9-4b63-833b-c134beb46e13",
  "catalog:commitTimeStamp": "2022-01-08T01:03:00.6829524Z",
  "copyright": "Copyright 2021",
  "created": "2022-01-08T00:59:21.953Z",
  "description": "[PDF Reader. PDF Control. PDF Component]\n\nPDFNet SDK is the ultimate PDF toolkit.\n\nThis package is the full version of PDFTron SDK (x64) for .NET Core.\n\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\n\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000). The extensive PDF library API supports most common use-case scenarios such as:\n*        PDF Viewing & Collaboration\n*        PDF Rasterization\n*        PDF Printing\n*        PDF Form filling and flattening\n*        PDF Split & Merge\n*        PDF Stamping\n*        Dynamic PDF generation (e.g. FlowDocument & Xaml to PDF)\n*        PDF Text extraction and indexing\n*        PDF Packages\n*        PDF Layers (OCGs)\n*        PDF Editing\n*        PDF Encryption\n*        Manipulate PDF bookmarks, links, and annotations.\n*        PDF Optimization\n*        PDF conversion to XML, HTML, XPS, SVG, TIF, etc.\n*        PDF/A Validation and Conversion\n*        PDF Redaction\n*        PDF Conversion from XPS, MS Office, HTML, XAML, TXT, TIFF etc.\n*        HTML to PDF Conversion",
  "iconUrl": "http://pdftron.com/brand-assets/nuget.png",
  "id": "PDFTron.NET.x64",
  "isPrerelease": false,
  "lastEdited": "2022-01-08T01:02:59.29Z",
  "licenseUrl": "https://api.pdftron.com/v2/view/NzQ4OGY5MWMtZWNhNi00ZDEwLWE5YjctY2UzNDlkMWVlZTBi",
  "listed": true,
  "packageHash": "6xilYioRtmM6w/269Nv7cWkkdvatkxKQdJlpzHSosyVG95m7CdNPatORldnYb0lUJIaV3pBGi5e66/kWUIpIHw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 79301580,
  "projectUrl": "https://www.pdftron.com/documentation/dotnetcore/",
  "published": "2022-01-08T00:59:21.953Z",
  "releaseNotes": "New Features\nAdvanced Imaging Module, supporting the DICOM image format and many others.\nFlexible and powerful document generation using office templates. Full reflow, and retains all document styles.\nAdded PDF2Word Module that enables conversion to Word. (Convert.ToWord()).\nAdded PDF2HtmlReflowParagraphsModule Module and HTMLOutputOptions.SetContentReflow() that can be used to utilize it when calling Convert.ToHtml.\nAdded a PDFTron Custom Security Handler that can be used to produce PDF files that can only be decrypted by PDFTron SDK and only if the password is correct and the specified id has been registered by the application. (PDFTronCustomSecurityHandler class and PDFNet.AddPDFTronCustomHandler) This provides a level of security very similar to that of writing a custom encryption method, but is much simpler to use.\nAdded an API to manually add or edit marked content. (ElementBuilder.CreateMarkedContentBegin, ElementBuilder.CreateMarkedContentEnd, ElementBuilder.CreateMarkedContentPoint etc.)\nAdded an API to produce pages showing the text differences between two pages or documents. (PDFDoc.AppendTextDiff) This API is currently experimental and subject to change.\nAdded a new API to trust certificates in the FDF Data/Cert Exchange format. (VerificationOptions.LoadTrustList) This provides overall more correct results during verification than VerificationOptions.AddTrustedCertificates as it can handle more fine-grained trust settings.\nAdded new optional trust flags as input to VerificationOptions::AddTrustedCertificate to configure the desired level of trust.\nAdded support for specifying locale for Office conversions.\nAdded a filetype option to 'Convert' methods that accept a Filter and not a file path.\nOther Changes\nOther Improvements\n[pdf] Updated Duktape to 2.6.0.\n[jpg] Updated libjpeg-turbo to 2.0.6.\n[tiff] Updated libTIFF to 4.2.0.\n[pdf] Updated OpenSSL to 1.1.1j.\n[all] Added macOS arm64 slice for Apple Silicon.\n[all] Enabled better optimization settings on PDFTron SDK on Windows.\n[xfdf] Significantly optimized the performance of XFDF export.\n[pdf] Optimized creation of PDFDoc, SDFDoc, FDFDoc and ObjSet objects. This has a significant impact on cases that create a large number of these objects.\n[xfdf] Improved support for importing XFDF into PDFs with corrupt Annotations array.\n[xfdf] Generating consistent names on all unnamed annotations for during xfdfexport. This is especially helpful for realtime collaboration use-cases.\n[xfdf] Adjusted rectangle, ellipse, export and import to support nonstandard rotation in import and export.\n[pdf] Adjusted logic for retaining text spacing adjustments, so that it would work with interleaved marked content operators.\n[pdf] Avoid \"faded colors\" during PDF rendering when color management is disabled and overprint is off.\n[pdf] Avoid writing unnecessary colors and colorspaces when generating annotation appearance streams.\n[pdf] Adjustment to repair corrupt documents with negative or unreasonably large object numbers.\n[pdf] Erase invalid colorspace entries in ImageMasks during PDF/A conversion\n[svg] Better handle corrupt documents with unbalanced q/Q operators in forms during Convert.ToSvg.\n[pdf] Added support for trusting intermediate certificates in the chain during for Digital Signature Verification.\n[pdf] Adjusted corrupt document processing logic to allow for an XRef entry following startxref. Previously this would be treated as garbage data and the rest of the PDF would be skipped.\n[pdf] Improved reading for field values from XFA to better handle strangely formed inheritance structures.\n[xod] Adjusted flattening to disregard cases where the blend mode is specifically set to normal. This reduces unnecessary flattening for ToXod and Flattener improving run time and output quality in these cases.\n[pdf] Optimized PDF/A conversion for files with a lot of font objects.\n[pdf] Optimized text extraction to more efficiently extract styles. This primarily impacts text selection, reflow and use cases that use TextExtractor directly to obtain text styles.\n[pdf] Added support for dashed borders on checkboxes.\n[pdf] Added support for auto-tiling of very large tiff images\n[pdf] A number of new APIs were exposed in the pdfnet-node package.\n[pdf] Handle Exif rotations through the UniversalConversion methods on the Convert class\nBugfixes\n[pdf] Fixed a parsing issue where unusually structured encrypted documents could fail to load.\n[pdf] Avoiding a crash when using incremental download on rare documents that start with a null object.\n[xfdf] Fixed an issue with PDFDoc.FDFUpdate where it could remove RichMedia and other less commonly used annotation types.\n[pdf] Fixed incorrect text extraction word break issue when text includes a vowel sign.\n[xfdf] Fixed an issue in PDFDoc.FDFUpdate where, in rare situations, radio buttons could be incorrectly matched and not function as expected.\n[pdf] Fixed a problem where certain PDF JPEG2000 images with 4 bits per component would display as darker than they should.\n[pdf] Fixed an issue where some documents with XFA values wouldn't take these into account when displaying the selected state of check boxes and radio buttons.\n[pdf] Fixed a problem where the Metadata would still be encrypted even if using SetEncryptedMetadata(false)\n[pdf] Fixed a problem with PDFDocInfo.GetSDFObj() where it would return the trailer rather than the Info object as would be expected.\n[pdf] Fixed an issue with Optimizer where, on certain documents and when subsetting fonts, it could break the appearance of hidden annotations. This could lead to issues later when the annotation becomes no longer hidden.\n[pdf] Adjusted page insertion to clear any DigitalSignatures when inserting into a new document. Previously these would be included, but invalid.\n[pdf] Adjusted handling of Field Flags to ignore them when they are incorrectly applied to Widget only dictionaries.\n[pdf] Adjusted PDF/A validation to not provide an error for Device colorspaces (e.g. DeviceRGB) if there is an associated Default colorspace in the resource dictionary. (e.g. DefaultRGB)\n[pdf] Fixed an issue with the generated appearance of line annotations with inline captions where the line would go through the text.\n[pdf] Fixed an issue with handling of 0 length streams that could lead to slow and unexpected file growth. This issue was especially troublesome when saving large files.\n[pdf] Fix for incorrect color in some DCTDecode images where the embedded colorspace conflicts with the PDF colorspace\n[pdf] Closed potential security issue with FileAttachment annotations, where a specifically constructed annotation could access external servers during XFDF export\n[pdf] Generated fully selectable text when generating complicated shaped text output\n[pdf] Fix for potential non-optimal performance when filling an internal object cache\n[tiff] Fix for potential crash when reading some YCbCr encoded images.\n[pdf] Fixed an issue with creating bad width tables in fonts covering codepoints outside the basic multilingual plane\n[pdf] fixed an issue with bad lookups in a font's toUnicode map when handling codepoints outside the basic multilingual plane\n[emf] Now correctly handle PDFs embedded within EMF files\n[all] Fix for mishandling of short font names in all caps, like \"OCR-B\"\n[all] Fixed bug with custom font servers which could result in missing the first item in a specified character range\n[all] corrected mapping of fonts specified as both \"light\" and \"bold\"\n[all] Fix for incorrect font substitution on Windows systems for some symbol characters\nOffice-specific\n[office] Can now positively identify encrypted office documents.\n[pptx] Fix for cases where a shape had deeply nested reference to other diagrams.\n[docx] more consistent handling of table widths specified as percentages.\n[office] Fixed issue that could result in incorrect character selection in documents with explicitly specified zero width non-break space characters.\n[docx] Now correctly take endnote number formatting into account.\n[office] Fixed bug with superscript/subscript handling in some cases when resolving local and derived run styles.\n[xlsx] More robust handling of malformed number formatting codes.\n[office] Fixed error in PDF structure output for table cells when converting office->PDF.\n[docx] Fix for semi-transparent fills in some office drawings.\n[docx] More robust handling of grouped office drawings with no shape ID.\n[office] Fixed the default label placement for 3d bar graphs.\n[office] Fixed error with occasional missing chart per-data-point labels.\n[pptx] Added missing support for column layout.\n[docx] Fix for incorrect handling of page breaks immediately preceding a continuous section break.\n[docx] Tuned line spacing to be an exact match to MS Word in more situations.\n[docx] Added support for graphic frames.\n[docx] Improved interaction between tables and floating content.\n[pptx] Fixed mishandling of tab characters within some lists.\n[office] Now correctly handle the \"flatTx\" attribute.\n[docx] Fix for potential crash in office files with malformed 'oMath' runs.\n[docx] Corrected handling of the 'auto' spacing property for the first and last paragraph in a document.\n[xlsx] Changed default value for unspecified opacity to opaque, rather than transparent.\n[xlsx] Implemented support of rich text for inline strings in Excel.\n[xlsx] Fix for handling of documents with no specified default styles.\n[xls] Fix for potential crash on some malformed xls documents.\n[xlsx] Optimized XLSX memory handling, now use much less memory when converting very large documents.\n[xlsx] More robust handling of malformed formulas in xlsx files.\n[office] Fixed a small memory leak (32 bytes per document).\n[pptx] Fix for not completely resolving the font style for some text.\n[office] Correctly handle data points outside the bounds of the chart axes.\n[office] Now handle clipping for all shapes, not just images.\n[office] Fixed grid line spacing for non-East Asian fonts.\n[docx] Fixed auto spacing between list paragraphs.\n[docx] Fix for too-high line spacing for some text with colored backgrounds.\n[office] Fix for incorrect parsing of percentage values that have percent symbols in them already.\n[docx] Fix for mishandled table borders in some isolated cases.\n[docx] Corrected default behaviour for non-specified vertical anchor in floating tables.\n[docx] Fix for cases where text boxes had a non-zero position and a specified wrap rectangle.\n[docx] Implemented bi-level image effect.\n[docx] Fix for unnecessary internal rounding of some fractional font sizes.\n[office] Fix for mishandling of some stroked text when converting to PDF.\n[office] Fixed drawing of stacked charts with non-zero base value.\n[xlsx] Removed exception when attempting to place some out-of-bounds content.\n[office] Added support for the luminance image effect.\n[office] Fix for mishandling of Thai text justification.\n[pptx] Fix for handling of negative indentations.\n[office] Fixed square text wrapping of rotated images.\n[office] Fix for handling of text spacing in fully justified text produced in older Word versions.\n[office] Fixed bounding box of the circular arrow and pie wedge shapes.\n[xlsx] Fix for scaling of grouped shapes with the two-cell anchor style.\n[docx] Ensure that we draw group shape elements by order of appearance.\n[office] Fixed issue with misaligned right-to-left text in rows with trailing spaces.\n[office] Much improved office equation handling.\n[office] Now translate some elements of user-specified structured document tags within OOXML to the converted PDF.\n[xls] Fixed hidden sheet state conversion for xls.\n[xls] Now correctly ignore comment shapes.\n[office] Implemented support of semi-transparent gradient fill.\n[xlsx] Now support excel rounding functions.\n[docx] Implemented handling of vanished paragraphs.\n[doc] Fixed a number of bugs with handling of numbered lists.\n[docx] Fixed automatic text color on a dark page background.\n[office] Fixed a performance issue with chart drawing, no longer waste time on non-visible elements.\n[xlsx] Fix for incorrect ISBLANK implementation.\n[xlsx] correct handling of row custom height and dyDescent.\n[docx] Better handling for custom page numbering mixed with non-custom.\n[pptx] Take trailing blank lines into account when centering text vertically.\n[docx] Correctly handle cases where a paragraph contains only floating picture anchors and a line break.\n[xlsx] Do not wrap text in date-formatted cells.\n[xls] Implemented AutoFilter support for XLS format conversion.\n[office] Added support for arbitrary text rotations.\n[office] Added support for text which is horizontally scaled to it's container.\n[office] Implemented double and heavy underlines and strike through styles.\n[xlsx] Added missing support for some forms of horizontally merged cells.\n[office] Many improvements to chart drawing and axis positioning.",
  "requireLicenseAcceptance": false,
  "summary": "PDFNet SDK is the ultimate PDF toolkit.\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000).",
  "title": "PDFTron SDK (x64) for .NET Core",
  "verbatimVersion": "9.1.2.78749",
  "version": "9.1.2.78749",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#PDFTron.NET.x64.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 5994,
      "fullName": "PDFTron.NET.x64.nuspec",
      "length": 15715,
      "name": "PDFTron.NET.x64.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#lib/net5.0/PDFTronDotNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 145006,
      "fullName": "lib/net5.0/PDFTronDotNet.dll",
      "length": 453632,
      "name": "PDFTronDotNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#lib/net6.0/PDFTronDotNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 145004,
      "fullName": "lib/net6.0/PDFTronDotNet.dll",
      "length": 453632,
      "name": "PDFTronDotNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#lib/netcoreapp2.1/PDFTronDotNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 144999,
      "fullName": "lib/netcoreapp2.1/PDFTronDotNet.dll",
      "length": 453632,
      "name": "PDFTronDotNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#lib/netstandard2.0/PDFTronDotNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 145078,
      "fullName": "lib/netstandard2.0/PDFTronDotNet.dll",
      "length": 453632,
      "name": "PDFTronDotNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#lib/netstandard2.1/PDFTronDotNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 145004,
      "fullName": "lib/netstandard2.1/PDFTronDotNet.dll",
      "length": 453632,
      "name": "PDFTronDotNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#build/x64/PDFNetC.dll",
      "@type": "PackageEntry",
      "compressedLength": 18828910,
      "fullName": "build/x64/PDFNetC.dll",
      "length": 44311520,
      "name": "PDFNetC.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#build/x64/libPDFNetC.so",
      "@type": "PackageEntry",
      "compressedLength": 20513220,
      "fullName": "build/x64/libPDFNetC.so",
      "length": 47976896,
      "name": "libPDFNetC.so"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#build/x64/libPDFNetC.dylib",
      "@type": "PackageEntry",
      "compressedLength": 38945105,
      "fullName": "build/x64/libPDFNetC.dylib",
      "length": 96609293,
      "name": "libPDFNetC.dylib"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#build/PDFTron.NET.x64.targets",
      "@type": "PackageEntry",
      "compressedLength": 288,
      "fullName": "build/PDFTron.NET.x64.targets",
      "length": 543,
      "name": "PDFTron.NET.x64.targets"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#legal.txt",
      "@type": "PackageEntry",
      "compressedLength": 5267,
      "fullName": "legal.txt",
      "length": 19302,
      "name": "legal.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#license.pdf",
      "@type": "PackageEntry",
      "compressedLength": 207379,
      "fullName": "license.pdf",
      "length": 213950,
      "name": "license.pdf"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#whatsnew.html",
      "@type": "PackageEntry",
      "compressedLength": 24779,
      "fullName": "whatsnew.html",
      "length": 86698,
      "name": "whatsnew.html"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#older_changelogs.html",
      "@type": "PackageEntry",
      "compressedLength": 32170,
      "fullName": "older_changelogs.html",
      "length": 191191,
      "name": "older_changelogs.html"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.01.08.01.03.00/pdftron.net.x64.9.1.2.78749.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "PDF",
    "viewer",
    "control",
    "component",
    "reader",
    "print",
    "forms",
    "split",
    "merge",
    "stamp",
    "XPS",
    "SVG",
    "HTML",
    "convert",
    "optimize",
    "redact",
    "encrypt",
    "pdftron",
    "pdfviewer",
    "rasterizer",
    "pdf2image",
    "converter",
    "WPF",
    "WinForms",
    "extract",
    "sign",
    "annotate",
    "pdf2html",
    "html2pdf",
    "pdf2svg"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}