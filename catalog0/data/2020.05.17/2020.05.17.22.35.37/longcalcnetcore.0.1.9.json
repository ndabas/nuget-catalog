{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "f9a9fa2d-398f-4f36-8c4d-790995572122",
  "catalog:commitTimeStamp": "2020-05-17T22:35:37.7657768Z",
  "copyright": "2020 MarkKnows",
  "created": "2020-05-17T22:33:17.357Z",
  "description": "LongCalcNetCore Arbitrary Precision Float and Complex Number Library",
  "iconFile": "Logo50x50.png",
  "id": "LongCalcNetCore",
  "isPrerelease": false,
  "lastEdited": "2020-05-17T22:35:20.48Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "Urgf6ip+18YkUJQ8WNSxiJMrwGQp8PEs0cwlPkaH0XfVSeVcyFzNphHwgQST5H/2nWFK6p++KjQElh5fjb9rDQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 98438,
  "published": "2020-05-17T22:33:17.357Z",
  "releaseNotes": "Reversed the changes made in version 0.1.7. Instead, made an effort to ensure that the output from the various public bf functions was accurate to Precision places, counting from first non-zero digit (if output is non-zero). This resulted in changes to the following bf functions: Exp, Cos, ArcTan, ArcCos, ArcSin, Log.\n\nIf someone desires to output a bf object x.toString(... Precision, ...) in such a way as that in version 0.1.7, it only requires this code snippet:\n\nstring output = \"0.\";\nif (!x.IsZero) { if (x.Abs() lt; new bf(1)) { Precision -= (long)Math.Abs(Log10(x.Abs())); if (Precision gt; 0) output = x.toString(... Precision, ...); } else output = x.toString(... Precision, ...); }\n\n(where lt; is the less than character and gt; is the greater than character)\n\nI should have mentioned in the release notes of the previous version that the internal limitation on x.Exp is that |x| be less than about 1.e+90180. For a value of x about this large, it requires probably several hours to compute x.Exp to 1,000 digits on a rather recent i5 machine with 20Gb memory.\n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2019) and using Net Core's BigInteger for the underlying integer math, supplies a variety of math functions and utilities with precisions as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float') real values comprised of a BigInteger mantissa and base 2 exponent, bcr (for complex numbers expressed in the rectangular coordinates) comprised of a bf real part and a bf imaginary part, and bcp (for complex numbers expressed in the polar coordinates) comprised of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ. The library also includes a 'bd' (for bigdecimal) object with fractional base 10 digits up to long.MaxValue.",
  "title": "LongCalcNetCore Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.1.9",
  "version": "0.1.9",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#LongCalcNetCore.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1487,
      "fullName": "LongCalcNetCore.nuspec",
      "length": 3115,
      "name": "LongCalcNetCore.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#Logo50x50.png",
      "@type": "PackageEntry",
      "compressedLength": 2525,
      "fullName": "Logo50x50.png",
      "length": 2520,
      "name": "Logo50x50.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#lib/netcoreapp3.1/LongCalcNetCore.dll",
      "@type": "PackageEntry",
      "compressedLength": 63969,
      "fullName": "lib/netcoreapp3.1/LongCalcNetCore.dll",
      "length": 192000,
      "name": "LongCalcNetCore.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#lib/netcoreapp3.1/LongCalcNetCore.xml",
      "@type": "PackageEntry",
      "compressedLength": 16190,
      "fullName": "lib/netcoreapp3.1/LongCalcNetCore.xml",
      "length": 296943,
      "name": "LongCalcNetCore.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.17.22.35.37/longcalcnetcore.0.1.9.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "bigdecimal",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}