{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Paul Louth",
  "catalog:commitId": "5174919b-a9a2-495b-b221-c31882f5491d",
  "catalog:commitTimeStamp": "2018-11-25T06:58:04.298733Z",
  "copyright": "Copyright Paul Louth 2014, 2015",
  "created": "2015-12-08T00:29:54.68Z",
  "description": "This library uses and abuses the features of C# 6 to provide a functional 'Base class library', that, if you squint, can look like extensions to the language itself. It also includes an 'Erlang like' process system (actors) that can optionally (if you also include LanguageExt.Process.Redis) persist messages and state to Redis (note you can use it without Redis for in-app messaging). The process system additionally supports Rx streams of messages and state allowing for a complete system of reactive events and message dispatch.\n\nLst<T> - Immutable list\nMap<K,V> - Immutable map\nSet<T> - Immutable set\nQue<T> - Immutable queue\nStck<T> - Immutable stack\nOption<T> - Option monad that can't be used with null values\nOptionUnsafe<T> - Option monad that can be used with null values\nEither<L,R> - Right/Left choice monad that won't accept null values\nEitherUnsafe<L,R> - Right/Left choice monad that can be used with null values\nTry<T> - Exception catching monad\nTryOption<T> - Option monad with third state 'Fail' that catches exceptions\nReader<E,T> - Reader monad\nWriter<O,T> - Writer monad\nState<S,T> - State monad\nRws<E,O,S,T> - Reader/Writer/State monad\nMonad transformers - A higher kinded type (ish)\nProcess library - Actor system. The same as Erlang processes for massive concurrency with state management.\nRedis persistence - Persistence of the Process system message-queues and state, for robustness and inter-app communication.\nCurrying - https://en.wikipedia.org/wiki/Currying\nPartial application - https://en.wikipedia.org/wiki/Partial_application\nMemoization - https://en.wikipedia.org/wiki/Memoization\nImproved lambda type inference -  var add = fun( (int x, int y) => x + y)\nIObservable<T> extensions\nBifunctors\nBitraversables\nBifoldables",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://www.4four.org/images/lang-ext-logo.png",
  "id": "LanguageExt.Process",
  "isPrerelease": false,
  "lastEdited": "2018-11-25T06:58:00.343Z",
  "licenseUrl": "https://github.com/louthy/language-ext/blob/master/LICENSE.md",
  "listed": false,
  "packageHash": "Xz8SZ3L/aXYZp639dPyngOG7U8+ouOrbzDHhXKtQPDm4hG+ruXert+IjV8jck5LrVXzKpQ5WygyPvDBRFZpVeA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 107155,
  "projectUrl": "https://github.com/louthy/language-ext",
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "== Core ==\n\n* Added: Units of measure: Length, Velocity, Acceleation, Area and Time\nAdded: List.span - applied to a predicate and a list, returns a tuple where first element is longest prefix of elements that satisfy the predicate and second element is the remainder of the list.\n* Added: List.tails function - returns all final segments of the list argument, longest first.\n* Added: Applicative support for Option, OptionUnsafe, Either, EitherUnsafe, Try, TryOption, List, IEnumerable (Prelude.apply function or Apply extension method)\n* Added: Support for arithmetic operators on all monadic types with provision of IAppendable, ISubtractable, IProductable, IDivisible and INumeric.  Allowing for operations like this:  Some(10) + Some(10) == Some(30), and List(1,2,3) + List(4,5,6) == List(1,2,3,4,5,6)\n* Added: List.foldUntil, List.foldWhile\n* Added: Functional version of 'using(...) { }' called 'use'\n* Added: 'tryuse' which is a version of 'use' that returns a Try<T> where T is am IDisposable\n* Added: Extension method: Try<T>.Use(), same as 'tryuse'\n* Added: Try<T>.IfFail(Exception ex => ...)\n* Added: Try<T>.IfFail().Match() - allows matching of Exception types as a single expression\nTuple<A,B> bi-functor, bi-foldable, bi-iterable\nTuple<A,B,C> tri-functor, tri-foldable, tri-iterable\n* Added: Serializable attribute to Either, EitherUnsafe, Lst ListItem, Map, MapItem, Option, OptionUnsafe, Que, Stck, \n* Moved Prelude.init,  Prelude.initInfinite,  Prelude.repeat to List\n\n== Process system ==\n\n* Strategy system - Decalarative way of dealing with Process failure\n  - Match on exceptions and map to Directives (Stop, Restart, Resume, Escalate)\n  - Map the Directives to MessageDirectives to decided on the fate of the failed message (Send to dead letters, Send to self (front or back of the queue), Send to supervisor, Send to specified Process)\n* Session system - Allows consuming code to set a session-ID that is propagated throughout the system with the messages.  Very useful for hooking up to authentication systems.\n* Roles.  Each node in a cluster must specify a role name.\n* Process.ClusterNodes property - Has a map of alive cluster nodes and their roles.\n* Routers - Processes that can auto-route messages to child processes or a provided set of processes.  Default routers include:\n  - Broadcast\n  - Round-robin\n  - Random\n  - Least-busy\n* Dispatchers - Like routers but without an actual Process.  Dispatchers have a sender specified list of Processes to dispatch to, i.e.  Dispatch.leastBusy(pid1, pid2, pid3).  There are four default dispatchers:\n  - Broadcast\n  - Round-robin\n  - Random\n  - Least-busy\nBespoke dispacthers can be registered using Dispatch.register(...)\n* Role dispatchers - Using a combination of Process.ClusterNodes and dispatchers, the Role dispatchers allow for ProcessIds to be built that refer to locations in the cluster by role.  ie. Role.Broadcast[\"mail-server\"][\"user\"][\"smtp\"] will create a ProcessId that looks like this: /disp/role-broadcast/user/smtp.  Because it's a ProcessId it can be used with any of the existing functionality that accepts ProcessIds (tell, ask, subscribe, etc.) but has a behaviour baked in (broadcast in this case).  So doing a tell will send to all 'smtp' Processes in the cluster.  \nThere are several Role dispatchers:\n  - Broadcast\n  - Round-robin\n  - Random\n  - Least-busy\n  - First\n  - Second\n  - Third\n  - Last\n* Death-watch system:  Process.watch and Process.unwatch to get one Process watching for the death of another.  Separate inbox called Terminated is used so that your primary inboxes can stay strongly typed.\n* Process' setup functions are invoked immediately, rather than on their first message. \n* More improvements to the F# API to bring it closer to parity with the C# API - this work is on-going.\n* Process.js now has a Process.spawnView function (if knockout.js is in use) that allows for synchronisation of Process state and view state as well as hooking up event functions.\n\n\nDocumentation: More of it!\n\nThanks to la-yumba and jagged for their help with this release.",
  "requireLicenseAcceptance": false,
  "summary": "",
  "title": "C# functional language extensions and actor system",
  "verbatimVersion": "1.7.0",
  "version": "1.7.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#dependencygroup/.netframework4.5/rx-main",
          "@type": "PackageDependency",
          "id": "Rx-Main",
          "range": "[2.2.5, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#dependencygroup/.netframework4.5/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[7.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#dependencygroup/.netframework4.5/languageext",
          "@type": "PackageDependency",
          "id": "LanguageExt",
          "range": "[1.7.0, )"
        }
      ],
      "targetFramework": ".NETFramework4.5"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#LanguageExt.Process.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3160,
      "fullName": "LanguageExt.Process.nuspec",
      "length": 7441,
      "name": "LanguageExt.Process.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#content/Scripts/process.js",
      "@type": "PackageEntry",
      "compressedLength": 4623,
      "fullName": "content/Scripts/process.js",
      "length": 21792,
      "name": "process.js"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#lib/LanguageExt.Process.dll",
      "@type": "PackageEntry",
      "compressedLength": 85169,
      "fullName": "lib/LanguageExt.Process.dll",
      "length": 206848,
      "name": "LanguageExt.Process.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.06.58.04/languageext.process.1.7.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9463,
      "fullName": ".signature.p7s",
      "length": 9463,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "C#",
    "Functional",
    "Language",
    "Extension",
    "Monad",
    "Option",
    "Either",
    "Reader",
    "Writer",
    "State",
    "List",
    "Set",
    "Map",
    "Queue",
    "Memo",
    "Memoization",
    "Immutable",
    "Lambda",
    "Pattern",
    "Matching",
    "Tuple",
    "Actor",
    "Process",
    "Akka",
    "Redis"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}