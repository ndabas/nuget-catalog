{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.26.02.18.22/fastsortlibrary.1.0.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Shuji Kaya",
  "catalog:commitId": "341795c3-3237-4769-b48d-257b15493fdc",
  "catalog:commitTimeStamp": "2021-11-26T02:18:22.3616806Z",
  "copyright": "Shuji Kaya",
  "created": "2021-11-26T02:16:12.667Z",
  "description": "Sort faster than Array.Sort().\nMiceSort()            : Single-task. A little faster. Most reliable in this library.\nBothSidesNowSort()    : Multi-task. Time is less than half on my intel i5 note(2 core 4 threads).\n\n1. Usage\n\nvar\tsort = new SortEnvironment<T>() {\t\t// T -> element (class or value type)\n    Data = {IList<T>},    // Name of T[], List<T> or other class based on IList<T>\n    Compare = {Comparison<T>},\t// Compare function\n//    InverseOrder = true,\t\t// true = Descending\n//    AlmostSorted = true,\t\t// true = Data is almost sorted (Time may be shortened in the case. Otherwise, time is longer.)\n//    Partial = 0,        // Partial sort setting. Number larger than 0 = The specified amount of high-order elements are sorted.\n//    CoreCacheAmount = 256,\t// Data amount within each core cache. 2^N. 256 is initial value when omitted. (Experimental value in my PC)\n// Below are only for 'BothSidesNowSort'\n//    TaskAmount = 4,\t// Parallel task amount. Environment.ProcessorCount (Thread amount) is initial value when omitted.\n//    RedZone = true,     // true = Full throttle. Faster but danger. false = Under limiter. More safety.\n    WaitCount = 1000000,  // Wait count for CPU memory cache adjustment. 1000000 is chicken initial value when omitted, that passed test in my PC.\n                        // You must set eligible value for your PC CPU. Set 0 if you aspire speed than no accident.\n//    MakeWayFor = false   // true = Idle cores make way for not-sort task. Time becomes slow.\n\t};\n\tsort.BothSidesNowSort(); // sort.MiceSort();\n\nOr call Array<T>.Sort() compatible shape below. Replace * to BothSidesNowSort or MiceSort\n\tArraySort<T>.*(T[]);\n\tArraySort<T>.*(T[], IComparer<T> or Comparison<T>);\n\tListSort<T>.*(List<T>);\n\tListSort<T>.*(List<T>, IComparer<T> or Comparison<T>);\n\n2. Character\n Method  : In-place merge sort. Bottom-up approach.\n Stable\t : Yes\n Memory\t : Stack [log2(N/M) * 3 * int size * task amount]. (N is Data length. M is CoreCacheAmount.)\n         : Instead of log2(N/M) calculation, 100 is used. [I think it sufficient safety and present PC don't mind it.]\n         : And BothSidesNowSort() multi-core control uses additional array [N/M * int size].\n Time    : Comparison: O(NlogN)\n         : Move: O(NlogN^2) when N is small, O(NlogN) when N is large. [My persume. Not decision]\n\n3. Notice\n - Exclusive use of challengers and human sacrifices to brand new technology\n   This is good tool for confirming your PC CPU core/thread true ability.\n   I can't assure this library stands up to actual purpose. You must prepare your own risk.\n   Reliability : \"Mice sort\" > \"Both sides now sort(RedZone = false)\" > \"Both sides now sort(RedZone = true)\".\n - When comparison function is time consuming, faster than Array.Sort().\n   When comparison function is subtraction only like common sort benchmark, slower than Array.Sort().\n - This function is available to IList<T> interface implemented array structure class. (T[], List<T>)\n   It can't sort LinkedList<T> because the class has no link patch function.\n   (C# LinkedList<T> originally has no sort function. Array shape or LinQ(not In-place) may be standard in C# sorting.)\n\n4. Algorithm\n   Below article includes almost theory I am using but the list includes many bugs.\nhttps://www.codeproject.com/Articles/5275988/Fastest-Sort-Algorithm",
  "id": "FastSortLibrary",
  "isPrerelease": false,
  "lastEdited": "2021-11-26T02:18:12.627Z",
  "listed": true,
  "packageHash": "mWZFlUao6VJOnyqgoY90R7D6map/i8eYwxN9jgPtD+ICwUsZL1G33QYqAFbXao2chWYLroRUy63ViCnBVou/yA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 26797,
  "published": "2021-11-26T02:16:12.667Z",
  "releaseNotes": "Data change bug maybe probably fixed or I gave up settlement.\nThrowing away logical consideration of memory cache control derived from all documents I read,\nI stuck spam talismans of incantation on every interval and in every loop.\nThese have taken effect in my test.",
  "verbatimVersion": "1.0.3",
  "version": "1.0.3",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.26.02.18.22/fastsortlibrary.1.0.3.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.26.02.18.22/fastsortlibrary.1.0.3.json#FastSortLibrary.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2017,
      "fullName": "FastSortLibrary.nuspec",
      "length": 4230,
      "name": "FastSortLibrary.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.26.02.18.22/fastsortlibrary.1.0.3.json#lib/netstandard2.0/SortLibrary.dll",
      "@type": "PackageEntry",
      "compressedLength": 11988,
      "fullName": "lib/netstandard2.0/SortLibrary.dll",
      "length": 28160,
      "name": "SortLibrary.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.26.02.18.22/fastsortlibrary.1.0.3.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}