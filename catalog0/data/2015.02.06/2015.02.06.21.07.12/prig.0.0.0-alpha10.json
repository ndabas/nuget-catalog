{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.21.07.12/prig.0.0.0-alpha10.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Akira Sugiura",
  "catalog:commitId": "d9cd6529-60ac-45dc-9a48-27f8768bb084",
  "catalog:commitTimeStamp": "2015-02-06T21:07:12.1830442Z",
  "copyright": "(c) 2014 Akira Sugiura. All rights reserved.",
  "created": "2014-11-03T08:07:47.92Z",
  "description": "Prig(PRototyping jIG) is a framework that generates a Test Double like Microsoft Fakes/Typemock Isolator/Telerik JustMock based on Unmanaged Profiler APIs. This framework enables that any methods are replaced with mocks. For example, a static property, a private method, a non-virtual member and so on.",
  "id": "Prig",
  "isPrerelease": true,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/urasandesu/Prig/blob/master/LICENSE.md",
  "packageHash": "uAa0Ab4epo7V88WxpLV2c9l97wqs50/B/UxLjwk11nXseuOImjRovgfQ6rc6QOQ5L9uQ2Soy84OhxB1wKQaVmA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 4534675,
  "projectUrl": "https://github.com/urasandesu/Prig",
  "published": "2014-11-03T08:07:47.997Z",
  "releaseNotes": "Version 0.0.0-alpha10\n* Pre-release 10.\n* Fixed #23: Can't be replaced the method that exposes the type of GAC unregistered assembly.\n* Fixed #24: Add Comment-Based Help.\n* Supported the feature that be able to replace any methods that have some non-public type in its signature.\n* [NOTICE] Changed the generated stub's API. It became that the indirection stubs and proxies are generated ALWAYS(overwrite). Until now, it no longer generates stubs and proxies after it generated them once.\n\n\nVersion 0.0.0-alpha9\n* Pre-release 9.\n* Fixed #16: Nested Type can't be resolved in its indirection stub.\n* Fixed #17: Prig can't uninstall correctly against the solution that contains multiple test projects.\n* Fixed #18: `Get-IndirectionStubSetting` generates invalid alias against explict implemented interface.\n* Fixed #19: `Find-IndirectionTarget` should filter the members that can't call indirectly by default.\n* Fixed #20: Indirection stub settings for the instance method of an internal class generates build errors.\n\n\nVersion 0.0.0-alpha8\n* Pre-release 8.\n* Supported the feature to set default behavior.\n* Modifying stub settings became a bit easier. The PowerShell command `Get-IndirectionStubSetting` supports generating unique name at the same time.\n* Fixed #14: `Environment.GetFolderPath(SpecialFolder)` can't call indirectly.\n* Fixed #15: `WebClient.DownloadStringTaskAsync` can't create indirection stub.\n\n\nVersion 0.0.0-alpha7\n* Pre-release 7.\n* Fixed #12: `.cctor()` can't replace with indirection stub.\n* Fixed #13: TypeLoadException is occurred when trying to detour multiple assemblies.\n\n\nVersion 0.0.0-alpha6\n* Pre-release 6.\n* Improved performance replacing original methods to indirect methods. Due to change to cache IndirectionDelegates and to import infrastructure's improvements, this version is x1.5 - x2.0 faster than previous version.\n\n\nVersion 0.0.0-alpha5\n* Pre-release 5.\n* Fixed Issue #9: `Add-PrigAssembly -AssemblyFrom` went dead.\n* Fixed Issue #10: `prig -p ConsoleApplication1.exe` went dead.\n* Fixed Issue #11: In .NET 3.5, the assembly containing dynamic methods can't be called indirectly.\n\n\nVersion 0.0.0-alpha4\n* Pre-release 4.\n* Supported the feature to generate the stub for one runtime instance.\n* [NOTICE] Changed the generated stub's API. It became a static method from a nested type. For example, until previous, the stub against `System.DateTime.Now` was `System.Prig.PDateTime.NowGet.Body`. From now, the stub becomes `System.Prig.PDateTime.NowGet().Body`. Because the previous version can't propagate an instance.\n* Fixed Issue #6: Methods defined in `.exe` can't be called indirectly.\n* Fixed Issue #7: Path to `tools` become unreachable from the Package Manager Console after building a project.\n* Fixed Issue #8: Against the method that contains a nested type, indirection stub can't be created.\n\n\nVersion 0.0.0-alpha3\n* Pre-release 3.\n* Fixed Issue #3: Test is freezed when hijacking the method to add an event handler.\n* Fixed Issue #4: Multiple Prig assemblies can't be added.\n* Fixed Issue #5: Build was failed when adding Prig assembly for 3rd party library.\n\n\nVersion 0.0.0-alpha2\n* Pre-release 2.\n* In Add-PrigAssembly command, added the feature to enable that the full path to stubbing assembly is specified. This will allow that you can add Prig Assembly that is not registered to GAC.\n* Added support for generating constraints of generic parameters automatically.\n* Fixed Issue #1: BadImageFormatException occurred.\n* Fixed Issue #2: Shall the name attribute be unique in the Stub Setting?\n\n\nVersion 0.0.0-alpha1\n* Pre-release 1.\n* Limited Support for NuGet.",
  "requireLicenseAcceptance": false,
  "summary": "Prig is a lightweight framework for test indirections in .NET Framework.",
  "title": "Prig: Open Source Alternative to Microsoft Fakes",
  "version": "0.0.0-alpha10",
  "tags": [
    "tdd",
    "isolation",
    "mock",
    "mocks",
    "mocking",
    "fake",
    "fakes",
    "faking",
    "unittest",
    "unittesting"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}