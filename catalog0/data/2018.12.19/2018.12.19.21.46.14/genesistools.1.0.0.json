{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.19.21.46.14/genesistools.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Willems Frederic",
  "catalog:commitId": "4e886da9-4075-4d98-89c2-c304f2e98aff",
  "catalog:commitTimeStamp": "2018-12-19T21:46:14.9024385Z",
  "created": "2017-08-12T20:06:18.283Z",
  "description": "This package provide database tools to access MSSQL Databases using ADO.Net. For those that do not want to use EF or other ORM's",
  "id": "GenesisTools",
  "isPrerelease": false,
  "lastEdited": "2018-12-19T21:46:03.54Z",
  "listed": true,
  "packageHash": "1N3BM5rbRjC6L1Mu8GQQBn8T+7EzfWsg5Yl21LnKcF7FpCAth1wP6XIyrR7g99EQosxorDju0D7McEE5CBq/Og==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 29280,
  "published": "2017-08-12T20:06:18.283Z",
  "releaseNotes": "Example of repository :\npublic partial class titlesRepository : ABaseRepository, ItitlesReadRepository, ItitlesWriteRepository\n\t{ \n\t\t#region CTOR\n\t\tpublic titlesRepository():base(pubsDatabaseConfig.DEFAULT_CONNECTION_NAME){}\n\t\tpublic titlesRepository(string connectionName):base(connectionName){}\n\t\tpublic titlesRepository(ConnectionSet connectionSet):base(connectionSet){}\n\t\t#endregion\n\t\n\t\t//************************************************************************\n\n\t\t#region Genesis T4 Generated : Filltitles()\n\t\t\n\t\tpartial void FilltitlesExtension(IDataReader reader, titles item);\n\n\t\t// Item must be already instanciated\n\t\tprotected void Filltitles(IDataReader reader, titles item)\n\t\t{\n\t\t\tif (item == null) throw new ArgumentException($\"{nameof(Filltitles)} -> item to map is null\");\n\t\t\titem.title_id = reader.ValueAs<String>(\"title_id\");\n\t\t\titem.advance = reader.ValueAs<Decimal>(\"advance\");\n\t\t\titem.notes = reader.ValueAs<String>(\"notes\");\n\t\t\titem.price = reader.ValueAs<Decimal>(\"price\");\n\t\t\titem.pub_id = reader.ValueAs<String>(\"pub_id\");\n\t\t\titem.pubdate = reader.ValueAs<DateTime>(\"pubdate\");\n\t\t\titem.royalty = reader.ValueAs<Int32>(\"royalty\");\n\t\t\titem.title = reader.ValueAs<String>(\"title\");\n\t\t\titem.type = reader.ValueAs<String>(\"type\");\n\t\t\titem.ytd_sales = reader.ValueAs<Int32>(\"ytd_sales\");\n\t\t\t// For custom developper Treatment\n\t\t\tFilltitlesExtension(reader, item);\n\t\t}\n\t\t#endregion\n\n\t\t//************************************************************************\n\n\t\t//************************************************************************\n\t\t\n\t\t#region Genesis T4 Generated : Get\n\t\tpublic titles Get(System.String title_id)\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.ReadOnly).BuildCommand<titles>(Procedures.SP_GET_ITEM)\n\t\t\t\t.AddParameter(\"@title_id\", title_id) \n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.Get();\n\t\t}\n\t\t// Pk Columns : 1\n\t\t// Type : System.String\n\t\t#endregion\n\n\n\n\n\n\t\t//************************************************************************\n\n\t\t//************************************************************************\n\n\t\t#region Genesis T4 Generated :  GetList()\n\t\tpublic List<titles> GetList()\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.ReadOnly).BuildCommand<titles>(Procedures.SP_GET_LIST)\n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.GetList();\n\t\t}\n\t\t#endregion\n\n\t\t#region GetDictionary{\n\t\tpublic Dictionary<String, titles> GetDictionary()\n\t\t{\n\t\t\treturn GetList().ToDictionary(itm => itm.title_id);\n\t\t}\n\t\t#endregion\n\n\t\t//************************************************************************\n\t\t\n\t\t//************************************************************************\n\t\t#region Genesis T4 Generated : GetListBypub_id\n\t\tpublic List<titles> GetListBypub_id(System.String pub_id)\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.ReadOnly).BuildCommand<titles>(Procedures.SP_GET_LIST_BY_PUB_ID)\n\t\t\t\t.AddParameter(\"@pub_id\",@pub_id) \n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.GetList();\n\t\t}\n\t\t#endregion\t\n\t\t#region Genesis T4 Generated : GetListBystor_id\n\t\tpublic List<titles> GetListBystor_id(System.String stor_id)\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.ReadOnly).BuildCommand<titles>(Procedures.SP_GET_LIST_BY_STOR_ID)\n\t\t\t\t.AddParameter(\"@stor_id\",@stor_id) \n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.GetList();\n\t\t}\n\t\t#endregion\t\n\t\t#region Genesis T4 Generated : GetListByau_id\n\t\tpublic List<titles> GetListByau_id(System.String au_id)\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.ReadOnly).BuildCommand<titles>(Procedures.SP_GET_LIST_BY_AU_ID)\n\t\t\t\t.AddParameter(\"@au_id\",@au_id) \n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.GetList();\n\t\t}\n\t\t#endregion\t\n\n\n\n\t\t//************************************************************************\n\n\t\t#region CRUD\n\t\t\n\t\t//************************************************************************\n\n\t\t#region Fill Insert Parameters\n\t\tprivate void FillInsertParams<T>(IParameterizableCommand<T> cmd, titles item)\n\t\t{\n\t\t\t\tcmd.AddParameter(\"@pub_id\", (object) item.pub_id ?? DBNull.Value );\n\t\t\t\tcmd.AddParameter(\"@title_id\",  item.title_id  );\n\t\t\t\tcmd.AddParameter(\"@type\",  item.type  );\n\t\t\t\tcmd.AddParameter(\"@ytd_sales\", (object) item.ytd_sales ?? DBNull.Value );\n\t\t\t\tcmd.AddParameter(\"@advance\", (object) item.advance ?? DBNull.Value );\n\t\t\t\tcmd.AddParameter(\"@notes\", (object) item.notes ?? DBNull.Value );\n\t\t\t\tcmd.AddParameter(\"@price\", (object) item.price ?? DBNull.Value );\n\t\t\t\tcmd.AddParameter(\"@pubdate\",  item.pubdate  );\n\t\t\t\tcmd.AddParameter(\"@royalty\", (object) item.royalty ?? DBNull.Value );\n\t\t\t\tcmd.AddParameter(\"@title\",  item.title  );\n\t\t}\n\t\t#endregion\n\n\t\t#region Genesis T4 Generated : Insert(titles item)\n\t\tbool ItitlesWriteRepository.Insert(titles item)\n\t\t{\n\t\t\tvar command = GetBuilder(ConnectionMode.Write).BuildCommand<titles>(Procedures.SP_INSERT);\n\t\t\tFillInsertParams(command, item);\n\t\t\treturn command.ExecuteNonQuery() > 0;\n\t\t}\n\t\t#endregion\n\n\t\t#region Genesis T4 Generated : InsertAndFill(titles item)\n\t\tbool ItitlesWriteRepository.InsertAndFill(titles item)\n\t\t{\n\t\t\tvar command = GetBuilder(ConnectionMode.Write).BuildCommand<titles>(Procedures.SP_INSERT);\n\t\t\tFillInsertParams(command, item);\n\t\t\tcommand.ObjectCreation((reader) => { return item; });\n\t\t\tcommand.SetMapper(Filltitles);\n\t\t\treturn command.Get() != null;\n\t\t}\n\n\t\ttitles ItitlesWriteRepository.InsertAndGet(titles item)\n\t\t{\n\t\t\tvar command = GetBuilder(ConnectionMode.Write).BuildCommand<titles>(Procedures.SP_INSERT);\n\t\t\tFillInsertParams(command, item);\n\t\t\tcommand.SetMapper(Filltitles);\n\t\t\treturn command.Get();\n\t\t}\n\t\t#endregion\n\n\n\t\t#region Genesis T4 Generated : InsertAndRetrievePK({table-name} item)\n\t\tString ItitlesWriteRepository.InsertAndRetrievePK(titles item)\n\t\t{\n\t\t\tvar command = GetBuilder(ConnectionMode.Write).BuildCommand(Procedures.SP_INSERT);\n\t\t\tFillInsertParams(command, item);\n\t\t\treturn command.GetScalar<String>();\n\t\t}\n\t\t#endregion\n\n\n\t\t//************************************************************************\n\n\t\t#region Genesis T4 Generated : Update(titles item)\n\t\tbool ItitlesWriteRepository.Update(titles item)\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.Write).BuildCommand<titles>(Procedures.SP_UPDATE)\n\t\t\t\t.AddParameter(\"@pub_id\", (object) item.pub_id ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@title_id\",  item.title_id  )\n\t\t\t\t.AddParameter(\"@type\",  item.type  )\n\t\t\t\t.AddParameter(\"@ytd_sales\", (object) item.ytd_sales ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@advance\", (object) item.advance ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@notes\", (object) item.notes ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@price\", (object) item.price ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@pubdate\",  item.pubdate  )\n\t\t\t\t.AddParameter(\"@royalty\", (object) item.royalty ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@title\",  item.title  )\n\t\t\t\t.ExecuteNonQuery() > 0;\n\t\t}\n\t\t#endregion\n\n\t\t#region Genesis T4 Generated : UpdateAndFill(titles item)\n\t\tbool ItitlesWriteRepository.UpdateAndFill(titles item)\n\t\t{\n\t\t\tvar insertedItem = GetBuilder(ConnectionMode.Write).BuildCommand<titles>(Procedures.SP_UPDATE)\n\t\t\t\t.AddParameter(\"@pub_id\", (object) item.pub_id ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@title_id\",  item.title_id  )\n\t\t\t\t.AddParameter(\"@type\",  item.type  )\n\t\t\t\t.AddParameter(\"@ytd_sales\", (object) item.ytd_sales ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@advance\", (object) item.advance ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@notes\", (object) item.notes ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@price\", (object) item.price ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@pubdate\",  item.pubdate  )\n\t\t\t\t.AddParameter(\"@royalty\", (object) item.royalty ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@title\",  item.title  )\n\t\t\t\t.ObjectCreation((reader) => { return item; })\n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.Get();\n\t\t\treturn insertedItem != null;\n\t\t}\n\n\t\ttitles ItitlesWriteRepository.UpdateAndGet(titles item)\n\t\t{\n\t\t\treturn GetBuilder(ConnectionMode.Write).BuildCommand<titles>(Procedures.SP_UPDATE)\n\t\t\t\t.AddParameter(\"@pub_id\", (object) item.pub_id ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@title_id\",  item.title_id  )\n\t\t\t\t.AddParameter(\"@type\",  item.type  )\n\t\t\t\t.AddParameter(\"@ytd_sales\", (object) item.ytd_sales ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@advance\", (object) item.advance ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@notes\", (object) item.notes ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@price\", (object) item.price ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@pubdate\",  item.pubdate  )\n\t\t\t\t.AddParameter(\"@royalty\", (object) item.royalty ?? DBNull.Value )\n\t\t\t\t.AddParameter(\"@title\",  item.title  )\n\t\t\t\t.SetMapper(Filltitles)\n\t\t\t\t.Get();\n\t\t}\n\t\t#endregion\n\n\t\n\t\t\tbool ItitlesWriteRepository.Delete(String title_id){\n\t\t\treturn GetBuilder(ConnectionMode.ReadOnly).BuildCommand(Procedures.SP_DELETE)\n\t\t\t\t.AddParameter(\"@title_id\", title_id) \n\t\t\t\t.ExecuteNonQuery() >0;\n\t\t}\n\n\t\n\t#endregion // CRUD\n\n\t\tpublic partial class Procedures\n\t\t{\n\t\t\tpublic static Dictionary<string, string> StoredProcedures = new Dictionary<string, string>();\n\t\t\tstatic partial void RegisterCustomSps();\n\t\t\tstatic Procedures()\n\t\t\t{\n\t\t\t\tStoredProcedures[nameof(SP_INSERT)] = SP_INSERT;\n\t\t\t\tStoredProcedures[nameof(SP_UPDATE)] = SP_UPDATE;\n\t\t\t\tStoredProcedures[nameof(SP_DELETE)] = SP_DELETE;\n\t\t\t\tStoredProcedures[nameof(SP_GET_LIST)] = SP_GET_LIST;\n\t\t\t\tStoredProcedures[nameof(SP_GET_ITEM)] = SP_GET_ITEM;\n\t\t\t\tStoredProcedures[nameof(SP_GET_LIST_BY_PUB_ID)] = SP_GET_LIST_BY_PUB_ID;\n\t\t\t\tStoredProcedures[nameof(SP_GET_LIST_BY_STOR_ID)] = SP_GET_LIST_BY_STOR_ID;\n\t\t\t\tStoredProcedures[nameof(SP_GET_LIST_BY_AU_ID)] = SP_GET_LIST_BY_AU_ID;\n\t\t\t\tRegisterCustomSps();\n\t\t\t}\n\t\t\tpublic const string SP_INSERT = \"proc_titles_Insert\";\n\t\t\tpublic const string SP_UPDATE = \"proc_titles_Update\";\n\t\t\tpublic const string SP_DELETE = \"proc_titles_Delete\";\n\t\t\tpublic const string SP_GET_LIST = \"proc_titles_GetList\";\n\t\t\tpublic const string SP_GET_ITEM = \"proc_titles_Get\";\n\t\t\tpublic const string SP_GET_LIST_BY_PUB_ID = \"proc_titles_GetListBy_pub_id\";\n\t\t\tpublic const string SP_GET_LIST_BY_STOR_ID = \"proc_titles_GetListBy_stor_id\";\n\t\t\tpublic const string SP_GET_LIST_BY_AU_ID = \"proc_titles_GetListBy_au_id\";\n\t\t}\n\t\t\n\t#region Validation CRUD\n\t\tpublic bool Insert(titles item)\n\t\t{\n\t\t\ttitlesInsertValidation dummyResult = null;\n\t\t\treturn Insert(item, out dummyResult);\n\t\t}\n\t\tpublic bool Insert(titles item, out titlesInsertValidation result)\n\t\t{\n\t\t\tresult = new titlesInsertValidation(item);\n\n\t\t\tif (result.IsValid)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tresult.Item = (this as ItitlesWriteRepository).InsertAndGet(item);\n\t\t\t\t\treturn result.Item != null;\n\t\t\t\t}\n\t\t\t\t// Add Constraints Checks\n\t\t\t\tcatch (System.Data.SqlClient.SqlException ex)\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\n\n\t\tpublic bool Update(titles item)\n\t\t{\n\t\t\ttitlesUpdateValidation dummyResult = null;\n\t\t\treturn Update(item, out dummyResult);\n\t\t}\n\t\tpublic bool Update(titles item,out titlesUpdateValidation result)\n\t\t{\n\t\t\tresult = new titlesUpdateValidation(item);\n\n\t\t\tif (result.IsValid)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tresult.Item = (this as ItitlesWriteRepository).UpdateAndGet(item);\n\t\t\t\t\treturn result.Item !=null; \n\t\t\t\t}\n\t\t\t\t// Add Constraints Checks\n\t\t\t\tcatch (System.Data.SqlClient.SqlException ex)\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\n\t\tpublic bool Delete(String title_id) => (this as ItitlesWriteRepository).Delete(title_id);\n\t\t#endregion\n\t\n\t\t\n\t}",
  "requireLicenseAcceptance": false,
  "summary": "Usefull Tools (based on ADO.Net to access MSSQL Databases",
  "title": "GenesisTool : the origin of code.",
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.19.21.46.14/genesistools.1.0.0.json#GenesisTools.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2269,
      "fullName": "GenesisTools.nuspec",
      "length": 12253,
      "name": "GenesisTools.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.19.21.46.14/genesistools.1.0.0.json#lib/net46/Genesis.Core.dll",
      "@type": "PackageEntry",
      "compressedLength": 15115,
      "fullName": "lib/net46/Genesis.Core.dll",
      "length": 37376,
      "name": "Genesis.Core.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.19.21.46.14/genesistools.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}