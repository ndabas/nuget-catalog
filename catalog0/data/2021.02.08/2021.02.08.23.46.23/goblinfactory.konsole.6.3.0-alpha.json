{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Alan Hemmings",
  "catalog:commitId": "04576803-98ac-4c88-b5ed-aecaae548030",
  "catalog:commitTimeStamp": "2021-02-08T23:46:23.1149414Z",
  "copyright": "Copyright Goblinfactory Ltd, 2019, all rights reserved.",
  "created": "2021-02-08T23:44:40.307Z",
  "description": "Simple console library consisting of ProgressBar, Window, Form, Draw and MockConsole.",
  "iconFile": "konsole.png",
  "id": "Goblinfactory.Konsole",
  "isPrerelease": true,
  "lastEdited": "2021-02-08T23:46:13.773Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "zpf3zPPNZKuB+mOs4fdLSBs39VkJ0JzTxSmIsImXDAgHos80YzBSvylIEObqbehLtPN+R6XX+Q74Zb8TitgHKQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 70528,
  "projectUrl": "https://github.com/goblinfactory/konsole/",
  "published": "2021-02-08T23:44:40.307Z",
  "releaseNotes": "# Change Log\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/) \n\n## [6.3.0-alpha]\n\n###  Added\n\n- Ability to create Progress bars without any text. \n  * New progressbar constructor `new ProgressBar()` creates a new `no text ProgressBar, with char `#` and max of 100.\n    & New enum value, `PbStyle.BarOnly`\n- `IProgressBar` has additional properties\n  * `int Current { get; }` property. \n  * `ConsoleColor TextColor { get; set;}`\n  * `ConsoleColor BarColor { get; set;}`\n- new type 'CharBar' - for ad-hoc bars at (x,y) location, with fixed width, without any text. e.g, quick indicators, or LED effects.\n\n### Minor breaking behavior.\n\nMinor breaking behavior are cosmetic only and wont break an application.\n\n- Default ProgressBar with no values, o\n\n\n## [6.2.1]\n\n### Fixed\n\n- #72 Fix critical bug : Embedded CrLf cause window isolation to break.\n\n## [6.2.0]\n\n### Added\n\n- Form Write now supports fields as well as properties.\n\n## [6.1.0]\n\n### Added\n\n- `Konsole.Platform.Windows.HighSpeedWriter` (native windows driver) now included and no longer an external package.\n\n## [6.0.0]\n\n### Added\n\n- new `IConsole` interfaces for simpler abstractions, see new contract docs [here]\n\n### fixed\n\n- #40 WriteLine conflicts with String.Format, support string containing {0} {json} tokens.\n- #41 If a `Write` ends exactly on the last column, then the cursor is not advanced to the next line. \n\n## [5.4.4]\n\n### Added\n\n- Printing objects with nullable fields now prints \"Null\" for any nullable fields.\n\n### Fixed\n\n- #39 Add double to NumericTypes in FieldReader.\n\n## [5.4.3]\n\n### Fixed\n\n- #43 Form.Write(null) throws exception, new Form().Write(null); should not throw exception. Instead it should write \"Null\"\n\n## [5.4.2]\n\n### Fixed\n\n- `WhenOpeningInlineShould_open_window_at_current_cursorTop()` : OpenBox (inline) when supplying only a width and a height was not opening the new inline window at the current cursor position.\n\n## [5.4.1]\n\n### Fixed\n\n- `WhenOpeningInlineShould_open_window_at_current_cursorTop()` : OpenBox (inline) when supplying only a width and a height was not opening the new inline window at the current cursor position.\n\n## [5.4.0]\n\n### Added\n\n- `Window.OpenBox` : Open a styled floating or inline window with a lined box border with a title. Styling allows for setting foreground and background color of the Line, Title, and body, as well as the line thickness, single or double. Returns a window instance representing the window inside the box. The returned instance is threadsafe.\n- #39 Add double to NumericTypes in FieldReader.\n\n## [5.3.3]\n\n### Fixed\n\n- when not supplying the x,y start position for a window, the window was supposed to be created inline, instead the window was being created at 0, 0. Fixed, now it's created at the starting Y position and left = 0.\n\n## [5.3.2]\n\n### Fixed\n\n- `Window.Open` now returns a threadsafe window. (`ConcurrentWindow` wrapping the newly created window) All static constructors now return threadsafe windows.\n\n## [5.3.1]\n\n### Fixed\n\n- fixed nuget tags\n\n## [5.3.0]\n\n### Added\n\n- `new ConcurrentWriter()` now returns a thread safe concurrent writer that continues writing to the current console as if it were the console. Previously the concurrentwriter required a window instance. That still exists but you can now create a `ConcurrentWriter` without needing to first create a window. This allows for thread safe writing to the console without needing a window. See the new section in the readme under `Threading` for more information and for examples.\n\n## [5.2.0]\n\n### fixed (busy)\n\n- when rendering a window 3 lines tall the second row line char is incorrect.\n\n```\n    ┌──── headline ────┐       ┌──── headline ────┐\n    ─ content here     ─  =>   │ content here     |\n    └──────────────────┘       └──────────────────┘\n```\n\n### added\n\n* `myWindow.SplitTopBottom()`\n  \n- : Split the current window Top and bottom and return a tuple. Default to use a single middle line, instead of the older double. (Was missing from previous release)\n\n\n## [5.1.0]\n\n### fixed\n\n- `stackoverflow` bug when calling SplitColumns.\n\n### added\n\n- `myWindow.SplitLeftRight()` : Split the current window left and right and return a tuple. Default to use a single middle line, instead of the older double.\n\n```csharp\n    void Fill(IConsole con) => { \n        con.WriteLine(\"one\");\n        con.WriteLine(\"two\");\n        con.WriteLine(\"three\");\n        con.WriteLine(\"four\");\n    }\n    (var left, var right) = win.SplitLeftRight(\"left\", \"right\");\n    \n    Fill(left);\n    Fill(right);\n    \n    // gives you   ...\n\n    ┌ left ─┬─ right ┐\n    │two    │two     │\n    │three  │three   │\n    │four   │four    │\n    └───────┴────────┘    \n```\n\n\n## [5.0.1]\n\n- more tests and small stabilisations.\n\n## [5.0.0]\n\n- full .NET core release! (Konsole is a .NET standard 2.0 package) and (Konsole.Platform.Windows is a .NET framework 4.6.1 package)\n- package is built and tested on both Ubuntu and Windows on Github using github actions for devops. (see dotnetcore.yml)\n\n## [4.2]\n\n- #32 : speed, speed, speed! (speed improvements)\n- Window.DoCommand made static\n\n## [4.1]\n\n- #33 : add \"Disable screen resizing\".Available as new method `.LockConsoleResizing()` on `Window`.\n\n## [4.0.1]\n\n- upgrade devops builds to use new Github pipelines, convert to new .net core project format and use dotnet test? possibly include this as key 4.0 update.\n- Added SplitRows with wildcard support for creating any shape UI, using rows and columns.\n- Move Konsole Layouts and Konsole Forms to main Konsole namespace, so that it's available out of the box and more discoverable, so that users can use SplitLeft, SplitRight, SplitTop, SplitBottom.\n- Moved drawing into main Konsole Namespace.\n\n## [3.4.1]\n\n- #28 : fix crash after resize (rough Proof of concept without tests, manual testing only due to complications of testing window resizing, and want to get a patch out quickly)\n\n## [3.4.0]\n\n### Fixed\n\n- #26 : fix bug where ProgressBar and ProgressBarNoText would report incorrect percentage (out by 1%) for some values.\n\n## [3.3.0]\n\n### Fixed\n\n- #18 : Nested floating windows dont scroll properly.\n\n### Added\n\n- New attributes, `AbsoluteX` and `AbsoluteY` to `IConsole` so that you can know the absolute position of a window, in addition to it's relative position to it's parent.\n- Added nested window demo code to the sample project.\n\n## [3.2.1]\n\n- had a problem uploading package to nuget, so created a new release to see if I can get past it with a fresh upload. (previous upload was hanging at 17 hours, doh!)\n\n## [3.2.0]\n\n### Fixed\n\n- Correct version number.\n\n##[3.1.0]\n\n- deleted. (the Konsole.dll was given the incorrect version number.)\n\n### Fixed\n\n- [Fixed serious bug write and write-line when scrolling results in first Write's text being lost #12](https://github.com/goblinfactory/konsole/issues/12)\n- Accidentally included `Konsole 0.0.2` as a dependancy in the [3.0.1] packages. Removed that.\n\n## [3.0.0] & [3.0.1]\n\n- quite a lot, leaving this blank-ish and will update shortly.\n- highlight changes\n    - threadsafe progressbars and windows, with tests for thread-safe-ness.\n    - new class `ConcurrentWriter` to handle thread sychnonisation. \n- More or less, added menus, lots of breaking changes of signatures (cleanups to make easier to understand)\n- Highlight change is a new slimline itemless `ProgressBar` with option to revert to old behavior.\n- New draft `Menu` with option to have menu items that run as background tasks. (useful for writing simple client-server demo projects with client and server each outputting to different windows.) \n\n### Added\n\n- Menus\n- ProgressBarNoText\n\n## [2.1.0] - 2017-05-07\n\n### Added\n\n- `Window.TopHalf()`\n- `Window.BottomHalf()`\n- `Window.OpenInline(console, height)` : opens a new window 'inline' full width of the console, 'height' rows tall, and moves the cursor to below the window. See `Window.OpenInlineShould` test.\n- `MockKeyboard` : Mock keyboard for queueing up keystrokes. Includes Autoreply. Use to simulate user input during unit tests.\n- `IReadKeys` : for console input.\n- `Menu` with `MenuItem`: for rendering menus and capturing user input, see `Konsole.Sample.Program` for examples.\n- Threadsafe windows. Windows opened with `Window.Open` and `Window.OpenInline` are now threadsafe. Specifically you can now reliably create multiple output windows, and have seperate threads e.g. `Task.Run` threads for each window. See `Konsole.Tests`Slow\\WindowConcurrencyTests`.\n- new Test project `Konsole.Tests.Slow` for slow running tests. Specifically concurrency tests, that take a few seconds each. 3 to 5 seconds on my dev laptop.\n\n## [unreleased]\n\n\n## [2.0.2] - 2017-03-20\n\n### Added \n\n- Can set `ProgressBar.Max` after creating a progressbar, and UX will be updated.\n\n## [2.0.1] - 2017-03-20\n\n### Fixed - high\n\n- fix `ProgressBar` constructor not threadsafe.\n- `ProgressBar.Refresh` with `null` text throws exception.\n\n### Added : medium\n\n- new readonly property `ProgressBar.Y` : Current Console Y position.\n- new readonly property `ProgressBar.Line1` : Current Line1 Text.\n- new readonly property `ProgressBar.Line2` : Current Line2 text.\n- Update Sample  paral`(l)`el test, to use fake directories and fake file names.\n-  `TestData.MakeFileNames` : generate random (unique) file names. `public static string[] MakeFileNames(int howMany = 4200, params string[] extensions)`\n- `TestData.MakeNames` now supports option to generate names without special characters.\n- `TestData.MakeObjectNames` : New test data method to generate believable random object names `public static string[] MakeObjectNames(int howMany = 4200, string format = \"{0}{1}\")`\n\n## [2.0.0.0] - 2017-03-18\n\nNew core `Window` functionality, plus big class renames, main interface `IConsole` has changed from `1.0` and `2.0`.\n\n### Breaking changes\n- refactor all constructors, move `IConsole` parameter to 1st param.\n- rename `Form.Show` to `Form.Write` (form is written at current cursor position, and position is updated)\n- change `IConsole` `WindowWidth` from a `method` to a `property`.\n- rename `Console` to `Window`\n- rename `ConsoleWriter` to `Writer`\n- rename `.LinesText` to `BufferWritten` \n- rename `HilighterBuffer` to `BufferHilighted`\n- rename `.Buffer` to `BufferWrittenString` \n- rename `.TrimmedLines` to `.BufferWrittenTrimmed`\n- rename 'echo' to (isMockConsole and invert) or, override behavior and remove altogether from Window.\n- `Cell` class gets extra property, `Background`\n- `Cell` property rename `.Color` to `.Foreground`\n\n- `BufferedWriter` methods standardised.\n  * `.Buffer` `string[]` Get the entire buffer (all the lines) regardless of whether they have been written to or not, untrimmed.\n  * `.BufferString` `string` Get the entire buffer (all the lines) regardless of whether they have been written to or not, untrimmed, as a single `crln` concatenated string.\n  * `.BufferWritten` `string[]` Get the entire buffer . Only the lines that have been written to, from topmost to bottommost, untrimmed.\n  * `.BufferWrittenTrimmed` `string[]` Get the entire buffer . Only the lines that have been written to, from topmost to bottommost, Trimmed.\n  * `.BufferWrittenString` `string` Get the entire buffer for all lines written to, as a single `crln` concatenated string.\n  * `.BufferHilighted` `string[]` returns an 'approve-able' text buffer where each character is represented by 2 characters with one of of them representing the background color of the buffer.\n\n### Added\n- new `Window` class, with significant functionality, ... allowing users to print to windows sections of the screen, including either clipped or scrolling of output when out exceeds window.\n\n```csharp\n\n    var client = new Window(0, 0, 40, 10);\n    var server = new Window(41, 0, 40, 10);\n    server.WriteLine(\"Server started, listening on 'tcp://*:10001'.\");\n    ...\n    client.WriteLine(\"enter commands, exit to quit\");\n    ...\n\n```\n- more demos, and demos now more useful for learning how `Konsole` works. See `Konsole.Sample` project.\n- refactored demos to seperate demo classes, seperating functionality being demoed.\n- Faster window printing. was printing character by character, very ...VEERY SLOW!) not good enough!\n- `BackgroundColor` added to `IConsole`\n- new method `BufferString` \n- new property `Cell this[int x, int y]` on `BufferedWriter` (allows for interrogating fore and background colour at X,Y position on a buffered writer.)\n\n\n### Fixed\n- fix bug , printing off screen was crashing.\n- removed quite a bit of duplication in the unit test code.\n- fix : Window sometimes not printing `ForegroundColor` correctly.\n- fix clear issues. Demo program not clearing properly.\n- fix bug with `PrintAt`, `Write` and `WriteLine` with text that overflows, causing crash.\n- fix bug when calling clear on bufferedWriter and crashing. (was not resetting Y position.)\n- fix bug, calling `refresh` on progress bar changing cursor position.\n- fix bug, Write (not WriteLine) causes progress bar to print from last X position and overflows.\n- fix bug with `ProgressBar` not moving cursor down two lines to give `pb` space to display.\n\n## [1.0.0.0] - 2016-03-04\n\n\n- new very simple TestData `Konsole.Testing.TestData` class to help when building and prototyping console utilities and applications.\n- renamed MockConsole to TestConsole. (It's not a mock, it's a real active class with important behavior to help build testable code.)\n- Split IConsole into IWriteLine and IConsole to allow for being more specific about your dependancies, .i.e. what exactly your class depend on when you state you require a IWriteLine as a dependancy, tells you a lot more than 'I Need access to the console'. (Most classes often simply need acess to write a few bits and bobs to the console, in which case I expect that IWriteLine will be the most commonly used interface.) \n\n\n\n## [0.0.6] - 2017-02-01\n\n### Changed\n\n- oops, sposed to be CamelCase, not pascalCase, i.e. captalise class names in `name.page.ts`, so that `yo gf:i2 test-apple` generates `class TestApplePage`\n\n## [0.0.5] - 2017-02-01\n\n### Added\n\n- Support page names with hyphens, convert the name into camelcase so that the generated `{pagename}Page` class is valid. e.g. `my-games` becomes `class myGamesPage` instead of `class my-gamesPage`.\n\n## [0.0.4] - 2017-02-01\n\n### Changed\n\n- fix incorrect documentation stating that the default command is `yo gf i2 {pagename}` that doesnt work. Correct syntax requires colon i.e. `yo gf:i2 {pagename}`\n\n## [0.0.3] - 2017-01-31\n\n### Added\n\n- first useful generator, `yo gf i2 {pagename}` that generates the 1 folder + 3 files.",
  "repository": "",
  "requireLicenseAcceptance": false,
  "title": "Goblinfactory.Konsole",
  "verbatimVersion": "6.3.0-alpha",
  "version": "6.3.0-alpha",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json#Goblinfactory.Konsole.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 6274,
      "fullName": "Goblinfactory.Konsole.nuspec",
      "length": 16261,
      "name": "Goblinfactory.Konsole.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json#lib/netstandard2.0/Goblinfactory.Konsole.dll",
      "@type": "PackageEntry",
      "compressedLength": 48210,
      "fullName": "lib/netstandard2.0/Goblinfactory.Konsole.dll",
      "length": 117248,
      "name": "Goblinfactory.Konsole.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json#konsole.png",
      "@type": "PackageEntry",
      "compressedLength": 4154,
      "fullName": "konsole.png",
      "length": 4279,
      "name": "konsole.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 370,
      "fullName": "LICENSE.txt",
      "length": 582,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.02.08.23.46.23/goblinfactory.konsole.6.3.0-alpha.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9469,
      "fullName": ".signature.p7s",
      "length": 9469,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "konsole",
    "progress",
    "progressbar",
    "window",
    "readline",
    "console",
    "shell",
    "cui"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}