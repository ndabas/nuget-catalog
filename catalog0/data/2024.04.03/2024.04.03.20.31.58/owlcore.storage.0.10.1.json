{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Arlo Godfrey",
  "catalog:commitId": "828bcdeb-af19-41e6-a44a-4a5f32d11700",
  "catalog:commitTimeStamp": "2024-04-03T20:31:58.3223173Z",
  "created": "2024-04-03T20:29:03.833Z",
  "description": "The most flexible file system abstraction, ever. Built in partnership with the UWP Community.\n\t\t\n      This package enables early adoption of CommunityToolkit.Storage, a proposed package in Toolkit Labs, eventually to end up in CommunityToolkit/dotnet on GitHub.",
  "iconFile": "logo.png",
  "id": "OwlCore.Storage",
  "isPrerelease": false,
  "lastEdited": "2024-04-03T20:31:36.157Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "zDPMAz1vBEmi+zBx2vreNVg2g4ZAu6dBV6O/TXTNIDF5/CPXB3W2kahRIkkdAHqWv5+jAE626lOw/2CMpu6kKA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 107242,
  "published": "2024-04-03T20:29:03.833Z",
  "releaseNotes": "--- 0.10.1 ---\n[Fixes]\nFixed an issue where ZipArchiveFolder.DeleteAsync wasn't handling files correctly.\n\n[Improvements]\nUpdate all dependencies to latest versions.\n\n--- 0.10.0 ---\nTHIS IS A BREAKING RELEASE\nUpdate asap, and do not use older versions or implementations.\n\n[Breaking]\nAll inbox implementations that rely on .NET itself have been moved to the OwlCore.Storage.System.* namespace, making room for future inbox implementations (System.Formats.Tar, System.Data.Common, System.Resources, etc).\nThe default FileAccess.Read parameter for IFile.OpenStreamAsync has been removed. This is primarily to avoid confusion about why the default returned stream can't be written to, but follows the concept that simply opening a stream implies nothing about read/write preferences for that resource, so no default value should be used.\nGenerics for the Move and Copy interfaces and methods have been removed. This fixes an issue where only the fallback path was being used unless the most derived type was specified, and generally allows for more flexible implementations.\nWhen \"overwrite\" in the Move and Copy interfaces / extension methods is set to false, the operation will fail if the destination already exists. Previously if overwrite was false, any existing destination file would be returned untouched with no data copied over.\n\n[New]\nExtensions methods for IFile.OpenReadAsync, IFile.OpenWriteAsync and IFile.OpenReadWriteAsync have been added.\n\n--- 0.9.3 ---\n[Improvements]\nThe DirectoryInfo for SystemFolder is now exposed as a public Info property.\nGeneral pass adding missing xmldoc comments to interfaces.\n\n--- 0.9.2 ---\n[Improvements]\nThe stream returned by HttpFile.OpenStreamAsync() now includes the value of the Content-Length header as the stream Length.\nThe stream returned by HttpFile.OpenStreamAsync() is now wrapped in a LazySeekStream, allowing for seeking and only advancing the underlying stream when strictly needed.\n\n[Fixes]\nFixed an issue where ZipArchiveFolder.DeleteAsync wasn't correctly identifying the zip entry given the storage id.\n\n--- 0.9.1 ---\n[New]\nHttpFile was given a new constructor accepting an HttpClient: HttpFile(string uri, HttpClient httpClient).\n\n--- 0.9.0 ---\n[Breaking]\nThe HttpFile.HttpMessageHandler property has been removed.\n\n[New]\nThe HttpFile.Client property was added.\nA new constructor accepting an HttpClient was added to HttpFile.\n\n--- 0.8.7 ---\n[Improvements]\nIn SystemFile, the Name is now evaluated on first access instead of in the constructor.\nSystemFile now has constructor taking an instance of FileInfo.  \n\n--- 0.8.6 ---\n[Fixes]\nFixed an issue where SystemFolder.GetItemAsync wasn't properly throwing a FileNotFoundException when the requested item doesn't exist. Fixes usage with CreateCopyOfAsync.\nFixed an issue where SystemFolder.CreateFolderAsync was unexpectedly throwing FileNotFoundException when overwrite: true is provided.\n\n--- 0.8.4 ---\n[Fixes]\nRemoved an old implementation of CreateCopyOfAsync from SystemFolder. Existing code referencing this symbol should now point to the extension method instead. Fixes several bugs.\n\n--- 0.8.3 ---\n[Fixes]\nFixed an issue where ReadOnlyZipArchiveFolder's GetFirstByName extension would fail to find folders.\n\n--- 0.8.2 ---\n[Fixes]\nFixed an issue with the new CreateCopyOfAsync extension method where it was not opening existing files when overwrite is false.\n\n--- 0.8.1 ---\n[Fixes]\nFixed an issue with the new CreateCopyOfAsync extension method where a writable stream was not requested for the destination file.\n\n--- 0.8.0 ---\nTHIS IS A BREAKING RELEASE\nUpdate asap, and do not use older versions or implementations.\n\n[Breaking]\nPath was removed from IAddressableStorable. This was not spec'd or standardized, and simply exposed the \"path\" used by the underlying implementation, so we removed it. Additional tooling has been added to substitute any functionality gaps that removing this has caused.\nRenamed IStorageProperties{T} to IStorageProperty{T}.\nRenamed IAddressableStorable to IStorableChild, as the only thing on the interface is now GetParentAsync.\nRenamed IAddressableFolder to IChildFolder.\nRenamed IAddressableFile to IChildFile.\nRenamed IFolderCanFastGetItem to IFastGetItem.\nRenamed IFolderCanFastGetFirstItemByName to IFastGetFirstByName.\nRenamed the extension method GetFirstItemByNameAsync to GetFirstByNameAsync.\nIModifiableFolder no longer requires implementing copy/move operations. Please remove from your implementations, and implement the fastpath interfaces where appropriate.\nRefactored HttpFile constructors. Only 1 parameter is required: either a Uri or a string.\nHttpFile.Name now has an init-only setter.\nHttpFile.MessageHandler now has an init-only setter.\nHttpFile.Id is no longer customizable, and is always created from the provided Uri instead.\n\n[New]\nAdded IFastGetRoot interface.\nAdded IFastFileCopy{T} interface.\nAdded IFastFileMove{T} interface.\nAdded IFastGetItemRecursive interface.\nAdded GetRootAsync extension method.\nAdded ModifiableFolderExtensions.CreateCopyOfAsync{T} extension method.\nAdded ModifiableFolderExtensions.MoveFromAsync{T} extension method.\nAdded FolderExtensions.GetItemRecursiveAsync extension method.\nAdded FolderExtensions.GetRelativePathToAsync extension method, to generate a relative path from one item to another.\nAdded FolderExtensions.GetItemByRelativePathAsync extension method, to traverse a relative path from one item to another.\nAdded FolderExtensions.GetItemRecursiveAsync extension method, to recursively search a folder for an item with the provided ID.\nSystemFolder now implements IFastGetRoot.\nZipArchiveFolder now implements IFastGetRoot.\nReadOnlyZipArchiveFolder now implements IFastGetRoot.\n\n--- 0.7.1 ---\n[Fix]\nFixed an issue where providing only a Uri for HttpFile would yield an incorrect file name.\n\n--- 0.7.0 ---\n[New]\nAdded the IFolder.GetFirstItemByNameAsync extension method and the IFolderCanFastGetFirstItemByName interface. Contributed by @yoshiask@github.com.\n\n--- 0.6.1 ---\n[Fixes]\nRemoved leading separator in ZIP archive IDs. Contributed by @yoshiask@github.com.\nFixed ReadOnlyZipArchiveFolder not recognizing existing virtual folders. Contributed by @yoshiask@github.com.\n\n--- 0.6.0 ---\n[New]\nAdded OwlCore.Storage.StreamFile, a file implementation that presents a provided stream as file content.\nAdded OwlCore.Storage.HttpFile, a file implementation which calls GET on a provided HTTP URL and returns it as file content.\nAdded OwlCore.Storage.Archive namespace, and new implementations for reading and writing a Zip archive from a file. Contributed by @yoshiask@github.com.\n\n[Improvements]\nAdded new constructor to MemoryFile that requires only a MemoryStream, no Id or Name. These are calculated from the stream's hash code instead.\n\n--- 0.5.3 ---\n[Fixes]\nFixed an issue in SystemFolder where deleting a folder that has children would throw instead of deleting recursively.\n\n[Improvements]\nUpdated testing dependencies.\n\n--- 0.5.2 ---\n[Fixes]\nFixed several bugs in MemoryFolder and SystemFolder regarding overwrite behavior.\n\n[Improvements]\nUpdated downstream NuGet packages\nWrote basic CommonTests for IModifiableFolder\n\n--- 0.5.1 ---\n[Fixes]\nFixed an issue in MemoryFolder and SystemFolder where calling CreateFileAsync and CreateFolderAsync with overwrite set to false wouldn't return an existing storable.\n\n--- 0.5.0 ---\nTHIS IS A BREAKING RELEASE\nUpdate asap, and do not use older versions.\n\n[Breaking]\nItems in a folder always have a parent, so they're always addressable. We've updated the interfaces and inbox implementations to reflect this.\n\nIFolder.GetItemsAsync() now returns IAddressableStorable instead of IStorable.\nIModifiableFolder.CreateCopyOfAsync now returns IAddressableFile instead of IFile.\nIModifiableFolder.MoveFromAsync now returns IAddressableFile instead of IFile.\nIModifiableFolder.MoveFromAsync now takes IAddressableFile instead of IFile as the first parameter.\nIModifiableFolder.CreateFileAsync now returns IAddressableFile instead of IFile.\nIModifiableFolder.CreateFolderAsync now returns IAddressableFolder instead of IFolder.\nIModifiableFolder.DeleteAsync now takes IAddressableStorable instead of IStorable as the first parameter.\n\n--- 0.4.0 ---\nTHIS IS A BREAKING RELEASE\nUpdate asap, and do not use older versions.\n\n[Breaking]\nIAddressableStorable.GetParentAsync() now returns IFolder? instead of IAddressableFolder?. Any type of folder could yield an IAddressableStorable, so we've made sure the parent of any IAddressableStorable can be any type of folder.\n\nTo migrate, simply change the return type of IAddressableStorable.GetParentAsync() to IFolder? in your implementations. No other changes are required.\n\n--- 0.3.2 ---\n[Fixes]\nFixed SystemFolder not extracting the folder name from the path correctly.\nFixed SystemFile.OpenStreamAsync failing when call on a file returned from System.CreateFileAsync\nFixed an issue with SystemFileWatcher where it couldn't reliably determine if an arbitrary path is a File or a Folder.\n\n--- 0.3.1 ---\n[Fixes]\nFixed a crash that may occur when calling SystemFolder.CreateCopyOfAsync, when the stream of the file being copied doesn't support seeking.\n\n--- 0.3.0 ---\n[New]\nAdded MemoryFile and MemoryFolder under OwlCore.Storage.Memory.\n\n--- 0.2.0 ---\nTHIS IS A BREAKING RELEASE.\nUpdate asap, and do not use older versions.\nWe will switch to pure semver2.0 once a stable 1.0.0 released is made.\n\n[Breaking]\nDue to the wildly different strategies that could be used for generic recursive folder moving/copying, IModifiableFolder.CreateCopyOfAsync and IModifiableFolder.MoveFromAsync now exclusively handle files. This may be added back later as a fast-path interface + extension method.\n\nA new property has been added to the IFolderWatcher interface. Supplying the folder which is being observed is now a requirement. The \"sender\" in the INotifyCollectionChanged handler should be the watcher instead of the folder, meaning the folder can't be accessed from event handlers unless the watcher supplies it. \n\n[New]\nOwlCore.Storage.SimpleStorableItem has been added, a minimum possible implementation of IStorable. This is useful in scenarios when you need to identify a resource but shouldn't supply any access to it, such as when a file or folder is removed.\n\nWe've started adding inbox interface implementations, starting with System.IO, under the namespace OwlCore.Storage.SystemIO.\n\n--- 0.1.0 ---\n[New]\nAdded all missing interfaces and extension methods from proposal.\n      \n--- 0.0.0 ---\n[New]\nInitial release of OwlCore.Storage.",
  "repository": "",
  "verbatimVersion": "0.10.1",
  "version": "0.10.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#dependencygroup/.netstandard2.0/microsoft.bcl.asyncinterfaces",
          "@type": "PackageDependency",
          "id": "Microsoft.Bcl.AsyncInterfaces",
          "range": "[8.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#dependencygroup/.netstandard2.0/system.linq.async",
          "@type": "PackageDependency",
          "id": "System.Linq.Async",
          "range": "[6.0.1, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#OwlCore.Storage.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3985,
      "fullName": "OwlCore.Storage.nuspec",
      "length": 11668,
      "name": "OwlCore.Storage.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#lib/netstandard2.0/OwlCore.Storage.dll",
      "@type": "PackageEntry",
      "compressedLength": 66278,
      "fullName": "lib/netstandard2.0/OwlCore.Storage.dll",
      "length": 110080,
      "name": "OwlCore.Storage.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#lib/netstandard2.0/OwlCore.Storage.xml",
      "@type": "PackageEntry",
      "compressedLength": 11159,
      "fullName": "lib/netstandard2.0/OwlCore.Storage.xml",
      "length": 97929,
      "name": "OwlCore.Storage.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#logo.png",
      "@type": "PackageEntry",
      "compressedLength": 11396,
      "fullName": "logo.png",
      "length": 13506,
      "name": "logo.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 691,
      "fullName": "LICENSE.txt",
      "length": 1135,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.03.20.31.58/owlcore.storage.0.10.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11516,
      "fullName": ".signature.p7s",
      "length": 11516,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}