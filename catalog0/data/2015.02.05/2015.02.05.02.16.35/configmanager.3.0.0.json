{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.05.02.16.35/configmanager.3.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Tom Jacques",
  "catalog:commitId": "dbddadbe-f69f-4b7b-9fdc-6d6b48fb9c5e",
  "catalog:commitTimeStamp": "2015-02-05T02:16:35.1280394Z",
  "copyright": "Copyright 2014",
  "created": "2014-03-30T22:41:43.773Z",
  "description": "Binaries for the ConfigManager library.\n        Visit https://github.com/tejacques/ConfigManager for an overview and usage examples.",
  "id": "ConfigManager",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/tejacques/ConfigManager/blob/master/LICENSE",
  "packageHash": "JMZMijw668ZCIyYXsGUpX6dbKojnk95yjlB2Q0m3/S+vxicku7/tbV8+jdwIdqZw1iT8xiRWuoxAm/i4+Hjypg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 12651,
  "projectUrl": "https://github.com/tejacques/ConfigManager",
  "published": "2014-03-30T22:41:43.773Z",
  "releaseNotes": "Notes:\n\n        Version 3.0.0:\n         - *Possibly Breaking Change* Now using Newtonsoft.Json instead of ServiceStack.Text\n           upgrade should be smooth for anyone not relying on specific ServiceStack.Text behavior.\n           this was done because ServiceStack.Text now requires purchasing license to use.\n         - Now supports YAML config files (.yaml)\n         - Json Files can be in either .json or .conf format\n         - Option to cache or not cache object resulting from deserialization.\n\n        Version 2.0.1:\n         - Fix bug where LogException was called without a null check.\n\n        Version 2.0.0:\n         - Remove Parsed object from Configuration class\n         - GetConfig now returns a copy of the configuration so that the Configuration held by the manager is immutable.\n         - Remove NLog Dependency, instead user can provide Log and LogException functions to ConfigManager.\n\n        Version 1.1.1:\n         - Include source files and pdbs.\n\n        Version 1.1.0:\n         - Add a delegate to retrieve the configuration from a user defined location (ex: read config from a database).\n         - Add a delegate to run if the configuration file is newer than the configuration from the user defined location (ex: update database).\n         - Do not log an error for a missing configuration file, only if the file existed and failed to read.\n\n        Version 1.0.3:\n         - Update dependency version compatibility\n\n        Version 1.0.2:\n         - Add a DevMode setting. If true, ConfigManager will first check for config files ending with .dev.conf.\n           Useful for having different settings on development.\n\n        Version 1.0.1:\n         - Fix a bug in updating files where the key had an incorrect substring check\n\n        Version 1.0.0:\n         - File handlers to automatically update config data in the running program\n         - Generic functions to retrieve configuration data as a strongly typed object",
  "requireLicenseAcceptance": false,
  "summary": "An open source helper library for retrieving strongly typed automatically updating configuration data from config files.",
  "title": "ConfigManager",
  "version": "3.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.05.02.16.35/configmanager.3.0.0.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.05.02.16.35/configmanager.3.0.0.json#dependencygroup/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[6.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.05.02.16.35/configmanager.3.0.0.json#dependencygroup/yamldotnet",
          "@type": "PackageDependency",
          "id": "YamlDotNet",
          "range": "[3.1.1, )"
        }
      ]
    }
  ],
  "tags": [
    "Config",
    "Configuration",
    "auto",
    "updating"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}