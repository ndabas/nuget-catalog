{
  "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Yngve J. K. Hestem",
  "catalog:commitId": "10887773-642a-45e3-b9ce-1b43bcfb7e76",
  "catalog:commitTimeStamp": "2023-07-08T16:28:35.1339425Z",
  "copyright": "Copyright (c) Yngve J. K. Hestem 2023",
  "created": "2023-07-08T16:26:26.737Z",
  "description": "ParameterCollection is a simple to use collection for different parameters and types defined with a key. It supports many of the standard types like int, string, double, float, long, DateTime, bool, byte[], enums and more. It can also support nearly every other objects by easy converting the object to itÂ´s own ParameterCollection, which can be nested togheter as parameters. It also supports many of the parameters as IEnumerables (List, Array, etc.). Methods to convert to and from JSON is also included.",
  "id": "YngveHestem.GenericParameterCollection",
  "isPrerelease": true,
  "lastEdited": "2023-07-08T16:28:28.577Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "EEmRsXUYLi9D0X44IuHfJ2zn68kbCbItFN3DIdB+4FkfYdPESwUbxOB0k6ekarBBiKGGuUBw2EGr/c19R0YjLg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 35598,
  "published": "2023-07-08T16:26:26.737Z",
  "readmeFile": "README.md",
  "releaseNotes": "Version 1.0.2-beta20:\n        - The Parameter-constructors now take in a second customConverter-list, so it is one list that should be saved to the parameter, while the other will only be used when the parameter is created to convert from the value and to the parameter.\n        - Removed a lot of the uneccessary constructors for Parameter and add-methods in ParameterCollection. Now, if it has not any special inputs like multiline, choices or similar, it uses the constructor/add-method that takes a object as value. This will make it a little bit easier to manage changes.\n        - Remapped all remaining constructors in the Parameter-class to use converters instead of converting directly to JToken.\n\n        Version 1.0.2-beta19:\n        - The abstract class ParameterCollectionParameterConverter now has the abstract list-converters as virtual and has default implementations that should fit most scenarios for the list-versions. The default list-check will return true if the list itself is not null (each element is in itself not automatically checked for null), and each element goes through the element-check (the abstract method). If at least one element fails the check it will return false. For the conversion of list the default implementation just creates a list and converts each element (via the abstract method) before returning the resulting list.\n\n        Version 1.0.2-beta18:\n        - You can now use the HasKeyCanConvertTo- and CanBeConvertedTo-methods to check against custom converters without adding them to the parameters. \n\n        Version 1.0.2-beta17:\n        - You can now send custom converters with the GetValue- and SetValue-methods to use custom converters without needing to add them to the parameters.\n\n        Version 1.0.2-beta16:\n        - Fixed a bug in ParameterCollections generic version of method GetByKeyAndType, which made conversions not work as intended.\n\n        Version 1.0.2-beta15:\n        - You can now send in null-value in AddCustomConverter without it crash or being added if value is null.\n        - Changed some in json-implementation, so ParameterCollection is added as an object instead of directly as an array. This was needed as the earlier implementation did not allow for sending references to custom converters that was added to the ParameterCollection. At the same time we fixed so properties that is null, will not be added to the actual json. This should make the json smaller if few parameters has extra parameters or custom converters.\n\n        Version 1.0.2-beta14:\n        - Fixed a bug in DateTimeParameterConverter that made converting list of DateTime not work.\n\n        Version 1.0.2-beta13:\n        - Fixed bug in SelectParameterConverter.\n\n        Version 1.0.2-beta12:\n        - Fixed so SelectParameterConverter do now allow getting the data as a ParameterConverter.\n\n        Version 1.0.2-beta11:\n        - Fixed a possible casting exception between List and Array. Now the default parameter-converters use a function to convert IEnumerables to correct type if possible.\n        - Changed bytes-converter to support all IEnumerables of type byte, and not only byte-arrays.\n        - Some other small fixes.\n\n        Version 1.0.2-beta10:\n        - Simplified conversion between IEnumerables.\n        - Some other small changes.\n\n        Version 1.0.2-beta09:\n        - Fixed a small bug that prevented SelectionMany to be converted right.\n        - Added conversion between string and ParameterType.String_IEnumerable and ParameterType.String_Multiline_IEnumerable\n\n        Version 1.0.2-beta08:\n        - Fixed a small bug that prevented DateTimeParameterConverter to convert from DateTime correctly.\n\n        Version 1.0.2-beta07:\n        - Moved some of the conversion for SelectOne and SelectMany to converter and at the same time added some more ways to convert.\n        - Added the possibillity to add multiple custom converters to Parameter and ParameterCollection with one call.\n        - Added a way to get all custom converters added to a Parameter or a ParameterCollection.\n        - Small fixes.\n\n        Version 1.0.2-beta06:\n        - Moved some of the conversion for Enum to converter and at the same time added some more ways to convert.\n\n        Version 1.0.2-beta05:\n        - Fixed a bug that made it impossible to use the object-value constructor to create the Parameter-object\n\n        Version 1.0.2-beta04:\n        - Fixed a bug in StringParameterConverter\n\n        Version 1.0.2-beta03:\n        - Small bugfixes\n        - Custom converters are now possible to send in every Parameter-constructur.\n\n        Version 1.0.2-beta02:\n        - Changed how conversion happens, so everything (except Enum, SelectOne and SelectMany), now uses own conversion-classes. This will make it easier to convert to custom types directly.\n        - Added possibillity to add any object as a parameter (if it exist a converter).\n        - Added possibillity to add custom converters.\n        - As custom converters is added, some functions to get value by a specific type are removed.\n        - Some functions to check if a parameter can convert to a value is added.\n\n        Version 1.0.2-beta01:\n        - Added the possibillity to get the value of an enum as string.\n        - Added the possibillity to set a new value of an existing parameter.",
  "repository": "",
  "verbatimVersion": "1.0.2-beta20",
  "version": "1.0.2-beta20",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json#dependencygroup/.netstandard2.0/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[13.0.3, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json#YngveHestem.GenericParameterCollection.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2409,
      "fullName": "YngveHestem.GenericParameterCollection.nuspec",
      "length": 6826,
      "name": "YngveHestem.GenericParameterCollection.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json#lib/netstandard2.0/YngveHestem.GenericParameterCollection.dll",
      "@type": "PackageEntry",
      "compressedLength": 17028,
      "fullName": "lib/netstandard2.0/YngveHestem.GenericParameterCollection.dll",
      "length": 48640,
      "name": "YngveHestem.GenericParameterCollection.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json#README.md",
      "@type": "PackageEntry",
      "compressedLength": 2397,
      "fullName": "README.md",
      "length": 6415,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.07.08.16.28.35/yngvehestem.genericparametercollection.1.0.2-beta20.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11512,
      "fullName": ".signature.p7s",
      "length": 11512,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "UI",
    "parameter",
    "ParameterCollection",
    "collection",
    "parameters",
    "collections",
    "multiple-types-in-collection",
    "json",
    "key-value",
    "key-value-pair"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}