{
  "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Vitalii Maklai",
  "catalog:commitId": "27d6741c-28eb-4b0b-ae7b-99e26ee956bd",
  "catalog:commitTimeStamp": "2023-03-20T22:57:05.6272746Z",
  "copyright": "Copyright Â© Vitalii Maklai 2004-2023",
  "created": "2023-03-20T22:54:43.277Z",
  "description": "Omnifactotum is the ultimate solution for .NET developers who want to streamline their development process. It provides its own helper and functional classes and interfaces as well as the extension methods for the standard .NET types. Omnifactotum is compatible with the older and newer .NET versions. It's the perfect way to reduce errors and save time, allowing developers to focus on creating quality code.",
  "id": "Omnifactotum",
  "isPrerelease": false,
  "lastEdited": "2023-03-20T22:56:46.397Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "minClientVersion": "5.4.0",
  "packageHash": "MZmQnw90UJuNJcJiBVV5rgpP45Q/tjA378o8sUncveUkRjhD4YSWJgP8AifHIJKOQpisSuYpczzis5w2NbMM8w==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 510729,
  "projectUrl": "https://github.com/HarinezumiSama/Omnifactotum",
  "published": "2023-03-20T22:54:43.277Z",
  "readmeFile": "README.NuGet.md",
  "releaseNotes": "### Changes in 0.14.0 (since 0.13.0)\n\n#### Breaking Changes\n\n- Dropped support of **.NET Framework 4.7.2** and **.NET Standard 2.0**\n- **.NET 7+**: Removed the following extension methods since the analogous ones are available since .NET 7:\n  - `OmnifactotumCollectionExtensions`\n    - `AsReadOnly<T>(this IList<T>)`\n  - `OmnifactotumDictionaryExtensions`\n    - `AsReadOnly<TKey, TValue>(this IDictionary<TKey, TValue>)`\n\n#### New features\n\n- Implemented compiling package for .NET 7\n\n### Changes in 0.13.0 (since 0.12.0)\n\n#### Breaking Changes\n\n- `OmnifactotumEnumExtensions`: `EnsureDefined<TEnum>(this TEnum ...)` now returns the input value instead of `void`\n- `TemplatedStringResolver`: `GetVariableNames()` now returns `HashSet<string>` instead of `string[]`\n\n#### New features\n\n- `OmnifactotumExceptionExtensions`: Added the `IsOriginatedFrom<TOriginatingException>(this Exception?)` extension method\n- `OmnifactotumStringExtensions`: Added the `ToSecuredUIString(this string? ...)` extension method\n\n#### Minor updates and fixes\n\n- `TemplatedStringResolver`: `GetVariableNames()` now uses the same resolver function for the variable name comparer as in the `TemplatedStringResolver` constructor\n\n### Changes in 0.12.0 (since 0.11.0)\n\n#### Breaking Changes\n\n- Removed support of **.NET Framework 4.6.1**\n\n#### New features\n\n- `TemplatedStringResolver`: Added the static `GetVariableNames()` method\n- `Factotum`: Added the `Assert(...)` method\n  - For .NET 5+ and higher, the `conditionExpression` parameter is marked with the `CallerArgumentExpression` attribute\n  - For the older .NET versions, the `conditionExpression` parameter is supplied only for binary compatibility between the different target frameworks\n\n#### Minor updates and fixes\n\n- Minor improvements in `OmnifactotumHttpStatusCodeExtensions.ToUIString()`\n- Improved documentation on `AssertionMethodAttribute` and `AssertionConditionAttribute`\n\n### Changes in 0.11.0 (since 0.10.0)\n\n#### Breaking Changes\n\n- `OmnifactotumEnumExtensions`: Added the `enumerationValueExpression` parameter to the `CreateEnumValueNotImplementedException<TEnum>()` and `CreateEnumValueNotSupportedException<TEnum>()` methods:\n  - For .NET 5+ and higher, the `enumerationValueExpression` parameter is marked with the `CallerArgumentExpression` attribute\n  - For the older .NET versions, the `enumerationValueExpression` parameter is supplied only for binary compatibility between the different target frameworks\n- `OmnifactotumNullableEnumExtensions`: Added the `enumerationValueExpression` parameter to the `CreateEnumValueNotImplementedException<TEnum>()` and `CreateEnumValueNotSupportedException<TEnum>()` methods:\n  - For .NET 5+ and higher, the `enumerationValueExpression` parameter is marked with the `CallerArgumentExpression` attribute\n  - For the older .NET versions, the `enumerationValueExpression` parameter is supplied only for binary compatibility between the different target frameworks\n- `Factotum`: Removed obsolete methods:\n  - `CreateEmptyCompletedTask()`\n  - `CreateEmptyFaultedTask(Exception)`\n- Validation: Removed obsolete `NotNullOrWhiteSpaceStringConstraint`\n- NuGet: Set `MinClientVersion` to `5.4.0`\n\n#### Deprecations\n\n- `OmnifactotumTypeExtensions`:\n  - Deprecated `IsNullable(Type)` in favor of `IsNullableValueType(Type)`\n  - Deprecated `GetCollectionElementType(Type)` in favor of `GetCollectionElementTypeOrDefault(Type)`\n\n#### New features\n\n- `OmnifactotumCollectionExtensions`:\n  - Added the `WhereNotNull<T>` extension method\n- `OmnifactotumStringExtensions`:\n  - Added the `WhereNotEmpty<T>` and `WhereNotBlank<T>` extension methods\n- Added `OmnifactotumImmutableArrayExtensions` (extension methods for `ImmutableArray<T>`):\n  - `AvoidDefault(this ImmutableArray<T>)` extension method\n- `OmnifactotumCollectionExtensions`\n  - For .NET Standard 2.1+ and .NET 5+:\n    - Added `ConfigureAwaitNoCapturedContext<T>(this IAsyncEnumerable<T>)`\n    - Added `ConfigureAwaitNoCapturedContext<T>(this ConfiguredCancelableAsyncEnumerable<T>)`\n    - Added `EnumerateToListAsync<T>(this IAsyncEnumerable<T>, CancellationToken)`\n    - Added `EnumerateToArrayAsync<T>(this IAsyncEnumerable<T>, CancellationToken)`\n- `OmnifactotumDisposableExtensions`\n  - For .NET Standard 2.1+ and .NET 5+:\n    - Added `ConfigureAwaitNoCapturedContext(this IAsyncDisposable)`\n\n#### Minor updates and fixes\n\n- `OmnifactotumCollectionExtensions`: Fixed/improved annotations on `ToUIString()` methods\n- Fixed/improved NRT related annotations on:\n  - `OmnifactotumGenericObjectExtensions`:\n    - `EnsureNotNull()`\n  - `OmnifactotumOperationContextExtensions`:\n    - `GetAllClientCertificates()`\n  - `OmnifactotumUriExtensions`:\n    - `EnsureWebUri()`\n    - `EnsureAbsoluteUri()`\n  - `NUnitFactotum`\n    - `AssertNotNull()`\n- `OmnifactotumCollectionExtensions`: Improved `AvoidNull()`: Now considering `ImmutableArray<T>.IsDefault` to avoid accessing an uninitialized instance\n- Applied `ConfigureAwaitNoCapturedContext` (that is, `ConfigureAwait(false)`) in:\n  - `EventHandlerAsyncExtensions`:\n    - `InvokeAsync<TEventArgs>(...)` extension method\n    - `InvokeParallelAsync<TEventArgs>(...)` extension method\n  - `OmnifactotumCollectionExtensions`:\n    - `DoForEachAsync<T>()` extension methods\n  - `OmnifactotumTaskExtensions`:\n    - `AwaitAllAsync(this IEnumerable<Task>)`\n    - `AwaitAllAsync<TResult>(this IEnumerable<Task<TResult>>)`\n  - `SemaphoreSlimBasedLock`\n    - `AcquireAsync(CancellationToken)`\n- Minor code improvements\n- Minor XML documentation improvements\n\n### Changes in 0.10.0 (since 0.9.0)\n\n#### New features\n\n- Added the `CaseInsensitiveStringKey` structure\n- `OmnifactotumDateTimeExtensions`: Added the `AsKind(this DateTime, DateTimeKind)` extension method\n\n### Changes in 0.9.0 (since 0.8.0)\n\n#### Breaking Changes\n\n- `ByReferenceEqualityComparer<T>` class: Enforced the `class` constraint on `T`\n- `DirectedGraphNode<T>`: Removed the parameterless constructor overload and applied the corresponding default value in the remaining constructor\n- `EnumFixedSizeDictionaryDeterminant<TKey>`: The `Size` property became `protected` as per inheritance (used to be `public`)\n- `EnumFixedSizeDictionary<TKey, TValue, TDeterminant>`: The constructor previously accepting `IDictionary<TKey, TValue>` now accepts `IEnumerable<KeyValuePair<TKey, TValue>>` (as per inheritance)\n- `FixedSizeDictionary<TKey, TValue, TDeterminant>` and `EnumFixedSizeDictionary<TKey, TValue>` now implement `IReadOnlyDictionary<TKey, TValue>`\n- `Factotum.ProcessRecursively<T>()` method: Removed overloads not having the `RecursiveProcessingContext<T>` parameter and applied the default value for this parameter in the other overloads\n- `FixedSizeDictionaryDeterminant<TKey>`: The `Size` property became `protected` (used to be `public`)\n- `FixedSizeDictionary<TKey, TValue, TDeterminant>`: The constructor previously accepting `IDictionary<TKey, TValue>` now accepts `IEnumerable<KeyValuePair<TKey, TValue>>`\n- `KeyedEqualityComparer<T, TKey>`: Removed the constructor without the key comparer parameter and applied the default value to the key comparer parameter in the remaining constructor\n- `OmnifactotumDateTimeExtensions`: Added the `valueExpression` parameter to the `EnsureKind()`, `EnsureUtc()`, and `EnsureLocal()` methods\n  - For .NET 5+ and higher, the `valueExpression` parameter is marked with `CallerArgumentExpression`\n  - For older .NET versions, the `valueExpression` parameter is supplied only for binary compatibility between the different target frameworks\n- `OmnifactotumEnumExtensions`: Made methods generic and enforced the `Enum` constraint on:\n  - `GetName()`\n  - `GetQualifiedName()`\n  - `GetFullName()`\n  - `IsDefined()`\n  - `EnsureDefined()`\n  - `CreateEnumValueNotImplementedException()`\n  - `CreateEnumValueNotSupportedException()`\n- `OmnifactotumEnumExtensions`: Added the `enumerationValueExpression` parameter to the `EnsureDefined<TEnum>()` method\n  - For .NET 5+ and higher, the `enumerationValueExpression` parameter is marked with `CallerArgumentExpression`\n  - For older .NET versions, the `enumerationValueExpression` parameter is supplied only for binary compatibility between the different target frameworks\n- `OmnifactotumGenericObjectExtensions`: Removed the `ToPropertyString<T>()` methods\n- `OmnifactotumGenericObjectExtensions`: Added the `valueExpression` parameter to the `EnsureNotNull<T>()` methods\n  - For .NET 5+ and higher, the `valueExpression` parameter is marked with `CallerArgumentExpression`\n  - For older .NET versions, the `valueExpression` parameter is supplied only for binary compatibility between the different target frameworks\n- `OmnifactotumUriExtensions`: Added the `valueExpression` parameter to the `EnsureAbsoluteUri()` and `EnsureWebUri()` methods\n  - For .NET 5+ and higher, the `valueExpression` parameter is marked with `CallerArgumentExpression`\n    - For older .NET versions, the `valueExpression` parameter is supplied only for binary compatibility between the different target frameworks\n- `RecursiveProcessingContext<T>` class: Removed the parameterless constructor and applied the default value for the parameter in the parameterized constructor\n- `SyncValueContainer<T>`: Removed parameterless constructor\n- **Validation** types: Marked Validation attributes non-CLS compliant (as per compiler warnings)\n  - `BaseValidatableMemberAttribute`\n  - `ValidatableMemberAttribute`\n  - `BaseMemberConstraintAttribute`\n  - `MemberConstraintAttribute`\n  - `MemberItemConstraintAttribute`\n- `ValueContainer<T>`: Removed parameterless constructor\n-`VirtualTreeNode.Create<T>` method: Added optional parameter `IReadOnlyCollection<VirtualTreeNode<T>>? children`\n- `VirtualTreeNode<T>`: Replaced all constructors with single `VirtualTreeNode(T value, IReadOnlyCollection<VirtualTreeNode<T>>? children = null)`\n- `VirtualTreeNodeBase<T>`: Redesigned constructors and made the remaining constructor non visible outside assembly (`private protected`)\n- `VirtualTreeNodeRoot<T>`: Replaced all constructors with single `VirtualTreeNodeRoot(IReadOnlyCollection<VirtualTreeNode<T>>? children = null)`\n- `WeakReferenceBasedCache<TKey, TValue>`\n  - Applied the `notnull` constraint on the `TKey` type parameter\n  - Removed the constructor overload without the `IEqualityComparer<TKey>? keyEqualityComparer` parameter and applied the corresponding default value in the remaining constructor\n\n#### New features\n\n- Added support of **.NET 6**\n- Enabled **Nullable Reference Types** for all the types across the entire project (except `Omnifactotum.Annotations.*`)\n- `ComparableObjectBase`: Implemented `IComparable`\n- `OmnifactotumCollectionExtensions`: Added the `Chunk<TSource>(this IEnumerable<TSource> source, int size)` extension method to use with .NET versions prior to 6.0\n- Added `OmnifactotumNullableEnumExtensions`:\n  - `CreateEnumValueNotImplementedException<TEnum>()`\n  - `CreateEnumValueNotSupportedException<TEnum>()`\n- `OmnifactotumStringExtensions`:\n  - Added the `TrimPostfix()` method\n  - Added the `TrimPrefix()` method\n- Added `VirtualTreeNodeRoot` static helper class\n- **Validation**:\n  - Added `EnumValueDefinedConstraint<TEnum>` constraint\n  - Added `NullableEnumValueDefinedConstraint<TEnum>` constraint\n\n#### Minor updates and fixes\n\n- Applied `AggressiveInlining` (or `AggressiveInlining` and `AggressiveOptimization`), where appropriate, in:\n  - `ComparableObjectBase`\n  - `DirectedGraphNode`\n  - `EquatableObjectBase`\n  - `KeyedEqualityComparer`\n  - `OmnifactotumDateTimeExtensions`\n  - `OmnifactotumDisposableExtensions`\n  - `OmnifactotumEnumExtensions`\n  - `OmnifactotumHashCodeHelper`\n  - `OmnifactotumMathExtensions`\n  - `OmnifactotumMethodBaseExtensions`\n  - `OmnifactotumNullableBooleanExtensions`\n  - `OmnifactotumOperationContextExtensions`\n  - `OmnifactotumSetExtensions`\n  - `OmnifactotumTypeExtensions`\n  - `OmnifactotumUriExtensions`\n  - `ValueRange`\n  - `ValueRange<T>`\n- Improved annotations in:\n  - `ComparableValueCapsule<T>`\n  - `EnumFactotum`\n  - `EquatableValueCapsule<T>`\n  - `Factotum`\n  - `OmnifactotumArrayExtensions`\n  - `OmnifactotumDictionaryExtensions`\n  - `OmnifactotumEnumExtensions`\n  - `OmnifactotumExpressionExtensions`\n  - `OmnifactotumHashCodeHelper`\n  - `OmnifactotumMathExtensions`\n  - `OmnifactotumMethodBaseExtensions`\n  - `OmnifactotumNullableBooleanExtensions`\n  - `OmnifactotumOperationContextExtensions`\n  - `OmnifactotumTypeExtensions`\n  - `ReadOnlySet<T>`\n  - `ValueRange`\n  - `ValueRange<T>`\n- Minor optimizations in\n  - `Factotum.SetDefaultValues<T>()`\n  - `OmnifactotumAssemblyExtensions.GetLocalPath()`\n\n---\n\n### Changes in 0.8.0 (since 0.7.0)\n\n#### New features\n\n- Added `TemplatedStringResolver` (a templated string is defined in a way similar to C# interpolated string)\n\n---\n\n### Changes in 0.7.0 (since 0.6.0)\n\n#### Breaking Changes\n\n- **Removed** support of **.NET Framework 4.0**\n- `OmnifactotumGenericObjectExtensions`: Removed the `Morph()` methods (null propagation can be used instead)\n- Removed the `AsyncFactotum` class in favor of `async`/`await`\n- The `OmnifactotumCollectionExtensions.DoForEachAsync()` overloads now accept `CancellationToken` and pass it to `actionAsync`\n\n#### Deprecations\n\n- `Factotum.CreateEmptyCompletedTask()` (use `Task.CompletedTask`)\n- `Factotum.CreateEmptyFaultedTask()` (use `Task.FromException(Exception)`)\n\n#### New features\n\n- Extension Methods\n  - `OmnifactotumNullableTimeSpanExtensions`:\n    - Added the `ToFixedString()` method\n    - Added the `ToFixedStringWithMilliseconds()` method\n    - Added the `ToPreciseFixedString()` method\n  - `OmnifactotumTimeSpanExtensions`:\n    - Added the `ToFixedString()` method\n    - Added the `ToFixedStringWithMilliseconds()` method\n    - Added the `ToPreciseFixedString()` method\n  - `OmnifactotumUriExtensions`:\n    - Added the `EnsureAbsoluteUri()` method\n    - Added the `EnsureWebUri()` method\n- Internally added `System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute` and `System.Diagnostics.CodeAnalysis.NotNullWhenAttribute` to make these attributes available when targeting older frameworks (prior to .NET Standard 2.1 and .NET 5.0). Affected methods:\n  - `OmnifactotumGenericObjectExtensions`\n    - `EnsureNotNull<T>()`\n  - `OmnifactotumSecureStringExtensions`\n    - `IsNullOrEmpty()`\n    - `ToPlainText()`\n  - `OmnifactotumStringExtensions`\n    - `IsNullOrEmpty()`\n    - `IsNullOrWhiteSpace()`\n    - `IsWebUri`\n    - `ToSecureString()`\n  - `OmnifactotumUriExtensions`\n    - `EnsureAbsoluteUri()`\n    - `EnsureWebUri()`\n    - `IsWebUri`\n\n#### Minor updates and fixes\n\n- `OmnifactotumGenericObjectExtensions`:\n  - Fixed nullability annotations on the `ToPropertyString()` methods\n  - Fixed documentation on the `EnsureNotNull()` method\n- `OmnifactotumSecureStringExtensions`: Fixed `ContractAnnotation` on the `IsNullOrEmpty()` method\n- `OmnifactotumStringExtensions`: Fixed `ContractAnnotation` on the `IsNullOrEmpty()` and `IsNullOrWhiteSpace()` methods\n- Applied missing `InstantHandle` annotation on `ObjectValidationResult.GetException(...)`\n- Improvements in `OmnifactotumDictionaryExtensions`:\n  - Using Nullable Reference Types (where applicable)\n  - Applied `AggressiveInlining` (where applicable)\n\n---\n\n### Changes in 0.6.0 (since 0.5.0)\n\n#### Breaking Changes\n\n- `OmnifactotumArrayExtensions`\n  - `Initialize<T>()` overloads now return the passed array instead of `void`\n- Enforced the `Enum` constraint on the applicable generic types and methods\n  - `EnumFactotum` methods:\n    - `GetValue<TEnum>()`\n    - `GetValue<TEnum>()`\n    - `GetAllValues<TEnum>()`\n    - `GetAllFlagValues<TEnum>()`\n  - `EnumFixedSizeDictionary<TKey, TValue>` class\n  - `EnumFixedSizeDictionaryDeterminant<TKey>` class\n  - `OmnifactotumEnumExtensions` methods:\n    - `IsAllSet<TEnum>()`\n    - `IsAnySet<TEnum>()`\n    - `IsOneOf<TEnum>()`\n\n#### Deprecations\n\n- Object validation\n  - Deprecated `NotNullOrWhiteSpaceStringConstraint` in favor of the newly\n    added `NotBlankStringConstraint`\n\n#### New features\n\n- Types\n  - Added delegate `Task EventHandlerAsync<>(...)` (excluding .NET Framework 4.0)\n  - Added `OutFunc<...>` delegates (similar to `System.Func<>`, but having an `out` parameter of the type `TOutput`)\n    - `OutFunc<TOutput, out TResult>`\n    - `OutFunc<in T, TOutput, out TResult>`\n    - `OutFunc<in T1, in T2, TOutput, out TResult>`\n    - `OutFunc<in T1, in T2, in T3, TOutput, out TResult>`\n  - Added `SemaphoreSlimBasedLock`\n  - Object validation:\n    - Added `NotBlankStringConstraint`\n    - Added `NotNullOrEmptyCollectionConstraint`\n    - Added `NotNullOrEmptyCollectionConstraint<T>`\n    - Added `WebUrlConstraint`\n- Extension Methods\n  - Added `EventHandlerAsyncExtensions` (extension methods for `EventHandlerAsync<>`) (excluding .NET Framework 4.0)\n  - `OmnifactotumArrayExtensions`\n    - Using Nullable Reference Types (where applicable)\n    - Added `Initialize<T>(T[], T)` (initializing with a specific constant value)\n  - Updated `OmnifactotumCollectionExtensions`\n    - Added `DoForEachAsync`\n    - Using Nullable Reference Types for all the methods (where applicable). Particularly:\n      - `GetFastCount`\n      - `CollectionsEquivalent`\n      - `CollectionsEqual`\n      - `FindDuplicates`\n      - `DisposeCollectionItemsSafely`\n      - `AvoidNull`\n      - `ToHashSet`\n      - `ToUIString`\n  - Updated `OmnifactotumDateTimeExtensions`\n    - Added `EnsureKind()`, `EnsureUtc()`, and `EnsureLocal()` methods\n    - Added `ToFixedStringWithMilliseconds()` method\n    - Exposed `FixedStringFormat`, `FixedStringWithMillisecondsFormat`, and `PreciseFixedStringFormat` fields\n  - Updated `OmnifactotumDateTimeOffsetExtensions`\n    - Added `ToFixedStringWithMilliseconds()` method\n    - Exposed `FixedStringFormat`, `FixedStringWithMillisecondsFormat`, and `PreciseFixedStringFormat` fields\n  - Added `OmnifactotumDelegateExtensions` (extension methods for delegates) with method:\n    - `GetTypedInvocations()`\n  - Added `OmnifactotumEqualityComparerExtensions` (extension methods for `IEqualityComparer<T>`) with method:\n    - `GetHashCodeSafely(this IEqualityComparer<T>, ...)`\n  - Updated `OmnifactotumGenericObjectExtensions`:\n    - Added `GetObjectReferenceDescription()`\n    - Added `GetShortObjectReferenceDescription()`\n    - Added `AsNullable<T>` (`where T : struct`)\n    - Applied `NotNullIfNotNull` annotation on `EnsureNotNull()` (.NET Standard 2.1+ and .NET 5.0+ only)\n    - Using Nullable Reference Types (where applicable). Particularly:\n      - `ToStringSafely()`\n      - `ToStringSafelyInvariant()`\n      - `GetHashCodeSafely()`\n      - `GetTypeSafely()`\n      - `ToUIString()`\n      - `ToPropertyString()`\n      - `IsEqualByContentsTo()`\n      - `Morph()`\n  - Added `OmnifactotumHttpStatusCodeExtensions` with method:\n    - `ToUIString(HttpStatusCode)`\n  - Added `OmnifactotumNullableDateTimeExtensions` with methods:\n    - `ToFixedString()`\n    - `ToFixedStringWithMilliseconds()`\n    - `ToPreciseFixedString()`\n  - Added `OmnifactotumNullableDateTimeOffsetExtensions` with methods:\n    - `ToFixedString()`\n    - `ToFixedStringWithMilliseconds()`\n    - `ToPreciseFixedString()`\n  - Added `OmnifactotumTaskExtensions` with methods (excluding .NET Framework 4.0):\n    - `AwaitAllAsync(IEnumerable<Task>)`\n    - `AwaitAllAsync(IEnumerable<Task<TResult>>)`\n    - `ConfigureAwaitNoCapturedContext(Task)`\n    - `ConfigureAwaitNoCapturedContext(Task<TResult>)`\n  - Added `OmnifactotumValueTaskExtensions` with methods (excluding .NET Framework 4.0):\n    - `ConfigureAwaitNoCapturedContext(ValueTask)`\n    - `ConfigureAwaitNoCapturedContext(ValueTask<TResult>)`\n\n#### Minor Updates\n\n- `OmnifactotumArrayExtensions`: Minor optimization in `AvoidNull()`\n- `OmnifactotumGenericObjectExtensions`\n  - `ToStringSafely()` and `ToStringSafelyInvariant()` now never return `null` and instead fall back to `string.Empty`\n- `OmnifactotumStringExtensions`: Fixed annotation in `ToUIString()`\n- Applied `MethodImplOptions.AggressiveInlining` (and, when possible, `MethodImplOptions.AggressiveOptimization`) to the methods, where reasonable. Affected classes:\n  - `OmnifactotumGenericObjectExtensions`\n  - `OmnifactotumCollectionExtensions`\n\n---\n\n### Changes in 0.5.0 (since 0.4.1)\n\n#### Breaking Changes\n\n- `ReadOnlySet` class:\n  - `IsReadOnly` property now implements `ICollection<T>.IsReadOnly` **explicitly**\n- `IValueContainer<T>` moved from the namespace `Omnifactotum` to `Omnifactotum.Abstractions`\n\n#### New features\n\n- Added `ICurrentDateTimeProvider`, `CurrentDateTimeProviderExtensions`, and `LocalComputerCurrentDateTimeProvider`\n- Added `IElapsedTimeProvider`, `ElapsedTimeProviderExtensions`, and `StopwatchElapsedTimeProvider`\n- The `ReadOnlySet` class now implements `IReadOnlySet` (.NET 5+)\n- Added new extension methods for `System.String`:\n  - `IsWebUri(string)`\n  - `ToSecureString(string)`\n  - `WithoutTrailingSlash(string)`\n  - `WithSingleTrailingSlash(string)`\n- Added new extension methods for `System.Uri`:\n  - `IsWebUri(Uri)`\n  - `ToUIString(Uri)`\n  - `WithoutTrailingSlash(Uri)`\n  - `WithSingleTrailingSlash(Uri)`\n- Added new extension methods for `System.Security.SecureString`:\n  - `IsNullOrEmpty(SecureString)`\n  - `ToPlainText(SecureString)`\n- Added `ContractAnnotation` to `OmnifactotumGenericObjectExtensions.EnsureNotNull`\n- Improvements in the `OmnifactotumStringExtensions` class:\n  - Using Nullable Reference Types (where applicable)\n  - Added the `ContractAnnotation` annotations (where applicable)\n  - Added the `AggressiveInlining` flag (where applicable)\n  - Improved parameter annotations (using `NotNullWhen`, `ItemCanBeNull` etc. where applicable)\n  - Other minor improvements\n\n#### Minor Updates\n\n- Polished the XML documentation\n- Minor optimizations in the `Factotum` class:\n  - Applied `MethodImplOptions.AggressiveInlining` where applicable\n  - Forwarding `CreateEmptyCompletedTask()` to `Task.CompletedTask` (except for NET 4.0)\n  - Forwarding `CreateEmptyFaultedTask(Exception)` to `Task.FromException(Exception)` (except for NET 4.0)\n\n---\n\n### Changes in 0.4.1 (since 0.4.0)\n\n- Added the `Factotum.For<TObject>.Identity` method (same as `Factotum.Identity<T>`)\n- Added `Factotum.For<TObject>.IdentityMethod` (the cached reference to the `Factotum.For<TObject>.Identity` method)\n- Using the `Deterministic` build option\n- Using Portable PDBs\n- Using `snupkg` format of the symbol package\n\n---\n\n### Changes in 0.4.0 (since 0.3.0.119)\n\n#### Major Updates\n\n- `Omnifactotum` is now the multi-target package for:\n  - .NET Framework 4.0, 4.6.1, and 4.7.2\n  - .NET Standard 2.0 and 2.1\n  - .NET 5.0\n- Addressed multi-target compatibility issues in:\n  - `ColoredConsoleTraceListener`\n  - `OmnifactotumAssemblyExtensions`\n  - `OmnifactotumCollectionExtensions`\n  - `OmnifactotumDictionaryExtensions`\n  - `OmnifactotumOperationContextExtensions`\n  - `KeyValuePair` (static helper)\n  - Omnifactotum's `ReadOnlyDictionary<TKey, TValue>`\n  - `WinEventLog`\n- Added `OmnifactotumKeyValuePair` static helper for facilitating migration from .NET Framework to .NET Standard/Core\n\n#### Breaking Changes\n\n- `Factotum`: Removed the methods `ToPropertyString` and `AreEqualByContents` in favor of methods `ToPropertyString` and `IsEqualByContentsTo` in `OmnifactotumGenericObjectExtensions`\n- `OmnifactotumArrayExtensions`: The method `AsReadOnly()` moved to `OmnifactotumCollectionExtensions`\n- `OmnifactotumCustomAttributeProviderExtensions`: Removed the obsolete method `GetCustomAttributes`\n- `OmnifactotumGenericObjectExtensions`: Removed the methods `Affirm` and `ComputePredicate`\n- `OmnifactotumMathExtensions`: Removed the methods `Sqr(decimal)`, `SqrChecked(float)`, `SqrChecked(double)` since their expected behavior cannot be achieved\n\n#### New features\n\n- `OmnifactotumCollectionExtensions`: Added `ToUIString` implementation for collections of strings and collections of nullable value type instances\n- `OmnifactotumGenericObjectExtensions`: Implemented `Morph()` overloads for nullable value types (to complement already existing method for the reference types)\n- `OmnifactotumNullableBooleanExtensions`: Added an overload of `ToString` accepting value provider delegates\n- Added `ReadOnlyItemCollection<T>` (read-only wrapper for `ICollection<T>`)\n- Added partial support of Nullable Reference Types:\n  - `OmnifactotumGenericObjectExtensions.EnsureNotNull`\n- Exposed the class `OmnifactotumRepresentationConstants` (formerly `OmnifactotumConstants`)\n- Applied `PureAttribute`, `InstantHandleAttribute`, and `NoEnumerationAttribute` annotations in certain appropriate cases\n\n#### Fixes and improvements\n\n- Improved documentation\n- `KeyedEqualityComparer<T, TKey>`: `IEqualityComparer.Equals` and `IEqualityComparer.GetHashCode` now don't throw an exception f an argument is not compatible with the type `T`\n- `OmnifactotumAssemblyExtensions`\n- `OmnifactotumCollectionHashCodeHelper` (as per the fix in `OmnifactotumHashCodeHelper`)\n- `OmnifactotumDateTimeOffsetExtensions`\n- `OmnifactotumEnumExtensions`: `GetName`, `GetQualifiedName`, `GetFullName`, `EnsureDefined`, and `IsDefined`\n- `OmnifactotumGenericObjectExtensions`:\n  - `ToUIString()` now uses the invariant culture if the value is `IFormattable`\n  - Fix in `IsEqualByContentsTo()` for the case of a type with no fields\n- `OmnifactotumHashCodeHelper`: Fix in CombineHashCodeValues (for case when the next hash code is zero)\n- `OmnifactotumMethodBaseExtensions`\n- `OmnifactotumTypeExtensions`\n- Updated JetBrains Annotations in `Omnifactotum.Annotations`\n\n---\n\n### Changes in 0.3.0.119 (since 0.3.0.117)\n- Omnifactotum: Removed NuGet dependency to the `MSBuildTasks` package since it is only used for development\n\n---\n\n### Changes in 0.3.0.117 (since 0.3.0.114)\n- Omnifactotum: `Factotum` and `Factotum.For<TObject>`: Improved annotations\n\n---\n\n### Changes in 0.3.0.114 (since 0.3.0.101)\n- `OmnifactotumAssemblyExtensions`: Improvements\n- **BREAKING CHANGE**: `OmnifactotumDisposableExtensions`: `DisposeSafely` now works only for reference and nullable types (2 overloads)\n- **BREAKING CHANGE**: `OmnifactotumCollectionExtensions`: `DisposeCollectionItemsSafely` now works only for reference and nullable types (2 overloads)\n- **BREAKING CHANGE**: `Factotum`: `DisposeAndNull` now works also for nullable types (besides reference types)\n- Introduced the `AsyncFactotum` class with the overloaded methods `ComputeAsync` and `ExecuteAsync`\n- Fix in `MemberConstraintBase.CastTo<T>` (and hence in `TypedMemberConstraintBase`) for nullable types\n- Improved annotations in Object Validator and related classes\n- Minor improvements\n\n---\n\n### Changes in 0.3.0.101 (since 0.3.0.90)\n- `KeyedEqualityComparer<T, TKey>`: Fixes and improvements\n- `KeyedEqualityComparer` static helper class has been introduced\n- `Factotum`: `CreateEmptyCompletedTask` and `CreateEmptyFaultedTask` methods have been introduced\n- `OmnifactotumGenericObjectExtensions`: `EnsureNotNull` (for nullable) has been introduced\n- `IValueContainer<T>` has been introduced for `ValueContainer<T>` and `SyncValueContainer<T>`\n- `ValueContainer` and `SyncValueContainer` helper static classes have been introduced\n- Improvements and fixes in `OmnifactotumMethodBaseExtensions` and `OmnifactotumTypeExtensions`\n- `OmnifactotumStringExtensions`: `TrimSafely`, `TrimStartSafely`, `TrimEndSafely` and `Shorten` methods now never return null\n\n---\n\n### Changes in 0.3.0.90 (since 0.3.0.86)\n- **BREAKING CHANGE** `OmnifactotumCustomAttributeProviderExtensions`: `GetCustomAttributes` has been renamed to `GetCustomAttributeArray` (for compatibility with FW 4.5+)\n\n---\n\n### Changes in 0.3.0.86 (since 0.3.0.83)\n- **BREAKING CHANGE** `OmnifactotumDictionaryExtensions`: The method `GetValueOrCreate` has been renamed to `GetOrCreateValue` for readability and in order to avoid confusion with `GetValueOrDefault`\n- `OmnifactotumDictionaryExtensions`: Improved annotations\n- `ValueContainer` and `SyncValueContainer`:\n    - Support for equality comparison\n    - Added `DebuggerDisplay` attribute and `ToString()` method\n- `OmnifactotumMathExtensions` class has been introduced:\n    - `Sqr` (square)\n    - `Sqrt` (square root)\n    - `Abs` (absolute value)\n\n---\n\n### Changes in 0.3.0.83 (since 0.3.0.82)\n- `FixedSizeDictionary`: Improved annotations\n- `FixedSizeDictionary`: Implemented version verification in the enumerator\n\n---\n\n### Changes in 0.3.0.82 (since 0.3.0.80)\n- `FixedSizeDictionary`: Removed index verification in the internal determinant since this verification highly affected performance\n\n---\n\n### Changes in 0.3.0.80 (since 0.3.0.79)\n- `EnumFixedSizeDictionary`: Fix in determining the size\n\n---\n\n### Changes in 0.3.0.79 (since 0.3.0.74)\n- `FixedSizeDictionary` and `EnumFixedSizeDictionary` have been introduced.\n- Applied Omnifactotum Annotations to the `Factotum` and `OmnifactotumGenericObjectExtensions` classes.\n\n---\n\n### Changes in 0.3.0.74 (since 0.2.0.59)\n- **BREAKING CHANGE** Object Validation: Redesign and support of `IEnumerable`.\n- **BREAKING CHANGE** Renamed `EnumHelper` to `EnumFactotum`.\n- **BREAKING CHANGE** `OmnifactotumExpressionExtensions` is now in the namespace `System.Linq.Expressions` (instead of System).",
  "repository": "",
  "verbatimVersion": "0.14.0",
  "version": "0.14.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#dependencygroup/net5.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net5.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#dependencygroup/net6.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net6.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#dependencygroup/net7.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net7.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#dependencygroup/.netstandard2.1/system.collections.immutable",
          "@type": "PackageDependency",
          "id": "System.Collections.Immutable",
          "range": "[5.0.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#Omnifactotum.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 7443,
      "fullName": "Omnifactotum.nuspec",
      "length": 32026,
      "name": "Omnifactotum.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/net5.0/Omnifactotum.dll",
      "@type": "PackageEntry",
      "compressedLength": 75608,
      "fullName": "lib/net5.0/Omnifactotum.dll",
      "length": 176128,
      "name": "Omnifactotum.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/net5.0/Omnifactotum.xml",
      "@type": "PackageEntry",
      "compressedLength": 46988,
      "fullName": "lib/net5.0/Omnifactotum.xml",
      "length": 498830,
      "name": "Omnifactotum.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/net6.0/Omnifactotum.dll",
      "@type": "PackageEntry",
      "compressedLength": 75187,
      "fullName": "lib/net6.0/Omnifactotum.dll",
      "length": 175104,
      "name": "Omnifactotum.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/net6.0/Omnifactotum.xml",
      "@type": "PackageEntry",
      "compressedLength": 46612,
      "fullName": "lib/net6.0/Omnifactotum.xml",
      "length": 496615,
      "name": "Omnifactotum.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/net7.0/Omnifactotum.dll",
      "@type": "PackageEntry",
      "compressedLength": 75101,
      "fullName": "lib/net7.0/Omnifactotum.dll",
      "length": 175104,
      "name": "Omnifactotum.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/net7.0/Omnifactotum.xml",
      "@type": "PackageEntry",
      "compressedLength": 46541,
      "fullName": "lib/net7.0/Omnifactotum.xml",
      "length": 495238,
      "name": "Omnifactotum.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/netstandard2.1/Omnifactotum.dll",
      "@type": "PackageEntry",
      "compressedLength": 75068,
      "fullName": "lib/netstandard2.1/Omnifactotum.dll",
      "length": 174592,
      "name": "Omnifactotum.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#lib/netstandard2.1/Omnifactotum.xml",
      "@type": "PackageEntry",
      "compressedLength": 46988,
      "fullName": "lib/netstandard2.1/Omnifactotum.xml",
      "length": 498830,
      "name": "Omnifactotum.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#README.NuGet.md",
      "@type": "PackageEntry",
      "compressedLength": 678,
      "fullName": "README.NuGet.md",
      "length": 1266,
      "name": "README.NuGet.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2023.03.20.22.57.05/omnifactotum.0.14.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11512,
      "fullName": ".signature.p7s",
      "length": 11512,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "C#",
    "CSharp",
    "omnifactotum",
    "omni",
    "factotum",
    "aid",
    "assistant",
    "extension",
    "extensions",
    "helper",
    "helpers",
    "common",
    "typical"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}