{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Chris F Carroll",
  "catalog:commitId": "9416df8c-5883-4a1d-8d1c-62f0aa8379db",
  "catalog:commitTimeStamp": "2016-07-23T17:53:26.4840476Z",
  "copyright": "Copyright Chris F Carroll, 2013-16",
  "created": "2016-07-23T17:51:52.633Z",
  "description": "*TestBase* gets you off to a flying start when unit testing projects with dependencies.\nIt offers a rich extensible set of fluent assertions and a set of verifiable Fake Ado.Net components, with easy setup and verification.\n\nTestBase.Shoulds\n------------------\nChainable fluent assertions get you to the point concisely\nUnitUnderTest.Action()\n  .ShouldNotBeNull()\n  .ShouldContain(expected);\nUnitUnderTest.OtherAction()\n  .ShouldEqualByValue( \n    new {Id=1, Payload=expectedPayload, Additional=new[]{ expected1, expected2 }}\n);\n* ShouldBe(), ShouldMatch(), ShouldNotBe(), ShouldContain(), ShouldNotContain(), ShouldBeEmpty(), ShouldNotBeEmpty(), ShouldAll() and many more\n* ShouldEqualByValue() works with all kinds of object and collections\n* Stream assertions include ShouldContain() and ShouldEqualByValue()\n\nTestBase.FakeDb\n------------------\nWorks with Ado.Net and technologies on top of it, including Dapper.\n* fakeDbConnection.SetupForQuery(IEnumerable<TFakeData> )\n* fakeDbConnection.SetupForQuery(IEnumerable<Tuple<TFakeDataForTable1,TFakeDataForTable2>> )\n* fakeDbConnection.SetupForQuery(fakeData, new[] {\"FieldName1\", FieldName2\"})\n* fakeDbConnection.SetupForExecuteNonQuery(rowsAffected)\n* fakeDbConnection.ShouldHaveUpdated(\"tableName\", [Optional] fieldList, whereClauseField)\n* fakeDbConnection.ShouldHaveSelected(\"tableName\", [Optional] fieldList, whereClauseField)\n* fakeDbConnection.ShouldHaveUpdated(\"tableName\", [Optional] fieldList, whereClauseField)\n* fakeDbConnection.ShouldHaveDeleted(\"tableName\", whereClauseField)\n* fakeDbConnection.ShouldHaveInvoked(cmd => predicate(cmd))\n* fakeDbConnection.ShouldHaveXXX().ShouldHaveParameter(\"name\", value)\n* fakeDbConnection.Verify(x=>x.CommandText.Matches(\"Insert [case] .*\") && x.Parameters[\"id\"].Value==1)\n\nTestBase.TestBase<T> AutoMocksAndFakes\n--------------------------------\nis in development and currently works non-recursively. It auto-constructs the UnitUnderTest.\nIt identifies constructor dependencies by name and type, looking in the following places:\n1) Fields in the TestFixture class \n2) Entries in the Mocks[] or Fake[] dictionaries\n3) Finally it creates a Mock (if it's a mockable type) or a default instance (if its sealed, or value type) for anything that's missing\n\nChangeLog\n---------\n3.0.3.0 Improves FakeDb setup\n3.0.x.0 adds and/or corrects missing Shoulds()\n2.0.5.0 adds some intellisense and FakeDbConnection.Verify(..., message,args) overload",
  "id": "TestBase",
  "isPrerelease": false,
  "lastEdited": "2016-07-23T17:52:50.523Z",
  "listed": false,
  "packageHash": "idoUGPjmNt8pqeJmXJyxo0lGoZm0Hp1k4AiuHlcyuK5lk3M4++Nk0VvG/9mg27fth3l70Co14nCSeG25vZSCgw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 49395,
  "projectUrl": "http://github.com/chrisfcarroll/TestBase",
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "3.*: \n    Added \n    * FakeDbConnection.ShouldHaveUpdated(), ShouldHaveInserted(), ShouldHaveDeleted(), ShouldHaveSelected(), ShouldHaveInvoked()\n    * FakeDbConnection.SetUpForQuery<T1,T2>() overload which allows you to provide dummy data as Tuples. Which is sometimes easier way to setup fake data for Select joins.\n    * FakeDbConnection.ShouldHaveUpdated() which verifies an \"update <tablename> set .... where .... \" command.\n    * String.ShouldMatch(regex, RegexOptions) overload\n    * String.ShouldMatchIgnoringCase(regex) overload\n    * IEnumerable.SingeOrAssertFail() which you can give a better error message than just the Exception thrown by .Single()\n    \n    Still unpolished, but in use for over four years.",
  "requireLicenseAcceptance": false,
  "summary": "*TestBase* for a flying start to unit testing. A rich extensible set of fluent assertions such as ShouldNotBeEmpty().ShouldEqualByValue() etc, and a set of Fake Ado.Net components, with 1 line setup and verification.",
  "title": "TestBase",
  "verbatimVersion": "3.0.8.4",
  "version": "3.0.8.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json#dependencygroup/mono.linq.expressions",
          "@type": "PackageDependency",
          "id": "Mono.Linq.Expressions",
          "range": "[1.2.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json#dependencygroup/moq",
          "@type": "PackageDependency",
          "id": "Moq",
          "range": "[4.0.10827, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json#dependencygroup/nunit",
          "@type": "PackageDependency",
          "id": "NUnit",
          "range": "[2.5.0, 2.99.0]"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json#TestBase.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1796,
      "fullName": "TestBase.nuspec",
      "length": 4361,
      "name": "TestBase.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.07.23.17.53.26/testbase.3.0.8.4.json#lib/net40/TestBase.dll",
      "@type": "PackageEntry",
      "compressedLength": 44995,
      "fullName": "lib/net40/TestBase.dll",
      "length": 114688,
      "name": "TestBase.dll"
    }
  ],
  "tags": [
    "nunit",
    "tdd",
    "fluent",
    "assertions",
    "mock",
    "ado.net"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}