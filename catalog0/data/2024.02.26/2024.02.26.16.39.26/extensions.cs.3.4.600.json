{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Cornelius J. van Dyk",
  "catalog:commitId": "152b4881-2f0b-400a-bc05-1ea35a8f9907",
  "catalog:commitTimeStamp": "2024-02-26T16:39:26.7852105Z",
  "copyright": "Copyright Â© 2020-2021",
  "created": "2022-07-18T16:04:50.24Z",
  "deprecation": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#deprecation",
    "alternatePackage": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#deprecation/alternatePackage",
      "id": "GCCHigh.Extensions",
      "range": "*"
    },
    "reasons": [
      "Legacy"
    ]
  },
  "description": "Extensions.dll contains extension methods that enhance existing C# classes thus making life easier for developers.\n                 Extensions.dll supports all versions of .NET from 3.5 through 5.0\n                 Highlights are methods such as:\n                 Use .Save() and .Load() for easy state saving of any object in C#.\n                 Use .Retry() to easily handle 429 throttling errors in web calls.\n                 Use System.Timer class to quickly add stopwatch timing functionality.\n                 Use .IsPrime() to determine if a number is a prime number.\n                 Use .GetNthPrime() and .GetNthPrimeAsync to get the Nth prime number capable of calculating 10,000,000 primes/minute on an Intel Core i7-6700K CPU @ 4.00 GHz using 7 threads on 8 logical cores.\n                 Use .ReplaceTokens() to replace multiple strings in string dictionary style.\n                 Use .IsStrong() to validate strong passwords.\n                 Use .ToTimeZone() to quickly convert any given time to any given time zone.\n                 Use .Elevate() to restart current process in admin mode if it doesn't have admin rights.\n                 Use System.Timer to quickly and easily time anything.\n                 Use .CompoundInterest() to calculate any given interest over any given perior at any given interval.\n                 and many, many more.",
  "iconUrl": "https://raw.githubusercontent.com/cjvandyk/Extensions/master/Images/Extensions-64x64.png",
  "id": "Extensions.cs",
  "isPrerelease": false,
  "lastEdited": "2024-02-26T16:38:59.69Z",
  "licenseExpression": "GPL-3.0-or-later",
  "licenseUrl": "https://licenses.nuget.org/GPL-3.0-or-later",
  "listed": false,
  "packageHash": "WZfN+unNtZTS323pr0HSe3gli2zoOnZLHoj+VFhsd4zgvMIwTQANRt5p2TTWK6l+K8/3YeO+hGf4BCqYdyxu0w==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 5849914,
  "projectUrl": "https://github.com/cjvandyk/Extensions",
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "BeginsWith()\n      Reduces checking if a given string starts with another given string\n      from this:\n      (str.ToLower().Substring(0, target.Length) == target.ToLower())\n      to this:\n      str.BeginsWith(target, true)\n\n      Bigest()\n      Return the bigest of two given values.\n      For example:\n      Bigest(23, 31)\n      will return\n      31\n\n      CompoundInterest()\n      Calculate compounded interest end value given an amount, percent\n      interest per year and number of years.\n      For example:\n      double val = 100.00;\n      val.CompoundInterest(5,\n      10,\n      Constants.CompoundFrequency.Yearly);\n      will return 162.889462677744\n\n      ContainsAny()\n      Checks if the given string contains any of a list of characters or\n      strings provided.\n      For example:\n      \"abcdef1234567890\".ContainsAny(Constants.HexChars)\n      will return True.\n\n      ContainsOnly()\n      Checks if the given string contains only characters or strings\n      in the list provided.\n      For example:\n      \"abcdef1234567890\".ContainsOnly(Constants.HexChars)\n      will return True while\n      \"abcdefg1234567890\".ContainsOnly(Constants.HexChars)\n      will return False because of the \"g\".\n\n      CopyTo()\n      Copies a given length of bytes from a byte[] starting at a definable\n      offset.\n      For example:\n      byte[] b1 = System.Text.Encoding.UTF8.GetBytes(\"blog.cjvandyk.com rocks!\");\n      byte[] b2 = b1.CopyTo(10);\n      byte[] b3 = b1.CopyTo(10, 5);\n      will result in the following arrays:\n      98  108 111 103 46  99  106 118 97  110 100 121 107 46  99  111 109 32  114 111 99  107 115 33\n      98  108 111 103 46  99  106 118 97  110\n      99  106 118 97  110 100 121 107 46  99\n\n      DoubleQuote()\n      Return the given string encased in double quotes.\n      For example:\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\");\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\".DoubleQuote());\n      will return\n      https://blog.cjvandyk.com/sites/Rocks\n      \"https://blog.cjvandyk.com/sites/Rocks\"\n\n      Elevate()\n      Restarts the current process with elevated permissions.\n      For example:\n      System.Diagnostics.Process.GetCurrentProcess().Elevate(args)\n      will restart the current console app in admin mode.\n\n      Err()\n      Write an Error message to active channels (console, event log, file)\n      using the System.Logging class.\n        \n      ExceedsLength()\n      Checks if a referenced offset exceeds the length of the string.\n      Optionally increments the offset as well.\n      For example:\n      \"https://blog.cjvandyk.com Rocks!\".ExceedsLength(30)\n      will return False while\n      \"https://blog.cjvandyk.com Rocks!\".ExceedsLength(31, false)\n      will also return False and\n      \"https://blog.cjvandyk.com Rocks!\".ExceedsLength(31)\n      will return True.\n\n      Get()\n      Language extension for properties.  Use to get the value of the\n      extension property in question.\n\n      GetExecutingAssembly()\n      Gets the current Entry or Executing assembly through reflection.\n\n      GetExecutingAssemblyName()\n      Gets the name of the current assembly, optionally escaped.\n\n      GetExecutingAssemblyFolder()\n      Gets the folder location of the current assembly, optionally escaped.\n\n      GetExecutingAssemblyFullPath()\n      Gets the full path and file name of the current assembly, optionally\n      escaped.\n\n      GetFQDN()\n      Get the current computer Fully Qualified Domain Name.\n\n      GetNthPrime()\n      Get the Nth prime number using multi threading and asynchronous\n      processing.  It will serialize the list of discovered\n      prime numbers to file in order to eliminate duplicate calculation\n      of prime numbers.  Use `Universal.PrimeStatePath` to override the\n      path where the discovered list of prime numbers is saved.\n      For example:\n      Extensions.Universal.GetNthPrime(1000)\n      will return the 1000th prime number - 7919.\n\n      GetNthPrimeAsync()\n      Get the Nth prime number using multi threading and asynchronous\n      processing.  It will serialize the list of discovered\n      prime numbers to file in order to eliminate duplicate calculation\n      of prime numbers.  Use `Universal.PrimeStatePath` to override the\n      path where the discovered list of prime numbers is saved.\n      processing.\n      For example:\n      Extensions.Universal.GetNthPrime(1000)\n      will return the 1000th prime number - 7919.\n\n      GetSiteUrl()\n      Given a full SharePoint Online object URL, this method will return\n      the site collection part of the URL.\n      For example:\n      \"https://crayveon.sharepoint.com/sites/TheSite/lists/TheList\".GetTenantUrl()\n      would return https://crayveon.sharepoint.com/sites/TheSite\n\n      GetTenantUrl()\n      Given a full SharePoint Online object URL, this method will return\n      only the tenant part of the URL.\n      For example:\n      \"https://crayveon.sharepoint.com/sites/TheSite/lists/TheList\".GetTenantUrl()\n      would return https://crayveon.sharepoint.com\n\n      GetTimeZoneString()\n      Get the registry ID string that can be used with\n      TimeZoneInfo.FindSystemTimeZoneById() for time zone convertions.\n      For example:\n      System.TimeZoneInfo.FindSystemTimeZoneById(\n      Extensions.TimeZoneInfo.GetTimeZoneString(\n      Constants.TimeZone myZone))\n      will return the proper string to use in the call.\n\n      GetUrlRoot()\n      Get the URL root for the given string object containing a URL.\n      For example:\n      \"https://blog.cjvandyk.com\".GetUrlRoot()\n      will return\n      \"https://blog.cjvandyk.com\"\n      whereas\n      \"https://blog.cjvandyk.com/sites/Approval\".GetUrlRoot()\n      will also return\n      \"https://blog.cjvandyk.com\".\n\n      HasLower()\n      Validates that the given string object contains a lower case character.\n      For example:\n      \"abc\".HasLower()\n      will return True whereas\n      \"ABC\".HasLower()\n      will return False and\n      \"AbC\".HasLower()\n      will return True.\n\n      HasNumeric()\n      Validates that the given string object contains a number character.\n      For example:\n      \"abc\".HasNumeric()\n      will return False whereas\n      \"ABC123\".HasNumeric()\n      will return True and\n      \"A2C\".HasNumeric()\n      will return True.\n\n      HasSymbol()\n      Validates that the given string object contains a symbol or special\n      character.\n      For example:\n      \"abc\".HasSymbol()\n      will return False whereas\n      \"ABC$\".HasSymbol()\n      will return True and\n      \"A@C\".HasSymbol()\n      will return True.\n\n      HasUpper()\n      Validates that the given string object contains a lower case character.\n      For example:\n      \"abc\".HasUpper()\n      will return False whereas\n      \"ABC\".HasUpper()\n      will return True and\n      \"AbC\".HasUpper()\n      will return True.\n\n      HtmlDecode()\n      Decode the HTML escaped components in a given string returning the\n      given source string without HTML escaped components.\n      For example:\n      \"https://blog.cjvandyk.com/sites/Rocks <> Rolls!\".HtmlDecode()\n      will return\n      https://blog.cjvandyk.com/sites/Rocks Rolls!\n\n      HtmlEncode()\n      Encode the given string to be HTML safe.\n      For example:\n      \"https://blog.cjvandyk.com/sites/Rocks Rolls!\".HtmlEncode()\n      will return\n      https://blog.cjvandyk.com/sites/Rocks <> Rolls!\n\n      Inf()\n      Write an Information message to active channels (console, event log, file)\n      using the System.Logging class.\n\n      IsAlphabetic()\n      Validates that the given string object contains all alphabetic\n      characters (a-z and A-Z) returning True if it does and False if\n      it doesn't.\n      For example:\n      \"abcXYZ\".IsAlphabetic()\n      will return True whereas\n      \"abc123\".IsAlphabetic()\n      will return False.\n\n      IsAlphaNumeric()\n      Validates that the given string object contains all alphabetic\n      and/or numeric characters (a-z and A-Z and 0-9) returning True if it\n      does and False  if it doesn't.\n      For example:\n      \"abc123\".IsAlphaNumeric()\n      will return True whereas\n      \"abcxyz\".IsAlphaNumeric()\n      will also return True and\n      \"123456\".IsAlphaNumeric()\n      will also return True but\n      \"abc!@#\".IsAlphaNumeric()\n      will return False.\n\n      IsChar()\n      This method takes a char[] as one of its arguments against which the\n      given string object is validated.  If the given string object contains\n      only characters found in the char[] it will return True, otherwise it\n      will return False.\n      For example:\n      \"aacc\".IsChar(new char[] {'a', 'c'})\n      will return True whereas\n      \"abc123\".IsNumeric()\n      will return False.\n\n      IsEmail()\n      Validates that the given string object contains a valid email address.\n      For example:\n      \"noreply@crayveon.com\".IsEmail()\n      will return True whereas\n      \"noreplay-at-crayveon.com\".IsEmail()\n      will return False.\n\n      IsEven()\n      Checks if the given number is even.\n      For example:\n      234.IsEven()\n      will return True whereas\n      339.IsEven()\n      will return False.\n\n      IsLower()\n      Validates that the given string object contains only lower case letters.\n      For example:\n      \"IsLower test\".IsLower()\n      will return False while\n      \"islower test\".IsLower()\n      will return True and\n      \"islower test\".IsLower(false)\n      will return False.\n\n      IsNumeric()\n      Validates that the given string object contains all numeric\n      characters (0-9) returning True if it does and False  if it\n      doesn't.\n      For example:\n      \"123456\".IsNumeric()\n      will return True whereas\n      \"abc123\".IsNumeric()\n      will return False.\n\n      IsOdd()\n      Checks if the given number is odd.\n      For example:\n      234.IsOdd()\n      will return False whereas\n      339.IsOdd()\n      will return True.\n\n      IsPrime()\n      Checks if the given number is a prime number.\n      For example:\n      27.IsPrime()\n      will return False whereas\n      29.IsPrime()\n      will return True.\n\n      IsStrong()\n      Validates that the given string object contains a strong password string.\n      For example:\n      \"abc123XYZ!@#\".IsStrong()\n      will return True whereas\n      \"abc123XYZ\".IsStrong()\n      will return False and\n      \"abc123XYZ\".IsStrong(3)\n      will return True and\n      \"abc123XYZ\".IsStrong(2)\n      will return True.\n      The number parameter for IsStrong() indicates the number of criteria\n      that has to be true before the string is considered strong.  Valid\n      values are 1 through 4 with the default value being 4.\n\n      IsUpper()\n      Validates that the given string object contains only upper case letters.\n      For example:\n      \"IsUpper test\".IsUpper()\n      will return False while\n      \"ISUPPER TEST\".IsUpper()\n      will return True and\n      \"ISUPPER TEST\".IsUpper(false)\n      will return False.\n\n      IsUrlRoot()\n      Check if the given string object containing a URL, is that of the\n      URL root only.  Returns True if so, False if not.  For example:\n      \"https://blog.cjvandyk.com\".IsUrlRootOnly()\n      will return True whereas\n      \"https://blog.cjvandyk.com/sites/Approval\".IsUrlRootOnly()\n      will return False.\n\n      IsVowel()\n      Checks if the given char/string is an English vowel.\n      This allows the developer the ability to check a string without\n      having to first convert to a char e.g. as a substring return.\n      For example:\n      \"test\".Substring(2, 1).IsVowel()\n      will return False since the \"s\" is checked whereas\n      \"test\".Substring(1, 1).IsVowel()\n      will return True since the \"e\" is checked.\n\n      IsZipCode()\n      Checks if the given string object is in the valid format\n      of a United States zip code i.e. nnnnn-nnnn or just nnnnn.\n      For example:\n      \"12345-6789\".IsZipCode()\n      will return True whereas\n      \"1234-56789\".IsZipCode()\n      will return False.\n      \"12345\".IsZipCode()\n      will return True.\n      \"123456\".IsZipCode()\n      will return False.\n      \"1234\".IsZipCode()\n      will return False.\n\n      Left()\n      This method returns text to the left of the index string.\n\n      Lines()\n      This method returns the number of lines/sentences in the given string\n      object.\n\n      Load()\n      Language extension providing a universal method to all objects\n      that allows them to be deserialized from disk.\n      Does NOT require the [Serializable] property on object.\n      For example:\n      ComplexClass myClass = new ComplexClass();\n      myClass = myClass.Load(\"My file path\");\n      Use .Save() to save objects to disk.\n\n      LoremIpsum()\n      Poplates the given string with a given number of paragraphs of dummy\n      text in the lorem ipsum style e.g.\n      \"\".LoremIpsum(2)\n      would yield\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer\n      aliquam arcu rhoncus erat consectetur, quis rutrum augue tincidunt.\n      Suspendisse elit ipsum, lobortis lobortis tellus eu, vulputate\n      fringilla lorem. Cras molestie nibh sed turpis dapibus sollicitudin\n      ut a nulla. Suspendisse blandit suscipit egestas. Nunc et ante mattis\n      nulla vehicula rhoncus. Vivamus commodo nunc id ultricies accumsan.\n      Mauris vitae ante ut justo venenatis tempus.\n\n      Nunc posuere, nisi eu convallis convallis, quam urna sagittis ipsum,\n      et tempor ante libero ac ex. Aenean lacus mi, blandit non eros luctus,\n      ultrices consectetur nunc. Vivamus suscipit justo odio, a porta massa\n      posuere ac. Aenean varius leo non ipsum porttitor eleifend. Phasellus\n      accumsan ultrices massa et finibus. Nunc vestibulum augue ut bibendum\n      facilisis. Donec est massa, lobortis quis molestie at, placerat a\n      neque. Donec quis bibendum leo. Pellentesque ultricies ac odio id\n      pharetra. Nulla enim massa, lacinia nec nunc nec, egestas pulvinar\n      odio. Sed pulvinar molestie justo, eu hendrerit nunc blandit eu.\n      Suspendisse et sapien quis ipsum scelerisque rutrum.\"\n\n      Match()\n      Checks if the current string matches a given search mask.\n      It ignores duplicate '*' in the mask.  '*' is matched against\n      0 or more characters.  Duplicate '?' is treated as requiring\n      the number of characters.  '?' is matched against 1 or more\n      characters.\n      For example:\n      \"abcdefgh\".Match(\"***a?c*\")\n      will return True while\n      \"abcdefgh\".Match(\"***ac*\")\n      will return False but\n      \"abcdefgh\".Match(\"?a?c*\")\n      will also return False because the first '?' requires a character\n      before 'a'.\n\n      MorseCodeBeep()\n      Takes a given System.String representing Morse code and audiblize\n      it according to standards.\n      https://www.infoplease.com/encyclopedia/science/engineering/electrical/morse-code\n      Assumes the input value to be in Morse code format already.\n      Use .ToMorseCode() to pre-convert text if needed.\n\n      NewCustomGuid()\n      Returns a custom GUID starting with a custom string.\n      For example:\n      Extensions.NewCustomGuid(\"012\")\n      will return a new GUID that starts with \"012\".\n\n      Print()\n      Print the byte[] to console, separated by spaces and space padded\n      on the right to allow proper alignment for debug/testing output.\n      For example:\n      byte[] bytes = System.Text.Encoding.UTF8.GetBytes(\"blog.cjvandyk.com rocks!\");\n      bytes.Print();\n\n      printf()\n      Simple printf method for console output with color control.  Both\n      text color and background color is returned to previous state\n      after the string has been written to console.\n      For example:\n      printf(\"Hello World!\", ConsoleColor.Red, ConsoleColor.White);\n      will output the string to console in red text on a white background.\n\n      Quote()\n      Return the given string encased in requested quotes.\n      Default is Constants.QuoteType.Double.\n      For example:\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\");\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\").Quote();\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\".Quote(\n      Constants.QuoteType.Single));\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\".Quote(\n      Constants.QuoteType.Double));\n      will return\n      https://blog.cjvandyk.com/sites/Rocks\n      \"https://blog.cjvandyk.com/sites/Rocks\"\n      'https://blog.cjvandyk.com/sites/Rocks'\n      \"https://blog.cjvandyk.com/sites/Rocks\"\n\n      RemoveExtraSpace()\n      Trims leading and trailing white space and then removes all extra\n      white space in the given string returning a single spaced result.\n      For example:\n      \"  blog.cjvandyk.com    rocks   !   \".RemoveExtraSpace()\n      will return\n      \"blog.cjvandyk.com rocks !\"\n\n      ReplaceTokens()\n      Takes a given string object and replaces 1 to n tokens in the string\n      with replacement tokens as defined in the given Dictionary of strings.\n\n      Retry()\n      Checks if a System.Net.WebException contains a \"Retry-After\" header.\n      If it does, it sleeps the thread for that period (+ 60 seconds)\n      before reattempting to HTTP call that caused the exception in the\n      first place.  If no \"Retry-After\" header exist, the exception is\n      simply rethrown.\n      For example:\n      System.Net.HttpWebRequest request ...\n      Try\n      {\n      request.GetResponse();\n      }\n      Catch (System.Net.WebException ex)\n      {\n      ex.Retry(request);\n      }\n\n      Save()\n      Language extension providing a universal method to all objects\n      that allows them to be serialized to disk.\n      Does NOT require the [Serializable] property on object.\n      For example:\n      ComplexClass myClass = new ComplexClass(...constructor parms...);\n      myClass.Save(\"My file path\");\n      Use .Load() to reload objects back from disk.\n\n      Set()\n      Language extension for properties.  Use to set the value of the\n      extension property in question.\n\n      SingleQuote()\n      Return the given string encased in single quotes.\n      For example:\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\");\n      printf(\"https://blog.cjvandyk.com/sites/Rocks\".SingleQuote());\n      will return\n      https://blog.cjvandyk.com/sites/Rocks\n      'https://blog.cjvandyk.com/sites/Rocks'\n\n      Singularize()\n      Parses the given string removing multiples of a given character.\n      For example:\n      string searchMask = \"***??abc*\";\n      searchMask.Singularize('*')\n      will return\n      \"*??abc*\"\n\n      Smallest()\n      Return the smallest of two given values.\n      For example:\n      Smallest(23, 31)\n      will return\n      23\n\n      Substring()\n      Extends the \".Substring(startIndex)\" and \".Substring(startIndex, length)\"\n      methods to the \"System.Text.StringBuilder\" class.\n      For example:\n      System.Text.StringBuilder sb = new System.Text.StringBuilder();\n      sb.Append(\"abc1abc2abc3abc4\");\n      sb.Substring(5);\n      will return\n      bc2abc3abc4\n      sb.Substring(5, 3);\n      will return\n      bc2\n      Adds the FromHead/FromTail overloaded methods.\n      FromHead returns the \"length\" of characters from the head of the given\n      string.\n      For example:\n      sb.Substring(3, Constants.SubstringType.FromHead);\n      sb.Substring(5, Constants.SubstringType.FromHead);\n      sb.Substring(8, Constants.SubstringType.FromHead);\n      will return\n      abc\n      abc1a\n      abc1abc2\n      FromTail returns the \"length\" of characters from the tail of the given\n      string.\n      For example:\n      sb.Substring(3, Constants.SubstringType.FromTail);\n      sb.Substring(5, Constants.SubstringType.FromTail);\n      sb.Substring(8, Constants.SubstringType.FromTail);\n      will return\n      bc4\n      3abc4\n      abc3abc4\n      Adds the LeftOfIndex/RightOfIndex overloaded methods.\n      LeftOfIndex returns the \"length\" of characters to the LEFT of the\n      located index representing the \"occurence\"th match of the \"index\"\n      string.\n      For example:\n      sb.Substring(5, \"abc\", Constants.SubstringType.LeftOfIndex, 0);\n      sb.Substring(5, \"abc\", Constants.SubstringType.LeftOfIndex, 1);\n      sb.Substring(5, \"abc\", Constants.SubstringType.LeftOfIndex, 2);\n      sb.Substring(5, \"abc\", Constants.SubstringType.LeftOfIndex, 3);\n      sb.Substring(5, \"abc\", Constants.SubstringType.LeftOfIndex, 4);\n      will return\n\n\n      abc1\n      1abc2\n      2abc3\n      RightOfIndex returns the \"length\" of characters to the RIGHT of the\n      located index representing the \"occurence\"th match of the \"index\"\n      string.\n      For example:\n      sb.Substring(5, \"abc\", Constants.SubstringType.RigthOfIndex, 0);\n      sb.Substring(5, \"abc\", Constants.SubstringType.RigthOfIndex, 1);\n      sb.Substring(5, \"abc\", Constants.SubstringType.RigthOfIndex, 2);\n      sb.Substring(5, \"abc\", Constants.SubstringType.RigthOfIndex, 3);\n      sb.Substring(5, \"abc\", Constants.SubstringType.RigthOfIndex, 4);\n      will return\n\n      1abc2\n      2abc3\n      3abc4\n      4\n\n      System.Timer class\n      This class provides and easy way to time things like a stopwatch.\n      .Start() starts the timer.\n      .Stop() stops the timer.\n      .Pause() pauses the timer.\n      .Resume() resumes the timer.\n      .Reset() resets the timer.\n      For example:\n      System.Timer timer = new System.Timer();\n      timer.Start();\n      DO STUFF\n      System.TimeSpan howlong = timer.Stop();\n\n      TimeStamp()\n      Returns a string representing the current local date time stamp to\n      either just the day or down to the millisecond.  Used for creating\n      unique log file names.\n      For example:\n      TimeStamp()\n      will return\n      2021-03-01@06.01.02.003\n      whereas\n      TimeStamp(true)\n      will return\n      2021-03-01\n\n      ToBinary()\n      This method returns the given string represented in 1s and 0s as\n      a binary result.\n      For example:\n      \"This test\".ToBinary()\n      will return\n      1010100 1101000 1101001 1110011 100000 1110100 1100101 1110011 1110100\n\n      ToEnum()\n      This method matches a given string to the given enum set and returns\n      the matched enum.\n      For example:\n      enum testEnum { first, second, third };\n      var testEnumResult = \"first\".ToEnum[testEnum]();\n      Console.WriteLine(testEnumResult == testEnum.first);\n      will return\n      True\n\n      ToMorseCode()\n      Convert given System.String to its Morse code representation.\n      Undefined characters will return in the format:\n      [Undefined:[char=\"\"]]\n      For example:\n      \"sos@\".ToMorseCode()\n      will return\n      \"...---...[Undefined:[@]]\"\n\n      ToQueryString()\n      Convert given Dictionary[string, string]\n      into a querystring.\n      For example:\n      Dictionary[string, string] dic1 = new Dictionary[string, string]();\n      dic1.Add(\"Parm1\", \"Val1\");\n      dic1.Add(\"Parm2\", \"Val2\");\n      dic1.Add(\"Parm3\", \"Val3\");\n      Console.WriteLine(dic1.ToQueryString());\n\n      Binary Data Size Convertions\n      System.Double.ToNumberBytes() >>> Returns the given number expressed as Bytes.\n      System.Double.ToKB() >>> Returns the given number expressed as Kilobytes (2^10).\n      System.Double.ToMB() >>> Returns the given number expressed as Megabytes (2^20).\n      System.Double.ToGB() >>> Returns the given number expressed as Gigabytes (2^30).\n      System.Double.ToTB() >>> Returns the given number expressed as Terrabytes (2^40).\n      System.Double.ToPB() >>> Returns the given number expressed as Petabytes (2^50).\n      System.Double.ToEB() >>> Returns the given number expressed as Exabytes (2^60).\n      System.Double.ToZB() >>> Returns the given number expressed as Zettabytes (2^70).\n      System.Double.ToYB() >>> Returns the given number expressed as Yottabytes (2^80).\n      System.Double.ToBB() >>> Returns the given number expressed as Brontobytes (2^90).\n      System.Double.ToGpB() >>> Returns the given number expressed as Geopbytes (2^100).\n      System.Double.ToSB() >>> Returns the given number expressed as Saganbytes (2^110).\n      System.Double.ToPaB() >>> Returns the given number expressed as Pijabytes (2^120).\n      System.Double.ToAB() >>> Returns the given number expressed as Alphabytes (2^130).\n      System.Double.ToPlB() >>> Returns the given number expressed as Pectrolbytes (2^140).\n      System.Double.ToBrB() >>> Returns the given number expressed as Bolgerbytes (2^150).\n      System.Double.ToSoB() >>> Returns the given number expressed as Sambobytes (2^160).\n      System.Double.ToQB() >>> Returns the given number expressed as Quesabytes (2^170).\n      System.Double.ToKaB() >>> Returns the given number expressed as Kinsabytes (2^180).\n      System.Double.ToRB() >>> Returns the given number expressed as Rutherbytes (2^190).\n      System.Double.ToDB() >>> Returns the given number expressed as Dubnibytes (2^200).\n      System.Double.ToHB() >>> Returns the given number expressed as Hassiubytes (2^210).\n      System.Double.ToMrB() >>> Returns the given number expressed as Meitnerbytes (2^220).\n      System.Double.ToDdB() >>> Returns the given number expressed as Darmstadbytes (2^230).\n      System.Double.ToRtB() >>> Returns the given number expressed as Roentbytes (2^240).\n      System.Double.ToShB() >>> Returns the given number expressed as Sophobytes (2^250).\n      System.Double.ToCB() >>> Returns the given number expressed as Coperbytes (2^260).\n      System.Double.ToKkB() >>> Returns the given number expressed as Koentekbytes (2^270).\n      For example:\n      double dbl = 1;\n      Console.WriteLine(dbl.ToKB(Constants.NumberType.TB));\n      Console.WriteLine(dbl.ToKB(Constants.NumberType.GB));\n      Console.WriteLine(dbl.ToKB(Constants.NumberType.ZB));\n      will return\n      1073741824\n      1048576\n      1.15292150460685E+18\n\n      ToTimeZone()\n      Convert given DateTime between different time zones with ease.\n      For example:\n      System.DateTime now = System.DateTime.UtcNow;\n      now.ToTimeZone(\n      Constants.TimeZone.UTC,\n      Constants.TimeZone.EasternStandardTime));\n      will return the current UTC time as Eastern time.\n\n      TrimLength()\n      Returns part of the given System.Text.StringBuilder object\n      tuncated to the requested length minus the length of the\n      suffix.\n      If the string is null or empty, it returns said value.\n      If the string is shorter than the requested length, it returns\n      the whole string.\n      For example:\n      \"The Extensions.cs NuGet package rocks!\".TrimLength(20)\n      will return \"The Extensions.cs...\" while\n      \"The Extensions.cs NuGet package rocks!\".TrimLength(20, \"\")\n      will return \"The Extensions.cs Nu\" and\n      \"The Extensions.cs NuGet package rocks!\".TrimLength(20, \">>\")\n      will return \"The Extensions.cs >>\"\n\n      Validate()\n      Makes quick work of conducting multiple types of validations on all\n      parameters.  It takes a parameter array of ErrorType and conducts\n      the appropriate validation such as null checking, non-zero checking\n      etc. against the parameter array passed.\n      For example:\n      Validate(Constants.ErrorTypeAll, amount, percent, years, frequency);\n      will perform all defined error checks against the amount, percent,\n      years and frequency parameters.\n\n      TrimStart()\n      Trims a given string rather than just a character, from the start of\n      the target string.  The traditional Trim() only allowed char values\n      to be trimmed.  TrimStart() solves that limitation in an easier to\n      fashion that using Substring().\n      For example:\n      \"https://blog.cjvandyk.com\".TrimStart(\"https://\")\n      will return\n      \"blog.cjvandyk.com\"\n\n      ValidateNoNulls()\n      Makes quick work of null validating all parameters you pass to it.\n      This method takes a variable number of parameters and validates that\n      all parameters are not null.  If a parameter is found to be null, a\n      ArgumentNullException is thrown.\n      For example:\n      void MyMethod(string str, double dbl, MyClass cls)\n      {\n      Universal.ValidateNoNulls(str, dbl, cls);\n      ...Your code here...\n      }\n      You do not have to pass all parameters, but can instead do this:\n      void MyMethod(string str, double dbl, MyClass cls)\n      {\n      Universal.ValidateNoNulls(str, cls);\n      ...Your code here...\n      }\n      where we chose NOT to validate the double dbl in this case.\n\n      Words()\n      This method returns the number of words used in the given string\n      object.\n      For example:\n      \"This is my test\".Words()\n      will return 4 whereas\n      \"ThisIsMyTest\".Words()\n      will return 1.\n\n      Wrn()\n      Write a Warning message to active channels (console, event log, file)\n      using the System.Logging class.",
  "requireLicenseAcceptance": true,
  "summary": "Extensions.dll contains extension methods that enhance existing C# classes thus making life easier for developers.\n      These methods are included:\n      BeginsWith()\n      Biggest()\n      CompoundInterest()\n      ContainsAny()\n      ContainsOnly()\n      CopyTo()\n      DoubleQuote()\n      Elevate()\n      Err()\n      ExceedsLength()\n      Get()\n      GetExecutingAssembly()\n      GetExecutingAssemblyName()\n      GetExecutingAssemblyFolder()\n      GetExecutingAssemblyFullPath()\n      GetFQDN()\n      GetNthPrime()\n      GetNthPrimeAsync()\n      GetSiteUrl()\n      GetTenantUrl()\n      GetTimeZoneString()\n      GetUrlRoot()\n      HasLower()\n      HasNumeric()\n      HasSymbol()\n      HasUpper()\n      HtmlDecode()\n      HtmlEncode()\n      Inf()\n      IsAlphabetic()\n      IsAlphaNumeric()\n      IsChar()\n      IsEmail()\n      IsEven()\n      IsLower()\n      IsNumeric()\n      IsOdd()\n      IsPrime()\n      IsStrong()\n      IsUpper()\n      IsUrlRoot()\n      IsVowel()\n      IsZipCode()\n      Left()\n      Lines()\n      Load()\n      LoremIpsum()\n      Match()\n      MorseCodeBeep()\n      NewCustomGuid()\n      Print()\n      printf()\n      Quote()\n      RemoveExtraSpace()\n      ReplaceTokens()\n      Retry()\n      Save()\n      Set()\n      SingleQuote()\n      Singularize()\n      Smallest()\n      Substring()\n      System.Logging class\n      System.Timer class\n      TimeStamp()\n      ToBinary()\n      ToEnum()\n      ToMorseCode()\n      ToQueryString\n      ToNumberBytes()\n      ToMB()\n      ToGB()\n      ToTB()...\n      ToTimeZone()\n      TrimLength()\n      TrimStart()\n      Validate()\n      ValidateNoNulls()\n      Words()\n      Wrn()",
  "title": "Extensions.dll contains extension methods that enhance existing C# classes thus making life easier for developers.\nSave(), Load() = easy state saving of any C# object,\nRetry() to easily handle 429 throttling errors,\nIsPrime(), GetNthPrime()etc.",
  "verbatimVersion": "3.4.600",
  "version": "3.4.600",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#dependencygroup/microsoft.identity.client",
          "@type": "PackageDependency",
          "id": "Microsoft.Identity.Client",
          "range": "[4.43.2, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#dependencygroup/system.configuration.configurationmanager",
          "@type": "PackageDependency",
          "id": "System.Configuration.ConfigurationManager",
          "range": "[6.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#dependencygroup/system.runtime",
          "@type": "PackageDependency",
          "id": "System.Runtime",
          "range": "[4.3.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#dependencygroup/system.security.cryptography.algorithms",
          "@type": "PackageDependency",
          "id": "System.Security.Cryptography.Algorithms",
          "range": "[4.3.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#dependencygroup/system.security.cryptography.x509certificates",
          "@type": "PackageDependency",
          "id": "System.Security.Cryptography.X509Certificates",
          "range": "[4.3.2, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#Extensions.cs.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 8712,
      "fullName": "Extensions.cs.nuspec",
      "length": 34637,
      "name": "Extensions.cs.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/Extensions.dll",
      "@type": "PackageEntry",
      "compressedLength": 79450,
      "fullName": "lib/Extensions.dll",
      "length": 1505280,
      "name": "Extensions.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/Extensions.pdb",
      "@type": "PackageEntry",
      "compressedLength": 54410,
      "fullName": "lib/Extensions.pdb",
      "length": 220672,
      "name": "Extensions.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/Extensions.xml",
      "@type": "PackageEntry",
      "compressedLength": 12743,
      "fullName": "lib/Extensions.xml",
      "length": 126696,
      "name": "Extensions.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/Microsoft.Identity.Client.dll",
      "@type": "PackageEntry",
      "compressedLength": 513077,
      "fullName": "lib/Microsoft.Identity.Client.dll",
      "length": 1462736,
      "name": "Microsoft.Identity.Client.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/Microsoft.Identity.Client.xml",
      "@type": "PackageEntry",
      "compressedLength": 153898,
      "fullName": "lib/Microsoft.Identity.Client.xml",
      "length": 1464336,
      "name": "Microsoft.Identity.Client.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Configuration.ConfigurationManager.dll",
      "@type": "PackageEntry",
      "compressedLength": 27579,
      "fullName": "lib/System.Configuration.ConfigurationManager.dll",
      "length": 86120,
      "name": "System.Configuration.ConfigurationManager.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Configuration.ConfigurationManager.xml",
      "@type": "PackageEntry",
      "compressedLength": 6807,
      "fullName": "lib/System.Configuration.ConfigurationManager.xml",
      "length": 43173,
      "name": "System.Configuration.ConfigurationManager.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Security.AccessControl.dll",
      "@type": "PackageEntry",
      "compressedLength": 15395,
      "fullName": "lib/System.Security.AccessControl.dll",
      "length": 35952,
      "name": "System.Security.AccessControl.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Security.AccessControl.xml",
      "@type": "PackageEntry",
      "compressedLength": 19627,
      "fullName": "lib/System.Security.AccessControl.xml",
      "length": 231631,
      "name": "System.Security.AccessControl.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Security.Permissions.dll",
      "@type": "PackageEntry",
      "compressedLength": 12898,
      "fullName": "lib/System.Security.Permissions.dll",
      "length": 27752,
      "name": "System.Security.Permissions.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Security.Permissions.xml",
      "@type": "PackageEntry",
      "compressedLength": 1040,
      "fullName": "lib/System.Security.Permissions.xml",
      "length": 4674,
      "name": "System.Security.Permissions.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Security.Principal.Windows.dll",
      "@type": "PackageEntry",
      "compressedLength": 9600,
      "fullName": "lib/System.Security.Principal.Windows.dll",
      "length": 18312,
      "name": "System.Security.Principal.Windows.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/System.Security.Principal.Windows.xml",
      "@type": "PackageEntry",
      "compressedLength": 10226,
      "fullName": "lib/System.Security.Principal.Windows.xml",
      "length": 90968,
      "name": "System.Security.Principal.Windows.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/net6.0/Extensions6.dll",
      "@type": "PackageEntry",
      "compressedLength": 29962,
      "fullName": "lib/net6.0/Extensions6.dll",
      "length": 80384,
      "name": "Extensions6.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/net48/Extensions.dll",
      "@type": "PackageEntry",
      "compressedLength": 79450,
      "fullName": "lib/net48/Extensions.dll",
      "length": 1505280,
      "name": "Extensions.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#lib/net48/Extensions.xml",
      "@type": "PackageEntry",
      "compressedLength": 12743,
      "fullName": "lib/net48/Extensions.xml",
      "length": 126696,
      "name": "Extensions.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#content/Images/Discord.png",
      "@type": "PackageEntry",
      "compressedLength": 897,
      "fullName": "content/Images/Discord.png",
      "length": 936,
      "name": "Discord.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#content/Images/Easy%20Date%20convertion%20GIF.gif",
      "@type": "PackageEntry",
      "compressedLength": 1298666,
      "fullName": "content/Images/Easy Date convertion GIF.gif",
      "length": 1354828,
      "name": "Easy Date convertion GIF.gif"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#content/Images/Extensions-64x64.png",
      "@type": "PackageEntry",
      "compressedLength": 6445,
      "fullName": "content/Images/Extensions-64x64.png",
      "length": 6446,
      "name": "Extensions-64x64.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#content/Images/Extensions.gif",
      "@type": "PackageEntry",
      "compressedLength": 3397391,
      "fullName": "content/Images/Extensions.gif",
      "length": 3708975,
      "name": "Extensions.gif"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#content/Images/Extensions.ico",
      "@type": "PackageEntry",
      "compressedLength": 43874,
      "fullName": "content/Images/Extensions.ico",
      "length": 1413422,
      "name": "Extensions.ico"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#content/Images/Extensions.png",
      "@type": "PackageEntry",
      "compressedLength": 40200,
      "fullName": "content/Images/Extensions.png",
      "length": 40320,
      "name": "Extensions.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "packageTypes": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.02.26.16.39.26/extensions.cs.3.4.600.json#packagetypes/Dependency",
      "@type": "PackageType",
      "name": "Dependency"
    }
  ],
  "tags": [
    "Extensions",
    "C#",
    "cjvandyk",
    "Crayveon",
    "429",
    "Retry-After",
    "ThrottlingHandler",
    "TimeZone",
    "CountWords",
    "Trim",
    "QueryString",
    "MorseCode",
    "Binary",
    "LoremIpsum",
    "ZipCode",
    "Vowel",
    "UrlRoot",
    "Elevate",
    "CompoundInterest",
    "StrongPassword"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}