{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.06.19.30.32/joti.bulk.0.5.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jonas Tillman",
  "catalog:commitId": "c01dbb2b-a102-41da-a7eb-957a91cef1f2",
  "catalog:commitTimeStamp": "2015-09-06T19:30:32.3215635Z",
  "copyright": "Jonas Tillman 2015",
  "created": "2015-09-06T19:29:42.583Z",
  "description": ".NET package for Bulk operations in SQL Server using DbConnection or DbContext (Entity Framework )",
  "id": "Joti.Bulk",
  "isPrerelease": false,
  "lastEdited": "2015-09-06T19:29:42.583Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "listed": false,
  "packageHash": "7FjgXAcBNjnaHLGfpmqNFL/Bg3Hfh+4Es0R/XjQOJUSUw64BzTOZyFh5SeljuXlB/RAVgGN5idlIWM1t/iziZA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 26760,
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": ".NET package for Bulk operations in SQL Server using DbConnection or DbContext (Entity Framework). It is based on extension methods available by using the namespace Joti.Connection.Bulk or Joti.Entity.Bulk.\n\nTested for \n    * .NET 4.0 - 4.5\n    * Entity Framework 4.2.0.0 - 6.1.1\n\nVersions:\n    * Future\n        - Check of primary keys handling\n    * 0.5.3(Current)   \n        - Fix of BulkUpdate with db-generated columns\n    * 0.5.2   \n        - Support for Azure Sql\n        - Support for Sql Server 2005\n    * 0.5.1   \n        - First public version \n    * 0.1-0.5\n        - Private development versions\n\nQuickStart/Crashcourse DBConnection:\n    These bulk methods extends Dbconnection and takes a DataTable or a list of objects.\n    Joti.Data.Helper.ToDataTable can convert objects to DataTable.\n    \n      var conn = New SqlConnection(connectionString);\n      conn.BulkDelete(myTableName);\n      conn.BulkInsert(insertObjects, myTableName);\n      conn.BulkUpdate(updateObjects, myTableName);\n      conn.BulkDelete(deleteObjects, myTableName);\n\n    It's possible to override the column constraints handling with the optional IColumnConstraints\n\nQuickStart/Crashcourse DbContext:\n    Decorate the DbContext with the IDbContextBulk from namespace Joti.Entity.Bulk:\n\n      public class MyOwnContext : DbContext, IDbContextBulk\n      {\n          public DbSet&lt;MyEntity&gt; MyEntities{ get; set; }\n      }\n\n    Create a context and use the extension methods:\n\n      var context = new MyOwnContext();\n      context.BulkDelete&lt;MyOwnContext, MyEntity&gt;();\n      context.BulkInsert(entitiesInsert);\n      context.BulkUpdate(entitiesUpdate);\n      context.BulkDelete(entitiesDelete);\n\n    It's possible to override the entity conversion with the optional IEntitiesConverter\n    \nCompability \n    * Azure Sql: Set Joti.Connection.UseSubstitutionForSqlTemporaryTables to true since Azure Sql does not like ordinary temp tables. \n    * Sql Server 2005: Set Joti.Connection.UseSubstitutionForSqlMerge to true since 2005 don't have Merge.",
  "requireLicenseAcceptance": false,
  "title": "Joti.Bulk",
  "verbatimVersion": "0.5.3",
  "version": "0.5.3",
  "tags": [
    "SQL",
    "Server",
    "Bulk",
    "Entity",
    "Framework",
    "DBConnection",
    "DBContext"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}