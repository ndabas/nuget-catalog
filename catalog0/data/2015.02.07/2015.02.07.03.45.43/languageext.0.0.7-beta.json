{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.45.43/languageext.0.0.7-beta.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Paul Louth",
  "catalog:commitId": "5bc342f9-4bb6-4da9-b302-420650c0b5ca",
  "catalog:commitTimeStamp": "2015-02-07T03:45:43.9404476Z",
  "created": "2014-11-22T16:31:03.107Z",
  "description": "Using and abusing the features of C# 6 to provide lots of helper functions and types, which, if you squint, can look like extensions to the language itself. \n\nThis package brings functional helpers for classic C# problems:\n\nPoor tuple support\nNull reference problem\nLack of lambda and expression inference\nVoid isn't a real type\nMutable lists and dictionaries\nThe awful 'out' parameter",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.45.43/languageext.0.0.7-beta.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://www.4four.org/images/lang-ext-logo.png",
  "id": "LanguageExt",
  "isPrerelease": true,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/louthy/language-ext/blob/master/LICENSE.md",
  "packageHash": "tF8PyD9QHzpFVEYFROtrBEDge1YojHPknlcEzuLKN8yInfa3TdJBU4GcyisU3OUU+whLigVQU59Kcmyon9nO9A==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 77840,
  "projectUrl": "https://github.com/louthy/language-ext",
  "published": "2014-11-22T16:31:03.107Z",
  "releaseNotes": "List pattern matching:\n\n        public int Sum(IEnumerable<int> list) =>\n            match( list,\n                   ()      => 0,\n                   x       => x,\n                   (x, xs) => x + Sum(xs) );\nExtension methods for lifting Option, OptionUnsafe, Either, EitherUnsafe when wrapped by an IEnumerable.\n\nTryOption<T>.AsEnumerable() now returns an IEnumerable<Either<T,Exception>> instead of burying the Exception as an empty list. The extension methods above can be used to easily extract the value from the IEnumerable<Either<T,Exception>>. This puts control back in the programmer's hands about what to do with the possible failed state of the TryOption.\n\ne.g.\n\n            // Ignore all errors, and return an empty list\n            var res = (from v in GetTryOptionError().AsEnumerable().FailWithEmpty()\n                       from r in range(1, 10)\n                       select v * r);\n\n            // Ignore the errors and provide a sensible default\n            var res = (from v in GetTryOptionValue(false).AsEnumerable().Failure( list(1) )\n                       from r in range(1, 10)\n                       select v * r);\n\n            // Recognise the error, and throw\n            var res = (from v in match( \n                                     GetTryOptionValue(true).AsEnumerable(), \n                                     Right: r => list(r),\n                                     Left:  ex => failwith<int>(\"broken: \" + ex.Message)\n                                 )\n                       from r in range(1, 10)\n                       select v * r);",
  "requireLicenseAcceptance": false,
  "summary": "",
  "title": "C# Functional Language Extensions",
  "version": "0.0.7-beta",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.45.43/languageext.0.0.7-beta.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.45.43/languageext.0.0.7-beta.json#dependencygroup/.netframework4.5/system.collections.immutable",
          "@type": "PackageDependency",
          "id": "System.Collections.Immutable",
          "range": "[1.1.32-beta, )"
        }
      ],
      "targetFramework": ".NETFramework4.5"
    }
  ],
  "tags": [
    "C#",
    "Functional",
    "Language",
    "Extension"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}