{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.05.09.46.10/objectwriter.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dogu Arslan",
  "catalog:commitId": "f5ab3695-e448-4547-9905-0be596b7d741",
  "catalog:commitTimeStamp": "2016-10-05T09:46:10.55301Z",
  "created": "2016-09-21T14:27:12.967Z",
  "description": "Sets the value to a property of an object by its path from the root.\n\n\n\nThe object can be a complex object and the property can be multi level deep nested property or it can be a property directly under the root. ObjectWriter will find the property using the property path parameter and update its value. Property path is the appended names of the properties visited from root to the end node property which we want to set, delimited by the delimiter string parameter.  \n\nUsage: \n\nFor setting up the properties directly under the object root:\nIe. LineItem class has an int property called ItemId\nLineItem lineItem = new LineItem();\n\nObjectWriter.Set(lineItem, \"ItemId\", 13, delimiter: null); \n\nFor setting up nested property multiple levels below the object root:\nIe. Invite class has a property called State, which has a property called Recipient, which has a property called Id.\nHere is how you can set the Id property (to string value of “outlook”) at the bottom of the object tree in a single line.\nInvite invite = new Invite();\nObjectWriter.Set(invite, \"State_Recipient_Id\", \"outlook\", delimiter: \"_\");\nThis will set invite.State.Recipient.Id to “outlook”\nYou also do not need to worry about instantiating the properties State or Recipient, ObjectWriter.Set method will instantiate those if they are null along the way.",
  "id": "ObjectWriter",
  "isPrerelease": false,
  "lastEdited": "2016-10-05T09:45:53.593Z",
  "listed": true,
  "packageHash": "qGQsZCMEkHsBx85fSksRjnz6VPJV0ObTxwabUeS/acEKYfQMFj6RQZKoctAhCepv047bJYoypu+ZKRpCUGZBlw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 5204,
  "published": "2016-09-21T14:27:12.967Z",
  "releaseNotes": "Initial release.",
  "requireLicenseAcceptance": false,
  "summary": "The object can be a complex object and the property can be multi level deep nested property or it can be a property directly under the root. ObjectWriter will find the property using the property path parameter and update its value. Property path is the appended names of the properties visited from root to the end node property which we want to set, delimited by the delimiter string parameter.",
  "title": "ObjectWriter",
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.05.09.46.10/objectwriter.1.0.0.json#ObjectWriter.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 850,
      "fullName": "ObjectWriter.nuspec",
      "length": 2265,
      "name": "ObjectWriter.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.05.09.46.10/objectwriter.1.0.0.json#lib/net40/ObjectWriter.dll",
      "@type": "PackageEntry",
      "compressedLength": 2731,
      "fullName": "lib/net40/ObjectWriter.dll",
      "length": 6656,
      "name": "ObjectWriter.dll"
    }
  ],
  "tags": [
    "Reflection",
    "Property",
    "Setter"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}