{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "PDFTron Systems Inc.",
  "catalog:commitId": "d1ea1a4d-2fea-4d29-9624-2981aad04fc9",
  "catalog:commitTimeStamp": "2020-12-01T02:30:58.8807207Z",
  "copyright": "Copyright 2020",
  "created": "2020-12-01T02:26:18.867Z",
  "description": "[PDF Reader. PDF Control. PDF Component]\n\nPDFNet SDK is the ultimate PDF toolkit.\n\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\n\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000). The extensive PDF library API supports most common use-case scenarios such as:\n*        PDF Viewing & Collaboration\n*        PDF Rasterization\n*        PDF Printing\n*        PDF Form filling and flattening\n*        PDF Split & Merge\n*        PDF Stamping\n*        Dynamic PDF generation (e.g. FlowDocument & Xaml to PDF)\n*        PDF Text extraction and indexing\n*        PDF Packages\n*        PDF Layers (OCGs)\n*        PDF Editing\n*        PDF Encryption\n*        Manipulate PDF bookmarks, links, and annotations.\n*        PDF Optimization\n*        PDF conversion to XML, HTML, XPS, SVG, TIF, etc.\n*        PDF/A Validation and Conversion\n*        PDF Redaction\n*        PDF Conversion from XPS, MS Office, HTML, XAML, TXT, TIFF etc.\n*        HTML to PDF Conversion",
  "iconFile": "images\\pdftron.png",
  "iconUrl": "https://pdftron.com/brand-assets/nuget.png",
  "id": "PDFNet",
  "isPrerelease": false,
  "lastEdited": "2020-12-01T02:30:48.71Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "ZBJ0TyOh7Uravv1GczKFaFcEeXp6APiS3Jqw1GLwOgXYAnqWLqLa3vhX7GeGL5iBPgY+lLEXzK2wE+Fjpv6bHw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 50664408,
  "projectUrl": "http://www.pdftron.com/pdfnet",
  "published": "2020-12-01T02:26:18.867Z",
  "releaseNotes": "New Features\nPAdES Digital Signing is now supported. (using the new function DigitalSignatureField.UseSubFilter)\nIncluded electron support for versions 6-10 in the pdfnet-node npm package.\nMSG conversion using Outlook interop is now supported.\nOther Changes\nRoughly categorized, not an exhaustive list.\nImprovements\n[pdf] Prevent Optimizer from throwing exceptions on documents with a corrupt destination nametree.\n[pdf] Improved time of verification output in Digital Signature Validation to better match other PDF solutions.\nUpdated PDFTron SDK on Linux to be compatible with older versions of Linux. This change allows PDFTron SDK to be compatible with GLIBC 2.9+. (formerly it was compatible with GLIBC 2.17+)\n[pdf] Will now handle locally served custom webfonts synchronously, automatically using them as a source for font substitutions.\n[pdf] Performance optimizations for global font caching. Improves font substitution performance on Windows, Linux, and Android.\n[image] Updated libpng to version 1.6.37.\nFixes\n[pdf] Fix for rare divide-by-0 error when blending transparency groups in overprint preview mode.\n[pdf] More robust treatment of corrupt documents where we are unable to recover any sort of page tree.\n[office] Fixed an off-by-one error in font coverage ranges, which could lead to poor font selection in isolated cases.\n[pdf] Initial demo license initialization is now fully thread safe. Previous logic had potential issues when Initialize was called simultaneously from multiple threads.\n[pdf] Fix for incorrect handling of some text outside of the basic multilingual plane when using ElementReader.\n[pdf] Match the behaviour of Acrobat reader when handling grayscale images with conflicting ICC and image pixel formats.\n[pdf] Fix for rendering of images with a black matte when blending edge pixels onto a fully transparent backdrop.\n[pdf] Improved logic for selecting charmaps from embedded truetype fonts. (in the case when there are multiple viable maps)\n[pdf] Fixed processing of encoding tables in the case where the font names resemble hex digits.\n[pdf] Fix for our handling of some JPEG 2000 encoded images where the pixel format in the image has conflicting data.\n[pdf] Better handling of pre-existing FontConfig configurations on modern Linux systems.\n[office] Fix for potential incorrect font selection when handling mixed arabic and latin text.\n[office] Tune substitute font scaling so that we are less likely to end up extreme scaling factors.\n[office] Better handling of symbolic fonts (eg. wingdings) on systems where we have a poor substitute font selection.\n[office] Fix for rare crash when processing Excel sheets with text that overflows cell boundaries.\n[office] Fix for potential crash when handling format strings with particular symbols in the string portion.\n[office] Better thread safety for internal font metric lookups.\n[office] Fix for failed doc conversions in some isolated cases where expected parts of the source file are missing.\n[office] Fix for incorrect scaling of some rotated picture elements.\n[office] Tuned list indentation for powerpoint files.\n[pdf] Avoid errors when Optimizing due to direct fonts in the PDF.\n[pdf] Fixed a memory leak in Digital Signature Verification. This also impacts Secure Timestamping and LTV support since these use Verification.\n[pdf] Fixed a rare issue where Linearized PDFs could be detected as not linearized.\n[pdf] Fixed an issue where Digital Signature Verification could disallow certain Long Term Validation updates.\n[pdf] Fixed issues with Unicode writing ElementWriter APIs in Node.js.\n[pdf] Updated line annotation appearance generation (used when displaying or creating lines) to better take line dashes into account. Previously the phase would be different than expected.\n[pdf] When printing the print and hidden annotation flags are now properly taken into account.\n[pdf] Handle corrupt document where the Annotations entry is not an array in FlattenAnnotations.\n[pdf] Better handle uncommon fonts with 3 byte charcodes.\n[svg] Handle corrupt cases where the PDF has graphics state changes in BT/ET blocks for PDF to SVG conversion.\n[pdf] Updated font Substitution on Apple platforms to handle unicode characters beyond the basic multilingual plane.\n[xfdf] Fixed a problem where in rare situations extracting XFDF from PDF could produce a document with an incorrect and large font size.\n[pdf] Long Term Validation support will now update rather than rewriting existing Long Term Validation data.\n[pdf] Fixed an error with Page.GetBoundingBox which could cause it to malfunction on corrupt documents with mismatched group begin and group end elements within a form. This also had an impact on Page flattening which uses this method.\n[pdf] Diff.AppendVisualDiff will now better take into account the page rotation and cropping present in the input pages.\n[xfdf] Simplified the conditions for exporting annotation appearances in XFDF. In particular they will now be included even if that the annotation type is unsupported or certain annotation entries are missing.\n[pdf] Fix for parsing color from the Default Style (DS) entry. This improves the results after importing certain XFDF files.\n[pdf] Fixed a memory leak in FilterWriter.WriteBuffer for .Net Core.\n[xfdf] Fixed a problem where annotations with certain goto actions could fail to match during FDFUpdate.",
  "requireLicenseAcceptance": false,
  "summary": "PDFNet SDK is the ultimate PDF toolkit.\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000).",
  "title": "PDFNet SDK",
  "verbatimVersion": "8.1.0",
  "version": "8.1.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#dependencygroup/.netframework4.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#PDFNet.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3301,
      "fullName": "PDFNet.nuspec",
      "length": 8109,
      "name": "PDFNet.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#lib/net40/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 15717502,
      "fullName": "lib/net40/PDFNet.dll",
      "length": 35700352,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#lib/net40/PDFNetLoader.dll",
      "@type": "PackageEntry",
      "compressedLength": 6897,
      "fullName": "lib/net40/PDFNetLoader.dll",
      "length": 11904,
      "name": "PDFNetLoader.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#build/net40/PDFNet.targets",
      "@type": "PackageEntry",
      "compressedLength": 496,
      "fullName": "build/net40/PDFNet.targets",
      "length": 1040,
      "name": "PDFNet.targets"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#build/net40/PDFNet/x86/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 15717502,
      "fullName": "build/net40/PDFNet/x86/PDFNet.dll",
      "length": 35700352,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#build/net40/PDFNet/x86/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 250840,
      "fullName": "build/net40/PDFNet/x86/PDFNet.xml",
      "length": 1785720,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#build/net40/PDFNet/x64/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 18487119,
      "fullName": "build/net40/PDFNet/x64/PDFNet.dll",
      "length": 43757696,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#build/net40/PDFNet/x64/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 250717,
      "fullName": "build/net40/PDFNet/x64/PDFNet.xml",
      "length": 1785735,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 141,
      "fullName": "tools/install.ps1",
      "length": 203,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 1575,
      "fullName": "readme.txt",
      "length": 4102,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#PDFNet_License.pdf",
      "@type": "PackageEntry",
      "compressedLength": 213378,
      "fullName": "PDFNet_License.pdf",
      "length": 242941,
      "name": "PDFNet_License.pdf"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#images/pdftron.png",
      "@type": "PackageEntry",
      "compressedLength": 1722,
      "fullName": "images/pdftron.png",
      "length": 1748,
      "name": "pdftron.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 60,
      "fullName": "LICENSE.txt",
      "length": 64,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.12.01.02.30.58/pdfnet.8.1.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "PDF",
    "viewer",
    "control",
    "component",
    "reader",
    "print",
    "forms",
    "split",
    "merge",
    "stamp",
    "XPS",
    "SVG",
    "HTML",
    "convert",
    "optimize",
    "redact",
    "encrypt",
    "pdftron",
    "pdfviewer",
    "rasterizer",
    "pdf2image",
    "converter",
    "WPF",
    "WinForms",
    "extract",
    "sign",
    "annotate",
    "pdf2html",
    "html2pdf",
    "pdf2svg"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}