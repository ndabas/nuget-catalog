{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.21.20.11.11/wildfire.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Riju Vashisht,Chris Shum",
  "catalog:commitId": "9fc54cb7-fd9d-4ffd-a2d1-c9fbac1a1d4f",
  "catalog:commitTimeStamp": "2015-09-21T20:11:11.4638154Z",
  "created": "2015-09-21T20:10:32.483Z",
  "description": "var queryBuilder = new QueryBuilder();\n\n            ////Add table from there you want to select.\n            var table = new FromTable(\"Table1\", \"t1\");\n\n            //// Perform a join \n            table.JoinOn(\"Table2\", \"t2\", \"Column1\", \"Column2\", JoinType.Inner);\n\n            ////add table\n            queryBuilder.AddFromTable(table.TableString);\n\n            ////Create Where clauses using predicates query builder provides you methods to add predicate\n            ////there are two ways you can add predicate  either by string or predicate object\n            var textMatchExpression = new Predicate(\"t1.[Column3] like 'Joe'\");\n\n            ////AddPredicate also takes just string if you have only one where condition.\n            ////add predicate  and specify the operation type supports and or and not\n            queryBuilder.AddPredicate(textMatchExpression, OperationType.And);\n\n            var datesExpressions1 = new List<string>();\n            datesExpressions1.Add(\"f.[Column5] >= '2015-09-01'\");\n            datesExpressions1.Add(\"f.[Column6] <= '2015-12-31'\");\n\n            var dateExpressions2 = new List<string>();\n            dateExpressions2.Add(\"f.[Column7] >= '2015-10-01'\");\n            dateExpressions2.Add(\"f.[Column8] >= '2015-12-31'\");\n            \n            //add groups of predicates\n            queryBuilder.AddPredicate(datesExpressions1, OperationType.And, OperationType.Or);\n            queryBuilder.AddPredicate(dateExpressions2, OperationType.And, OperationType.Empty);\n\n            //Order by \n            queryBuilder.Query.OrderBy(\"Column1\", true);\n\n            //Fetch overloaded with offset and number of rows.\n            queryBuilder.Query.FetchNext(\"2\",\"20\");\n\n            queryBuilder.GenerateQuery();",
  "id": "WildFire",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "https://github.com/optimus4me/WildFire/blob/master/LICENSE",
  "listed": true,
  "packageHash": "Uf19ZTOkYavz8V7MXfi6vfMnntz6MMD4rzT92Z+UJol4jz4RtS5AfApSxYflbmaKKbMnWuyxhpH44/CXcwUVOg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 16854,
  "projectUrl": "https://github.com/optimus4me/WildFire",
  "published": "2015-09-21T20:10:32.483Z",
  "releaseNotes": "1.0.2 Updated logic for groups and subgroups in predicates.\n1.0.3 Added support for order by and Fetch Next also now queryBuilder.Query object gives query string.(Breaking change)\n1.0.4 Multiple tables will not have repeated table names.",
  "requireLicenseAcceptance": false,
  "summary": "A .Net Library for reusable code for data access from database , collections, and other utility classes.",
  "title": "WildFire",
  "verbatimVersion": "1.0.4",
  "version": "1.0.4",
  "tags": [
    "Dynamic",
    "Query",
    "SQL",
    "Collections."
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}