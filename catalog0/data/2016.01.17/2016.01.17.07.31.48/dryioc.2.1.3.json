{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.01.17.07.31.48/dryioc.2.1.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Maksim Volkau",
  "catalog:commitId": "2eecd46e-983f-4eef-8271-66fc26c8fbb0",
  "catalog:commitTimeStamp": "2016-01-17T07:31:48.6671959Z",
  "copyright": "Copyright Â© 2013 Maksim Volkau",
  "created": "2016-01-17T07:31:40.64Z",
  "description": "DryIoc is fast, small, full-featured IoC Container for .NET",
  "id": "DryIoc",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "http://opensource.org/licenses/MIT",
  "listed": true,
  "packageHash": "8L4HCwpdFSfz2Pb+oqNHDUisB+WoCUcAMBeN9U6IUxqqUFLneIVrCiyHu/8gVBrxzYjRh0jFHMSqgJcgs0HN5Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 480602,
  "projectUrl": "https://bitbucket.org/dadhi/dryioc",
  "published": "2016-01-17T07:31:40.64Z",
  "releaseNotes": "v2.1.3\n          - fixed: #224: Enumerable wrapped in Func loses the information about Func wrapper, causing incorrect scope lifetime validation\n          v2.1.2\n          - fixed: #222: Resolving as IEnumerable silence the dependency resolution errors and just skips the unresolved item\n          - fixed: #218: Apply decorators registered for service type when resolving with required service type\n          v2.1.1\n          - fixed: #213: Lazy Singletons should be resolved after container is disposed\n          - fixed: #212: ResolveMany of object with generic required service type is failing with ArgumentException\n          v2.1.0\n          - added: #205: Add customizable IfAlreadyRegistered default value per container\n          - added: #204: Add ResolveMany of objects wout need to specify ResolveMany{Object}\n          - fixed: #203: RegisterMany should exclude ValueType and general purpose service types IEquatable, IComparable\n          v2.0.2\n          - fixed: #201: Mutithreading issue when RegisterInstance() is used within OpenScope()\n          v2.0.1\n          - fixed: #200 Multiple instances for Singleton created when Container is shared among multiple threads\n          v2.0.0\n          - Support for PCL 328 and 259 profiles, and .NET Core via dotnet moniker.\n          - More consistent and complete API surface.\n          - Diagnostics of potential resolution problems with `container.VerifyResolutions()`.\n          - Improved registration and first resolution time.\n          - Support of really large object graphs.\n          - Possibility of compile-time factory delegate generation. Utilized by DryIocZero.\n          - Ambient current scope and `Reuse.InWebRequest` for ASP.NET integration.\n          - Support for static and instance factory methods in addition to constructor, including support for method parameters injection.\n          - Powerful open-generics support including variance, constraints, open-generic factory methods in open-generic classes.\n          - Service key of arbitrary type. The only requirement for key type is to implement `GetHashCode` and `Equals`.\n          - Resolve as `KeyValuePair` to get service key with service object.\n          - Register with condition for resolution.\n          - Required service type support: e.g. `var serviceObjects = c.Resolve{object[]}(typeof(Service));`.\n          - Optional parameters support.\n          - Fine-grained control over injection of parameters, properties, and fields.\n          - Injection of primitive values.\n          - Control how reused service is stored and disposed via `weaklyReferenced` and `preventDisposal` setups.\n          - Resolve service collection as `IList{T}`, `ICollection{T}`, `IReadOnlyList{T}`, `IReadOnlyCollection{T}`.\n          - Register once, existing registration update, unregister.\n          - removed: Compilation to DynamicAssembly. DryIoc is fast enough without its complexity.",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "2.1.3",
  "version": "2.1.3",
  "tags": [
    "IoC",
    "Container",
    "Inversion-of-Control",
    "DI",
    "Dependency-Injection",
    "DRY",
    "Service-Provider",
    "Factory"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}