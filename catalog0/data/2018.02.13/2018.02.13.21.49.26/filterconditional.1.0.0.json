{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.13.21.49.26/filterconditional.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Vitek Ivanov",
  "catalog:commitId": "0bc91dba-0751-4a8e-8255-2a695d313e4c",
  "catalog:commitTimeStamp": "2018-02-13T21:49:26.2294261Z",
  "copyright": "Copyright Vitek Â© 2016",
  "created": "2016-03-02T08:24:37.993Z",
  "description": "var fb = new ConditionalFilterGenerator<Your Entity>(Request.RequestUri.ParseQueryString(), new ConditionalFilterBuilder());\n\nCOMMENT:\nfirst example\n\nfb.And<int>((e, i) => e.Id > i, \"id\")\n                .And<int>((e, i) => e.Id < 4, \"Id\")\n                .Or<string>((e, s) => e.Name.StartsWith(s), \"name\");\nCOMMENT:\nsecond example. This example contains in section 'Or' parameter type of boolean.\nThis parameter is talking if name-value 'Id' has been existed early in expression it is will not be used\nNOTE: If name-value \"id\" or \"name\" not exists in the collection QueryString then expression will be skipped and will be used the expression 'Or' \n\nfb.And<int, IEnumerable<string>>((e, i, a) => e.Id == i && a.Any(s => e.Name.StartsWith(s)), \"id\", \"name\")\n                .Or<int>((e, i) => e.Id == 5, false, \"id\");\n\nCOMMENT:predicate result\nvar result = fb.GetConditional();\n\n//In Controller will need add attribute\n[ModelBinder(typeof(Your ModelBinder))]Expression<Func<Your Entity, bool>> pr  ",
  "iconUrl": "http://iconizer.net/files/Plastic_XP/orig/filter_data.png",
  "id": "FilterConditional",
  "isPrerelease": false,
  "lastEdited": "2018-02-13T21:49:17.38Z",
  "listed": true,
  "packageHash": "ognkbweYaqOPu/7HuILWfF81N+JZAu9/XdSSelyhxisnq2H4TfkoA7QVpe8qwCTgCJBZw9PlNgymgYM/+GKWcw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 10831,
  "published": "2016-03-02T08:24:37.993Z",
  "requireLicenseAcceptance": false,
  "summary": "Filter for working with data from the use of ASP MVC Model Binder",
  "title": "Filter Conditional ASP MVC",
  "verbatimVersion": "1.0.0.0",
  "version": "1.0.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.13.21.49.26/filterconditional.1.0.0.json#FilterConditional.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 870,
      "fullName": "FilterConditional.nuspec",
      "length": 1781,
      "name": "FilterConditional.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.13.21.49.26/filterconditional.1.0.0.json#lib/net45/FilterConditional.dll",
      "@type": "PackageEntry",
      "compressedLength": 7470,
      "fullName": "lib/net45/FilterConditional.dll",
      "length": 17408,
      "name": "FilterConditional.dll"
    }
  ],
  "tags": [
    "ASP.MVC",
    "Filter",
    "ASP"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}