{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jaime Amesti",
  "catalog:commitId": "bfeac88f-fe18-465b-927e-a1c2c0fff0df",
  "catalog:commitTimeStamp": "2018-12-08T14:25:56.1186618Z",
  "copyright": "Â© 2015 Jaime Amesti All Rights Reserved",
  "created": "2015-05-11T08:13:46.623Z",
  "description": "HTTP server mock is a really useful tool for testing, it will help you to mock HTTP requests.\n\nSOME EXAMPLES\n\n Delete\n \n    using (var hserver = new HttpServerMock(TestServerPort))\n            {\n                hserver.SetUpExpectation(HttpMethod.DELETE, \"http://localhost:50000/user/23\")\n                    .ExpectedRequestHeader(\"test\", \"test1\")\n                    .Response(\n                        HttpStatusCode.OK,\n                        HttpRequestContentType.Json,\n                        new ResponseTestClass { Name = \"response\", IsOld = true, Age = 12 });\n\n                var restClient = new RestClient(this.serverBaseUrl);\n                var request = new RestRequest(\"/user/23\");\n                request.AddJsonBody(new { Name = \"test\", Id = 23 });\n                request.AddHeader(\"test\", \"test1\");\n                request.Method = Method.DELETE;\n\n                var response = restClient.Execute<ResponseTestClass>(request);\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\n                hserver.VerifyAllRequestExpectationsAndUnexpectedRequests();\n            }\n\n\t\t\t\n Post\n \n    using (var hserver = new HttpServerMock(TestServerPort))\n            {\n                hserver.SetUpPostExpectation(\"http://localhost:50000/user/23\")\n                    .ExpectedNumberOfCalls(1)\n                    .ExpectedContent(new { Name = \"test\", Id = 23 }, HttpRequestContentType.Json)\n                    .ExpectedRequestHeader(\"test\", \"test1\")\n                    .Response(HttpStatusCode.OK, HttpRequestContentType.Json, new ResponseTestClass { Name = \"response\", IsOld = true, Age = 12 });\n\n                var restClient = new RestClient(this.serverBaseUrl);\n                var request = new RestRequest(\"/user/23\");\n                request.AddJsonBody(new { Name = \"test\", Id = 23 });\n                request.AddHeader(\"test\", \"test1\");\n                request.Method = Method.POST;\n\n                var response = restClient.Execute<ResponseTestClass>(request);\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\n                Assert.IsNotNull(response.Data, \"The response is empty.\");               \n                Assert.AreEqual(\"response\", response.Data.Name, \"The response data is not the expected.\");\n                Assert.IsTrue(response.Data.IsOld, \"The response data is not the expected.\");\n                Assert.AreEqual(12, response.Data.Age, \"The response data is not the expected.\");\n\n                hserver.VerifyAllRequestExpectationsAndUnexpectedRequests();\n            }\t\t\n\n Using Relatives Uris\n \n    using (var hserver = new HttpServerMock(TestServerPort))\n            {\n                hserver.SetUpGetExpectation(\"user/23\")\n                    .Response(HttpStatusCode.OK);\n\n                var restClient = new RestClient(this.serverBaseUrl);\n                var request = new RestRequest(\"/user/23\") { Method = Method.GET };\n\n                var response = restClient.Execute(request);\n                Assert.AreEqual(HttpStatusCode.OK, response.StatusCode, \"The respond status code is not the expected.\");\n                Assert.IsNull(response.ErrorException, \"The request contains an exception.\");\n            }\n\t\t\t\n Setting up a default status code\n \n    using (var hserver = new HttpServerMock(TestServerPort))\n            {\n                hserver.ServerRequestsState.DefaultRespondStatusCode = HttpStatusCode.NotModified;\n\n                var restClient = new RestClient(this.serverBaseUrl);\n                var request = new RestRequest(\"/user/23\");\n                request.Method = Method.GET;\n\n                var response = restClient.Execute<ResponseTestClass>(request);\n                Assert.AreEqual(HttpStatusCode.NotModified, response.StatusCode, \"The respond status code is not the expected.\");\n            }",
  "iconUrl": "http://s9.postimg.org/y0i7at1mz/Location_HTTP_icon.png",
  "id": "HttpServerMock",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2018-12-08T14:25:31.57Z",
  "listed": true,
  "packageHash": "2LaIEncOStXu50vOAi+Fcd/GIdyTO8VmXUufIFaP6RWHthpzr4UzYg44oIyx8VAVBL1a5vE575PtyhIIS5gTSQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 28442,
  "projectUrl": "http://jaimeamesti.github.io/HttpServerMock/",
  "published": "2015-05-11T08:13:46.623Z",
  "releaseNotes": "Classes renaming.",
  "requireLicenseAcceptance": false,
  "summary": "HTTP server mock is a really useful tool for testing, it will help you to mock HTTP requests.",
  "title": "HTTP Server Mock",
  "verbatimVersion": "0.0.91",
  "version": "0.0.91",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json#dependencygroup/.netframework4.5.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json#dependencygroup/.netframework4.5.1/microsoft.aspnet.webapi.selfhost",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNet.WebApi.SelfHost",
          "range": "[5.2.0, )"
        }
      ],
      "targetFramework": ".NETFramework4.5.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json#HttpServerMock.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1272,
      "fullName": "HttpServerMock.nuspec",
      "length": 5105,
      "name": "HttpServerMock.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json#lib/net451/HttpServerMock.dll",
      "@type": "PackageEntry",
      "compressedLength": 12145,
      "fullName": "lib/net451/HttpServerMock.dll",
      "length": 28160,
      "name": "HttpServerMock.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json#lib/net451/HttpServerMock.xml",
      "@type": "PackageEntry",
      "compressedLength": 2600,
      "fullName": "lib/net451/HttpServerMock.xml",
      "length": 25714,
      "name": "HttpServerMock.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.08.14.25.56/httpservermock.0.0.91.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Http",
    "Server",
    "Mock",
    "Testing",
    "Integration",
    "Test",
    "System"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}