{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.04.08.11.09.57/objectflattenerrecomposer.1.1.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dogu Arslan",
  "catalog:commitId": "ed00e029-90d2-4a0e-961e-bba71b8ac983",
  "catalog:commitTimeStamp": "2016-04-08T11:09:57.7370559Z",
  "copyright": "Copyright 2016",
  "created": "2016-03-14T14:15:46.063Z",
  "description": "Provides functionality to flatten complex objects into EntityProperty dictionary and functionality to recompose original complex object from the flattened property dictionary. One usage is that the API allows writing any complex object with nested properties into Azure Table Storage in flattened form which is not normally possible by using the Azure Storage Client SDK.\n\nThe API also allows you to save Enum, TimeSpan, DateTimeOffset, Nullable property types to Azure Table Storage which is also not possible via Azure Storage Client SDK.\n\nBlog: https://doguarslan.wordpress.com/2016/02/03/writing-complex-objects-to-azure-table-storage/\n\nUsage: \n\nusing ObjectFlattenerRecomposer;\n\n//Flatten object and convert it to EntityProperty Dictionary\nDictionary<string, EntityProperty> flattenedProperties = EntityPropertyConverter.Flatten(complexObject);\n\n// Create a DynamicTableEntity and set its PK and RK\nDynamicTableEntity dynamicTableEntity = new DynamicTableEntity(partitionKey, rowKey);\n\ndynamicTableEntity.Properties = flattenedProperties;\n\n// Write the DynamicTableEntity to Azure Table Storage using client SDK\n\n//Read the entity back from AzureTableStorage as DynamicTableEntity using the same PK and RK\nDynamicTableEntity entity = [Read from Azure using the PK and RK];\n\n//Convert the DynamicTableEntity back to original complex object.\nImagine original complexObject was of type Order.\n\nOrder order = EntityPropertyConverter.ConvertBack<Order>(entity.Properties);",
  "id": "ObjectFlattenerRecomposer",
  "isPrerelease": false,
  "lastEdited": "2016-04-08T11:09:20.41Z",
  "listed": true,
  "packageHash": "FnmHWVU6u3x23YWKFg25gROx6NuV1uJglXtAFcoPLOpB889EanjaUfv6XtvVawNH6/h6a1+OPLP3TspVpjxFrA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 11649,
  "projectUrl": "https://doguarslan.wordpress.com/2016/02/03/writing-complex-objects-to-azure-table-storage/",
  "published": "2016-03-14T14:15:46.063Z",
  "releaseNotes": "\n- Added Free BSD Licence.txt to the package\n- Fixed a potential arithmetic overflow exception on object recomposition for ulong and uint properties",
  "requireLicenseAcceptance": false,
  "summary": "using ObjectFlattenerRecomposer;\n\n//Flatten object and convert it to EntityProperty Dictionary\nDictionary<string, EntityProperty> flattenedProperties = EntityPropertyConverter.Flatten(complexObject);\n\n// Create a DynamicTableEntity and set its PK and RK\nDynamicTableEntity dynamicTableEntity = new DynamicTableEntity(partitionKey, rowKey);\n\ndynamicTableEntity.Properties = flattenedProperties;\n\n// Write the DynamicTableEntity to Azure Table Storage using client SDK\n\n//Read the entity back from AzureTableStorage as DynamicTableEntity using the same PK and RK\nDynamicTableEntity entity = [Read from Azure using the PK and RK];\n\n//Convert the DynamicTableEntity back to original complex object.\nImagine original complexObject was of type Order.\n\nOrder order = EntityPropertyConverter.ConvertBack<Order>(entity.Properties);\n\nThat's all:)",
  "title": "Object Flattener Recomposer",
  "verbatimVersion": "1.1.2.0",
  "version": "1.1.2",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.04.08.11.09.57/objectflattenerrecomposer.1.1.2.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2016.04.08.11.09.57/objectflattenerrecomposer.1.1.2.json#dependencygroup/windowsazure.storage",
          "@type": "PackageDependency",
          "id": "WindowsAzure.Storage",
          "range": "[4.3.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.04.08.11.09.57/objectflattenerrecomposer.1.1.2.json#ObjectFlattenerRecomposer.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1044,
      "fullName": "ObjectFlattenerRecomposer.nuspec",
      "length": 3396,
      "name": "ObjectFlattenerRecomposer.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.04.08.11.09.57/objectflattenerrecomposer.1.1.2.json#lib/net45/ObjectFlattenerRecomposer.dll",
      "@type": "PackageEntry",
      "compressedLength": 6607,
      "fullName": "lib/net45/ObjectFlattenerRecomposer.dll",
      "length": 14336,
      "name": "ObjectFlattenerRecomposer.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.04.08.11.09.57/objectflattenerrecomposer.1.1.2.json#content/License.txt",
      "@type": "PackageEntry",
      "compressedLength": 801,
      "fullName": "content/License.txt",
      "length": 1504,
      "name": "License.txt"
    }
  ],
  "tags": [
    "Object",
    "Flatten",
    "Recompose",
    "Azure",
    "Table",
    "Storage",
    "EntityProperty",
    "DynamicTableEntity",
    "POCO",
    "Converter"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}