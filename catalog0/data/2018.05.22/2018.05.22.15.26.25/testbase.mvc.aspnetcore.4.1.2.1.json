{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Chris F Carroll",
  "catalog:commitId": "f49e10f4-2a36-47b4-bf81-ba5bd6e71c10",
  "catalog:commitTimeStamp": "2018-05-22T15:26:25.6449328Z",
  "copyright": "(c) Chris F. Carroll, 2013-2018",
  "created": "2018-05-22T15:22:42.743Z",
  "description": "*TestBase* gives you a flying start with \n- fluent assertions that are easy to extend\n- sharp error messages\n- tools to help you test with “heavyweight” dependencies on \n    - AspNetCore.Mvc, AspNet.Mvc or WebApi Contexts\n\t- HttpClient\n\t- Ado.Net\n\t- Streams & Logging\n\nChainable fluent assertions get you to the point concisely:\n```\nControllerUnderTest.Action()\n  .ShouldbeViewResult()\n  .ShouldHaveModel<TModel>()\n    .ShouldEqualByValue(expected, exceptForTheseFields);\n    .Reference\n      .ShouldMatchIgnoringCase(\"I expected this\");\n  \nControllerUnderTest.Action()\n  .ShouldBeRedirectToRouteResult()\n  .ShouldHaveRouteValue(\"\"expectedKey\"\", [Optional] \"\"expectedValue\"\");\n\nShouldHaveViewDataContaining(), ShouldBeJsonResult() etc.\n```\n\nQuickly test AspNetCore controllers with zero setup using `controllerUnderTest.WithControllerContext()` :\n\n```\n[TestFixture]\npublic class WhenTestingControllersUsingFakeControllerContext\n{\n   [Test]\n    public void ControllerUrlAndOtherPropertiesShouldWorkAsExpected__GivenControllerContext()\n    {\n        var uut = new FakeController().WithControllerContext();\n        uut.Url.Action(\"\"a\"\", \"\"b\"\").ShouldEqual(\"\"/b/a\"\");\n        uut.ControllerContext.ShouldNotBeNull();\n        uut.HttpContext.ShouldBe(uut.ControllerContext.HttpContext);\n        uut.ControllerContext.HttpContext.Request.ShouldNotBeNull();\n        uut.Request.ShouldNotBeNull();\n        uut.Response.ShouldNotBeNull();\n        uut.Url.ShouldNotBeNull();\n        uut.ViewData.ShouldNotBeNull();\n        uut.TempData.ShouldNotBeNull();\n\n        uut.MyAction(param)\n            .ShouldBeViewResult()\n            .ShouldHaveModel<YouSaidViewModel>()\n            .YouSaid.ShouldBe(param);\n    }\n\n    [Test]\n    public void ShouldBeViewWithModel_ShouldAssertViewResultAndNameAndModel_And_UrlHelper_ShouldWork()\n    {\n      var moreServicesFromDI=TestServerBuilder.RunningServerUsingStartup<TStartup>().Host.ServiceProvider;\n\n      var controllerUnderTest = \n            new AController()\n                .WithControllerContext(virtualPathTemplate:\"\"/{Action}/Before/{Controller}\"\");\n\n        var result= controllerUnderTest\n                .Action(\"\"SomeController\"\",\"\"SomeAction\"\")\n                .ShouldBeViewWithModel<AClass>(\"\"ViewName\"\");\n                    .FooterLink\n                    .ShouldBe(\"\"/SomeAction/Before/SomeController\"\");\n    }\n}\n```\n\n... Or test against complex application dependencies using `HostedMvcTestFixtureBase` and specify your `Startup` class:\n\n```\n[TestFixture]\npublic class WhenTestingControllersUsingAspNetCoreTestTestServer : HostedMvcTestFixtureBase\n{\n\n    [TestCase(\"\"/dummy/action?id={id}\"\")]\n    public async Task Get_Should_ReturnActionResult(string url)\n    {\n        var id=Guid.NewGuid();\n        var httpClient=GivenClientForRunningServer<Startup>();\n        GivenRequestHeaders(httpClient, \"\"CustomHeader\"\", \"\"HeaderValue1\"\");\n            \n        var result= await httpClient.GetAsync(url.Formatz(new {id}));\n\n        result\n            .ShouldBe_200Ok()\n            .Content.ReadAsStringAsync().Result\n            .ShouldBe(\"\"Content\"\");\n    }\n\n    [TestCase(\"\"/dummy\"\")]\n    public async Task Put_Should_ReturnA(string url)\n    {\n        var something= new Fixture().Create<Something>();\n        var jsonBody= new StringContent(something.ToJSon(), Encoding.UTF8, \"\"application/json\"\");\n        var httpClient=GivenClientForRunningServer<Startup>();\n        GivenRequestHeaders(httpClient, \"\"CustomHeader\"\", \"\"HeaderValue1\"\");\n\n        var result = await httpClient.PutAsync(url, jsonBody);\n\n        result.ShouldBe_202Accepted();\n        DummyController.Putted.ShouldEqualByValue( something );\n    }\n}\n```\n\nSee also\n - TestBase\n - TestBase.Mvc for Mvc4 and Mvc 5\n - TestBase.HttpClient.Fake\n - TestBase.AdoNet\n - Serilog.Sinks.ListOfString \n - Extensions.Logging.ListOfString",
  "id": "TestBase.Mvc.AspNetCore",
  "isPrerelease": false,
  "lastEdited": "2018-05-22T15:25:53.573Z",
  "listed": true,
  "packageHash": "OWp2h6iOxJvzmtBB1QWifO6b2orvlwLQwLu8L+dIAzAuqog1ceq034qaDO/LOips6wZ4WYP+IA0UaMmsGuSj/Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 25135,
  "projectUrl": "http://github.com/chrisfcarroll/TestBase",
  "published": "2018-05-22T15:22:42.743Z",
  "releaseNotes": "ChangeLog\n---------\n4.1.2.0 TestBase.Mvc.AspNetCore provides WithControllerContext()\n4.0.7.0 Added TestBase.FakeHttpClient. Added Should(predicate,...) as synonym of ShouldHave(predicate,...)\n4.0.6.2 TestBase.Mvc can run controller actions on aspnetcore using controller.WithControllerContext()\n4.0.5.2 TestBase.Mvc partially ported to netstandard20 / AspNetCore\n4.0.4.1 StreamShoulds\n4.0.3.0 StringListLogger as MS Logger and as Serilogger\n4.0.1.0 Port to NetCore\n3.0.3.0 Improves FakeDb setup\n3.0.x.0 adds and/or corrects missing Shoulds()\n2.0.5.0 adds some intellisense and FakeDbConnection.Verify(..., message,args) overload",
  "repository": "",
  "requireLicenseAcceptance": false,
  "title": "TestBase – Rich, fluent assertions and tools for testing with heavyweight dependencies: AspNetCore, AdoNet, HttpClient, AspNet.Mvc, Streams, Logging",
  "verbatimVersion": "4.1.2.1",
  "version": "4.1.2.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#dependencygroup/.netstandard2.0/testbase",
          "@type": "PackageDependency",
          "id": "TestBase",
          "range": "[4.1.2.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#dependencygroup/.netstandard2.0/microsoft.aspnetcore",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore",
          "range": "[2.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#dependencygroup/.netstandard2.0/microsoft.aspnetcore.mvc",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Mvc",
          "range": "[2.0.2, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#dependencygroup/.netstandard2.0/microsoft.aspnetcore.testhost",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.TestHost",
          "range": "[2.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#dependencygroup/.netstandard2.0/moq",
          "@type": "PackageDependency",
          "id": "Moq",
          "range": "[4.8.2, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#TestBase.Mvc.AspNetCore.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2245,
      "fullName": "TestBase.Mvc.AspNetCore.nuspec",
      "length": 6099,
      "name": "TestBase.Mvc.AspNetCore.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.05.22.15.26.25/testbase.mvc.aspnetcore.4.1.2.1.json#lib/netstandard2.0/TestBase.Mvc.AspNetCore.dll",
      "@type": "PackageEntry",
      "compressedLength": 19779,
      "fullName": "lib/netstandard2.0/TestBase.Mvc.AspNetCore.dll",
      "length": 51712,
      "name": "TestBase.Mvc.AspNetCore.dll"
    }
  ],
  "tags": [
    "nunit",
    "test",
    "unittest",
    "tdd",
    "fluent",
    "assertions",
    "mock",
    "mvc",
    "aspnetmvc",
    "aspnetcore",
    "aspnetcoremvc"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}