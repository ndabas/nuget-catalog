{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.23.14.27.43/expresswalker.core.2.1.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Ivan Kopcanski",
  "catalog:commitId": "3788b197-25aa-4ce4-b207-ab0420f24419",
  "catalog:commitTimeStamp": "2019-04-23T14:27:43.7333565Z",
  "copyright": "Ivan Kopcanski 2019",
  "created": "2019-04-23T14:23:30.677Z",
  "description": "ExpressWalker provides a generic way to examine and change any object graph in fashion similar to \"Visitor Pattern\". You can build generic hierarchy composition (visitor) that can visit and change any object's property, basing on configuration. Relies on expression trees while visiting objects (uses reflection only once while building a visitor). That's why IT IS WAY FASTER than custom solutions built with reflection.\nIt is protected from circular references so you can avoid exceptions. Provides fluent API which increases code readability in terms of guessing the hierarchy being built from the code. Some of functionalities: visiting properties by matching owner type, property name and type (or only property type), visiting collecitons and dictionary items, specifying depth, custom expression for changing property value, cloning etc.\n\t\n//example 1 - IVisitor that visits properties by ownner type and property names and/or types (start from TypeWalker class):\n\n  var typeVisitor = TypeWalker<Parent>.Create()\n                  .ForProperty<Parent, string>(p => p.TestString1, (old, met) => old + met)\n                  .ForProperty<Child, DateTime>(p => p.TestDate1, (old, met) => old.AddYears(10))\n                  .ForProperty<CommonType>((old, met) => new CommonType { CommonString = \"...\" })\n                  .Build(depth:10, guard:new PropertyGuard(), supportsCloning: true);\n\t\t\t\t  \n\t//guard is protection against type-wise circular references. supportsCloning = false improves build time.\n\t\t\t\t  \n  var parentClone = new Parent();\n  var propertyValues = new HashSet<PropertyValue>()\n  typeVisitor.Visit(parentObject, parentClone, depth:10, guard:new InstanceGuard(), values:propertyValues); \n\n\t//guard is protection against instance-wise circular references. values will hold flat list of new/old values.\n  \n//example 2 - IVisitor that visits properties by explicit configuration (start from ManualWalker class):\n\n  var manualVisitor = ManualWalker.Create<A1>()\n                                    .Property<A1, DateTime>(a1 => a1.A1Date, (va1, met) => va1.AddYears(10))\n                                    .Element<A1, B1>(a1 => a1.B1, b1 =>\n                                            b1.Property<B1, string>(x => x.B1Name, (vb1, met) => vb1 + \"Test2\"))\n                                    .Collection<A1, B2>(a1 => a1.B2List, b2 => b2\n                                            .Property<B2, DateTime>(x => x.B2Date, (vb2, met) => vb2.AddYears(10)))\n                                .Build();\n\n  manualVisitor.Visit(parentObject, blueprint:null, depth:10, guard:new InstanceGuard(), values:null);\n\t\t\t\n//Paremeter 'met' in expressions above is optional metadata object set in design-time. \n//It can be set by [VisitorMetadata] property attribute in visited class.\n//e.g. in example above, there is [VisitorMetadata(\"AnyString\")] on property Parent.TestString1.\n\n//example 3 - IVisitor built and cached using the IVisitorsFactory:\n//scenario for visitors of same settings built for different types:\n  \n  var factory = new VisitorsFactory().WithSettings(\"name1\", depth:5, usePropertyGuard:false, supportsCloning:false)\n                                       .ForProperty<int>((val, met) => 2)\n                                     .WithSettings(\"name6\")\n                                       .ForProperty<Parent, string>( x => x.Name, (val, met) => \"t\");\n\t\t\t\t\t\t\t\t\t \n  var visitor1 = factory.GetVisitor(\"name1\", typeof(Class1));\n  var visitor1a = factory.GetVisitor(\"name1\", typeof(Class1));\n  var visitor2 = factory.GetVisitor(\"name1\", typeof(Class2));\n  var visitor6 = factory.GetVisitor(\"name6\", typeof(Class6));\n  \n//visitor1 == visitor1a --true\n//visitor1 == visitor2 --false\t \n\nMany thanks to Francisco Jos√© Rey Gozalo for contributing with ideas and solutions.\nRead more on https://github.com/kopalite/ExpressWalker.Core",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.23.14.27.43/expresswalker.core.2.1.0.1.json#frameworkassemblygroup",
    "assembly": [
      "System",
      "System.Core",
      "Microsoft.CSharp"
    ]
  },
  "id": "ExpressWalker.Core",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2019-04-23T14:27:40.623Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "Y09wub568RJd1zC2c9hQy06BgcsjOMYuSgMesGAnumTZAR4fvycuV44iQoxyIpF3k7Ee3eawNaD0lt8W9Xq3Cw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 35253,
  "projectUrl": "https://github.com/kopalite/ExpressWalker.Core",
  "published": "2019-04-23T14:23:30.677Z",
  "releaseNotes": "This is initial version for .NET Core",
  "requireLicenseAcceptance": true,
  "summary": "ExpressWalker provides a generic way to examine and change any object graph in fashion similar to \"Visitor Pattern\". You can build generic hierarchy composition (visitor) that can visit and change any object's property, basing on configuration. Relies on expression trees while visiting objects (uses reflection only once while building a visitor).",
  "title": "ExpressWalker.Core",
  "verbatimVersion": "2.1.0.1",
  "version": "2.1.0.1",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.23.14.27.43/expresswalker.core.2.1.0.1.json#ExpressWalker.Core.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1941,
      "fullName": "ExpressWalker.Core.nuspec",
      "length": 5511,
      "name": "ExpressWalker.Core.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.23.14.27.43/expresswalker.core.2.1.0.1.json#lib/netstandard2.0/ExpressWalker.Core.dll",
      "@type": "PackageEntry",
      "compressedLength": 19910,
      "fullName": "lib/netstandard2.0/ExpressWalker.Core.dll",
      "length": 49152,
      "name": "ExpressWalker.Core.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.23.14.27.43/expresswalker.core.2.1.0.1.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 643,
      "fullName": "LICENSE.txt",
      "length": 1092,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.23.14.27.43/expresswalker.core.2.1.0.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "ExpressWalker",
    "Expressions",
    "Visitor"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}