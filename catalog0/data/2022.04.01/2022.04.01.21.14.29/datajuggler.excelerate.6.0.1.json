{
  "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "DataJuggler",
  "catalog:commitId": "59c5d975-e3f5-47fd-88b9-484eca06b932",
  "catalog:commitTimeStamp": "2022-04-01T21:14:29.7637135Z",
  "copyright": "2022 - Use for whatever you want, give me credit if you like it.",
  "created": "2022-04-01T21:11:41.3Z",
  "description": "Excelerate uses EPPPlus version 4.5.3.3 (last free version), and it makes it easy to load Workbooks or Worksheets. Excelerate now has a code generation feature, you can create a C# class from a header row.\n\nI have a couple of clients that I build programs that automate combining columns from multiple Worksheets to form reports.\n\nRather than continue to write custom loaders, I really only need custom Exporters in most cases, so I created this project.",
  "iconFile": "ExcelerateLogoSmallWhite.png",
  "id": "DataJuggler.Excelerate",
  "isPrerelease": false,
  "lastEdited": "2022-04-01T21:14:05.193Z",
  "licenseFile": "LICENSE",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "WJT9KhzPmDyGax4AV7rsP9CfCzp83TRup0rBbV2WUa8RxWZ4OmLdmkUWSF+IauxYvq+y/hnCj5Zr+H+QjKCdSw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 60316,
  "projectUrl": "https://github.com/DataJuggler/Excelerate",
  "published": "2022-04-01T21:11:41.3Z",
  "readmeFile": "README.md",
  "releaseNotes": "4.1.2022: Version 6.0.1: I added ExcludedColumnIndexes. I have a project for a client and I need to skip two columns.\nThis is brand new code, and not tested, so use with caution for now. April Fools, my code always works the 1st time!\n\n1.23.2022: This project was updated to .NET6.\t\n\t\n11.30.2021 (Take Four)\nVersion 1.7.3: I fixed IsHeaderRow is set to true for the top row, for data that is loaded in LoadAllData which calls LoadWorksheet.\nNow the Load list method checks for the row is not a header row.\n\t\t\n11.30.2021 (Take Three)\nVersion 1.7.2: I changed an if statement to a compound if in CodeGenerator.cs (in the Load List override), and I forgot to \nadd an extra opening paren. Computers are so picky.\n\t\t\n11.30.2021 (Take Two)\nVersion 1.7.1: I realized the Load method for a list, needed row.Number > 1 and row.HasColumns, because of the\nheader row means you need to skeep the first row.\n\t\t\n11.30.2021\nVersion 1.7.0: I added a new feature to code generate a Load method override, that accepts a worksheet parameter,\nand will load a list of objects now. Saves writing a load method for each worksheet, now one line of code can take car of it.\n\t\t\n11.10.2021 (Take Two)\nVersion 1.5.1: .Net6.0 won't open the file. Testing with .Net 5.0.\n\t\t\n11.10.2021 \nVersion 1.5.0: Package now supports mullti-targeting net5.0 and net6.0.\n\t\t\n11.8.2021 (Take Four)\nVersion 1.4.2: My code generated NewRowMethod, used row.Columns.Add(column) instead of newRow.Columns.Add(column). I fixed this to use the variable name newRow.\n\n11.8.2021 (Take Four)\nVersion 1.4.3: I fixed a stack overflow error (that I caused). \n\n11.8.2021 (Take Three)\nVersion 1.4.1: I realized I had to add a using statement reference for DataJuggler.Net5\nto the code generated classes.\n\n11.8.2021 (Take Two)\nVersion 1.4.0: The Add New Method code generation appears to work. \nI am updating Blazor Excelerate with this version and will continue to test.\n\n11.8.2021\nVersion 1.3.14: First attempt at code generating the NewRow method.\n\n11.7.2021 (Take Two)\nVersion 1.3.12: I added two new features:\n1. ColumnValue for a boolean column, can now be exported as 0 or 1 (instead of True / False).\nTo use this, set ExportBooleanAsOneOrZero to true, and the DataType must be a DataManager.DataTypes.Boolean\n2. I added a FindColumn method to the row object, to make setting ExportBooleanAsOneOrZero easier.\n\n11.7.2021\nVersion 1.3.10: BooleanHelper, part of DataJuggler.UltimateHelper had a bug in the ParseBoolean method.\n\n11.6.2021 (Take Four)\nVersion 1.3.9: I set StringValue to an empty string if an error occurrs.\n\n11.6.2021 (Take Three)\nVersion 1.3.8: Before 1.3.7 Nuget package email arrived that it was ready, I realized I needed to\ncreate the WorksheetInfo object in the constructor also.\n\n11.6.2021 (Take Two)\nVersion 1.3.7: While working on Excelerate.WinForms.Deo, I realized I needed to create the Updates collection\nand I decided it saved two lines of code in my demo to do this in the constructor.\n\n11.6.2021\nVersion 1.3.6: I created two new methods SaveBatch and SaveBatchItem.\n\nSaveBatch represents saving data from multple worksheets\nSaveBatchItem represents saving data from one worksheet.\n\nBoth of these methods are untested, so at this time use with caution.\n\n11.4.2021 (Take Four)\nVersion 1.3.5: I had forgotten to add saved = true to ExcelHelper.Save method at the end of the Save method.\n\n11.4.2021 (Take Three)\nVersion 1.3.4: I discovered too late the ExcelHelper.Save method is not static. \n\n11.4.2021 (Take Two)\nVersion 1.3.3: My previous Save method had the return value in the wrong place.\n\nHopefully this fixes it. I am too lazy to add the project and propertly debug it.\n\n11.4.2021\nVersion 1.3.2: While working on Save I realized I needed to return the row from the code generated Save method\nso Excel can be updated. Save is still being tested, so use with caution.\n\n11.2.2021 (Take Two)\nVersion 1.3.1: The previous version code generated the Save method incorrectly. This should fix it.\n\n11.2.2021\nVersion 1.3.0: I now code generate a Save method, so the current Row.Column's ColumnValues are updated with the current value of this object.\n\n11.1.2021\nVersion 1.2.8: I updated Worksheet.Columns is now set to first row.Columns when the Worksheet is loaded.\nI added a NewRow method, that returns a new row with the columns set.\nI updated AttemptToDetermineDataType to set ZipCode and PostalCode fields to a string, not an integer.\n\nCode Generating a Save method is next I think.\n\n10.31.2021 (Take Eight)\nThis time, DataJuggler.UlimateHelper was updated. The ParseBoolean method got an upgrade.\n\n10.31.2021 (Take Seven)\nVersion 1.2.6: I updated ParseBoolean to use DataJuggler.UltimateHelper.BooleanHelper.ParseBoolean. We will see if this converts a 1 to a true and a zero to a false. I think it does after 11 years.\n\n10.31.2021: (Take Six)\nVersion 1.2.5: I fixed Active being a boolean, and discovered the LoadMethod was trying to set bool columns to a string value.\n\n10.31.2021: (Take Five)\nVersion 1.2.4: I fixed the Active field = boolean. I need an else so the data type didn't get set to Int further in the AttemptToDetermineDataType method.\n\n10.31.2021: (Take Four)\nVersion 1.2.3: Added a check for data type boolean. To make this work, convert Excel bool values to True False vs 0 and 1.\n\n10.31.2021 (Take Three)\nVersion 1.2.2: Code generation is fixed with a reference to System is needed since Guid RowId has been added.\n\n10.31.2021 (Take Two)\nVersion 1.2.1: I messed up the code generation in Version 1.2.0 because the RowId field wasn't getting a field name written. Should work now.\n\n10.31.2021: \nVersion 1.2.0: The code generation of the RowId seems to work, so the 1.2 version starts the Saving features.\n\n10.31.2021\nVersion 1.1.10: I added RowNumber and Id (Guid) to class Row to help in saving, which I am just starting.\n\n10.16.2021\nVersion 1.1.9: I added a new method LoadAllData, which returns a DataJuggler.Excelerate.Workbook, which contains all DataJuggler.Excelerate.Worksheets, which contain all DataJuggler.Excelerate.Rows of data.\n\n10.16.2021:\nVersion 1.1.8: AppendPartialGuid is now an optional parameter, and only if true will the partial guid be appended to the filename.\n\n\n10.14.2021: \nVersion 1.1.7: CodeGenerator.GenerateClassFromWorksheet now returns an object of type CodeGenerationResponse. Previous version only returns a boolean, which wasn't very helpful for the caller.\n\n10.13.2021: New override for GetSheetNames takes a path argument.\nI am working on a new Blazor project called Blazor.Excelerate to demo this project.\n\n9.21.2021\nVersion 1.1.5:\nI created an ExcelHelper class because I needed the GetColumnLetter feature of ExcelCellAddress.\n\n9.20.2021\nVersion 1.1.4:\nI updated ExcelDataLoader to havea  LoadPackage method.\n\n9.20.2021:\nVersion 1.1.3:\nI added an OriginalFileName property to class Column, so the exported column header can be the same as the original.\n\n9.17.2021\nVersion 1.1.2:\nThe Code Generator class is now finished, and a Load method has been updated to test for\na null row or null row.Columns just to be safer.\n\nMore updates may come in the future, but for now I have completed what I started this project for.\nFor the amount of effort I put into this, I think the return on investment is quite satisfactory as\nnow I can build Excel projects much faster. \n\n9.17.2021\nVersion 1.1.1: I now code generate a Load method with the Code Generator, so a Row can be used to load an instance of the class created. This is still being tested.\n\n9.15.2021\nVersion 1.0.3: I added a LoadWorksheet override, so clients do not have to load a Workbook to get\nto a single worksheet.\n\nThis is the first release. I have just begun adding classes and helper methods to this. It does work for now to load a worksheet and all the Rows / Columns. Each column is loaded as an object ColumnValue, than properties exist that cast the ColumnValue as a bool, datetime, Decimal or other types.",
  "repository": "",
  "verbatimVersion": "6.0.1",
  "version": "6.0.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#dependencygroup/net6.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#dependencygroup/net6.0/datajuggler.net6",
          "@type": "PackageDependency",
          "id": "DataJuggler.Net6",
          "range": "[6.0.4, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#dependencygroup/net6.0/epplus",
          "@type": "PackageDependency",
          "id": "EPPlus",
          "range": "[4.5.3.3, )"
        }
      ],
      "targetFramework": "net6.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#DataJuggler.Excelerate.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3770,
      "fullName": "DataJuggler.Excelerate.nuspec",
      "length": 9623,
      "name": "DataJuggler.Excelerate.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#lib/net6.0/DataJuggler.Excelerate.dll",
      "@type": "PackageEntry",
      "compressedLength": 13587,
      "fullName": "lib/net6.0/DataJuggler.Excelerate.dll",
      "length": 33792,
      "name": "DataJuggler.Excelerate.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#README.md",
      "@type": "PackageEntry",
      "compressedLength": 2162,
      "fullName": "README.md",
      "length": 5895,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#LICENSE",
      "@type": "PackageEntry",
      "compressedLength": 641,
      "fullName": "LICENSE",
      "length": 1090,
      "name": "LICENSE"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#ExcelerateLogoSmallWhite.png",
      "@type": "PackageEntry",
      "compressedLength": 28320,
      "fullName": "ExcelerateLogoSmallWhite.png",
      "length": 28436,
      "name": "ExcelerateLogoSmallWhite.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.01.21.14.29/datajuggler.excelerate.6.0.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "EPPPlus",
    "Excel",
    "C#",
    "Code",
    "Generation"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}