{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Microsoft Quality Engineering and Design",
  "catalog:commitId": "aaee41ba-b09b-4e4c-84f4-b54c9e464e09",
  "catalog:commitTimeStamp": "2015-02-07T04:18:05.488148Z",
  "copyright": "Copyright 2014",
  "created": "2014-11-25T00:04:11.63Z",
  "description": "This is a convenient WinRT API for making Internet connection state decisions in real time, using the speed result to decide if/when to run your network-intensive code. This is all about speed and latency (delay), so you will still need to test throughput on your own if that is important to your application (we are working on a low-overhead, accurate solution for this, so stay tuned). \n\nThis API does not need to eat a bunch of network bandwidth to do it's job. \n\n\n\n\n\n\n\nThis API fills a small gap in the Windows platform networking APIs by providing developers a very easy to use, simple abstraction to measure current Internet connection speed, something most apps today are not doing, which ends up in potentially poor experiences for people using apps that make connectivity state assumptions based only on the existence of an active Internet connection. \n\n\n\n\n\n\n\nThis API will benefit the people using your app, who should always be shielded from network latency under all circumstances. Developers - developers are people! - will also benefit as you can be confident that: \n\n\n\n\n\n\n\na) The easy-to-use API will return a result very quickly, as any API call should \n\n\n\n\n\n\n\nb) This API is accurate and reliable \n",
  "id": "InetSpeedWinRT",
  "isPrerelease": false,
  "lastEdited": "2014-11-27T19:53:38.71Z",
  "packageHash": "5IwsVJYJ04Explb7+0ClDY9E4neJs1Z8rK+OG/mkL8xUN/QirpOoXKmmeH1MzT9cdqDqLrisUEKBOwoATsc9Ow==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 1137099,
  "published": "1900-01-01T00:00:00Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/.json#gpref",
      "reference": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtphone.winmd",
          "file": "InetSpeedWinRTPhone.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtphone81.winmd",
          "file": "InetSpeedWinRTPhone81.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtarm.winmd",
          "file": "InetSpeedWinRTARM.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtwin8arm.winmd",
          "file": "InetSpeedWinRTWin8ARM.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtx64.winmd",
          "file": "InetSpeedWinRTx64.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtwin8x64.winmd",
          "file": "InetSpeedWinRTWin8x64.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtx86.winmd",
          "file": "InetSpeedWinRTx86.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.04.18.05/inetspeedwinrt.1.3.0.json#gpref/ref/inetspeedwinrtwin8x86.winmd",
          "file": "InetSpeedWinRTWin8x86.winmd"
        }
      ]
    }
  },
  "releaseNotes": "In this release: optimizations for cellular, changed ConnectionSpeed enum to a value class with static int named properties so that JavaScript consumers can program with word values, not ints... Methods are now static, eliminating the need to create instances.\n\nDecreased code size. \n\nUsage: \n\nYou will need to remove the architecture specific references that don’t apply to your project’s build target after referencing the nuget package via References -> Add Reference… -> Manage Nuget packages. The component is written in C++/CX, so each dll and winmd file is created for a specific machine architecture (ARM for Windows, Windows Phone 8 (ARM), Windows Phone 8.1 (ARM), Windows 8/8.1 (ARM, x86, x64).  \n\nYou’ll see these files in your references folder when you install the InetSpeedWinRT nuget package (remove all that don’t apply to your solution…) \n\nInetSpeedWinRTARM (For Windows RT (ARM) WinRT apps) InetSpeedWinRTPhone (For Windows Phone 8 Silverlight apps) InetSpeedWinRTPhone81 (For Windows Phone 8.1, SL and WinRT apps) \nInetSpeedWinRTx86 (Windows 8.1 WinRT apps, 32-bit Windows) InetSPeedWinRTx64 (Windows 8.1 WinRT apps, 64-bit Windows) \n\nNote: You will also need to reference the SDK Extension Microsoft Visual C++ 2013 Runtime Package for Windows 8.1 and Windows Phone 8.1 projects, for C# and JavaScript projects. \n\nThe Internet Connection Speed API, version 1.3.0 \n\n\nProperties\n\nstatic bool Connected \nReturns true if the current Internet connection for the device is active, else false. \n\nMethods\n\nstatic IAsyncOperation<int> GetInternetConnectionSpeed(); \nAsynchronous method that will return a ConnectionSpeed (see below). \n\nstatic IAsyncOperation<int> GetInternetConnectionSpeedWithHostName(HostName hostName); \nAsynchronous method that will perform the speed/latency test on a supplied host target and returns a ConnectionSpeed. This is very useful to ensure the Internet resource you’re trying to reach is available at the speed level you require (generally, these would be High and Average…). \n\nConnectionSpeed \n\nclass ConnectionSpeed \nthis is a ref class with static int properties to support JavaScript consumers (WinRT enum values don't work). So, JS programmers can program against High, Average, Low, Unknown values versus 0, 1, 2, 3...\n\nHigh: Device is currently attached to a high-speed, low-latency Internet connection. \n\nAverage: Device is currently attached to an average speed/latency Internet connection (LTE, 3G, etc…). \n\nLow: Device is currently attached to a low-speed, high-latency Internet connection. \n\nUnknown: The current Internet connection speed can't be determined. Proceed with caution. This could mean that there is very high network latency, a problem with an upstream service, etc... \n\nExample (C# consumer): \nThis example tests for a highspeed network based on a provided HostName (this is the best way to use this API given you really want to know the status of the Internet connection as it pertains to where you need to put/grab data over the network in real time...). Note you should always test for Unknown and then react accordingly (don't proceed with network work. Unknown means you are connected to the Internet, but you can't do network work with acceptable latency.)\n\nHigh and Average are the two results you should test for before doing network work that involves either downloading or uploading data.\n\n            if (InternetConnectionState.Connected)\n            {\n                var speed =\n                    await InternetConnectionState.GetInternetConnectionSpeedWithHostName(new HostName(\"targethost.com\"));\n             \n                if (speed == ConnectionSpeed.High)\n                {\n                    \\\\Current network speed is High, low latency\n                }\n                else if (speed == ConnectionSpeed.Average)\n                {\n                    \\\\Current network speed is Average, average latency\n                }\n                else if (speed == ConnectionSpeed.Low)\n                {\n                    \\\\Current network speed is Low, high latency\n                }\n                else\n                {\n                    \\\\Current Network Speed is Unknown - use at your own risk...\n                }\n            }\n            else\n            {\n                ResultsBox.Text = \"Not Connected to the Internet!\";\n            }\n        }\n\nExample (JavaScript consumer):\n\n       if (InetSpeedWinRT.InternetConnectionState.connected) {\n            InetSpeedWinRT.InternetConnectionState.getInternetConnectionSpeed().then(function (speed) {\n                if (speed === InetSpeedWinRT.ConnectionSpeed.high) {\n                    //High speed, low latency Internet connection detected...\n                }\n                else if (speed === InetSpeedWinRT.ConnectionSpeed.average) {\n\t\t    //Average speed, average latency. Common result for Cellular connections, DSL Wireless signals, etc...\n                }\n                else if (speed === InetSpeedWinRT.ConnectionSpeed.low) {\n                    //High latency, low speed Internet connection detected...\n                } else {\n                    //Unknown...\n                }\n            });\n        } \n        else {\n            result.innerText = \"Not connected...\";\n        }\n\nC++ consumer (nuget folks, please respect C++ code formatting!):\n\n\tif (InternetConnectionState::Connected) \n{ \n\t\tauto connectionSpeed = InternetConnectionState::GetInternetConnectionSpeed(); \n\n\t\tcreate_task(connectionSpeed).then([this](int speed) \n\t\t{ \n\t\t\tif (speed == ConnectionSpeed::Unknown) return; \n\n\t\t\tif (speed == ConnectionSpeed::High) \n\t\t\t{ \n\t\t\t\t//highspeed, low latency Internet connection... \n\t\t\t} \n\t\t\telse if (speed == ConnectionSpeed::Average) \n\t\t\t{ \n\t\t\t\t//This is the most common connection speed across Cellular and Wifi... \n\t\t\t} \n\t\t\telse if(speed == ConnectionSpeed::Low) \n\t\t\t{ \n\t\t\t\t//Low speed, high latency... \n\t\t\t} \n\t\t}); \n\t} \n\telse \n\t{ \n\t\t//Not connected... \n\t}\n\nKnown issue with Windows Phone radio when the device resumes from standby \n\nWhen Windows Phone devices resume from standby, the time it takes for the cellular radio to fully “awaken” can lead to inaccurate results from InetSpeedWinRT (the ConnectionSpeed result in this case is typically Low or Unknown – and this has been verified in extensive testing to be inaccurate as a subsequent call will return the actual state, typically higher…)… This is not a bug in InetSpeedWinRT. This is an issue faced by any app that makes network calls upon device then app resumption. \n\nOne simple workaround is to touch the network interface from both Application_Launching and Application_Activated event handlers (typically in your App class implementation file). By doing this before calling GetInternetConnectionSpeed or GetInternetConnectionSpeedWithHostname (or any API that generates network traffic on a cellular connection as part of its implementation) in your network-critical code paths, you can guarantee that the radio is fully functional and therefore an accurate result is returned. \n\n        private void Application_Launching( object sender, LaunchingEventArgs e ) \n        { \n            //This will wake up the radio... \n            var networkInterfaceType = NetworkInterface.NetworkInterfaceType; \n        }        \n\n  \n        private void Application_Activated( object sender, ActivatedEventArgs e ) \n        { \n            //This will wake up the radio... \n            var networkInterfaceType = NetworkInterface.NetworkInterfaceType; \n        } \n\nWe hope this API proves useful to you in your Internet-first applications.",
  "requireLicenseAcceptance": false,
  "summary": "This is a convenient WinRT API for making Internet connection speed decisions in real time, using the speed result to decide if/when to run your network-intensive code. \n",
  "title": "Internet Connection Speed API for Windows ",
  "version": "1.3.0",
  "tags": [
    "Internet",
    "Connection",
    "Speed",
    "WinRT",
    "API",
    "C#",
    "C++",
    "JavaScript",
    "Network",
    "Latency"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}