{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Robert Giesecke",
  "catalog:commitId": "804f6de1-a9d7-4dda-abdc-9c8a235ce367",
  "catalog:commitTimeStamp": "2018-12-11T05:50:28.8782721Z",
  "created": "2013-11-14T09:45:56.337Z",
  "description": "This is an msbuild target that will try to create the key file that is used by the project it is installed to when it doesn't exist already.\n\t  Which is a well known problem for open source projects: \n\t\tYou do want to sign your assemblies, but you don't want to give away the key file.",
  "id": "CreateSnkFile",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2018-12-11T05:50:14.067Z",
  "licenseUrl": "http://opensource.org/licenses/mit-license.php",
  "listed": true,
  "packageHash": "Xx35Wjyedtu2qYe08uMCdwQpjJHyyHggkRc1USVsWrsRMYG7lz1SdQHELMV9BoOZLVoTAFloe96jgfYGsLNdYg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 15477,
  "projectUrl": "https://github.com/robertgiesecke/createsnkfile",
  "published": "2013-11-14T09:45:56.337Z",
  "requireLicenseAcceptance": false,
  "summary": "Will create missing key files during the build.\n\t  One less thing to explain in open source projects. :-)",
  "title": "Auto create missing SNK files on build",
  "verbatimVersion": "1.0.1",
  "version": "1.0.1",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json#CreateSnkFile.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 568,
      "fullName": "CreateSnkFile.nuspec",
      "length": 1091,
      "name": "CreateSnkFile.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json#content/SnkNugetWorkaround.txt",
      "@type": "PackageEntry",
      "compressedLength": 199,
      "fullName": "content/SnkNugetWorkaround.txt",
      "length": 297,
      "name": "SnkNugetWorkaround.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json#tools/CreateSnkFile.targets",
      "@type": "PackageEntry",
      "compressedLength": 677,
      "fullName": "tools/CreateSnkFile.targets",
      "length": 1541,
      "name": "CreateSnkFile.targets"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 757,
      "fullName": "tools/install.ps1",
      "length": 1770,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json#tools/uninstall.ps1",
      "@type": "PackageEntry",
      "compressedLength": 461,
      "fullName": "tools/uninstall.ps1",
      "length": 862,
      "name": "uninstall.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.05.50.28/createsnkfile.1.0.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9470,
      "fullName": ".signature.p7s",
      "length": 9470,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "snk",
    "strongname",
    "sn.exe",
    "KeyOriginatorFile"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}