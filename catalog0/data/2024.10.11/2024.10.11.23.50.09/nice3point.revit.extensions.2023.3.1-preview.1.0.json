{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Nice3point",
  "catalog:commitId": "c64b6666-2083-43ce-bc41-74a3b905c835",
  "catalog:commitTimeStamp": "2024-10-11T23:50:09.5532792Z",
  "created": "2024-10-11T23:45:18.777Z",
  "description": "Extensions for Revit plugin development",
  "iconFile": "images\\PackageIcon.png",
  "id": "Nice3point.Revit.Extensions",
  "isPrerelease": true,
  "lastEdited": "2024-10-11T23:50:04.35Z",
  "licenseFile": "License.md",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "LQkpQoJAh6xk0gflV0kJ2s6s+6phOk1lPGNpSgwpXx6rNajq00kBROczlSkE8rpTXgwmfBR3AGRjbSAPnT4uIA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 118017,
  "published": "2024-10-11T23:45:18.777Z",
  "readmeFile": "Readme.md",
  "releaseNotes": "This update focuses on increased utility class coverage, new extensions for global parameter management, for ForgeTypeId handling, advanced geometry extensions, and many-many more.\n\n**Element Association Extensions**\n\n- **IsAnalyticalElement:** Determines whether an element is an analytical element.\n- **IsPhysicalElement:** Checks if an element is a physical one.\n\n**Element Worksharing Extensions**\n\n- **GetCheckoutStatus:** Retrieves the ownership status of an element, with an optional parameter to return the owner's name.\n- **GetWorksharingTooltipInfo:** Provides worksharing information about an element for in-canvas tooltips.\n- **GetModelUpdatesStatus:** Gets the status of an element in the central model.\n\n**ElementId Transform Extensions**\n\n- **CanMirrorElements:** Verifies whether a set of elements can be mirrored.\n- **MirrorElements:** Mirrors elements across a plane, with support for mirrored copies.\n- **MoveElements:** Moves elements according to a specified transformation.\n- **RotateElements:** Rotates elements around a given axis by a specified angle.\n- **CopyElements:** Copies elements between views or within the same document, with options for translation and transformation.\n\n**Application Extensions**\n\n- **SetMacroSecurityOptions:** Configures macro security settings.\n- **GetMacroSecurityOptions:** Retrieves the current macro security options.\n- **GetMacroManager:** Provides access to the Macro Manager for the current application.\n\n**Document Extensions**\n\n- **GetProfileSymbols:** Returns profile family symbols in the document.\n- **RelinquishOwnership:** Allows relinquishment of ownership based on specified options.\n\n**Document Managers Extensions**\n\n- **GetTemporaryGraphicsManager:** Fetches a reference to the documentâ€™s temporary graphics manager.\n- **GetAnalyticalToPhysicalAssociationManager:** Retrieves the manager for analytical-to-physical element associations.\n- **GetLightGroupManager:** Creates or retrieves the light group manager for the document.\n\n**Geometry Extensions**\n\n- **Contains:** Determines if a point or another bounding box is contained within the bounding box, with strict mode available for more precise containment checks.\n- **Overlaps:** Checks whether two bounding boxes overlap.\n- **ComputeCentroid:** Calculates the geometric center of a bounding box.\n- **ComputeVertices:** Returns the coordinates of the eight vertices of a bounding box.\n- **ComputeVolume:** Computes the volume enclosed by the bounding box.\n- **ComputeSurfaceArea:** Calculates the total surface area of the bounding box.\n\n**Parameters Extensions**\n\n- **IsBuiltInParameter:** Verifies if a parameter is a built-in parameter.\n\n**Document Global Parameters Extensions**\n\n- **FindGlobalParameter:** Locates a global parameter by name in the document.\n- **GetAllGlobalParameters:** Returns all global parameters in the document.\n- **GetGlobalParametersOrdered:** Retrieves ordered global parameters.\n- **SortGlobalParameters:** Sorts global parameters in the specified order.\n- **MoveGlobalParameterUpOrder:** Moves a global parameter up in the order.\n- **MoveGlobalParameterDownOrder:** Moves a global parameter down in the order.\n- **IsUniqueGlobalParameterName:** Checks if a global parameter name is unique.\n- **IsValidGlobalParameter:** Validates if an ElementId is a global parameter.\n- **AreGlobalParametersAllowed:** Checks if global parameters are permitted in the document.\n\n**ForgeTypeId Extensions**\n\n- **IsSpec:** Validates if a ForgeTypeId identifies a spec.\n- **IsBuiltInGroup:** Determines whether a ForgeTypeId identifies a built-in parameter group.\n- **IsBuiltInParameter:** Validates if a ForgeTypeId identifies a built-in parameter.\n- **IsSymbol:** Checks if a ForgeTypeId identifies a symbol.\n- **IsUnit:** Verifies if a ForgeTypeId identifies a unit.\n- **IsValidDataType:** Determines if a ForgeTypeId identifies a valid parameter data type.\n- **IsValidUnit:** Validates if a unit is valid for a measurable spec.\n- **IsMeasurableSpec:** Checks if a ForgeTypeId represents a measurable spec.\n- **GetBuiltInParameter:** Retrieves a BuiltInParameter from a ForgeTypeId.\n- **GetParameterTypeId:** Fetches the ForgeTypeId corresponding to a BuiltInParameter.\n- **GetDiscipline:** Gets the discipline for a measurable spec.\n- **GetValidUnits:** Retrieves all valid units for a measurable spec.\n- **GetTypeCatalogStringForSpec:** Fetches the type catalog string for a measurable spec.\n- **GetTypeCatalogStringForUnit:** Retrieves the type catalog string for a unit.\n- **DownloadCompanyName:** Downloads the owning company name for a parameter and records it in the document.\n- **DownloadParameterOptions:** Fetches settings related to a parameter from the Parameters Service.\n- **DownloadParameter:** Creates a shared parameter element in a document based on a downloaded parameter definition.\n\n**Color Extensions**\n\n- **ToHex:** Converts a color to its hexadecimal representation.\n- **ToHexInteger:** Returns the hexadecimal integer representation of a color.\n- **ToRgb:** Provides the RGB representation of a color.\n- **ToHsl:** Converts a color to its HSL representation.\n- **ToHsv:** Converts a color to its HSV representation.\n- **ToCmyk:** Retrieves the CMYK representation of a color.\n- **ToHsb:** Converts a color to HSB.\n- **ToHsi:** Converts a color to HSI format.\n- **ToHwb:** Provides the HWB representation of a color.\n- **ToNCol:** Converts a color to NCol format.\n- **ToCielab:** Retrieves the Cielab representation of a color.\n- **ToCieXyz:** Converts a color to CieXyz format.\n- **ToFloat:** Returns the float representation of a color.\n- **ToDecimal:** Returns the decimal representation of a color.\n\n**Family Extensions**\n\n- **CanConvertToFaceHostBased:** Indicates whether a family can be converted to a face-hosted version.\n- **ConvertToFaceHostBased:** Converts a family to be face-host based.\n\n**Plumbing Extensions**\n\n- **ConnectPipePlaceholdersAtElbow:** Connects pipe placeholders that form an elbow connection.\n- **ConnectPipePlaceholdersAtTee:** Connects pipe placeholders to form a Tee connection.\n- **ConnectPipePlaceholdersAtCross:** Connects pipe placeholders to form a Cross connection.\n- **PlaceCapOnOpenEnds:** Places caps on open pipe connectors.\n- **HasOpenConnector:** Checks if a pipe curve has an open piping connector.\n- **BreakCurve:** Splits a pipe curve at a specified point.\n\n**Element Solid Cut Extensions**\n\n- **GetCuttingSolids:** Retrieves solids that cut a given element.\n- **GetSolidsBeingCut:** Returns solids that are cut by the given element.\n- **IsAllowedForSolidCut:** Verifies if the element can be involved in a solid-solid cut.\n- **IsElementFromAppropriateContext:** Checks if the element belongs to a suitable context for solid cuts.\n- **CanElementCutElement:** Determines whether a cutting element can create a solid cut on a target element.\n- **CutExistsBetweenElements:** Checks if there is an existing solid-solid cut between two elements.\n- **AddCutBetweenSolids:** Adds a solid-solid cut between two elements.\n- **RemoveCutBetweenSolids:** Removes an existing solid cut between two elements.\n- **SplitFacesOfCuttingSolid:** Splits the faces of a cutting solid element.\n\n**View Extensions**\n\n- **GetTransformFromViewToView:** Returns a transformation to copy elements between two views.\n\n**View Managers Extensions**\n\n- **CreateSpatialFieldManager:** Creates a SpatialField manager for a given view.\n- **GetSpatialFieldManager:** Retrieves the SpatialField manager for a specific view.\n\n**Part Extensions**\n\n- **GetSplittingElements:** Identifies elements used to create parts.\n- **GetSplittingCurves:** Identifies curves used to create parts and the plane they reside in.\n- **GetChainLengthToOriginal:** Calculates the chain length from a part to its original element.\n- **GetMergedParts:** Retrieves element IDs of merged parts.\n- **IsPartDerivedFromLink:** Checks if a part originates from linked geometry.",
  "repository": "",
  "verbatimVersion": "2023.3.1-preview.1.0",
  "version": "2023.3.1-preview.1.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#dependencygroup/.netframework4.8",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.8"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#Nice3point.Revit.Extensions.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2946,
      "fullName": "Nice3point.Revit.Extensions.nuspec",
      "length": 8988,
      "name": "Nice3point.Revit.Extensions.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#lib/net48/Nice3point.Revit.Extensions.dll",
      "@type": "PackageEntry",
      "compressedLength": 39620,
      "fullName": "lib/net48/Nice3point.Revit.Extensions.dll",
      "length": 112640,
      "name": "Nice3point.Revit.Extensions.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#lib/net48/Nice3point.Revit.Extensions.xml",
      "@type": "PackageEntry",
      "compressedLength": 25625,
      "fullName": "lib/net48/Nice3point.Revit.Extensions.xml",
      "length": 283656,
      "name": "Nice3point.Revit.Extensions.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#images/PackageIcon.png",
      "@type": "PackageEntry",
      "compressedLength": 24244,
      "fullName": "images/PackageIcon.png",
      "length": 24234,
      "name": "PackageIcon.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#License.md",
      "@type": "PackageEntry",
      "compressedLength": 641,
      "fullName": "License.md",
      "length": 1087,
      "name": "License.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#Readme.md",
      "@type": "PackageEntry",
      "compressedLength": 9740,
      "fullName": "Readme.md",
      "length": 43364,
      "name": "Readme.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12924,
      "fullName": ".signature.p7s",
      "length": 12924,
      "name": ".signature.p7s"
    }
  ],
  "packageTypes": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.10.11.23.50.09/nice3point.revit.extensions.2023.3.1-preview.1.0.json#packagetypes/Dependency",
      "@type": "PackageType",
      "name": "Dependency"
    }
  ],
  "tags": [
    "revit",
    "extensions"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}