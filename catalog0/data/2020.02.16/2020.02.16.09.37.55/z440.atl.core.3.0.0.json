{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Zeugma440",
  "catalog:commitId": "93f466d3-6ebb-41d6-a248-9e574f8938df",
  "catalog:commitTimeStamp": "2020-02-16T09:37:55.1037054Z",
  "created": "2020-02-16T09:35:38.917Z",
  "description": "Fully managed, portable and easy-to-use C# library to read and edit audio data and metadata (tags) from various audio formats, playlists and CUE sheets",
  "id": "z440.atl.core",
  "isPrerelease": false,
  "lastEdited": "2020-02-16T09:37:41.2Z",
  "listed": true,
  "packageHash": "/ijVWhbGDBA4sUHLMkFQb8UhDN7YbBCKFv63+bT5R5liA9soYU+HX07e8SZIb+8iUp8mQ2RXKuXFd5s9pHDfjA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 390568,
  "projectUrl": "https://github.com/Zeugma440/atldotnet",
  "published": "2020-02-16T09:35:38.917Z",
  "releaseNotes": "__v3.00 (2020/02/16)__\n\n_**PLEASE NOTE THAT .NET FRAMEWORK 3.0 SUPPORT IS DROPPED.**_\n\n_**ATL NOW DEPENDS ON .NET FRAMEWORK 4.5**_\n\n_New_\n- ATL can now send feedback about writing progress through `IProgress`. See [sample code](https://github.com/Zeugma440/atldotnet/wiki/3.-Usage-_-Code-snippets#progress) for more information.\n- New `ATL.Version.getVersion` method to get ATL's current version programmatically\n- ID3v2 : New `Settings.ID3v2_forceAPICEncodingToLatin1` to control the format of picture descriptions. It defaults to `true` because Latin-1 which is a pre-requisite for Windows to display images as covers.\n- ID3v2 : New `Settings.ID3v2_forceUnsynchronization` to force unsynchronization when writing ID3v2 tags (default : off)\n- MP4/M4A : Support for unsynchronized lyrics\n- MP4/M4A : Support for non-interleaved Quicktime chapters\n  - New setting `MP4_createNeroChapters` to force writing Nero chapters to MP4/M4A files\n  - New setting `MP4_createQuicktimeChapters` to force writing Quicktime chapters to MP4/M4A files\n  - New setting `MP4_keepExistingChapters` to force keep existing chapters in MP4/M4A files, regardless of the other chapter creation options\n\n_Fixes_\n- General : Saving a `Track` after calling `Track.Chapters.Clear` does clear all chapters\n- General : Calling `Track.EmbeddedPictures` after setting values doesn't reset these values anymore\n- ID3v2 : Embedded pictures now appear as icons when viewing the file in Windows explorer\n- MP4/M4A : Artist field is now saved with the proper field code and is readable by 3rd part software\n- MP4/M4A : Prevents file corruption when writing data in certains scenarios\n- MP4/M4A : It is now possible to create metadata from scratch when the file does not have any `meta` atom\n- MP4/M4A : It is now possible to create Nero chapters from scratch when the file does not have any `chpl` atom\n- MP4/M4A : Nero Chapters timestamps > 10 minutes are now written properly\n\n_**! Breaking changes to interface !**_\n* Obsolete `MetaDataIO.PictureStreamHandler` field has been completely removed\n* Obsolete `Track.Rating` field has been completely removed\n* Obsolete `IPlaylistReader` and `PlaylistReaderFactory` classes have been completely removed\n* `PictureInfo` constructors do not take any `ImageFormat` argument anymore. Use new `PictureInfo.fromBinaryData` static constructor to directly load binary data and auto-detect image format\n\nFor instance, instead of doing this\n\n```csharp\nPictureInfo newPicture = new PictureInfo(Commons.ImageFormat.Gif, PictureInfo.PIC_TYPE.CD);\nnewPicture.PictureData = System.IO.File.ReadAllBytes(\"E:/temp/_Images/pic1.gif\");\n```\n\nyou should now do this\n\n```csharp\nbyte[] data = System.IO.File.ReadAllBytes(\"E:/temp/_Images/pic1.gif\");\nPictureInfo newPicture = PictureInfo.fromBinaryData(data, PictureInfo.PIC_TYPE.CD);\n```",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "3.0.0",
  "version": "3.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.5"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#dependencygroup/.netcoreapp2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETCoreApp2.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#z440.atl.core.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1719,
      "fullName": "z440.atl.core.nuspec",
      "length": 3786,
      "name": "z440.atl.core.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#lib/net45/ATL.dll",
      "@type": "PackageEntry",
      "compressedLength": 125747,
      "fullName": "lib/net45/ATL.dll",
      "length": 306176,
      "name": "ATL.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#lib/netcoreapp2.0/ATL.dll",
      "@type": "PackageEntry",
      "compressedLength": 125864,
      "fullName": "lib/netcoreapp2.0/ATL.dll",
      "length": 306688,
      "name": "ATL.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#lib/netstandard2.0/ATL.dll",
      "@type": "PackageEntry",
      "compressedLength": 125714,
      "fullName": "lib/netstandard2.0/ATL.dll",
      "length": 306176,
      "name": "ATL.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.02.16.09.37.55/z440.atl.core.3.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "audio",
    "metadata",
    "tag",
    "mp3",
    "aac",
    "id3v2",
    "ogg",
    "vorbis",
    "opus",
    "flac",
    "playlist",
    "cue"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}