{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.20.06.18/customenum.vb.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Christoph Hafner",
  "catalog:commitId": "9bc6c71c-b357-4534-a9b7-5dcfc98b267a",
  "catalog:commitTimeStamp": "2015-02-03T20:06:18.5095148Z",
  "copyright": "Brought to you by Christoph Hafner of Inserto AG, based on the idea of Vulpes who published his version on the C#-corner (c-sharpcorner.com).",
  "created": "2013-09-16T23:16:11.947Z",
  "description": "Did you ever got frustrated about the limitations of Enums? Ever needed an Enum that supports Strings? Or your custom type?\n\nDid you ever wonder why you can't add any instance methods and properties to an Enum? \n\nDo you like to be able to enumerate over all members, ask their names, values and index? Or just call one of your custom method on the instances (strongly typed and real instance methods, not extenstion methods)?\n\nDid you ever wonder why you need to specify a value when the enum itself would satisfy your needs? Got annoyed to always have to include that \"None\"-member?\n\nIf you answer some of this questions with yes, CustomEnum.vb is definitely something for you, except, of course, if you are a religious C# believer then you need to wait a little bit for the C# version. I have the intension to provide it somewhen soon but I have the feeling it is not done by simply pushing it through the converter.\n\nAlthough this is version 1.0, CustomEnum.vb is a carefully written, highly optimized, with a high code coverage tested and well documented source file written in VB.NET that provides 2 base classes called \"CustomEnum\" and \"ValueEnum\" with generic type parameters that allow you to build your own Enums according your individual needs.\n\nThe first generic type parameter is always the type of your Enum (the subclass), the optional last one the type of the combination (Enum.Combi), and the second one (ValueEnum only) is the type of the value.\n\nHere an example:\n\nPublic Class ShirtSize\n    Inherits CustomEnum(Of ShirtSize)\n\n    'Constructors\n\n    Private Sub New()\n        MyBase.New()\n    End Sub\n\n    'Public Fields\n\n    Public Shared ReadOnly S As New ShirtSize()\n    Public Shared ReadOnly M As New ShirtSize()\n    Public Shared ReadOnly L As New ShirtSize()\n    Public Shared ReadOnly XL As New ShirtSize()\n\nEnd Class\n\nThe usage is the same as with standard Enums:\n\n\tDim myShirt As Object = GetShirt(ShirtSize.XL)\n\n    Private Function GetShirt(size As ShirtSize) As Object\n        '...\n    End Function\n\nNote that Enums are now reference types and may be null. Although this forces you to always check for null you never have to include that \"None\" member in your Enum anymore...\n\nIf you like to work with \"Select Case\" that's still possible, you just have to append the \".Index\" to the member, eg. ShirtSize.XL.Index.\n\nBut CustomEnum also provides equals/inequals operators, you can use them like this \"If (size = ShirtSize.XL) Then ...\"\n\nDid I already mention that CustomEnum fully supports member combinations like with the FlagsAttribute? They are implemented as an inner class called \"Combi\" and there are functions and operators to construct them:\n\n\tSetHighSeasons(Season.Spring Or Season.Summer Or Season.Autumn)\n\nAnd the method looks like this:\n\n    Private Sub SetHighSeasons(seasons As Season.Combi)\n        For Each mySeason As Season In seasons\n            'do something\n        Next\n    End Sub\n\nThere is many more to it:\n\n - CustomEnum is thread-safe.\n - CustomEnum checks and enforces correct implementation.\n - CustomEnum has lots of attributes applied to simplify editing, debugging and code-analysis.\n - CustomEnum allows to have subclasses for common functionality (although you cannot inherit members).\n - CustomEnum runs in partially trusted code as well as in full trust\n - CustomEnum does not make use of LINQ nor extension methods and is pure .NET 2.0.\n - CustomEnum has no dependencies to other packages.\n - CustomEnum only references mscorlib.dll and System.dll.\n - CustomEnum ships as one single source file (and an additional tutorial folder that can easily be deleted).\n - CustomEnum is free of charge.\n\nThank you for your interest in this package, feed-back is welcome, our email naming convention is \n<given name>.<surname>@<company>.ch\n\nBest regards\nChris",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.20.06.18/customenum.vb.1.0.4.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "id": "CustomEnum.vb",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/MS-PL",
  "packageHash": "6OB18F7RwoLmcyGYfnBucYUgZKHPM8Xq1r8vzJPm8Q5YXxn9iMBviBZO2Mr2SDbRGJBPuq52YpGbW/qPbOLJjg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 120943,
  "published": "2013-09-16T23:16:11.947Z",
  "releaseNotes": "Changes in 1.0.4:\n      Correction of typos in documentation and code-analysis-suppression-comments, additional tutorial page added with autoincremented values.",
  "requireLicenseAcceptance": false,
  "summary": "Source file in VB that provides two base classes for generic custom enum declarations.\n(Replacement for the good old .NET 1.0 based System.Enum)",
  "title": "CustomEnum.vb",
  "version": "1.0.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.20.06.18/customenum.vb.1.0.4.json#dependencygroup/.netframework2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework2.0"
    }
  ],
  "tags": [
    "CustomEnum.vb",
    "System.Enum",
    "Enum",
    "replacement",
    "enums",
    "custom",
    "CustomEnum",
    "ValueEnum",
    "generic",
    "GenericEnum",
    "String",
    "StringEnum",
    "combination",
    "flag",
    "Flags",
    "support",
    "FlagsAttribute",
    "source",
    "SourceCode",
    "VB",
    "VB.Net",
    "net20",
    "net30",
    "net35",
    "net40",
    "net45",
    "Inserto",
    "chha",
    "Christoph",
    "Hafner"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}