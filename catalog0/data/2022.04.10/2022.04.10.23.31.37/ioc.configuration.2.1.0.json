{
  "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Artak Hakobyan",
  "catalog:commitId": "72219a4e-ae91-4ff6-9265-d4cd1e3f166f",
  "catalog:commitTimeStamp": "2022-04-10T23:31:37.2958311Z",
  "contentFiles": "",
  "copyright": "Copyright 2018 (c) OROptimizer. All rights reserved.",
  "created": "2022-04-10T23:29:20.64Z",
  "description": "The main functions of IoC.Configuration library are:\n\n\t\t\t1)  Container agnostic configuration of dependency injection using XML configuration file. The file has section where container can be specified, that will be handling dependency injection resolutions.\n\t\t\tCurrently two popular containers are supported, Ninject and Autofac, via extension libraries IoC.Configuration.Ninject and IoC.Configuration.Autofac, that are available in Nuget.org.\n\t\t\tThe dependency injection container (e.g., Autofac, Ninject) can be easily switched in configuration file.\n\n\t\t\tIn addition, the configuration file has sections for settings, plugins, startup actions, dynamically generated implementations of interfaces (see autoService elements under  iocConfiguration/dependencyInjection/autoGeneratedServices in example configuration files in GitHub test projects in https://github.com/artakhak/IoC.Configuration/tree/master/IoC.Configuration.Tests).\n\n\t\t\t2) Container agnostic configuration of dependency injection in code.\n\n\t\t\tThe bindings are specified using IoC.Configuration chained methods, however the actual resolutions are done using one of the popular dependency injection containers, Ninject and Autofac, via extension libraries IoC.Configuration.Ninject and IoC.Configuration.Autofac.\n\t\t\tNote: Use either IoC.Configuration.Ninject 2.0.0 or higher, or IoC.Configuration.Autofac 2.0.0 with IoC.Configuration.Autofac 2.x.x.",
  "id": "IoC.Configuration",
  "isPrerelease": false,
  "lastEdited": "2022-04-10T23:31:19.09Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "lhtEEA1yi8wNioIS+GRkrnZawKTQ0Gy3142oRnwjKyVUQbsDlPzNWgMuR6Bx+9Fo2UrknmAyJsG/eISuesoZRQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 143009,
  "projectUrl": "http://iocconfiguration.readthedocs.io/",
  "published": "2022-04-10T23:29:20.64Z",
  "releaseNotes": "1) Added a new element 'autoServiceCustom' that can be placed under 'iocConfiguration/autoGeneratedServices' in configuration file to provide a custom implementation for a service in attribute 'interface'.\n\t\t\tThis element has some similarity to element 'autoService', however can be used when more control is necessary over the autogenerated implementation.\n\t\t\t'autoService' provides auto-generated implementation of interface methods and properties by using the information in elements like 'if', 'default', 'object', etc under elements 'autoService/autoProperty' and 'autoService/autoMethod'.\n\t\t\tOn the other hand, 'autoServiceCustom' generates the interface implementation by using the code generator class IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator that is setup in element 'autoServiceCodeGenerator' under element 'autoServiceCustom'.\n\t\t\tThe interface IoC.Configuration.ConfigurationFile.ICustomAutoServiceCodeGenerator has method  GenerateCSharp(ICustomAutoGeneratedServiceInfo customAutoGeneratedServiceInfo, IDynamicAssemblyBuilder dynamicAssemblyBuilder, string generatedClassNamespace,  string generatedClassName) which generates C# implementation for the\n\t\t\tinterface in 'autoServiceCustom', as well as other methods for validation. See the configuration file \"IoCConfiguration_autoServiceCustom.xml\" as well as tests in folder 'AutoServiceCustom' in test project 'IoC.Configuration.Tests' for examples on using this element.\n\n\t\t\tA good application of 'autoServiceCustom' is to generate an interface implementation, based on C# attributes, as demonstrated by examples in AutoServiceCustom folder in test project.\n\n\t\t\tElement 'autoServiceCustom' requires more work than configuring auto-generated service using the element 'autoService', however element 'autoServiceCustom' provides more flexibility than 'autoService'.\n\n\t\t\t2) Added a new overloaded method \"IFileBasedDiContainerConfigurator IoC.Configuration.DiContainerBuilder.DiContainerBuilder.StartFileBasedDi(FileBasedConfigurationParameters fileBasedConfigurationParameters,\n\t\t\tout IoC.Configuration.ConfigurationFile.IConfiguration loadedConfiguration)\". This method is using a parameter of a new type \"IoC.Configuration.DiContainerBuilder.FileBased.FileBasedConfigurationParameters\" instead of using multiple\n\t\t\tparameters that old overloaded methods use. In addition to supporting all the features the old overloaded methods provided, FileBasedConfigurationParameters has the following new properties and methods to support some new features:\n\n\t\t\t-Property \"OROptimizer.ILoadedAssemblies LoadedAssemblies { get; }\". The property value OROptimizer.ILoadedAssemblies provides a list of currently loaded assemblies that should be added to dynamically generated assembly as references.\n\t\t\tIf the value of LoadedAssemblies is set to \"OROptimizer.AllLoadedAssemblies\", all assemblies loaded in current app domain will be added as references to dynamically generated assembly.\n\t\t\tSee tests in IoC.Configuration.Tests.AssemblyReferences.AssemblyReferencesTests for examples on using  FileBasedConfigurationParameters.LoadedAssemblies.\n\n\t\t\t-Property \"IEnumerable<string>\n\t\t\tAdditionalReferencedAssemblies { get; set; }\". This property value provides a list of absolute paths of assemblies that will be added to dynamically generated assembly as references.\n\n\t\t\tSee tests in IoC.Configuration.Tests.AssemblyReferences.AssemblyReferencesTests for examples on using  FileBasedConfigurationParameters. AdditionalReferencedAssemblies.\n\n\t\t\t-Property \"IEnumerable<IAttributeValueTransformer> AttributeValueTransformers { get; set; }\". This property is a list of \"IoC.Configuration.AttributeValueTransformer.IAttributeValueTransformer\" (a new interface in this release) items, which are used to transform attribute values in XML configuration file to some other values, before the DI is loaded form the configuration.\n\t\t\tSee tests in \"IoC.Configuration.Tests.AttributeValueTransformers.AttributeValueTransformersTests\" for examples on how to use this property.\n\n\t\t\t-Property \"Delegates.OnDynamicAssemblyEmitComplete OnDynamicAssemblyEmitComplete { get; set; }\". This property value can be configured to process the results of dynamic assembly generation (e.g., log compilation errors, etc.).\n\n\t\t\t-NOTE: IoC.Configuration.DiContainerBuilder.FileBased.FileBasedConfigurationParameters is a sealed class, and in the future new properties might be added to provided more features.\n\n\t\t\t3) Added OROptimizer.ServiceResolver.IDiBasedObjectFactory in package OROptimizer.Shared for DI resolution that does not require binding configuration and always resolves the types using non-singletone binding.\n\t\t\tThis interface can be used in cases when we want to guarantee non-singletone resolution. The CreateInstance(...) methods in this interface use DI resolution to inject constructor parameters in created instance.\n\t\t\t\n\t\t\t4) Added a new extensions package \"IoC.Configuration.Extensions\" with a class IoC.Configuration.Extensions.AssemblyScanning.AssemblyScannerForSelfBoundTypesModule that can be used to scan the assemblies and register types using self-binding.\n\n\t\t\t5) Removed 'typeFactory' element and related classes (e.g., IoC.Configuration.ConfigurationFile.ITypeFactory, etc) that have been deprecated in 2019. Use autoService element under autoGeneratedServices instead.\n\t\t\t\n\t\t\t6) Replaced the XML schema file IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd with IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd.\n\t\t\tThis matters only if the schema file is used in Visual Studio for code completion support (the library always load the most recent XML schema from a resource file). The latest XML schema can be accessed at \n\t\t\thttp://oroptimizer.com/ioc.configuration/V2/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd.\n\n\t\t\t7) Removed number of interfaces, methods and properties that were deprecated since 2019.\n      \n            8) Depricated the attribute 'loadAlways' in element 'iocConfiguration/assemblies/assembly'. Using this attribute will have no effect, and the attribute will be removed from the schema in the future. The attribute was used to force load an assembly and add it to dynamically generated assembly. IoC.COnfiguration was modified to add all assemblies in 'iocConfiguration/assemblies/assembly' elements to dynamically generated assembly, so this attribute is not needed anymore. See the https://iocconfiguration.readthedocs.io/en/latest/troubleshooting/troubleshooting-dynamically-generated-assembly.generated.html or the tests in folder AssemblyReferencesInDynamicallyGeneratedAssembly for more details on adding references to dynamic assembly.",
  "repository": "",
  "verbatimVersion": "2.1.0",
  "version": "2.1.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#dependencygroup/.netstandard2.0/microsoft.codeanalysis",
          "@type": "PackageDependency",
          "id": "Microsoft.CodeAnalysis",
          "range": "[2.3.2, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#dependencygroup/.netstandard2.0/oroptimizer.shared",
          "@type": "PackageDependency",
          "id": "OROptimizer.Shared",
          "range": "[2.1.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#dependencygroup/.netstandard2.0/system.runtime.loader",
          "@type": "PackageDependency",
          "id": "System.Runtime.Loader",
          "range": "[4.3.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#IoC.Configuration.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3153,
      "fullName": "IoC.Configuration.nuspec",
      "length": 9810,
      "name": "IoC.Configuration.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#lib/netstandard2.0/IoC.Configuration.dll",
      "@type": "PackageEntry",
      "compressedLength": 96709,
      "fullName": "lib/netstandard2.0/IoC.Configuration.dll",
      "length": 334336,
      "name": "IoC.Configuration.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#lib/netstandard2.0/IoC.Configuration.xml",
      "@type": "PackageEntry",
      "compressedLength": 19069,
      "fullName": "lib/netstandard2.0/IoC.Configuration.xml",
      "length": 206312,
      "name": "IoC.Configuration.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#content/EmbeddedResources/ReadMe.txt",
      "@type": "PackageEntry",
      "compressedLength": 354,
      "fullName": "content/EmbeddedResources/ReadMe.txt",
      "length": 651,
      "name": "ReadMe.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#contentFiles/any/netstandard2.0/EmbeddedResources/ReadMe.txt",
      "@type": "PackageEntry",
      "compressedLength": 354,
      "fullName": "contentFiles/any/netstandard2.0/EmbeddedResources/ReadMe.txt",
      "length": 651,
      "name": "ReadMe.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#content/IoC.Configuration.Content/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd",
      "@type": "PackageEntry",
      "compressedLength": 3316,
      "fullName": "content/IoC.Configuration.Content/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd",
      "length": 39688,
      "name": "IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#contentFiles/any/netstandard2.0/IoC.Configuration.Content/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd",
      "@type": "PackageEntry",
      "compressedLength": 3316,
      "fullName": "contentFiles/any/netstandard2.0/IoC.Configuration.Content/IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd",
      "length": 39688,
      "name": "IoC.Configuration.Schema.7579ADB2-0FBD-4210-A8CA-EE4B4646DB3F.xsd"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#content/IoC.Configuration.Content/IoC.Configuration.Template.xml",
      "@type": "PackageEntry",
      "compressedLength": 1702,
      "fullName": "content/IoC.Configuration.Content/IoC.Configuration.Template.xml",
      "length": 4973,
      "name": "IoC.Configuration.Template.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#contentFiles/any/netstandard2.0/IoC.Configuration.Content/IoC.Configuration.Template.xml",
      "@type": "PackageEntry",
      "compressedLength": 1702,
      "fullName": "contentFiles/any/netstandard2.0/IoC.Configuration.Content/IoC.Configuration.Template.xml",
      "length": 4973,
      "name": "IoC.Configuration.Template.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.04.10.23.31.37/ioc.configuration.2.1.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9463,
      "fullName": ".signature.p7s",
      "length": 9463,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "IoC",
    "Configuration",
    "IoC+Configuration",
    "dependency+injection",
    "inversion+of+control",
    "Autofac",
    "Ninject",
    "IoC.Configuration",
    "dependency+injection+configuration"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}