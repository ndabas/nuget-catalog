{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.27.05.58.14/hopac.0.0.0.42.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Housemarque Inc.",
  "catalog:commitId": "1c2ae1f1-ac54-4791-a1f3-746f6d7c0fb3",
  "catalog:commitTimeStamp": "2015-02-27T05:58:14.5248517Z",
  "copyright": "Copyright 2015",
  "created": "2015-02-27T05:57:22.34Z",
  "description": "Inspired by languages like Concurrent ML and Cilk, Hopac is a library for F# with the aim of making it easier to write efficient parallel, asynchronous, concurrent and reactive programs. Hopac is licensed under a MIT-style license. See project website for further information.",
  "iconUrl": "https://avatars2.githubusercontent.com/u/10173903",
  "id": "Hopac",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/Hopac/Hopac/blob/master/LICENSE.md",
  "packageHash": "uh7Y3VcHjufS4dtoMaSfrpb5mp4oIZ47Y2PINJgBjGS6N/xtGMHAbgrU/mmijtvgzhcvrFZM3WiVVyPQr9ZWvg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 358483,
  "projectUrl": "https://github.com/Hopac/Hopac",
  "published": "2015-02-27T05:57:22.34Z",
  "releaseNotes": "Distribute work more eagerly.\nName worker threads.\nAdded monadic composition operator `>=>` for jobs.\nUpdated documentation.\nTuning streams.\nTweaked Promisesc.\nStarting to benchmark streams.\nAvoid an allocation when choosing over lazy promises.\nAdded `Stream.ofObservableOnMain`.\nAdded `Async.getMain`.\nAdded `Stream.ofObservableOn` and `Stream.ofObservable`.\nAdded `IObservable<_>.onceAlt`.\nRenamed `withNack` as `withNackJob` and `wrapAbort` as `wrapAbortJob`.\nAdded `Alt.wrapAbortFun`.\nAdded `Alt.choosy`, which is an optimized version of `Alt.choose` for arrays.\nAdded `Job.Scheduler.bind` for wrapping external asynchronous events.\nAdded `Alt.withNackFun`.\nInlineable `withNack` avoids closure allocation.\nAdded experimental support for running async comptations on the main synchronization context, which must be explicitly configured by application code.\nAdded `IObservable<'x>.onceAltOn` extension method for conveniently interfacing Hopac with suitable observables.\nAdded `TopLevel.startDelay` and `TopLevel.queueDelay` for convenience.\nRenamed `Builder.Join` to `Builder.Plus` and recognized that `Zero? must also be abstract.",
  "requireLicenseAcceptance": false,
  "summary": "A library for Higher-Order, Parallel, Asynchronous and Concurrent programming in F#.",
  "version": "0.0.0.42",
  "tags": [
    "f#",
    "fsharp",
    "parallel",
    "async",
    "concurrent",
    "reactive"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}