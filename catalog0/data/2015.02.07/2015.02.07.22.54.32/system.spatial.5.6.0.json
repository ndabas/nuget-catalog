{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.22.54.32/system.spatial.5.6.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Microsoft Corporation",
  "catalog:commitId": "498f7c81-85d3-45c4-90e7-c1e606339486",
  "catalog:commitTimeStamp": "2015-02-07T22:54:32.8294314Z",
  "created": "2013-08-16T20:07:48.93Z",
  "description": "Contains classes and methods that facilitate geography and geometry spatial operations. Targets .NET 4.0, Silverlight 4.0 or .NET Portable Lib with support for .NET 4.0, SL 4.0, Win Phone 7, and Win 8. Localized for CHS, CHT, DEU, ESN, FRA, ITA, JPN, KOR and RUS.",
  "iconUrl": "http://static.tumblr.com/hgchgxz/9ualgdf98/icon.png",
  "id": "System.Spatial",
  "isPrerelease": false,
  "lastEdited": "2014-01-27T08:06:21.523Z",
  "licenseUrl": "http://go.microsoft.com/?linkid=9809688",
  "packageHash": "O5hFsuKD1vUwXw9TrsbQ7XMlkL5qWHNJYSEchsaCmxFI60ffa3FSHnqvOBHKzLplaiA3enVPufDPgv9xSrp11A==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 484058,
  "projectUrl": "http://go.microsoft.com/fwlink/?LinkId=220868",
  "published": "2013-08-16T20:07:48.93Z",
  "releaseNotes": "What is in the release:\n\nVisual Studio 2013 Support\n\nThe WCF DS 5.6.0 tooling installer has support for Visual Studio 2013. If you are using Visual Studio 2013 and would like to consume OData services, you can use this tooling installer to get Add Service Reference support for OData. Should you need to use one of our prior runtimes, you can still do so using the normal NuGet package management commands (you will need to uninstall the installed WCF DS NuGet packages and install the older WCF DS NuGet packages).\n\nPortable Libraries\n\nAll of our client-side libraries now have portable library support. This means that you can now use the new JSON format in Windows Phone and Windows Store apps. The core libraries have portable library support for .NET 4.0, Silverlight 5, Windows Phone 8 and Windows Store apps. The WCF DS client has portable library support for .NET 4.5, Silverlight 5, Windows Phone 8 and Windows Store apps. Please note that this version of the client does not have tombstoning, so if you need that feature for Windows Phone apps you will need to continue using the Windows Phone-specific tooling.\n\nURI Parser Integration\n\nThe URI parser is now integrated into the WCF Data Services server bits, which means that the URI parser is capable of parsing any URL supported in WCF DS. We have also added support for parsing functions in the URI Parser.\n\nPublic Provider Improvements - Reverted\n\nIn the 5.5.0 release we started working on making our providers public. In this release we hoped to make it possible to override the behavior of included providers with respect to properties that donâ€™t have native support in OData v3, for instance enum and spatial properties. Unfortunately we ran into some non-trivial bugs with $select and $orderby and needed to cut the feature for this release.\n\nPublic Transport Layer\n\nIn the 5.4.0 release we added the concept of a request and response pipeline to WCF Data Service Client. In this release we have made it possible for developers to directly handle the request and response streams themselves. This was built on top of ODataLib's IODataRequestMessage and IODataResponseMessage framework that specifies how requests and responses are sent and recieved. With this addition developers are able to tweak the request and response streams or even completely replace the HTTP layer if they so desire. We are working on a blog post and sample documenting how to use this functionality.\n\nBreaking Changes\n\nIn this release we took a couple of breaking changes. As these bugs are tremendously unlikely to affect anyone, we opted not to increment the major version number but we wanted everyone to be aware of what they were:\n- Developers using the reading/writing pipeline must write to Entry rather than Entity on the WritingEntryArgs\n- Developers should no longer expect to be able to modify the navigation property source in OnNavigationLinkStarting and OnNavigationLinkEnding\n- Developers making use of the DisablePrimitiveTypeConversion knob may see a minor change in their JSON payloads; the knob previously only worked for the ATOM format\n\nBug Fixes\n\n- Fixes a performance issue with models that have lots of navigation properties\n- Fixes a performance issue with the new JSON format when creating or deleting items\n- Fixes a bug where DisablePrimitiveTypeConversion would cause property type annotations to be ignored in the new JSON format\n- Fixes a bug where LoadProperty does not remove elements from a collection after deleting a link\n- Fixes an issue where the URI Parser would not properly bind an action to a collection of entities\n- Improves some error messages\n\nKnown Issues\n\nThe NuGet runtime in Visual Studio needs to be 2.0+ for Add Service Reference to work properly. If you are having issues with Add Service Reference in Visual Studio 2012, please ensure that NuGet is up-to-date.",
  "requireLicenseAcceptance": true,
  "title": "System.Spatial for OData v1-3",
  "version": "5.6.0",
  "tags": [
    "wcf",
    "data",
    "services",
    "odata",
    "odatalib",
    "edmlib",
    "spatial",
    "ado.net",
    "ef",
    "entity",
    "framework",
    "open",
    "protocol",
    "wcfds",
    "wcfdataservices",
    "dataservices"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}