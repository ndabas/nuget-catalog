{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.06.26.16.12.33/fluent.sql.1.0.0.40.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "GothicSecret",
  "catalog:commitId": "6427038b-e7c1-47d1-87e9-8174febf5eb7",
  "catalog:commitTimeStamp": "2017-06-26T16:12:33.9961007Z",
  "copyright": "Copyright Â© GothicSecret 2016",
  "created": "2017-06-26T16:09:35.26Z",
  "description": "Fluent.Sql designed to simplify a work with SqlConnection, SqlTransaction, SqlCommand and SqlDataReader objects",
  "id": "Fluent.Sql",
  "isPrerelease": false,
  "lastEdited": "2017-06-26T16:12:20.077Z",
  "listed": true,
  "packageHash": "SApYYC8ECIf7PTytUpc3iiQkpJgonXCtpk4X3uGaRD6dT6O++g96dffjBV1xOQYyT3sLW04c5D7lM3j2YKdfmw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 54808,
  "projectUrl": "https://github.com/GothicSecret/FluentSql",
  "published": "2017-06-26T16:09:35.26Z",
  "releaseNotes": "+ Added\n- Removed\n# Fix\n* Changed, minor\n! Changed, major\n$ Refactored\n\nTODO:\n=====\n\n1.0.0.40\n+ Add SqlQueryFactoryException when Embedded resource not found\n$ SqlQueryFactoryBase, SqlQueryAssemblyFactoryBase\n\n1.0.0.39\n! GetFloat => GetSingle\n\n1.0.0.37\n+ SingleReaderFluentSqlCommand<T>, ISingleReaderFluentSqlCommand<T>\n+ FluentSqlCommandFactory.SingleReader<T>\n\n1.0.0.35\n! Rename IFluentCommandFactory => IFluentSqlCommandFactory\n\n1.0.0.34\n! FluentSqlCommand.SetParameters(Action<IDalSqlCommand> iSerializeParameters) now adds action to the list\n    of \"to be done\" instead of just execute only one specified\n\n1.0.0.33\n# Fix DefaultConnection and DefaultTransaction\n\n1.0.0.32\n* IDalSqlConnection DefaultConnection => Func<IDalSqlConnection> DefaultConnection\n* IFluentSqlTransaction DefaultTransaction => Func<IFluentSqlTransaction> DefaultTransaction\n\n1.0.0.31\n$ Rafactored\n* CreateConnection => Create\n* FluentCommandFactory => FluentSqlCommandFactory\n+ Add DalSqlCommand.Connection\n+ Add FluentCommandFactory.DefaulConnection\n- Remove FluentCommandFactory.Context\n- Remove FluentCommandFactory.KeepConnection\n+ Add FluentSqlRepository\n+ Add FluentSqlTransaction\n+ Add SqlQueryFactoryBase\n+ Add SqlQueryAssemblyFactoryBase\n\n1.0.0.25\n+ Add ExecuteScalar result casting\n\n1.0.0.24\n+ Add DalSqlReader.Get{XXX}Nullable methods\n\n1.0.0.23\n* Minor changes\n\n1.0.0.22\n# Add AddWithValue method when calling with null argument\n\n1.0.0.21\n* Minor changes\n\n1.0.0.20\n# Fix Connection closed problem\n\n1.0.0.19\n* Minor changes\n\n1.0.0.18\n* Minor changes\n\n1.0.0.17\n$ Refactoring DalContext => DalContextBase\n\n1.0.0.16\n+ Add ReadAllBytes method\n\n1.0.0.15\n# Fix SetParameters\n\n1.0.0.14\n$ Refactored all fluent commands\n\n1.0.0.13\n+ Added interfaces methods to commands that returns themselves as interfaces\n\n1.0.0.12\n+ Added missing members to interfaces\n\n1.0.0.11\n+ Added IFluentCommandFactory interface\n\n1.0.0.10\n+ LazyCachedDalSqlDataReader - Added cahching modes: lazy (used when CahchingMode.Lazy)\n+ Addded FluentCommandFactory\n\n1.0.0.9\n+ Added BaseFluentSqlCommand<T>.KeepConnection option\n  (True - uses DalContext.CreateConnection)\n  (False - uses DalContext.PersistentConnection, which must be managed manually)\n+ Added DalSqlConnectionFactory\n* DalContext has PersistentConnection (old)\n+ DalContext has CreateConnection() method\n! DalSqlDataReader -> NonCachedDalSqlDataReader (used when CahchingMode.Disabled)\n+ Added CachedDalSqlDataReader (DalSqlDataReader - Add caching for field names/indices) (used when CahchingMode.Standard)\n+ Add ReaderFluentSqlCommand<TResultContainer>.SetCachingMode (Default is CachingMode.Standard)\n+ DalSqlDataReader - Add cahching modes: disabled, standart\n$ - Refactored DalSql* objects and FluentCommands to use IDalSqlDataReader\n* Fixed bug when SerializeParameters is null\n\n1.0.0.6\n+ ExecuteReaderYield Added to ReaderFluentSqlCommand<TResultContainer>\n\n1.0.0.5\n+ Added new methods to DalSqlDataReader.\n+ Added support for multiple Results handling in ReaderFluentSqlCommand<T>\n\n1.0.0.4\n+ Added BaseFluentSqlCommand<T>.SetKeepConnection(bool). Default is true.\n+ Added ReaderFluentSqlCommand<T>.SetBehavior(CommandBehavior). Default is CommandBehavior.Default.\n+ Added new methods to DalSqlDataReader.",
  "requireLicenseAcceptance": false,
  "title": "Fluent.Sql",
  "verbatimVersion": "1.0.0.40",
  "version": "1.0.0.40",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.06.26.16.12.33/fluent.sql.1.0.0.40.json#Fluent.Sql.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1497,
      "fullName": "Fluent.Sql.nuspec",
      "length": 4233,
      "name": "Fluent.Sql.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.06.26.16.12.33/fluent.sql.1.0.0.40.json#lib/net46/FluentSql.dll",
      "@type": "PackageEntry",
      "compressedLength": 18919,
      "fullName": "lib/net46/FluentSql.dll",
      "length": 51712,
      "name": "FluentSql.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.06.26.16.12.33/fluent.sql.1.0.0.40.json#lib/net46/FluentSql.pdb",
      "@type": "PackageEntry",
      "compressedLength": 32622,
      "fullName": "lib/net46/FluentSql.pdb",
      "length": 163328,
      "name": "FluentSql.pdb"
    }
  ],
  "tags": [
    "Fluent",
    "Sql",
    "SqlConnection",
    "SqlTransaction",
    "SqlCommand",
    "SqlDataReader",
    "database"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}