{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.00.30/nlite.data.0.3.0.8221.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "netcasewqs",
  "catalog:commitId": "576450e5-8444-406e-8d89-b931e2161764",
  "catalog:commitTimeStamp": "2015-02-02T21:00:30.3840065Z",
  "created": "2012-12-05T02:38:28.353Z",
  "description": "NLite.Data Framework 是一个轻量简单易用的开源Linq ORM数据访问组件，支持Nullable类型和枚举类型，对Linq的谓词提供了完美的支持，旨在让绝大部份的主流数据库都使用 Linq 来进行程序开发，让开发人员访问数据库从SQL中解放出来，易学易用上手快，配置简单，并且提供了源代码下载，方便定制。支持多数据库，目前支持Access、SQLServer、SqlCE、SQLite、MySQL、ORACLE，未来还会支持更多的数据库。\n\n        设计理念\n\n        一： 约定胜于配置    \n\n              连接字符串的配置完全遵循.Net 的连接字符串配置规范。 \n\n             表名映射原则： 默认情况下表名和实体类名完全一致，如果不一致那么可以通过TableAttribute标签来制定，下个版本或许将会增加其它的扩展方式 \n\n             列名映射原则：默认情况下实体的属性或字段和表中列名完全一致（不区分大小写），如果不一致那么可以通过ColumnAttribute标签来制定，下个版本或许将会增加其它的扩展方式 \n\n             单一主键映射原则：默认情况下实体的ID属性或”实体名称\"+ID的属性自动映射为表的主键，当字段或属性的类型是Int型或Long类型时，那么该字段在数据库中应是自动增一或基于序列的方式 \n\n            多主键映射原则：如果表中有联合主键那么需要在是实体类中把对应的字段或属性添加IdAttribute标签即可 \n\n           一对多映射原则：假设有两个实体Customer 和 Order两个实体,Customer 里面包含一个Order的列表属性，那么只需要在Order类里面包含一个CustomerID 的属性或字段即可自动完成一对多映射，当然也可以通过AssociationAttribute标签来指定映射的ThisKey 和ThatKey来手动建立关联（建议自动建立）。 \n\n          多对一映射原则：假设有两个实体Customer 和 Order两个实体,Order里面包含一个Customer的属性引用，那么只需要在Order类里面包含一个CustomerID 的属性或字段即可自动完成一对多映射，当然也可以通过AssociationAttribute标签来指定映射的ThisKey 和ThatKey来手动建立关联（建议自动建立），其实一对多和多对一的映射完全一致都需要在多方的那里添加一个属性（一方的类名名称+“ID”）。\n         多对多映射原则：不支持，需要转换成两个一对多映射，和数据库完全保持一致. \n\n      二：基于关系的OR映射的原则\n\n       表和实体是一一对应的，不支持多对多，完全遵循数据库的设计规范，降低开发人员的学习成本（因为数据库不支持多对多，如果OR映射支持多对多那么开发人员将要学习多对多的映射规则，比如NHibernate，ManyToMany、Set、Bag、Reverse等配置规范以及在多对对数据保存的时候也需要很多学习成本）\n\n       三：无状态原则\n\n    DbContext中没有保存实体的状态，没有任何数据缓存，所有的数据都是和数据库实时的，只要调用DbSet的Insert、Update、Save方法将立即和数据库进行对应的操作。",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.00.30/nlite.data.0.3.0.8221.json#frameworkassemblygroup",
    "assembly": [
      "System.Core",
      "System.Data",
      "System.Xml",
      "System.Configuration"
    ]
  },
  "id": "NLite.Data",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://ndo.codeplex.com/license",
  "packageHash": "ILgvK2iZP6gQUnHbrj+ofbTnbyGq7lg+uWdBKxt2WbZX0cAYhu7dZpXHtrXbRJCxzGlXcefGs/qkRDPBK1HFUg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 470690,
  "projectUrl": "http://ndo.codeplex.com",
  "published": "2012-12-05T02:38:28.853Z",
  "releaseNotes": "代码没有任何更改，把4.0的包打成3.5了，该版本修正过来",
  "requireLicenseAcceptance": false,
  "summary": "",
  "title": "NLite Linq ORM Framework",
  "version": "0.3.0.8221",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.00.30/nlite.data.0.3.0.8221.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.00.30/nlite.data.0.3.0.8221.json#dependencygroup/nlite",
          "@type": "PackageDependency",
          "id": "NLite",
          "range": "[0.9.3.11, )"
        }
      ]
    }
  ],
  "tags": [
    "ORM",
    "Linq",
    "NLite",
    "ObjectRelationalMapping",
    "DAL",
    "SQL",
    "DB",
    "POCO"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}