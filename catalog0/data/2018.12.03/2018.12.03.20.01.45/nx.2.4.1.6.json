{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "tiny(tiny@sandsea.info)",
  "catalog:commitId": "b5d54177-2dc6-4d22-aedb-05ed7f41fe75",
  "catalog:commitTimeStamp": "2018-12-03T20:01:45.747263Z",
  "copyright": "Mr. Tiny (tiny@sandsea.info) 2014",
  "created": "2014-12-19T09:35:32.15Z",
  "description": "A .Net Helper Library For Rapid Development.Give You A Easy Way Send Http Request",
  "iconUrl": "https://ICON_URL_HERE_OR_DELETE_THIS_LINE",
  "id": "Nx",
  "isPrerelease": false,
  "lastEdited": "2018-12-03T20:01:28.557Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
  "listed": true,
  "packageHash": "TzgZmL0QTnNRye7Xl1P/TC/ww5RZ2P0lA9bX7TLP5E+zZMPJfxKoJkYZlfEIMPuCEofcvooISM7ll+iZVRfLYQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 365856,
  "projectUrl": "https://www.sandsea.info/svn/nxframework",
  "published": "2014-12-19T09:35:32.15Z",
  "releaseNotes": "0x01:Simulation of the HTTP request ======================================\n      \n      var ctxIn = RequestBuilder.Create(\"default\")\n          .SetUrl(\"http://sample.com/api/sendmsg\")\n          .SetUserAgent(\"Nx Framework 2.4.1.0\")\n          .SetReferer(\"http://sample.com/api/login\")\n          .SetProxy(new WebProxy(\"127.0.0.1:8888\")) //or .SetProxy(new WebProxy(\"127.0.0.1:8888\",enable:true))\n          .WithCookie(\"name=value\") //or .WithCookies(List<Cookie> cookies) and so on.\n          .AllowAutoRedirect(true)\n          .SetHttpMethod(\"POST\")\n          .WithHeader(\"X-Token\",\"x9v4d-d043b\")\n          .WithTextInput(\"user\",\"tiny\")\n          .WithFileInput(\"file1\",\"D:\\a.txt\")\n          .WithBytesInput(\"file2\",new byte[]{0x00,0x03,0x00,0x7f})\n          .SetTimeout(3000)\n          .UsingAjax()\n          .DisableProxy() //or .EnableProxy()\n          .Build();\n          \n      var ctxIn = RequestManager.GetResponse(ctxIn);\n      if(ctxIn.Exception==null)\n      {\n          //if html, we have a nice intergration from Ivony's code(http://www.nuget.org/packages/Jumony.Core/) builtin.\n          var document = respCtx.ResponseDocument;//get IHtmlDocument object.\n\n          //Filter elements like JQUERY using the extensions from Ivony\n          var theElements = document.AllElements().Find(\".pager\");\n          \n          //LINQ then\n          //var matchedElemList = theElements.Where(...).ToList();\n          \n          //Get text directly\n          var text = ctxIn.Text;\n          \n          //The stream, and other useful properties of IResponseContext\n          var ms = ctxIn.Stream;\n      }\n      \n      0x02:Read Text Based File EASY And FAST.====================================\n      \n      var file = new Nx.IO.TextFileInfo(\"d:\\\\d.txt\");\n\n      //random row\n      while(true)\n      {\n          Console.WriteLine(file.RandomRow.Text);\n      }\n\n      //row items\n      foreach(var item in file.RowItems)\n      {\n          //useful properties:\n          \n          //item.RowIndex\n          //item.Text\n          //item.IsEmptyLine\n          //item.DataLength\n      }\n\n      0x03:ThreadSafeRandom =============================================\n      \n        see class Nx.ThreadSafeRandom\n        \n        \n      0x04:Extensions ====================================================\n      The usage is [using Nx.Extensions;]\n      Provide some extension method for:\n      Array \n      Compression\n      Cookie\n      MD5\n      Stream\n      Time\n      Uri\n      ...\n      For Details, see the reflection tree under Nx.Extension namespace of Nx under the VisualStudio Assembly References folder of vs project after install nx from nuget or you added reference manually.\n      \n      0x05:DynamicJson   ==================================================\n      See http://dynamicjson.codeplex.com/ and thanks the project.\n\n\n      0x06:Blocked Dialog for waiting background task(s) ==================\n      //Show a dialog with text tips  until background action executed.\n      void WindowManager.ShowWaitingDialog(Action action,string title,string tipText);\n      \n      //Show a dialog with progress tips and text tips until the quantity of submitted tasks equals the one processed.\n      //ReadProcessed and ReadSubmitted are delegate\n      void ShowWaitingDialog(ReadProcessed readProcessed, ReadSubmitted readSubmitted, string title, string tips)\n      \n      \n      0x07:Multithread tasks =================================================================\n      //define the worker\n      class Worker : WorkerBase<int, int, int>\n      {\n          public Worker(int i) : base(i) { }\n          protected override int DoWork(int inputParams)\n          {\n              this.WorkerProgressSignal(inputParams++);\n              Console.WriteLine(inputParams);\n              return inputParams;\n          }\n      }\n      //new a ThreadingTaskManager\n      Nx.Threading.ThreadingTaskManager ttm = new Nx.Threading.ThreadingTaskManager();\n      \n      //optionally, we can config the threadpool associated to ttm\n      ttm.ThreadPool.Setminthread(1000);\n\n      //we create a list of Worker\n      var workList = new List<IWorker>();\n      for (int i = 0; i < 10000; i++)\n      {\n          var worker = new Worker(i);\n          workList.Add(worker);\n      }\n\n      //submit the task list and execute asynchronous\n      ttm.Start<int, int>(workList, true);\n\n      //block current thread and show the progress\n      Nx.Controls.WindowManager.ShowWaitingDialog(() => { \n          return ttm.TotalProcessed;\n      }, () => { \n          return ttm.TotalSubmitted; \n      });\n      //will go on if ttm.TotalSubmitted==ttm.TotalProcessed;\n      \n      PS:\n      I'm considering put this project on github someday.\n      For this time, any suggestions or bugs can be submited by sending email to me(tiny@sandsea.info).\n      \n      [Updated at 2014.12.19 utc+8 (Beijing time)]\n      \n\n      UPDATE LOGS\n      2.1.1.6\n      Add multiThread task manage support.See 0x07.\n\n      2.4.1.4\n      Cancel IDispose interface of IResponseContext.\n      The ResponseContext will auto dispose resources after request completed now.\n      Removed WebResponse propertiy of IResponseContext.\n      Will no modify the default value of HttpWebRequest.Timeout if not specific a value by SetTimeout method of RequestBuilder.\n\n      2.4.1.3\n      Intergrate the DynamicJson class under Nx.Data namespace, see the project page:http://dynamicjson.codeplex.com/ for more details or usage\n\n      2.4.1.2\n      * Add some http header setting method for Nx.Net.RequestBuilder:\n      * Add [Accept] with [SetAccept(string)]\n      * Add [Host] with [SetHost(string)]\n      * Use AutoSetHost() to set the host from url.If url is http://www.baidu.com/index.php, then the host will be set to www.baidu.com\n      * Set KeepAlive to false as default for HttpWebReqeust\n      * Add Dispose() method for IResponseContext to manual dispose http connection resources.\n      * Add [TransferEncoding] with [SetTransferEncoding(string)]\n      * At this version, method Nx.Net.RequestBuilder.SetProxy(WebProxy) will also enable the proxy(previous versions have not do that.)\n\n      Fixed bugs on decompress gzip stream from http response.\n      2.4.1.1\n      Fix bug on determine if a request is multipart-form when build requst context\n\n      2.4.1.0\n      Many Bugs Fixed.\n      With Ivony Html Extension Builtin.Thanks Ivony's code(http://www.nuget.org/packages/Jumony.Core/)\n      Add Chaos.NaCl's cryto class\n\n      2.3.0.0\n      add support http post file using RequestBuilder.WithFileInput.\n      the RequestBuilder.WithFormData changes to RequestBuilder.WithTextInput\n\n      2.2.1.5\n      fixed bug in Nx.TimeUtil.GetTimestamp()\n\n      2.2.1.4\n      small bug fix.\n\n      2.2.1.3\n      Add \"HttpMethod PUT\" support for the core request utils.\n\n      2.2.1.2\n      fix the bug that the post data does not submitted after use Nx.Net.RequestBuilder.SetHttpMethod(\"POST\")",
  "requireLicenseAcceptance": false,
  "title": "Nx Framework",
  "verbatimVersion": "2.4.1.6",
  "version": "2.4.1.6",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#Nx.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3124,
      "fullName": "Nx.nuspec",
      "length": 7823,
      "name": "Nx.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#lib/net40/Nx.dll",
      "@type": "PackageEntry",
      "compressedLength": 270045,
      "fullName": "lib/net40/Nx.dll",
      "length": 695808,
      "name": "Nx.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#lib/net40/Nx.XML",
      "@type": "PackageEntry",
      "compressedLength": 79910,
      "fullName": "lib/net40/Nx.XML",
      "length": 716784,
      "name": "Nx.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#content/Crypto/Internal/Salsa/replace%20regex.txt",
      "@type": "PackageEntry",
      "compressedLength": 72,
      "fullName": "content/Crypto/Internal/Salsa/replace%20regex.txt",
      "length": 80,
      "name": "replace%20regex.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#content/Useful/TextFile1.txt",
      "@type": "PackageEntry",
      "compressedLength": 173,
      "fullName": "content/Useful/TextFile1.txt",
      "length": 178,
      "name": "TextFile1.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.20.01.45/nx.2.4.1.6.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9460,
      "fullName": ".signature.p7s",
      "length": 9460,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Nx",
    "Tiny",
    "HttpRequest",
    "HttpWebRequest"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}