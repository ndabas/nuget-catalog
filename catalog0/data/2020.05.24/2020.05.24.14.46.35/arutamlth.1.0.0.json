{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.24.14.46.35/arutamlth.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "ARUTAMLTH",
  "catalog:commitId": "76b47600-c23f-492c-9a2e-7c5d511ed593",
  "catalog:commitTimeStamp": "2020-05-24T14:46:35.5125569Z",
  "created": "2020-05-24T14:41:31.93Z",
  "description": "Microsoft.AspNetCore.Mvc.NewtonsoftJson \nservices.AddControllers().AddNewtonsoftJson(o => o.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore);\n\nDotnet controller\n[FromQuery] ?sort=asc\n\nusing var transaction = Context.Database.BeginTransaction();\n\tbike.Id = id;\n\tvar c = await Context.Bikes.FindAsync(id);\n\tContext.Bikes.Remove(c);\n\tContext.Bikes.Add(bike);\n\tawait Context.SaveChangesAsync();\n\tawait transaction.CommitAsync();\n\t\nvar startedRental = await Context.Rentals.FirstAsync();\nstartedRental.End = System.DateTime.Now;\nstartedRental.TotalCosts = CostCalculation.CalculateTotalCost(startedRental);\nstartedRental.Customer = await Context.Customers.FindAsync(rental.CustomerID);\nstartedRental.Bike = await Context.Bikes.FindAsync(rental.BikeID);\nContext.Rentals.Update(startedRental);\nawait Context.SaveChangesAsync();\n\nvar result=await unpaid\n\t.Include(c => c.Customer)\n\t.Select(item => new { item.CustomerID, item.Customer.LastName, item.Customer.FirstName, item.Id, item.Begin, item.End })\n\t.ToListAsync();\n\nreturn (await dataContext.Deposits.Include(\"Membership.Member\").ToArrayAsync())\n\t.GroupBy(d => new { d.Membership.Begin.Year, d.Membership.Member })\n\t.Select(i => new DepositStatistics\n\t{\n\t Year = i.Key.Year,\n\t Member = i.Key.Member,\n\t TotalAmount = i.Sum(d => d.Amount)\n\t});\nusing var transaction = Database.BeginTransaction();\n\tawait Database.ExecuteSqlRawAsync(\"DELETE FROM Taxis\");\n\tawait Database.ExecuteSqlRawAsync(\"DELETE FROM Drivers\");\n\tawait Database.ExecuteSqlRawAsync(\"DELETE FROM Rides\");\n\tawait transaction.CommitAsync();\nvar result = await Rides.Where(e => e.Start.Year == year and e.Start.Month == month).ToListAsync();         \n\tvar drivers=result.GroupBy(d => d.Driver);\n\tvar ret=drivers.Select(b => new DriverStatistics\n\t{\n\t\tDriverName = b.Key.Name,\n\t\tTotalCharge = b.Sum(d => d.Charge) ?? 0\n\t});\npublic async Task T> GetFromServiceAsync T>(string path)\n{\n\n\tvar response = await client.GetStringAsync(BASE_URL + path);\n\treturn JsonSerializer.Deserialize T>(response, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });\n}\npublic async Task HttpResponseMessage> PostToServiceAsync T>(string path, T payload )\n{\n\tvar body = new StringContent(JsonSerializer.Serialize T>(payload), Encoding.UTF8, \"application/json\");\n\tvar response = await client.PostAsync(BASE_URL + path,body);\n\treturn response;\n}\t\t\t\nWPF GUI\nBindableBase\nCustomers customers = new Customers(Customer, client);\ncustomers.Show();\nMainWindow.Close.Execute();\n\n\n\tComboBox ItemsSource=\"{Binding Taxis}\" DisplayMemberPath=\"LicensePlate\" SelectedItem=\"{Binding SelectedTaxi}\" />\n\tUpdateSourceTrigger=PropertyChanged\nDataGrid Name=\"TaskTable\" ItemsSource=\"{Binding Tasks}\" RowEditEnding=\"TaskTable_RowEditEnding\" AutoGenerateColumns=\"False\" >\n\tDataGrid.Columns>\n\t\tDataGridTextColumn Header=\"TaskId\"  Binding=\"{Binding TaskId, UpdateSourceTrigger=LostFocus}\"/>\n\t\npublic async void TaskTable_RowEditEnding(object sender, DataGridRowEditEndingEventArgs e)\n{\n\tvar task = e.Row.Item as Task;\n\tawait GetTasks();\n\tif (task != null and task.Name == String.Empty)\n\t{\n\t\tvar result = await client.DeleteToServiceAsync(\"Tasks/\" + task.TaskId);\n\t\tMessageBox.Show(\"DELETE\" + result.StatusCode.ToString());\n\t}\n\telse if (Tasks.Any(b => b.TaskId == task.TaskId))\n\t{\n\t\tvar result = await client.PutToServiceAsync(\"Tasks/\" +task.TaskId, task);\n\t\tMessageBox.Show(\"EDIT\" + result.StatusCode.ToString());\n\t}\n\telse\n\t{\n\t\tvar result = await client.PostToServiceAsync(\"Tasks\" , task);\n\t\tMessageBox.Show(\"ADD\" + result.StatusCode.ToString());\n\t}\n\tawait GetTasks();\n}",
  "id": "ARUTAMLTH",
  "isPrerelease": false,
  "lastEdited": "2020-05-24T14:46:34.5Z",
  "listed": true,
  "packageHash": "++oRewo+LmzVber3OUwn8RJu5bNOyLXtYi5T8E+ecb1BKwfObKJ4H3b3KltbaXry/PbVbbj1kkOMWNG4x3l4FQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 19105,
  "published": "2020-05-24T14:41:31.93Z",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.24.14.46.35/arutamlth.1.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.24.14.46.35/arutamlth.1.0.0.json#ARUTAMLTH.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1668,
      "fullName": "ARUTAMLTH.nuspec",
      "length": 4205,
      "name": "ARUTAMLTH.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.24.14.46.35/arutamlth.1.0.0.json#lib/netstandard2.0/ARUTAMLTH.dll",
      "@type": "PackageEntry",
      "compressedLength": 4869,
      "fullName": "lib/netstandard2.0/ARUTAMLTH.dll",
      "length": 15872,
      "name": "ARUTAMLTH.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.05.24.14.46.35/arutamlth.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9470,
      "fullName": ".signature.p7s",
      "length": 9470,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}