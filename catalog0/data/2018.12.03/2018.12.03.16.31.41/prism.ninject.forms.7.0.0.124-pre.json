{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Brian Lagunas,Bart Lannoeye,Dan Siegel",
  "catalog:commitId": "e84cc1c6-4378-4179-ada1-1de888e6e59c",
  "catalog:commitTimeStamp": "2018-12-03T16:31:41.7817896Z",
  "created": "2017-10-06T00:12:10.237Z",
  "description": "Use these extensions to build Xamarin.Forms applications with Prism and Ninject.",
  "iconUrl": "http://prismlibrary.github.io/images/prism-logo-graphic-128.png",
  "id": "Prism.Ninject.Forms",
  "isPrerelease": true,
  "lastEdited": "2018-12-03T16:31:26.163Z",
  "licenseUrl": "https://github.com/PrismLibrary/Prism/blob/master/LICENSE",
  "listed": false,
  "packageHash": "clfOw+D7cslu9OU0t+1gCvV4e4Esp/v03W2Tjr6Mw1lOXl39HfEzPzaQOCN7tT7+ROj469CmcNtLNYR+2Q5ZRA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 20556,
  "projectUrl": "https://github.com/PrismLibrary/Prism",
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "## Prism.Core\n* .NET Standard Support\n* Added method to clear all errors on ErrorsContainer \n* Add capability to DelegateCommand's ObservesProperty to observe properties of complex types\nExample:\n`ObservesProperty(() => Property.NestedProperty.NestedPoperty)`\n\n## Prism.Forms\n* Fixed #683: .NET Standard support\n* Fixed #765: Deep linking within a NavigationPage results in an incorrect ContentPage Title on Android \n* Fixed #1008: NavigationParameters: Not possible to specify parent type as generic parameter T\n* Fixed #1024: XF: NavigationService swallowing Exceptions \n* Fixed #1025: Xamarin.Forms deprecated the Device.OS property in favor of the RuntimePlatform property.\n* Fixed #1027: Support macOS\n* Fixed #1044: When Detail of MasterDetailPage is null, Modal Navigation is possible \n* Fixed #1045: When calling NavigateAsync with NavigationPage, old page's Destroy on the stack is not called \n* Fixed #1046: When calling DeepLink from Navigation Stack, the second page becomes Modal navigation \n* Fixed #1054: When deep linking within NavigationPage, page order is reversed \n* Fixed #1063: Master of MasterDetailPage will not be destroyed\n* Fixed #1085: Error occurs if null path is specified in EventToCommandBehavior \n* Fixed #1089: DebugLogger does not work in nuget-package \n* Fixed #1132: Prism Forms Modularity extension methods\n* Fixed #1133: IModuleCatalog AddModule returns wrong type \n* Fixed #1139: Modularity Enhancements\n* Fixed #1076: IActiveAware not working when ContentPage (as child of a TabbedPage) is wrapped into a NavigationPage\n\n**IDeviceService**\n* deprecated OnPlatform methods\n* added DeviceRuntimePlatform property - this mimics the XF API and returns a string\n* added RuntimePlatform property which returns an Enum of type RuntimePlatform and wraps the XF string-based values\n\n**Container Extensions**\n* deprecated the RegisterTypeForNavigationOnPlatform signature that requires explicit platform parameters\n* added new signature that accepts new IPlatform objects\nExample:\n```\nContainer.RegisterTypeForNavigationOnPlatform<MainPage, MainPageViewModel>(\"Main\", \n\tnew Platform<MainPage_Android>(RuntimePlatform.Android),\n\tnew Platform<MainPage_iOS>(RuntimePlatform.iOS));\n```\n\n# TabbedPage Navigation Behavior Change - BREAKING\n## Current Behavior (v6.3.0)\n`NavigateAsync(\"TabbedPage/ViewA/ViewB\")` will select the tab ViewA in the TabbedPage if it exists, then continue navigating.  If ViewA does not exist as a tab, then you will continue to navigate as expected.\n\n`NavigateAsync(\"TabbedPage/NavigationPage/ViewA/ViewB\")` would search the TabbedPage for the first instance of a tab that was a NavigationPage, then navigate within the Navigation page the remaining ViewA and ViewB pages.  This provided the ability to deep link into a tab's nested navigation page, but there was no way to opt-out of this behavior.\n\nAlso, the INavigationAware methods did not get called to all tabs meaning that you would be responsible for forwarding any parameters to all your tabs.\n\n## New Behavior\n`NavigateAsync(\"TabbedPage/ViewA/ViewB\")` will **no longer** select any tabs, but rather continue processing the navigation as separate pages on the navigation stack.\n\nIf you wish to select a tab, you will now use a parameter called \"selectedTab\" to indicate which tab you would like to select.\n\n`NavigateAsync(\"TabbedPage?selectedTab=MiddleTab/ViewA/ViewB\")`\n\nThis will navigate to the TabbedPage, selected the \"MiddleTab\" and continue navigating ViewA and ViewB onto the navigation stack.\n\nFor tabs that are wrapped inside a NavigationPage, you can use the \"|\" symbol to indicate the hierarchy.\n\n`NavigateAsync(\"TabbedPage?selectedTab=NavigationPage|MiddleTab\")`\n\nThere is a constant in the `KnownNavigationParameters` called `SelectedTab` that you can use instead of a string.\n\n`NavigateAsync($\"TabbedPage?{KnownNavigationParameters.SelectedTab}=MiddleTab\")`\n\nThis will search each tab to see if it is a navigation page and if the first page on the stack matches \"MiddleTab\".  This is much more flexible than the existing behavior as before it would take the first instance of the NavigationPage found.  Now you can choose which tab exactly.\n\nSome INavigationAware methods are now fired on all Tabs:\n- OnNavigatingTo will be invoked on the TabbedPage and ALL TABS.\n- OnNavigatedTo will be invoked on the TabbedPage and only the SELECTED TAB.\n- OnNavigatedFrom will be invoked on the TabbedPage and only the SELECTED TAB.\n\n**Note**: the parameter key `selectedTab` is now a reserved parameter name.  Similar to a reserved keyword in C#.  If you use this in your app as a key, you may experience undesired behavior.\n\n**Note**: At this time there is no native support for deep linking into a Tab that is a navigation page.  Please let me know if you need this functionality.",
  "repository": "",
  "requireLicenseAcceptance": false,
  "title": "Ninject for Prism for Xamarin.Forms",
  "verbatimVersion": "7.0.0.124-pre",
  "version": "7.0.0.124-pre",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#dependencygroup/.netstandard2.0/prism.forms",
          "@type": "PackageDependency",
          "id": "Prism.Forms",
          "range": "[7.0.0.124-pre, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#dependencygroup/.netstandard2.0/ninject",
          "@type": "PackageDependency",
          "id": "Ninject",
          "range": "[3.3.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#lib/netstandard2.0/Prism.Ninject.Forms.dll",
      "@type": "PackageEntry",
      "compressedLength": 5584,
      "fullName": "lib/netstandard2.0/Prism.Ninject.Forms.dll",
      "length": 12288,
      "name": "Prism.Ninject.Forms.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#lib/netstandard2.0/Prism.Ninject.Forms.xml",
      "@type": "PackageEntry",
      "compressedLength": 977,
      "fullName": "lib/netstandard2.0/Prism.Ninject.Forms.xml",
      "length": 7159,
      "name": "Prism.Ninject.Forms.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#Prism.Ninject.Forms.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2499,
      "fullName": "Prism.Ninject.Forms.nuspec",
      "length": 6200,
      "name": "Prism.Ninject.Forms.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.03.16.31.41/prism.ninject.forms.7.0.0.124-pre.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9494,
      "fullName": ".signature.p7s",
      "length": 9494,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "prism",
    "xamarin",
    "xamarin.forms",
    "ninject",
    "dependency",
    "injection"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}