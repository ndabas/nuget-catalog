{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.03.43.50/eggandgherkin.0.9.9.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "theeg",
  "catalog:commitId": "407793e3-6d16-40be-b537-a28642ec94ea",
  "catalog:commitTimeStamp": "2018-12-09T03:43:50.2726089Z",
  "created": "2014-09-29T14:07:14.42Z",
  "description": "DependencyAnalysis is a software testing tool for architectural constraints.\n\nWho are you?\n\n You are a software developer. You feel a special interest in test driven development, clean code and software architecture.\n\nWhat do you want?\n\n\n What you can see in your every day work, is the code quality level of classes in your IDE. Automated tests can be accessed, approved and extended right away.\n There are hurdles when surveying the software at the architectural level. It requires a tool first. There are quite some available. Now you have chosen for example CoolArchitecture2000 as the weapon of choice. It has a lot of features. But it has a drawback. Anytime you want to check something has changed to the architecture, you have to start that tool.\n\nWhat is wrong?\n\nWe developers are the Montgomery Scotts of our software project. Our place is the machine deck (the IDE). If we had to use the turbolifts to the bridge several times a day to see the results of our work, how long will this process last until we skip the bridge visit? \n\nWho do you think is responsible for keeping a software architecture in shape?\n\n1. The software architect?\n Well the architect designs dependencies, has an overview of the whole project and bears a vision of the future structure. He suggests technologies to use. Often, he is not the one, who makes daily commits and actively changes the projects structure.\n\n2.Can a dedicated developer be the guardian of architecture?\n This will work for a prolonged time. Once he goes on holiday, no one else will invest the effort required to perform the task of keeping everything in shape. His team mates are not familiar with this task.\n\n3. The answer must be every developer of the team is responsible.\n More or less each team member has an insight at the meta-level of the project he is contributing. This is the source where the check-ins come from. And this is the only instance that can actually influence a growing sofware project.",
  "iconUrl": "https://download-codeplex.sec.s-msft.com/Download?ProjectName=dependency&DownloadId=695456&Build=20748",
  "id": "EggAndGherkin",
  "isPrerelease": false,
  "language": "es-US",
  "lastEdited": "2018-12-09T03:43:11.64Z",
  "licenseUrl": "https://dependency.codeplex.com/license",
  "listed": true,
  "packageHash": "4Y8TIkO7ByAysAiCXpVI7V3/QlxkkJH2qpBsaRSqCUBeIBiLSlrrsXl7iBeXGlpjhNSXXYGzTYQj2TzjqMzqkw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 85792,
  "projectUrl": "https://dependency.codeplex.com/",
  "published": "2014-09-29T14:07:14.42Z",
  "releaseNotes": "Version 0.9.9\nFeatures:\n\n- Highlight all adjacent edges when selecting node in architecture graph \n- Option to hide transitive edges\n- Serialize InstructionCache; create metrics report in Addin process instead of AnalysisHost\n- Improve routing of edges, especially vertical Arrangement\n- Busy indicator during analysis in addin\n- Cheat sheet\n- Basic touch gestures\n- Metric to count references between two elements \n- Selection mode to hide nodes in architecture graph\n\nBugfixes\n- Visibility of Events is now determined by analyzing the \"add_\" accessor \n- Catch blocks create references to the exception type\n- Do not crash when analyzing a module that references a different version of DependencyAnalysis \n- By serializing the InstructionCache enable all tests when running as Addin. It was possible only running the standalone analyzer before.\n- fix a NullReferenceException in XamlReader\n\nVersion 0.9.8.1\n- Depending on systems theme, the results of tests are hardly readable (fixed with 0.9.8.1)\n- Types might be accidently marked generated, when they contain generated inner types (fixed with  0.9.8.1) \n\nVersion 0.9.8\n- Addin for MonoDevelop (Xamarin Studio, Playstation Mobile Studio etc.)\n- Addin supports Visual Studio 2013\n- Run Addin as standalone application\n- Halstead metric\n- Methodenreinheit\n- Check for common rules in Addin\n\nVersion 0.9.7   \n Display dependencies as graph (architecture graph)\n Enhance visual appearance of architecture graph\n Layered graph arrangement\n Analyze XAML resource dictionaries.\n Routing of edges in automatically arraged graph\n\n Analyze inheritance for all types not only those inside the project\n StackOverflowException on layer assignment in some graph types\n generated functional members like 'Boolean<FormatDisplayText>b__d(Double)' collapse with their parent member, for example 'FormatDisplayText'\n\nVersion 0.9.6   \n Create a SharpDevelop Addin\n Liskov Substitution Principle\n Provide MSTest template project\n Provide NUnit template project\n Provide xUnit template project\n\nWindows Installer XML setup for Addins has been cancelled \n\n During analysis ignore assemblies that cannot be loaded, instead of crash\n Analyze references to types that have no full name (yes they exist)\n\nVersion 0.9.5   \n Create a Visual Studio 2010 Addin\n Harmonize visuals for Addin\n Principle: Law of Demeter\n Store preferences for Addin per solution\n Drill down in proximity graph\n\n Scroll to zoom in graph uses wrong coordinates\n Omit dummy members that represent type references in graphs\n\nVersion 0.9.4  (Delayed by two weeks due to flood water in parts of Germany)\n Create Visual Studio 2012 Addin for ad-hoc analysis of your project\n Display metrics in a grid\n Adequate performing serialization between Addin (Visual Studio process) and AnalysisHost process\n Display dependencies as graph (proximity graph)\n Create a logo for the project\n improve performance of code duplication analysis\n\n Constructors of anonymous types no longer hide constructors of the declaring type during \"build dependencies\" phase\n Type descriptors were added multiple times to SubmoduleDescriptor.Types collection, same instance foreach inner anonymous type. Now ignored when already present.\n Metric Relational Cohesion correctly selects references within module\n\nVersion 0.9.3  \n Add predefined where-clauses for code of your project\n Elevate Setup class to the standard initialization for DependencyAnalysis\n Provide a standard ruleset for members that should be refactored\n Create XML reports\n Metrics report\n Code duplication report\n Code smell report\n Provide example XSLT files for XML reports\n\n DescriptorBuilder fills Name value of MemberDescriptor\n\nVersion 0.9.2  \n Basic code duplication analysis as \"Don't Repeat Yourself\" principle.\n New method Verifier.VerifyDoesNotReferTo that reports forbidden accessors, which is more verbose than Assert.IsFalse(Verifier.RefersTo(..));\n\n Instability returns 1 instead of infinity for object without any afferences and efferences\n\nVersion 0.9.1  \n Add Verification of design principles.\n Support \"Acyclic Dependency Principle\".\n Support \"Depend on Stable Principle\".\n Consolidate the API.\n Document the API contracts.\n Enter Beta stage.\n\n CilReader reads correct operand for branching instruction with short value\n return, continue and break do not count towards nesting depth\n\nVersion 0.9.0  \n Build dependency model\n Common metrics\n Allow tests on dependencies\n Qualify \"A refers to B\"\n VerifyThat\n VerifyMembersAreUsed\n VerifyForeignModules\n VerifyAccessType\n VerifyNoOtherReferrers\n VerifyVersatility",
  "requireLicenseAcceptance": false,
  "summary": "DependencyAnalysis is a development tool to qualify the evolvement of your software architecture within predefined limits. It is controlled by the unit test framework of your choice.",
  "title": "Egg and Gherkin (DependencyAnalysis)",
  "verbatimVersion": "0.9.9.3",
  "version": "0.9.9.3",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.03.43.50/eggandgherkin.0.9.9.3.json#EggAndGherkin.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3406,
      "fullName": "EggAndGherkin.nuspec",
      "length": 7662,
      "name": "EggAndGherkin.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.03.43.50/eggandgherkin.0.9.9.3.json#lib/DependencyAnalysis.dll",
      "@type": "PackageEntry",
      "compressedLength": 68368,
      "fullName": "lib/DependencyAnalysis.dll",
      "length": 171008,
      "name": "DependencyAnalysis.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.09.03.43.50/eggandgherkin.0.9.9.3.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9461,
      "fullName": ".signature.p7s",
      "length": 9461,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Dependency",
    "analysis",
    "software",
    "architecture",
    "graph",
    "unit",
    "testing",
    "quality",
    "metrics",
    "design",
    "principles"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}