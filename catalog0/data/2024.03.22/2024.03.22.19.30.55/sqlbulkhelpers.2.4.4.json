{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "BBernard / CajunCoding",
  "catalog:commitId": "6776a02c-8a56-455e-9f20-c2ea2cf7be6e",
  "catalog:commitTimeStamp": "2024-03-22T19:30:55.3136958Z",
  "copyright": "Copyright Â© 2019",
  "created": "2024-03-22T19:28:29.66Z",
  "description": "A library for easy, efficient and high performance bulk insert and update of data, into a Sql Database, from .Net applications. By leveraging the power of the SqlBulkCopy classes with added support for Identity primary key table columns this library provides a greatly simplified interface to process Identity based Entities with Bulk Performance with the wide compatibility of .NetStandard 2.0.",
  "id": "SqlBulkHelpers",
  "isPrerelease": false,
  "lastEdited": "2024-03-22T19:30:29.347Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "O5ETpfAhDoBUfcPslnOjS1QeBEOmW+4TI/QnFEhiRbYLP3lFDLfbzB7bAY9w0CbsMm3ZmK+2rys74W2jhAubMQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 167206,
  "projectUrl": "https://github.com/cajuncoding/SqlBulkHelpers",
  "published": "2024-03-22T19:28:29.66Z",
  "releaseNotes": "- Fix Collation Conflict Risks -- Thanks to Contribution by @simelis\n\t\t- Fix Security Vulnerability in System.Data.SqlClient\n\n\t\tPrior Relese Notes:\n\t\t- Fix Caching bug for Processing Definitions loaded from class Attribute annotations, etc. whereby the FullName was not correctly used resulting in cache conflicts and incorrect values when classes have the same name.\n\t\t- Add Support to manually control if Materialized Loading tables are cleaned-up/removed when using `SchemaCopyMode.OutsideTransactionAvoidSchemaLocks` via `materializeDataContext.DisableMaterializedStagingTableCleanup()`;\n\t\talways enabled by default and throws an `InvalidOperationException` if if SchemaCopyMode.InsideTransactionAllowSchemaLocks is used. This provides support for advanced debugging and control flow support.\n\t\t- Improved SqlBulkHelpers Configuration API to now provide Clone() and Configure() methods to more easily copy/clone existing configuration and change values is specific instances;\n\t\tincluding copy/clone of the Defaults for unique exeuctions.\n\t\t- Added support to load Table Schema for Temp Tables (basic Schema details needed for BulkInsert or Update, etc. to allow Bulk Loading Temp Tables!\n\t\t- Improved Error message for when custom SQL Merge Match qualifiers are specified but DB Schema may have changed making them invalid or missing from Cached schema.\n\t\t- Added new explicit CopyTableDataAsync() APIs which enable explicit copying of data between two tables on matching columns (automatically detected by column Name and Data Type).\n\t\t- Added new Materialized Data Configuration value MaterializedDataLoadingTableDataCopyMode to control whether the materialized data process automatically copies data into the Loading Tables after cloning. This helps to greatly simplify new use cases where data must be merged (and preserved) during the materialization process.\n\t\t- Fixed bug with Sql Bulk Insert/Update processing with Model Properties that have mapped database names via mapping attribute (e.g. [SqlBulkColumn(\"\")], [Map(\"\")], [Column(\"\")], etc.).\n\t\t- Changed default behaviour to no longer clone tables/schema inside a Transaction which creates a full Schema Lock -- as this greatly impacts Schema aware ORMs such as SqlBulkHelpers, RepoDb, etc.\n\t\t- New separate methods is now added to handle the CleanupMaterializeDataProcessAsync() but must be explicitly called as it is no longer implicitly called with FinishMaterializeDataProcessAsync().\n\t\t- Added new configuration value to control if Schema copying/cloning (for Loading Tables) is inside or outide the Transaction (e.g. SchemaCopyMode.InsideTransactionAllowSchemaLocks vs OutsideTransactionAvoidSchemaLocks).\n\t\t- Fix bug in ReSeedTableIdentityValueWithMaxIdAsync() when the Table is Empty so that it now defaults to value of 1.\n\t\t- Fixed a Bug where Identity Column Value was not correctly synced after Materialization Process is completing.\n\t\t- Added new Helper API to quickly Sync the Identity column value with the current MAX Id value of the column (ensuring it's valid after populating additional data); This is useful if you override Identity values for a full Table refresh, but then want to later insert data into the table.\n\t\t- Improved namespace for SqlBulkHelpers.CustomExtensions to reduce risk of conflicts with similar existing extensions.\n\t\t- Restored support for SqlConnection Factory (simplified now as a Func<SqlConnection> when manually using the SqlDbSchemaLoader to dynamically retrieve Table Schema definitions for performance.\n\t\t- Added support for other Identity column data types including (INT, BIGINT, SMALLINT, & TINYINT); per feature request (https://github.com/cajuncoding/SqlBulkHelpers/issues/10).\n\t\t- Added support to explicitly set Identity Values (aka SET IDENTITY_INSERT ON) via new `enableIdentityInsert` api parameter.\n\t\t- Added support to retreive and re-seed (aka set) the current Identity Value on a given table via new apis in the MaterializedData helpers.\n\t\t- Additional small bug fixes and optimiaztions.\n\t    - Added additional convenience methods to the `MaterializationContext` to retreive loading table info for models mapped via annotations (ModelType; vs only ordinal or string name).\n\t\t- Added support to cancel the materialization process via new `MaterializationContext.CancelMaterializationProcess()` method; allows passive cancelling without the need to throw an exception to safely stop the process.\n\t\t- Fixed small configuration initialization bugs when manually setting the `IsFullTextIndexHandlingEnabled` flag.\n\t\t- Fixed small bug where default configuration was not being used as the fallback.\n\t\t- Improve configuration of Timeouts and add support for Default DB Schema Loader timeout setting.\n\t\t- v2.0 provides a simplified and easier to access API as Extension Methods of the SqlTransaction class; this is a breaking change for Sql Bulk Insert/Update/etc, but shoudl be easy to migrate to!\n\t\t- v2.0 release also includes the NEW MaterializeData Helpers to make it significantly easier to implement highly efficient loading and publishing of materialized data via Sql Server much easier via an easy C# API.\n\t\t- The concept of Materializing data is to enable easy aysnc (background) bulk loading of data with, no impact to Live tables, until the data is switched out extremely quickly accomplishing a refresh of Live data in milliseconds.\n\t\t- The all new APIs include (but not limited to): ExecuteMaterializeDataProcessAsync(), ClearTablesAsync(), CloneTablesAsync(), DropTablesAsync(), RemoveFullTextIndexAsync(), & GetTableSchemaDefinition().\n\t\t- v2.0 Now includes support for Model mapping attributes for Class and Properties with support for RepoDb ([Map]), Linq2Sql ([Table]/[Column]), and Dapper ([Table]/[Column]); and others that use the same Attribute notations.\n\t\t- Add improved reliability now with use of LazyCacheHelpers for the in-memory caching of DB Schema Loaders; this now fixes an edge case issue where an Exception could be cached and re-initialization was never attempted.\n\t\t- Added support to now clear the DB Schema cache via SqlBulkHelpersSchemaLoaderCache.ClearCache() to enable dynamic re-initialization when needed (vs applicaiton restart).\n\t\t- Add improved support for use of SqlBulkHelpersDbSchemaCache with new SqlConnection factory func to greatly simplifying its use with optimized deferral of Sql Connection creation (if and only when needed) without having to implement the full Interface.\n\t\t- Merge PR to enable support Fully Qualified Table Names - Thanks to @simelis\n\t\t- Migrated the library to use `Microsoft.Data.SqlClient` vs legacy `System.Data.SqlClient` which is no longer being updated with most improvements, especially performance and edge case bugs. From v1.1 onward we will only use `Microsoft.Data.SqlClient`.\n\t\t- Added support to optimize Identity value updates with native performance (no reflection) by implementing ISqlBulkHelperIdentitySetter on the model classes.\n\t\t- Fix to correctly support fully qualified table names with schema.\n\t\t- Ensure BulkCopy also uses timeout parameter.\n\t\t- Add Overloads for easier initialization of SqlMergeMatchQualifierExpression class.\n\t\t- Breaking change; removed internal Default static references so that I can eliminate any dependency on Configuration framework for better support in .Net Core; New Caching helper and simple constructor with Sql Connection String replace this.\n\t\t- Added support to specify SqlCommand Timeout Seconds when initializing the Sql Bulk Helper class, instead of relying on the connection wide setting from the Connection string.\n\t\t- Added support for custom match qualifiers to be specified even if bulk inserting/updating data with Identity columns.  This addresses some edge use cases whereby data syncing may be taking place and Identities are used to differentiate data from multiple sources, but the actual merge matches needs to occur on unique fields of the source system.\n\t\t- Simplified initialization and constructors to provide easier use -- especially if SqlConnection/SqlTransaction already exists and ConnectionString is not available.  It's still recommended to use ISqlBulkHelpersConnectionProvider however, this may not be congruent with existin code bases so now the use of existing Sql Connection & Transaction is encapsulated. \n\t\t- Provided in-memory cache implementation to help manage caching of Schema DB Loaders for performance.\n\t\t- Improved pattern for Schema DB Loader management and encourage use of new Caching class; previously its possible that this was being re-loaded multiple times unnecessarily due to relying on internal behavior instead of managing it as a static/singleton.\n\t\t- Added more Integration Tests for Constructors and Connections, as well as the new DB Schema Loader caching implementation.\n\t\t- Fixed bug in dynamic initialization of SqlBulkHelpersConnectionProvider and SqlBulkHelpersDBSchemaLoader when not using the Default instances that automtically load the connection string from the application configuration setting.",
  "repository": "",
  "verbatimVersion": "2.4.4",
  "version": "2.4.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.0/fastmember",
          "@type": "PackageDependency",
          "id": "FastMember",
          "range": "[1.5.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.0/lazycachehelpers",
          "@type": "PackageDependency",
          "id": "LazyCacheHelpers",
          "range": "[1.3.2, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.0/microsoft.data.sqlclient",
          "@type": "PackageDependency",
          "id": "Microsoft.Data.SqlClient",
          "range": "[5.1.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.0/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[13.0.2, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.1/fastmember",
          "@type": "PackageDependency",
          "id": "FastMember",
          "range": "[1.5.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.1/lazycachehelpers",
          "@type": "PackageDependency",
          "id": "LazyCacheHelpers",
          "range": "[1.3.2, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.1/microsoft.data.sqlclient",
          "@type": "PackageDependency",
          "id": "Microsoft.Data.SqlClient",
          "range": "[5.1.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#dependencygroup/.netstandard2.1/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[13.0.2, )"
        }
      ],
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#SqlBulkHelpers.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 4373,
      "fullName": "SqlBulkHelpers.nuspec",
      "length": 11199,
      "name": "SqlBulkHelpers.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#lib/netstandard2.0/SqlBulkHelpers.dll",
      "@type": "PackageEntry",
      "compressedLength": 74241,
      "fullName": "lib/netstandard2.0/SqlBulkHelpers.dll",
      "length": 207360,
      "name": "SqlBulkHelpers.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#lib/netstandard2.1/SqlBulkHelpers.dll",
      "@type": "PackageEntry",
      "compressedLength": 74900,
      "fullName": "lib/netstandard2.1/SqlBulkHelpers.dll",
      "length": 209408,
      "name": "SqlBulkHelpers.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.03.22.19.30.55/sqlbulkhelpers.2.4.4.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 11528,
      "fullName": ".signature.p7s",
      "length": 11528,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "sql",
    "server",
    "database",
    "table",
    "bulk",
    "insert",
    "update",
    "identity",
    "column",
    "sqlbulkcopy",
    "orm",
    "dapper",
    "linq2sql",
    "materialization",
    "materialized",
    "data",
    "view",
    "materialized-data",
    "materialized-view",
    "sync",
    "replication",
    "replica",
    "readonly"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}