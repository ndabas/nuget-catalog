{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "f4bfd89a-d438-4028-bd69-134902a0fee9",
  "catalog:commitTimeStamp": "2019-07-29T01:53:45.2479981Z",
  "copyright": "Copyright 2019",
  "created": "2019-07-29T01:49:22.37Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2019-07-29T01:53:32.737Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "VC4e1Q7UmgxJI+DrktvAjb7wH20Pd42MigTmT5Y5eZJ+LrZdpu9s9qr02U/M719FGPsb35VpY6Xh6D7WhxXWUQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 455500,
  "published": "2019-07-29T01:49:22.37Z",
  "releaseNotes": "Unsigned Assembly\n\nThis version reverses some foolish changes to the trigonometric functions which first showed up in version 0.4.10. The code used to replace those functions is from version 0.4.7 with some slight modification to accomodate the ZeroOrPiMatchPrecision parameter.\n\nThis release provides the capability to replace the following core constants, which would otherwise be calculated as needed, by uploading text files containing the replacement values: PI, Log(2), and Log(10). The function names are: GetPIFromFile, GetLog2FromFile, GetLog10FromFile and require supplying accurate Base, Base10Precision, and FilePath. The queryable booleans PiIsFromFile, Log2IsFromFile, and Log10IsFromFile provide verification as to the source of the current values (whether uploaded or internally calculated).\n\nAnother change is to correct inaccurate results in x.Exp(Precision) when x is large compared to Precision and in x.BesselJ(alpha, Precision) when x is large. The change required that, for example, if x is input as \"new bf(string x0..., long Precision)\" where x0 is written as \".1E+1000\" and Precision is 100, x is computed to a precision of at least 1000. For the case of BesselJ, the change made was to compute x to a precision of an extra 1000 digits. It is then up to the user to make sure that the precision required for Exp or BesselJ is maintained at least at this level through whatever intervening functions are applied.\n\nThe reason for the use of version number 0.5.x rather than a 0.4.x series number however, is to indicate a change which could create unfavorable results for users seeking to use existing code or writing new code and finding intractable problems. With this version, the objects bf, bcr, and bcp have changed from being C# struct(s) to being C# class(es). As a result, the limitation in prior releases that required bf objects have mpz_t components with bitlength no more than 17179869120, and hence Base10 Precision no more than 5171655000, is gone. The thing to watch for when using the current release is that, although you may have a function 'static bf FunctionName(bf x, bf y)' for example, indicating that x and y are passed by value, you will find that changes to x or y internal to FunctionName may act as if you have really passed x and y by reference. To avoid these problems, it may be advisable to include, for the first code of the function, the line(s) x = new bf(x); y = new bf(y); . Similarly for bcr or bcp objects. This curious behavior has had me guessing for quite awhile in previous attempts to set up bf, bcr, and bcp as classes. \n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2019) and using Mpir.NET for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.NET and a base 2 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.5.1",
  "version": "0.5.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2184,
      "fullName": "LongCalc.nuspec",
      "length": 4666,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 41752,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 121856,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#content/xmpir32.dll",
      "@type": "PackageEntry",
      "compressedLength": 176893,
      "fullName": "content/xmpir32.dll",
      "length": 320000,
      "name": "xmpir32.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#content/xmpir64.dll",
      "@type": "PackageEntry",
      "compressedLength": 220506,
      "fullName": "content/xmpir64.dll",
      "length": 441856,
      "name": "xmpir64.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.29.01.53.45/longcalc.0.5.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}