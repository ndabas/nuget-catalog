{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.25.17.08.11/robosharp.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Terry Phillips",
  "catalog:commitId": "2e547037-655c-441d-bb04-d4fd4d26d142",
  "catalog:commitTimeStamp": "2016-02-25T17:08:11.4211669Z",
  "copyright": "Copyright 2016",
  "created": "2016-02-25T17:07:43.427Z",
  "description": "RoboSharp is a .NET wrapper for the awesome Robocopy windows application.",
  "iconUrl": "https://raw.githubusercontent.com/tjscience/RoboSharp/master/robosharp.png",
  "id": "RoboSharp",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "https://github.com/tjscience/RoboSharp/blob/master/license",
  "listed": true,
  "packageHash": "Fr2eIoE7HsxyKWQIYt58ka2Mz6s2storTmhjuTcSj1ZMbhnrfjVxiXe3dfopEhcHVFjqHXko+C9QZx7AdwMptA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 17808,
  "projectUrl": "https://github.com/tjscience/RoboSharp",
  "published": "2016-02-25T17:07:43.427Z",
  "releaseNotes": "Fixed the file size issue with a much better solution. Before, we were parsing the string (\"5355\", \"4 m\", \"2 g\") which worked but was not ideal. Now, we always send the /BYTES flag to return all sizes in bytes.",
  "requireLicenseAcceptance": false,
  "title": "RoboSharp",
  "verbatimVersion": "1.0.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.25.17.08.11/robosharp.1.0.0.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}