{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Aspose",
  "catalog:commitId": "392e5397-bcb3-4579-9c2c-5a8281102ee0",
  "catalog:commitTimeStamp": "2017-09-07T07:27:59.4654559Z",
  "copyright": "© Aspose 2002-2017. All Rights Reserved.",
  "created": "2017-09-07T07:27:25.267Z",
  "description": "Aspose.3D is a class library for working with 3D files. It allows developers to create/manipulate/render 3D scene and work with FBX,STL,OBJ,3DS,U3D,DAE,PDF,DRC,GLTF files. It allows you to open files and manipulate the elements in the 3D scene, from line,mesh,nurbs curve, to more complex elements animation, and then export to FBX ASCII, FBX binary, STL ASCII, STL binary, Collada, Wavefront .obj, 3DS, PDF formats, glTF, glTF2, Google Draco.",
  "iconUrl": "http://www.aspose.com/images/products/dotnet/Aspose.3D%20for%20.NET%2092%20x%2092.png",
  "id": "Aspose.3D",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://www.aspose.com/corporate/purchase/end-user-license-agreement.aspx",
  "listed": true,
  "packageHash": "Y57kfyvaGDVhCAYQs4QKPpxJs2wWgXWUiq0SjMvu4voNn4yY6StZ2qkrmv3qN6ATYgJjD1KgFStvki4gAEzUHg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 7596315,
  "projectUrl": "http://www.aspose.com/.net/3d-component.aspx",
  "published": "2017-09-07T07:27:25.267Z",
  "releaseNotes": "This page contains release notes for Aspose.3D for .NET 17.9.\n\n                    \n    \nOther Improvements and Changes\nKey Summary Category \n\nTHREEDNET-286 Add support to uniquely identify Meshes from FBX \nNew feature\n \n\nTHREEDNET-288 Add support to render scene in fully customized shaders New feature \n\nTHREEDNET-284 Improve the memory consumption when writing a large FBX file Enhancement \n\nTHREEDNET-293 Incorrect export OBJ with texture to GLTF and GLB Bug \n\nTHREEDNET-290 Animate properties rotation (euler) and scale for FBX format Bug \n\n      \n\nPublic API and Backwards Incompatible Changes\nSee the list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.3D for .NET. If you have concerns about any change listed, please raise it on the Aspose.3D support forum.\nAdds CreateAnimationClip member to Aspose.ThreeD.Scene class\n\nIt helps in creating animations.\nDefinition C#\n\n/// <summary>\n/// A shorthand function to create and register the <see cref=\"AnimationClip\"/>\n/// The first <see cref=\"AnimationClip\"/> will be assigned to the <see cref=\"CurrentAnimationClip\"/>\n/// </summary>\n/// <param name=\"name\">Animation clip&#39;s name</param>\n/// <returns></returns>\npublic Aspose.ThreeD.Animation.AnimationClip CreateAnimationClip(string name)\n\n\nThis is a shorthand function to create the animation clip, before this function was made, to create an animation clip you have to:\nLegacy approach C#\n\nAnimationClip anim = new AnimationClip(\"anim\");\nscene.AnimationClips.Add(anim);\n//set this as current clip\nscene.CurrentAnimationClip = anim;\n\n\nThe equivalent code is:\nNew approach C#\n\n//create an animation clip\nAnimationClip anim = scene.CreateAnimationClip(\"anim\");\n\n\nThe CreateAnimationClip method will make an AnimationClip in a scene.\n\nAdds CreateAnimationNode member to Aspose.ThreeD.Animation.AnimationClip class\n\nIt helps in creating animation node.\nDefinition C#\n\n/// <summary>\n/// A shorthand function to create and register the animation node on current clip.\n/// </summary>\n/// <param name=\"nodeName\">New animation node&#39;s name</param>\n/// <returns></returns>\npublic Aspose.ThreeD.Animation.AnimationNode CreateAnimationNode(string nodeName)\n\n\nThis is a shorthand function to create and register the AnimationNode, before this function you need to write:\nLegacy approach C#\n\nvar anode = new AnimationNode(\"animRot\");\nanim.Animations.Add(anode);\n\n\nThe equivalent code is:\nNew approach C#\n\nvar anode = anim.CreateAnimationNode(\"animRot\");\n\n\nAdds three members to Aspose.ThreeD.Animation.Curve class\n\nAll these members help in creating key frames.\nDefinition C#\n\n/// <summary>\n/// Create a new key frame with specified value\n/// A synonym of <see cref=\"CreateKeyFrame(double, float)\"/>\n/// </summary>\n/// <param name=\"time\">Time position(measured in seconds)</param>\n/// <param name=\"value\">The value at this time position</param>\npublic void Add(double time, float value)\n\n/// <summary>\n/// Create a new key frame with specified value\n/// A synonym of <see cref=\"CreateKeyFrame(double, float, Interpolation)\"/>\n/// </summary>\n/// <param name=\"time\">Time position(measured in seconds)</param>\n/// <param name=\"value\">The value at this time position</param>\n/// <param name=\"interpolation\">The interpolation type of this key frame</param>\npublic void Add(double time, float value, Aspose.ThreeD.Animation.Interpolation interpolation)\n\n/// <summary>\n/// Gets the enumerator to traverse all key frames.\n/// </summary>\n/// <returns></returns>\npublic System.Collections.Generic.IEnumerator<Aspose.ThreeD.Animation.KeyFrame> GetEnumerator()\n\n\nThe Add methods is the synonym of CreateKeyFrame, the CreateKeyFrame methods are all marked as obsoleted, and class Curve now implements the IEnumerable<KeyFrame>(so you can see a GetEnumerator is added), so you can make use of c#'s initializer syntax(Ref https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers) to simplify the creation of curve.\n\n\n \nAdds BindCurve member to Aspose.ThreeD.Animation.CurveMapping class\n \n\n\nThis will bind the curve data on an existing channel in CurveMapping.\nDefinition C#\n\n/// <summary>\n/// Bind the curve to specified channel\n/// </summary>\n/// <param name=\"channelName\">Which channel the curve will be bound to</param>\n/// <param name=\"curve\">The curve data</param>\npublic void BindCurve(string channelName, Aspose.ThreeD.Animation.Curve curve)\n\n\nBefore the version 17.9 to create animation manually you need to:\nC#\n\n//create a curve mapping on cube node&#39;s transform object, the curve manipulates the property &#39;Scale&#39;\nvar scale = anode.CreateCurveMapping(cube1.Transform, \"Scale\");\n\n// Create the animation curve on Y component of the scale \nCurve scaleYCurve = scale.CreateCurve(\"Y\");\n\n//let cube1.Transform.Scale.Y to be 1.0f at 0th sec using bezier interpolation\nscaleYCurve.CreateKeyFrame(0, 1.0f, Interpolation.Bezier);\n\n//let cube1.Transform.Scale.Y to be 2.0f at 2th sec using bezier interpolation\nscaleYCurve.CreateKeyFrame(2, 2.0f, Interpolation.Bezier);\n\n//let cube1.Transform.Scale.Y to be 0.2f at 5th sec using linear interpolation\nscaleYCurve.CreateKeyFrame(5, 0.2f, Interpolation.Linear);\n\n//let cube1.Transform.Scale.Y to be 1.0f at 8th sec using bezier interpolation\nscaleYCurve.CreateKeyFrame(8, 1.0f, Interpolation.Bezier);\n\n\nNow in version 17.9 you can implement the same task using the syntax sugar:\nC#\n\n//create a curve mapping on cube node&#39;s transform object, the curve manipulates the property &#39;Scale&#39;\nvar scale = anode.CreateCurveMapping(cube1.Transform, \"Scale\");\n// Create the animation curve on Y component of the scale \nscale.BindCurve(\"Y\", new Curve()\n{\n    //let cube1.Transform.Scale.Y to be 1.0f at 0th sec using bezier interpolation\n    {0, 1.0f, Interpolation.Bezier},\n    //let cube1.Transform.Scale.Y to be 2.0f at 2th sec using bezier interpolation\n    {2, 2.0f, Interpolation.Bezier},\n    //let cube1.Transform.Scale.Y to be 0.2f at 5th sec using linear interpolation\n    {5, 0.2f, Interpolation.Linear},\n    //let cube1.Transform.Scale.Y to be 1.0f at 8th sec using bezier interpolation\n    {8, 1.0f, Interpolation.Bezier}\n});\n\n\n \n\nAdd ShaderSet and PresetShaders members to Aspose.ThreeD.Render.Renderer class\n\nShaderSet allows you to override the default implementation of Aspose.3D's renderer, if you assigned a customized ShaderSet instance, the property PresetShadersbecomes PresetShaders.Customized, if you want to revert back to Aspose.3D's default shader set, you can assign PresetShaders.Default to invalidate the property ShaderSet, by using this mechanism, we can allow user to control the render effects while we can still provide our own implementation with enough extensibility.\nDefinition C#\n\n/// <summary>\n/// Gets or sets the shader set that used to render the scene\n/// </summary>\nAspose.ThreeD.Render.ShaderSet ShaderSet{ get;set;}\n/// <summary>\n/// Gets or sets the preset shader set\n/// </summary>\nAspose.ThreeD.Render.PresetShaders PresetShaders{ get;set;}\n\n\nAdds Aspose.ThreeD.Render.PresetShaders class\n\nRight now only the Default is available, other render styles like non-realistic shaders can be provided in the future.\nDefinition C#\n\n/// <summary>\n/// This defines the preset internal shaders used by the renderer.\n/// </summary>\npublic enum PresetShaders\n{\n    /// <summary>\n    /// Use the default shaders for phong/lambert/pbr materials\n    /// </summary>\n    Default,\n    /// <summary>\n    /// User&#39;s customized shader set\n    /// </summary>\n    Customized\n}\n\n\n\n \nAdds Aspose.ThreeD.Render.ShaderSet class\n\nIt helps in customizing the ShaderProgram used by each different materials to fully take control of the final render result.\nDefinition C#\n\n/// <summary>\n/// Shader programs for each kind of materials\n/// </summary>\npublic class ShaderSet : IDisposable\n{\n    /// <summary>\n    /// Gets or sets the shader that used to render the lambert material\n    /// </summary>\n    public ShaderProgram Lambert { get; set; }\n    /// <summary>\n    /// Gets or sets the shader that used to render the phong material\n    /// </summary>\n    public ShaderProgram Phong { get; set; }\n    /// <summary>\n    /// Gets or sets the shader that used to render the PBR material\n    /// </summary>\n    public ShaderProgram Pbr { get; set; }\n    /// <summary>\n    /// Gets or sets the fallback shader when required shader is unavailable\n    /// </summary>\n    public ShaderProgram Fallback { get; set; }\n}\n\n\nRenders the scene in Panaroma mode with customized shaders with linearize depth instead of colors.\n\nIt helps in customizing the ShaderProgram used by each different material to fully take control of the final render result.\nDefinition C#\n\npublic void RenderPanaromaInDepth()\n{\n    string path = TestData + @\"/textures/skybox2/skybox.obj\";\n    //load the scene\n    Scene scene = new Scene(path);\n    //create a camera for capturing the cube map\n    Camera cam = new Camera(ProjectionType.Perspective);\n    cam.NearPlane = 0.1;\n    cam.FarPlane = 200;\n    scene.RootNode.CreateChildNode(cam).Transform.Translation = new Vector3(5, 6, 0);\n    cam.RotationMode = RotationMode.FixedDirection;\n\n    //create two lights to illuminate the scene\n    scene.RootNode.CreateChildNode(new Light() {LightType = LightType.Point}).Transform.Translation = new Vector3(-10, 7, -10);\n    scene.RootNode.CreateChildNode(new Light()\n    {\n        LightType = LightType.Point,\n        ConstantAttenuation = 0.1,\n        Color = new Vector3(Color.CadetBlue)\n        }).Transform.Translation = new Vector3(49, 0, 49);\n\n        //create a render target\n        using (var renderer = Renderer.CreateRenderer())\n        {\n            //Create a cube map render target with depth texture, depth is required when rendering a scene.\n            IRenderTexture rt = renderer.RenderFactory.CreateCubeRenderTexture(new RenderParameters(false), 512, 512);\n            //create a 2D texture render target with no depth texture used for image processing\n            IRenderTexture final = renderer.RenderFactory.CreateRenderTexture(new RenderParameters(false, 32, 0, 0), 1024 * 3 , 1024);\n\n            //a viewport is required on the render target\n            rt.CreateViewport(cam, RelativeRectangle.FromScale(0, 0, 1, 1));\n            renderer.ShaderSet = CreateDepthShader(renderer);\n            renderer.Render(rt);\n\n            //execute the equirectangular projection post-processing with the previous rendered cube map as input\n            PostProcessing equirectangular = renderer.GetPostProcessing(\"equirectangular\");\n            equirectangular.Input = rt.Targets[0];\n            renderer.Execute(equirectangular, final);\n            //save the texture into disk\n            ((ITexture2D)final.Targets[0]).Save(RenderResult + \"/depth-equirectangular.png\", ImageFormat.Png);\n        }\n    }\n\nprivate static ShaderSet CreateDepthShader(Renderer renderer)\n{\n    GLSLSource src = new GLSLSource();\n    src.VertexShader = @\"#version 330 core\n    layout (location = 0) in vec3 position;\n    uniform mat4 matWorldViewProj;\n    out float depth;\n    void main()\n    {\n        gl_Position = matWorldViewProj * vec4(position, 1.0f);\n        float zfar = 200.0;\n        float znear = 0.5;\n        //visualize the depth by linearize it so we don&#39;t get a blank screen\n        depth = (2.0 * znear) / (zfar + znear - gl_Position.z /gl_Position.w  * (zfar - znear));\n    }\";\n    src.FragmentShader = @\"#version 330 core\n    in float depth;\n    out vec4 color;\n    void main()\n    {\n        color = vec4(depth, depth, depth, 1);\n    }\";\n    //we only need the position to render the depth map\n    VertexDeclaration fd = new VertexDeclaration();\n    fd.AddField(VertexFieldDataType.FVector3, VertexFieldSemantic.Position);\n    //compile shader from GLSL source code and specify the vertex input format\n    var shader = renderer.RenderFactory.CreateShaderProgram(src, fd);\n    //connect GLSL uniform to renderer&#39;s internal variable\n    shader.Variables = new ShaderVariable[]\n    {\n        new ShaderVariable(\"matWorldViewProj\", VariableSemantic.MatrixWorldViewProj)\n    };\n    //create a shader set\n    ShaderSet ret = new ShaderSet();\n    //we only use the fallback, and left other shaders unassigned, so all materials will be rendered by this shader\n    ret.Fallback = shader;\n    return ret;\n}\n\n\n\nUsage Examples\n\nPlease check the list of help topics added or updated in the Aspose.3D Wiki docs:\n\n    \n        \n\n        \nhttps://docs.aspose.com/display/3dnet/Aspose.3D+for+.NET+17.9+Release+Notes",
  "requireLicenseAcceptance": true,
  "summary": "Aspose.3D is a class library for working with 3D files.",
  "title": "Aspose.3D for .NET",
  "verbatimVersion": "17.9",
  "version": "17.9.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#Aspose.3D.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 4583,
      "fullName": "Aspose.3D.nuspec",
      "length": 14447,
      "name": "Aspose.3D.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net35/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 947274,
      "fullName": "lib/net35/Aspose.3D.dll",
      "length": 1922048,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net35_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 951268,
      "fullName": "lib/net35_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1927152,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net35_ClientProfile/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 947035,
      "fullName": "lib/net35_ClientProfile/Aspose.3D.dll",
      "length": 1922048,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net35_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 951025,
      "fullName": "lib/net35_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1927152,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net40/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 946271,
      "fullName": "lib/net40/Aspose.3D.dll",
      "length": 1917440,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net40_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 950266,
      "fullName": "lib/net40_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1922544,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net40_ClientProfile/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 945284,
      "fullName": "lib/net40_ClientProfile/Aspose.3D.dll",
      "length": 1917440,
      "name": "Aspose.3D.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.07.07.27.59/aspose.3d.17.9.0.json#lib/net40_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "@type": "PackageEntry",
      "compressedLength": 949214,
      "fullName": "lib/net40_ClientProfile_AuthenticodeSigned/Aspose.3D.dll",
      "length": 1922544,
      "name": "Aspose.3D.dll"
    }
  ],
  "tags": [
    "3D",
    "Aspose.3D",
    "FBX",
    "STL",
    "OBJ",
    "Wavefront",
    "3DS",
    "U3D",
    "Collada",
    "PDF",
    "glTF",
    "glTF2",
    "DXF",
    "PLY"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}