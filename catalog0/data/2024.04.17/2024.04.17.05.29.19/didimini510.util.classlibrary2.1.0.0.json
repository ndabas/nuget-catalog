{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.17.05.29.19/didimini510.util.classlibrary2.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "DidiMini510",
  "catalog:commitId": "243dbe48-6f1b-4647-992a-a166cbe84add",
  "catalog:commitTimeStamp": "2024-04-17T05:29:19.0309184Z",
  "created": "2024-04-17T05:26:48.027Z",
  "description": "try\n            {\n                sql.OpenConnect();\n                SqlCommand command = new SqlCommand($\"SELECT idUser, typeUser \" +\n                    $\"FROM [User] \" +\n                    $\"WHERE login = '{LoginTB.Text}' AND password = '{PasswordTB.Text}' \", sql.str);\n                SqlDataReader reader = command.ExecuteReader();\n                reader.Read();\n                int idUser = Convert.ToInt32(reader[\"idUser\"].ToString());\n                object result = reader[\"typeUser\"].ToString();\n                reader.Close();\n                sql.CloseConnect();\n                if (LoginTB.Text == \"\" || PasswordTB.Text == \"\")\n                {\n                    MessageBox.Show(\"Введите логин или пароль\");\n                }\n                else if (result != null)\n                {\n                    int typeUser = Convert.ToInt32(result);\n                    if (typeUser == 1)\n                    {\n                        Forms.AdminWin adminWin = new Forms.AdminWin();\n                        adminWin.Show();\n                        this.Close();\n                    }\n                    else if (typeUser == 2)\n                    {\n                        Forms.ExcuetWin excuetWin = new Forms.ExcuetWin(idUser);\n                        excuetWin.Show();\n                        this.Close();\n                    }\n                }\n                else\n                {\n                    MessageBox.Show(\"Неверный Логин или Пароль\");\n                }\n\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Error: {ex}\");\n            }\nprivate List<Equipment> equipmentList;\nprivate Equipment equipmentSelect;\nprivate void LoadEquipmentList()\n        {\n            equipmentList = new List<Equipment>();\n            try\n            {\n                sql.OpenConnection();\n                string query = \"SELECT Код_Оборудования, Наименование FROM Оборудование\";\n                SqlCommand command = new SqlCommand(query, sql.str);\n                SqlDataReader reader = command.ExecuteReader();\n\n                while (reader.Read())\n                {\n                    Equipment equipment = new Equipment\n                    {\n                        EquipmentCode = reader.GetInt32(reader.GetOrdinal(\"Код_Оборудования\")),\n                        Name = reader.GetString(reader.GetOrdinal(\"Наименование\"))\n                    };\n                    equipmentList.Add(equipment);\n                }\n                // Установка списка в качестве источника данных для ComboBox\n                OborudCB.ItemsSource = equipmentList;\n                OborudCB.DisplayMemberPath = \"Name\"; // Отображение наименования в ComboBox\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"Ошибка: {ex.Message}\");\n            }\n            finally\n            {\n                sql.CloseConnection();\n            }\n        }",
  "id": "DidiMini510.Util.ClassLibrary2",
  "isPrerelease": false,
  "lastEdited": "2024-04-17T05:28:50.52Z",
  "licenseExpression": "MIT",
  "licenseUrl": "https://licenses.nuget.org/MIT",
  "listed": true,
  "packageHash": "Sf1Fw9haPhcmgfJQf3fBTb1vXmpAyPrrJJMt4nhf9lcprtTmwD0JzQfuDlxd7OBOdZesvSjQHI6OTIClA+d2lQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 21682,
  "published": "2024-04-17T05:26:48.027Z",
  "releaseNotes": "<Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"1*\"/>\n            <ColumnDefinition Width=\"3*\"/>\n        </Grid.ColumnDefinitions>\n\n        <StackPanel Grid.Column=\"0\" Background=\"Lavender\">\n            <Label Content=\"Меню\" Grid.Column=\"1\" HorizontalAlignment=\"Center\" Margin=\"10\" VerticalAlignment=\"Top\"/>\n\n            <Button Content=\"Исполнение заявки\" HorizontalAlignment=\"Center\" Margin=\"10\" VerticalAlignment=\"Top\" Width=\"220\" Click=\"Button_Click\"/>\n            <Button Content=\"Отчетность и информатирование\" HorizontalAlignment=\"Center\" Margin=\"10\" VerticalAlignment=\"Top\" Width=\"220\" Click=\"Button_Click_1\"/>\n            <Button Grid.ColumnSpan=\"2\" Content=\"Выход\" HorizontalAlignment=\"Center\" Margin=\"10\" VerticalAlignment=\"Top\" Width=\"220\" Click=\"Button_Click_3\"/>\n\n        </StackPanel>\n\n        <Frame x:Name=\"mainFrame\" NavigationUIVisibility=\"Hidden\" Grid.Column=\"1\"/>\n\n<ListView HorizontalAlignment=\"Center\" Height=\"100\" Margin=\"0,10,0,0\" VerticalAlignment=\"Top\" Width=\"720\">\n            <ListView.View>\n                <GridView>\n                    <GridViewColumn Header=\"Оборудование\" Width=\"150\" DisplayMemberBinding=\"{Binding object}\"/>\n                    <GridViewColumn Header=\"Тип неисправности\" Width=\"150\" DisplayMemberBinding=\"{Binding typeProblem}\"/>\n                    <GridViewColumn Header=\"Клиент\" Width=\"250\" DisplayMemberBinding=\"{Binding clientFullName}\"/>\n                    <GridViewColumn Header=\"Статус\" Width=\"150\" DisplayMemberBinding=\"{Binding status}\"/>\n                </GridView>\n            </ListView.View>\n        </ListView>\n        <Label Content=\"Статус\" HorizontalAlignment=\"Left\" Margin=\"40,133,0,0\" VerticalAlignment=\"Top\" Width=\"150\"/>\n        <ComboBox HorizontalAlignment=\"Left\" Margin=\"40,165,0,0\" VerticalAlignment=\"Top\" Width=\"194\" />\n\n\n        <Label Content=\"Что исправлено\\сделано\" HorizontalAlignment=\"Left\" Margin=\"40,200,0,0\" VerticalAlignment=\"Top\" Width=\"194\"/>\n        <TextBox HorizontalAlignment=\"Left\" Margin=\"40 230 0 0\" VerticalAlignment=\"Top\" Width=\"720\" Height=\"53\" />\n\n        <Label Content=\"Заказать запчасти\" HorizontalAlignment=\"Left\" Margin=\"40,290,0,0\" VerticalAlignment=\"Top\" Width=\"194\"/>\n        <TextBox HorizontalAlignment=\"Left\" Margin=\"40 320 0 0\" VerticalAlignment=\"Top\" Width=\"720\" Height=\"22\" />\n\n        <Label Content=\"Добавить исполнителя\" HorizontalAlignment=\"Left\" Margin=\"40,360,0,0\" VerticalAlignment=\"Top\" Width=\"150\"/>\n        <ComboBox HorizontalAlignment=\"Left\" Margin=\"40,390,0,0\" VerticalAlignment=\"Top\" Width=\"194\" />\n\n        <Button Content=\"Сохранить\" HorizontalAlignment=\"Left\" Margin=\"601,397,0,0\" VerticalAlignment=\"Top\" Width=\"159\"/>\n\npublic class Equipment\n    {\n        public int EquipmentCode { get; set; }\n        public string Name { get; set; }\n    }\n\nSqlCommand commandTime = new SqlCommand(\n             $\"SELECT SUM(DATEDIFF(HOUR, Дата_добавления, Дата_окончания)) \" +\n             $\"FROM Заявки \" +\n             $\"WHERE Код_Статуса = 3 AND Дата_окончания IS NOT NULL\", sql.str);\n\n                // Получаем общее время выполнения\n                object totalTimeObj = commandTime.ExecuteScalar();\n                if (totalTimeObj != DBNull.Value && totalTimeObj != null)\n                {\n                    int totalTime = Convert.ToInt32(totalTimeObj);\n\n                    // Запрос для получения количества выполненных заявок\n                    SqlCommand commandCount = new SqlCommand($\"SELECT COUNT(*) FROM Заявки WHERE Код_Статуса = 3 AND Дата_окончания IS NOT NULL\", sql.str);\n                    int _executedRequestsCount = (int)commandCount.ExecuteScalar();\n                    ExecutedRequestsCount.Text = Convert.ToString(_executedRequestsCount);\n\n                    // Рассчитываем среднее время выполнения\n                    if (_executedRequestsCount > 0)\n                    {\n                        double averageTime = totalTime / (double)_executedRequestsCount;\n                        AverageTime.Text = $\"{averageTime:F2} ч.\";\n                    }\n                    else\n                    {\n                        AverageTime.Text = \"Нет выполненных заявок\";\n                    }\n                }\n                else\n                {\n                    AverageTime.Text = \"Нет выполненных заявок\";\n                }",
  "repository": "",
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.17.05.29.19/didimini510.util.classlibrary2.1.0.0.json#dependencygroup/.netcoreapp3.1",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETCoreApp3.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.17.05.29.19/didimini510.util.classlibrary2.1.0.0.json#DidiMini510.Util.ClassLibrary2.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2444,
      "fullName": "DidiMini510.Util.ClassLibrary2.nuspec",
      "length": 8815,
      "name": "DidiMini510.Util.ClassLibrary2.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.17.05.29.19/didimini510.util.classlibrary2.1.0.0.json#lib/netcoreapp3.1/ClassLibrary2.dll",
      "@type": "PackageEntry",
      "compressedLength": 3585,
      "fullName": "lib/netcoreapp3.1/ClassLibrary2.dll",
      "length": 13312,
      "name": "ClassLibrary2.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.04.17.05.29.19/didimini510.util.classlibrary2.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12931,
      "fullName": ".signature.p7s",
      "length": 12931,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "didimini510",
    "dianaMiniakhmetova",
    "510"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}