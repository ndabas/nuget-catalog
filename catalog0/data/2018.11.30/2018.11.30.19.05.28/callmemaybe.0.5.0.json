{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.30.19.05.28/callmemaybe.0.5.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "James Jensen",
  "catalog:commitId": "d322b2ff-fd10-4f6b-8076-30875c098cc6",
  "catalog:commitTimeStamp": "2018-11-30T19:05:28.0818465Z",
  "copyright": "2014 James K. Jensen",
  "created": "2015-02-07T04:44:07.683Z",
  "description": "Provides a class and a few extension methods to facilitate common operations with values that may or may not exist.\n\nTraditionally, programmers often use `null` references to represent values that \"aren't there\", but the problem is that this was never their intended purpose. \n\n- Languages like C# don't provide a way to differentiate between reference variables that can be null and those that are guaranteed not to be.\n- The inventor of null references has [apologized](http://en.wikipedia.org/wiki/Tony_Hoare#Quotations) for creating them in the first place, calling them his \"billion-dollar mistake.\"\n- This misuse of null references has spread far and wide, leading to the unfortunately-named `Nullable<>` type (which, being a value type, is never actually null), and attributes like `[CanBeNull]` and `[NotNull]` to help programmers know when they can expect a method to treat a null value as legitimate input.\n\nAll this leaves us in a position where our best hope of avoiding `NullReferenceException`s lies in trying to make sure that our reference variables are *never* null. But in that case, how do we indicate when a value is *optional*?\n\nWell, that's where `Maybe<>` comes in.",
  "id": "CallMeMaybe",
  "isPrerelease": false,
  "lastEdited": "2018-11-30T19:05:15Z",
  "licenseUrl": "https://bitbucket.org/j2jensen/callmemaybe/wiki/License",
  "listed": true,
  "packageHash": "j7LFgf/KQONKB5C8raLYAhkEnC4v5Y8QriMlU/FArFJcD9lfYMYVlJm8inGwik8nz8mDgaFiyoh6QjKz3VHeww==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 19752,
  "projectUrl": "https://bitbucket.org/j2jensen/callmemaybe",
  "published": "2015-02-07T04:44:07.73Z",
  "releaseNotes": "v 0.5 Alpha. **Breaking Change**: object.Equals() override behaves differently now. Prefer `==` or `Is()` instead.\nv 0.4 Alpha. Added \"Is()\" method, and \"Values()\" extension method, plus lots of comments.\nv 0.3.5318 Alpha. Added better conversion to/from Nullables. Maybe IMaybe interface public. Added LINQPad sample.\nv 0.3 Alpha release. Added Do() methods and an Else() overload that takes a function parameter. More correct handling of null arguments. And documentation on most of the types and methods!\nv 0.2 Alpha release. API subject to change (but probably not as much as it did last time).\nv 0.1 Alpha release. API subject to change.",
  "requireLicenseAcceptance": false,
  "summary": "A C# library to help you deal with optional values.",
  "title": "Call Me Maybe",
  "verbatimVersion": "0.5",
  "version": "0.5.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.30.19.05.28/callmemaybe.0.5.0.json#CallMeMaybe.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1357,
      "fullName": "CallMeMaybe.nuspec",
      "length": 2695,
      "name": "CallMeMaybe.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.30.19.05.28/callmemaybe.0.5.0.json#lib/CallMeMaybe.dll",
      "@type": "PackageEntry",
      "compressedLength": 4213,
      "fullName": "lib/CallMeMaybe.dll",
      "length": 9728,
      "name": "CallMeMaybe.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.30.19.05.28/callmemaybe.0.5.0.json#linqpad-samples/Basic%20Usage.linq",
      "@type": "PackageEntry",
      "compressedLength": 827,
      "fullName": "linqpad-samples/Basic%20Usage.linq",
      "length": 2089,
      "name": "Basic%20Usage.linq"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.30.19.05.28/callmemaybe.0.5.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "maybe",
    "monad",
    "option",
    "optional",
    "linqpad-samples"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}