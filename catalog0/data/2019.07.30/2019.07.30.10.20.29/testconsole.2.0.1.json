{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.30.10.20.29/testconsole.2.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jamie Davis",
  "catalog:commitId": "fd154c1e-bed1-4f9a-ac5d-fbcf41b6a6e6",
  "catalog:commitTimeStamp": "2019-07-30T10:20:29.5001406Z",
  "copyright": "Jamie Davis 2014-2018",
  "created": "2019-07-30T09:51:01.357Z",
  "description": "Unit tests will often need to assert that a sizeable amount of data matches an expectation, and this is difficult with only the traditional style of assertion. You essentially have the choice of writing a long list of simple assertions, or concatenating the output into a string and using a single assert against that. However, when these assertions fail it can be very hard to determine in what ways the output differs from the expectation.\n\nOne solution to this problem is a different workflow from traditional unit testing - instead of making a prediction in the code, and then checking the output against the prediction, what if you  formatted the output and displayed it side by side with the last \"approved\" version. This is what TestConsole.Core provides. On a build server, when the test result does not match the default behaviour is just to fail the test, whereas on a development PC you can configure the library to use an installed file compare utility to display the differences. If the differences are expected, you can copy the new result over to the approved version and the test will pass. \n\nTestConsole.Core inherits all of the formatting capabilities from the original TestConsole project, and adds test approval features. Users of ApprovalTests will recognise the workflow and the functionality, but at the time of publishing, ApprovalTests is full framework only, whereas TestConsole.Core is intended to allow testing in both full framework and .NET core test suites. I did not set out to build an alternative to ApprovalTests, but I need to be able to test netcoreapp code, and the conversion of TestConsole was not difficult. However, ApprovalTests did not support netstandard or netcoreapp test suites and I couldn't wait any longer, so I built the subset of ApprovalTests features that I needed into TestConsole.Core from scratch. As a result, the syntax is a little different to ApprovalTests, particularly where it relates to selecting a file compare tool, and also relating to what can be directly approved. The intention  of the test approval features is to allow data formatted using the TestConsole Output object to be approved, and I've also extended it to handle any plain text.",
  "id": "TestConsole",
  "isPrerelease": false,
  "lastEdited": "2019-07-30T10:20:24.02Z",
  "licenseUrl": "http://jamie-davis.github.io/TestConsole/LICENSE",
  "listed": true,
  "packageHash": "hGbBe+BJU79PIa93zpyWgjYwjBu7eZB+S7475mOddfFguxb8orLaAjX4nc8GRSM+nLZ1Re4XJNqUDf2QX1qpmQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 75385,
  "projectUrl": "http://jamie-davis.github.io/TestConsole/",
  "published": "2019-07-30T09:51:01.357Z",
  "releaseNotes": "Fixed a rare issue with duplicate type names within assembly.",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "2.0.1",
  "version": "2.0.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.30.10.20.29/testconsole.2.0.1.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.30.10.20.29/testconsole.2.0.1.json#dependencygroup/.netstandard2.0/system.reflection.emit",
          "@type": "PackageDependency",
          "id": "System.Reflection.Emit",
          "range": "[4.3.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.30.10.20.29/testconsole.2.0.1.json#TestConsole.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1437,
      "fullName": "TestConsole.nuspec",
      "length": 3140,
      "name": "TestConsole.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.30.10.20.29/testconsole.2.0.1.json#lib/netstandard2.0/TestConsole.dll",
      "@type": "PackageEntry",
      "compressedLength": 61805,
      "fullName": "lib/netstandard2.0/TestConsole.dll",
      "length": 143360,
      "name": "TestConsole.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.07.30.10.20.29/testconsole.2.0.1.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Unit",
    "Test",
    "TDD",
    ".NET",
    "approval"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}