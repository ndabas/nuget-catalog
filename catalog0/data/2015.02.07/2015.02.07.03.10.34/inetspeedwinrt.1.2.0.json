{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Microsoft Quality Engineering and Design",
  "catalog:commitId": "41ae5a55-e141-442a-b561-b12321acc514",
  "catalog:commitTimeStamp": "2015-02-07T03:10:34.8921311Z",
  "copyright": "Copyright 2014",
  "created": "2014-11-21T03:20:59.53Z",
  "description": "This is a convenient WinRT API for making Internet connection state decisions in real time, using the speed result to decide if/when to run your network-intensive code. This is all about speed and latency, so you will need to test throughput if that is important to your application. This API does not need to eat a bunch of network bandwidth to do it's job. \n\nThe Internet Connection Speed API fills a small gap in the Windows platform networking APIs by providing developers a very easy to use, simple abstraction to measure current Internet connection speed, something most apps today are not doing, which ends up in potentially poor experiences for people using apps that make connectivity state assumptions based only on the existence of an active Internet connection. \n\nThis API will benefit the people using your app, who should always be shielded from network latency under all circumstances. Developers - developers are people! - will also benefit as you can be confident that: \n\na) The easy-to-use API will return a result very quickly, as any API call should \n\nb) This API is accurate and reliable \n",
  "id": "InetSpeedWinRT",
  "isPrerelease": false,
  "lastEdited": "2014-11-21T03:30:49.323Z",
  "packageHash": "P7QyoIEjAwVYPEYP5WIC96SfvX9TC1TX7BJ7qiMaRL1r8yUdqrC5XFOh4YSuegiknHFP/5raOVl5LVN2QFUlwA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 1146031,
  "published": "1900-01-01T00:00:00Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/.json#gpref",
      "reference": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtphone.winmd",
          "file": "InetSpeedWinRTPhone.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtphone81.winmd",
          "file": "InetSpeedWinRTPhone81.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtarm.winmd",
          "file": "InetSpeedWinRTARM.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtwin8arm.winmd",
          "file": "InetSpeedWinRTWin8ARM.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtx64.winmd",
          "file": "InetSpeedWinRTx64.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtwin8x64.winmd",
          "file": "InetSpeedWinRTWin8x64.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtx86.winmd",
          "file": "InetSpeedWinRTx86.winmd"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.03.10.34/inetspeedwinrt.1.2.0.json#gpref/ref/inetspeedwinrtwin8x86.winmd",
          "file": "InetSpeedWinRTWin8x86.winmd"
        }
      ]
    }
  },
  "releaseNotes": "In this release: optimizations for cellular, changed ConnectionSpeed enum to a value class with static int named properties so that JavaScript consumers can program with word values, not ints... \n\nDecreased code size. \n\nUsage: \n\nYou will need to remove the architecture specific references that don’t apply to your project’s build target after referencing the nuget package via References -> Add Reference… -> Manage Nuget packages. The component is written in C++/CX, so each dll and winmd file is created for a specific machine architecture (ARM for Windows, Windows Phone 8 (ARM), Windows Phone 8.1 (ARM), Windows 8/8.1 (ARM, x86, x64).  \n\nYou’ll see these files in your references folder when you install the InetSpeedWinRT nuget package (remove all that don’t apply to your solution…) \n\nInetSpeedWinRTARM (For Windows RT (ARM) WinRT apps) InetSpeedWinRTPhone (For Windows Phone 8 Silverlight apps) InetSpeedWinRTPhone81 (For Windows Phone 8.1, SL and WinRT apps) \nInetSpeedWinRTx86 (Windows 8.1 WinRT apps, 32-bit Windows) InetSPeedWinRTx64 (Windows 8.1 WinRT apps, 64-bit Windows) \n\nNote: You will also need to reference the SDK Extension Microsoft Visual C++ 2013 Runtime Package for Windows 8.1 and Windows Phone 8.1 projects, for C# and JavaScript projects. \n\nThe Internet Connection Speed API, version 1.2.0 \n\nCtor \n\nInternetConnectionState InternetConnectionState(); \n\nProperties: \n\nstatic bool Connected \nReturns true if the current Internet connection for the device is active, else false. \n\nInstance methods: \n\nIAsyncOperation<ConnectionSpeed> GetInternetConnectionSpeed(); \nAsynchronous method that will return a ConnectionSpeed (see below). \n\nIAsyncOperation<ConnectionSpeed> GetInternetConnectionSpeedWithHostName(HostName hostName); \nAsynchronous method that will perform the speed/latency test on a supplied host target and returns a ConnectionSpeed. This is very useful to ensure the Internet resource you’re trying to reach is available at the speed level you require (generally, these would be High and Average…). \n\nclass ConnectionSpeed (with static int properties so that JavaScript consumers can program against words, not ints, in code (e.g., InetSpeedWinRTx64.ConnectionSpeed.high versus 0....):  \n\nHigh: Device is currently attached to a high-speed, low-latency Internet connection. \n\nAverage: Device is currently attached to an average speed/latency Internet connection (LTE, 3G, etc…). \n\nLow: Device is currently attached to a low-speed, high-latency Internet connection. \n\nUnknown: The current Internet connection speed can't be determined. Proceed with caution. This could mean that there is very high network latency, a problem with an upstream service, etc... \n\nExample (C# consumer): \nThis example tests for a highspeed network. Note you should always test for Unknown and then react accordingly (don't proceed with network work.). High and Average are the two results you should test for before doing network transactions. \n\nif(InternetConnectionState.Connected) \n{ \n  var connectionState = new InternetConnectionState(); \n  var speed = await connectionState.GetInternetConnectionSpeed(); \n  if(speed == ConnectionSpeed.Unknown) return; //don't proceed with network work... \n  if(speed == ConnectionSpeed.High){//do network work that requires highspeed/low latency connection...} \n} \nelse {//not connected...} \n\nKnown issue with Windows Phone radio when the device resumes from standby \n\nWhen Windows Phone devices resume from standby, the time it takes for the cellular radio to fully “awaken” can lead to inaccurate results from InetSpeedWinRT (the ConnectionSpeed result in this case is typically Low or Unknown – and this has been verified in extensive testing to be inaccurate as a subsequent call will return the actual state, typically higher…)… This is not a bug in InetSpeedWinRT. This is an issue faced by any app that makes network calls upon device then app resumption. \n\nOne known workaround is to make a network call from both Application_Launching and Application_Activated event handlers (typically in your App class implementation file). By doing this before calling GetInternetConnectionSpeed or GetInternetConnectionSpeedWithHostname (or any API that generates network traffic on a cellular connection as part of its implementation) in your network-critical code paths, you can guarantee that the radio is fully functional and therefore an accurate result is returned. In our WP test app, we create an instance of InternetConnectionState and then call GetInternetConnectionSpeed in app activated and launching handlers: \n\n        // Code to execute when the application is launching (eg, from Start) \n        // This code will not execute when the application is reactivated \n        private async void Application_Launching( object sender, LaunchingEventArgs e ) \n        { \n            //this is a workaround to deal with cellular radio wake up delay after WP devices resume from Standby... \n            //by creating a test at this time, the user code that calls the API will be running on a warmed up radio… \n            var connectionState = new InternetConnectionState(); \n            var speed = await connectionState.GetInternetConnectionSpeed(); \n        } \n\n        // Code to execute when the application is activated (brought to foreground) \n        // This code will not execute when the application is first launched \n        private async void Application_Activated( object sender, ActivatedEventArgs e ) \n        { \n            //this is a workaround to deal with cellular radio wake up delay after WP devices resume from Standby... \n            //by creating a test at this time, the user code that calls the API will be running on a warmed up radio… \n            var connectionState = new InternetConnectionState(); \n            var speed = await connectionState.GetInternetConnectionSpeed(); \n        } \n\nImportant considerations: \n\nYou’ll need to be careful when managing radio state in this way as keeping the radio awake eats battery (which is why it is put to sleep upon device standby…). There are other strategies to employee here that does not involve making network calls. For example, you can query the network interface the device is currently using to achieve the same results (NetworkInterface.NetworkInterfaceType) – see below... This has been tested for Silverlight WP apps. As always, experiment and measure to ensure you do not consume electrons unnecessarily! Regardless, you will need to employ a radio waking strategy to ensure the results you get from InetSpeedWinRT are accurate on WP devices resuming from standby. \n\n        // Code to execute when the application is launching (eg, from Start) \n        // This code will not execute when the application is reactivated \n        private void Application_Launching( object sender, LaunchingEventArgs e ) \n        { \n            //This will wake up the radio... \n            var networkInterfaceType = NetworkInterface.NetworkInterfaceType; \n        }        \n\n        // Code to execute when the application is activated (brought to foreground) \n        // This code will not execute when the application is first launched \n        private void Application_Activated( object sender, ActivatedEventArgs e ) \n        { \n            //This will wake up the radio... \n            var networkInterfaceType = NetworkInterface.NetworkInterfaceType; \n        } \n\nWe hope this API proves useful to you in your Internet-first applications.  ",
  "requireLicenseAcceptance": false,
  "summary": "The Internet Connection Speed API fills a small gap in the Windows platform networking APIs by providing developers a very easy to use, simple abstraction to measure current Internet connection speed, something most apps today are not doing, which ends up in potentially poor experiences for people using apps that make connectivity state assumptions based only on the existence of an active Internet connection. \n\nThis API will benefit the people using your app, who should always be shielded from network latency under all circumstances. Developers - developers are people! - will also benefit as you can be confident that: \n\na) The easy-to-use API will return a result very quickly, as any API call should \n\nb) This API is accurate and reliable ",
  "title": "Internet Connection Speed API for Windows",
  "version": "1.2.0",
  "tags": [
    "Internet",
    "Connection",
    "Speed",
    "API",
    "WinRT",
    "Windows",
    "Javascript",
    "C#",
    "C++"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}