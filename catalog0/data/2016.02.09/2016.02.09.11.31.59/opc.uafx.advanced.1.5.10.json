{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.09.11.31.59/opc.uafx.advanced.1.5.10.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Traeger Industry Components GmbH",
  "catalog:commitId": "6b9c9de8-7744-4f1c-92b5-d2e6232d5424",
  "catalog:commitTimeStamp": "2016-02-09T11:31:59.2913292Z",
  "copyright": "Traeger Industry Components GmbH",
  "created": "2016-02-09T11:31:21.043Z",
  "description": "A framework to implement OPC-UA conform client / server applications. This framework does provide all mechanism required to implement OPC UA conform client / server applications with just some lines of code. Easy - fast - professional",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2016.02.09.11.31.59/opc.uafx.advanced.1.5.10.json#frameworkassemblygroup/.netframework3.5",
    "assembly": "System",
    "targetFramework": ".NETFramework3.5"
  },
  "iconUrl": "http://www.traeger.de/pub/downloads/opc.uafx.advanced-icon.png",
  "id": "Opc.UaFx.Advanced",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "http://www.traeger.de/pub/downloads/license_opc.uafx.advanced.pdf",
  "listed": true,
  "packageHash": "ioC/mKo6K9hEsgYf1WFBtNDhKyLswJqheXdUgWxhuXyy22/38FcdPAyb8teckn/mplX1h9kUXhM0zx4btj7Hyg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 8140227,
  "projectUrl": "http://wiki.traeger.de/doku.php/manual/opc.uafx.advanced/start",
  "published": "2016-02-09T11:31:21.043Z",
  "releaseNotes": "= 03.02.2016 - V1.5.10.0 =\n* Added     OPC Watch application to assembly archive.\n\n= 25.01.2016 - V1.5.9.1 =\n* Fixed     Issue with wrong released session although it can be reused in case of an reconnect.\n\n= 21.01.2016 - V1.5.9.0 =\n* Fixed     Possible multi threading issues in session keep alive in OpcClient.\n* Changed   The BreakDetected event is now being raised only if the reconnect timeout is\n            equals zero.\n* Fixed     In case of releasing an OPC client session which has already been disposed of in\n            some cases it could lead to an undesired reconnect to the server upon a thrown\n            ObjectDisposedException by the already disposed client session.\n\n= 18.01.2016 - V1.5.8.0 =\n* New       Updated licensing logic.\n\n= 14.01.2016 - V1.5.7.1 =\n* Fixed     Issue with the minimum possible PublishingInterval in the OpcSubscription class.\n\n= 09.01.2016 - V1.5.7.0 =\n* Fixed     Issue with null reference exception in OpcCertificateManager.CreateCertificate\n            when passing an applicationUri as a null reference (Nothing in Visual Basic).\n* Fixed     Issue with non uniquely generated OpcNodeId's for InputArguments and OutputArguments\n            of OpcMethodNode instances. This lead to the behaviour that only the arguments of the\n            most recently provided OpcMethodNode was published when browsing / reading the\n            method argument properties.\n* Changed   The OpcNodeId for InputArgument and OutputArgument nodes of OpcMethodNode instances\n            for more information see the topic before.\n* Changed   The OpcReadOnlyNodeCollection class does now provide IOpcNode instances instead of\n            the internal foundation NodeState instances.\n* New       An OpcNodeId can now constructed from OpcName instances its SymbolicName is a null\n            reference (Nothing in Visual Basic). In this case the BrowseName is used instead of\n            the SymbolicName.\n* New       The OpcReadNodesRequest does now by default return both timestamps (source and server).\n* New       Implemented new OpcNodeManager methods: AddNode, RemoveNode and IsNodeAccessable.\n* Fixed     Issue with sometimes duplicate ACE's in case of requesting an ACE which has been already\n            added to an ACL.\n\n= 17.12.2015 - V1.5.6.8 =\n* Fixed     Issue with missed TimeStamp update on writing node values.\n* Fixed     Issue with missed TimeStamp data on reading node values.\n\n= 17.12.2015 - V1.5.6.7 =\n* New       Implemented ChangePassword method on OpcServerIdentity to change the user password\n            after an identity has been created.\n* New       Implemented protected SystemContext property on OpcNodeManager to provide an\n            alternative context within system internal changes can be performed.\n* New       The OpcWriteNode class does now automatically set the source label timestamp when\n            writing a node.\n* Changed   The OpcValueLabel is now not longer defined as a struct instead it is now a class.\n\n= 16.12.2015 - V1.5.6.6 =\n* New       Implemented AddNode and RemoveNode in OpcNodeManager to support dynamically provide\n            nodes after CreateNodes has been called.\n\n= 10.12.2015 - V1.5.6.5 =\n* New       Added additional session information to OpcOperationContext calling\n            IsNodeAccessable on OpcNodeManager.\n\n= 09.12.2015 - V1.5.6.4 =\n* New       Implemented IsNodeAccessable method on OpcNodeManager to custom specify whether a node\n            is accessable within the view.\n\n= 08.12.2015 - V1.5.6.3 =\n* Fixed     Issue with duplicate ACE's when manually adding additional entries on-demand.\n\n= 12.10.2015 - V1.5.6.2 =\n* Fixed     Issue with reading and writing OpcValue instances and arrays as node values on\n            client and server sides.\n* Fixed     Issue with anonymous user login on server side when creating OpcSession object.\n* New       Implemented redirection in case there the string value passed to the ctor(string, int)\n            of the OpcNodeId class does indicate a numeric identifier now an OpcNodeId will be\n            initialized with the numeric identifier instead of using the string value.\n\n= 08.09.2015 - V1.5.6.1 =\n* Fixed     Issue with Anonymous and UserName ACL's enabled at same time.\n* New       Implemented additional CreateCertificate overloads in OpcCertificateManager.\n\n= 07.09.2015 - V1.5.6.0 =\n* Changed   Renamed BuiltInType property to DataType on OpcAttributeInfo.\n* New       Browsing the DataType attribute does now result into a member of the OpcDataType\n            enumeration value.\n* New       Implemented OpcValue as surrogate of the DataValue class.\n* New       Implemented static CreateCertificate method on OpcCertificateManager to create\n            certificates out of the box.\n* New       OpcStatus class does not provide as Code the new OpcStatusCode enumeration.\n* New       Implemented support for OpcDataTypes: ExtensionObject, Value and Variant.\n* Changed   Renamed DataValue to Value in OpcDataTypes.\n* New       Implemented support to directly start browsing using a method node.\n* Changed   Moved OpcDiscoveryClient to Opc.UaFx.Client namespace.\n* Fixed     Issue with NullReferenceException if non cached nodes are browsed.\n* New       Implemented support using a null reference for an application URI to create\n            certificates.\n* New       Implemented new abstraction layer for different OPC server types (OpcServerBase).\n* New       Implemented new OPC server specialization: OPC Discovery Server.\n* Fixed     Issue in OPC Client with accessing the internal session instance although it has been\n            disposed off.\n\n= 25.08.2015 - V1.5.5.3 =\n* New       Simplified use of OpcVariableClass in Read/Write callbacks through determining the\n            status and timestamp (if no other has been specified) from the node instance.\n\n= 24.08.2015 - V1.5.5.2 =\n* Fixed     Issue with Anonymous and UserName ACL's enabled at same time.\n* New       Removed OpcAccessControlMode member 'Default' and replaced its use with Blacklist.\n\n= 24.08.2015 - V1.5.5.1 =\n* Fixed     Issue with Null DataType in VariableNodes.\n\n= 24.08.2015 - V1.5.5.0 =\n* New       Implemented different callback properties to read/write OpcNode attributes.\n* New       Implemented protected virtual methods to read/write OpcNode attributes.\n* New       Implemented specific callback properteis to read/write OpcVariableNode attributes.\n* New       Implemented protected virutal methods to read/write OpcVariableNode value attribute.\n* New       The OpcSession class does now provide the properties UsedIdentity and SuppliedIdentity.\n* New       Implemented Update method on OpcStatus.\n* New       The OpcContext does now provide an Identity property.\n* New       Implemented new OpcMonitoredItem class in Server namespace.\n* New       OnMonitoredItemCreated/Deleted/Modified does now provide non-foundation classes.\n* Changed   Moved Identity and ImpersonationContext classes from Opc.UaFx.Server to\n            Opc.UaFx namespace.\n\n= 18.06.2015 - V1.5.2.0 =\n* New       Excluded auto update of endpoint before connect in cases there a preferred endpoint is\n            defined in OpcClient.\n* New       Implemented new endpoint identity security on OpcSecurity to enable/disable different\n            endpoints for one or more ACEs. Additionally renamed some existing methods.\n* New       Implemented StateChanged events in OpcClient.\n\n= 16.06.2015 - V1.5.1.1 =\n* New       Implemented InvokeService method in OpcClient to invoke service routines using a\n            try-catch-finally block to ensure that the clients state property does also handle its\n            connection state in case of an exception which indicates that the connection has been\n            timeout, lost, etc.\n* Fixed     Fixed issue with null references as DisplayName and BrowseName in\n            OpcReferenceDescription.\n\n= 15.06.2015 - V1.5.1.0 =\n* New       Implemented SaveCertificate method on OpcCertificateManager.\n* New       Reworked complete argument binding to support out and ref parameters too in\n            OpcMethodNode.\n* New       Implemented ByRef Type support in OpcMethodNode.\n* New       Implemented local server CertificateValidationFailed event to support custom failed\n            certificate validation actions.\n* New       Implemented new OpcNodeInfo derivate OpcMethodNodeInfo to browse the method nodes\n            arguments.\n* New       Implemented new OpcCertificateValidationFailedEventArgs and\n            OpcCertificateValidationFailedEventHandler.\n* New       Implemented DataType property on OpcDataVariableNode.\n* New       Implemented InputArguments and OutputArguments properties on OpcMethodNode class.\n            Additionally extended support of OpcArgument instances with OpcArgumentAttribute on\n            custom delegates.\n* New       Implemented support for null references in all implicit cast operators which working\n            with reference types.\n\n= 10.06.2015 - V1.5.0.0 =\n* New       Implemented logic to generate server fulfilled configuration on start.\n* New       Completely reworked endpoint selection using the OpcDiscoveryClient and custom preferred\n            OpcSecurityPolicy.\n* New       Improved auto complete of configuration depending on its application type.\n* New       Introduced transport profile information.\n* New       Moved configuration of UserTokenPolicies to OpcServer on startup and improved\n            transparency of IsEnabled property.\n* Fixed     Issue with empty certificate store paths.\n* New       Completely reworked node referencing mechanism to provide more information while\n            building the node references and to also remove OPC internals from the user API.\n* New       Completely reworked existing node implementations and moved their base class reference\n            to an internal reference to improve the experience with the framework and become more\n            CLSCompliant by also providing more useful APIs.\n* New       Implemented support for discovery server base address configuration.\n* New       Improved configuration defaults also when loading configuration through one of the\n            Load methods. Additionally implemented default support for\n            DiscoveryServerConfigurations.\n* New       More simplified the API.\n* New       Introduced replacement for StatusCode -> OpcStatus.\n* New       Reworked OpcDiscoveryClient from factory methods to constructor use to provide a\n            fluently interface between all server and client classes.\n\n= 09.06.2015 - V1.4.0.0 =\n* New       Merged Opc.ClientFx.Advanced and Opc.ServerFx.Advanced together to Opc.UaFx.Advanced.\n\n= 11.01.2015 - V1.0.0.0 =\n* New       Created Opc.ClientFx.Advanced and Opc.ServerFx.Advanced.",
  "requireLicenseAcceptance": false,
  "summary": "A framework to implement OPC-UA client / server applications in minutes.",
  "title": "Opc.UaFx.Advanced OPC-UA-Framework for .NET",
  "verbatimVersion": "1.5.10.0",
  "version": "1.5.10",
  "tags": [
    "OPC-UA",
    "C#",
    "VB.NET",
    "OPC",
    "Unified",
    "Architecture",
    "OPC-UA-Framework"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}