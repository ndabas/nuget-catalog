{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.05.18.52/fscl.runtime.1.3.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Gabriele Cocco",
  "catalog:commitId": "6fe13a43-28d2-487c-aa14-edb0c0d1b840",
  "catalog:commitTimeStamp": "2015-02-06T05:18:52.3370383Z",
  "copyright": "Copyright 2013",
  "created": "2014-08-23T19:32:14.65Z",
  "description": "The FSCL Runtime framework is taking care of executing OpenCL kernels generated from the FSCL Compiler in a way that is completely transparent to programmers. On platforms with multiple OpenCL-enabled devices the runtime is also able to perform an automatic selection of the best device where to execute each OpenCL computation the programmer asks to run.",
  "iconUrl": "https://raw.github.com/fsharp/FSharp.ProjectScaffold/master/nuget/logo.png",
  "id": "FSCL.Runtime",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://github.com/GabrieleCocco/FSCL.Runtime/blob/master/LICENSE.txt",
  "packageHash": "4yiFiYRNoR5j9xjsfRKYalr89Ca/A6WRoou/LKoKfyTgNrtziMb7yZ9RSGnEJo5bjOekH0hB3mZctdrEcqzQlg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 217969,
  "projectUrl": "http://github.com/GabrieleCocco/FSCL.Runtime",
  "published": "2014-08-23T19:32:14.65Z",
  "releaseNotes": "Extended runtime support for structs and records. Now you can use both custom F# records and structs (and arrays of records and structs) as parameters of kernels and functions. Also, you can declare private/local structs and records using record initialisation construct, struct parameterless constructor and \"special\" struct constructor (a constructor taking N arguments, each of one matching one of the N fields, in the order). Records must be labeled with _LayoutKind.Sequential_ attribute. Important to note, records have lower performance, cause not blittable and must be marshalled into an unmanaged intptr (AllocHGlobal) and then copied to the OpenCL buffer (2 copies). Structs instead require one copy only (0 if UseHostPointer).\n- Valid record decl: let myRec = { field1 = val1; ... fieldN = valN }\n- Valid default struct decl: let myStruct = new MyStruct()\n- Valid \"special constructor\" struct decl: let myStruct = new MyStruct(valForField1, valForField2, ... valForFieldN)\n- NOT valid struct decl: let myStruct = new MyStruct(<Args where the i-TH is not a value assigned to the i-TH field>)",
  "requireLicenseAcceptance": false,
  "summary": "FSCL kernels scheduling and execution layer for heterogeneous platforms",
  "version": "1.3.2",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.05.18.52/fscl.runtime.1.3.2.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.05.18.52/fscl.runtime.1.3.2.json#dependencygroup/fscl.compiler",
          "@type": "PackageDependency",
          "id": "FSCL.Compiler",
          "range": "[1.3.0, )"
        }
      ]
    }
  ],
  "tags": [
    "Meta-Programming",
    "Compiler",
    "Compilation",
    "OpenCL",
    "Parallel-programming",
    "Heterogenous-computing",
    "F#",
    "Quotations"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}