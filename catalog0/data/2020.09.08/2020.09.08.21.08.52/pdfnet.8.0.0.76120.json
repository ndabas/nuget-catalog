{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "PDFTron Systems Inc.",
  "catalog:commitId": "01d60755-7679-44b3-aba0-b4260f3095b1",
  "catalog:commitTimeStamp": "2020-09-08T21:08:52.4572102Z",
  "copyright": "Copyright 2020",
  "created": "2020-09-08T21:04:59.51Z",
  "description": "[PDF Reader. PDF Control. PDF Component]\n\nPDFNet SDK is the ultimate PDF toolkit.\n\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\n\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000). The extensive PDF library API supports most common use-case scenarios such as:\n*        PDF Viewing & Collaboration\n*        PDF Rasterization\n*        PDF Printing\n*        PDF Form filling and flattening\n*        PDF Split & Merge\n*        PDF Stamping\n*        Dynamic PDF generation (e.g. FlowDocument & Xaml to PDF)\n*        PDF Text extraction and indexing\n*        PDF Packages\n*        PDF Layers (OCGs)\n*        PDF Editing\n*        PDF Encryption\n*        Manipulate PDF bookmarks, links, and annotations.\n*        PDF Optimization\n*        PDF conversion to XML, HTML, XPS, SVG, TIF, etc.\n*        PDF/A Validation and Conversion\n*        PDF Redaction\n*        PDF Conversion from XPS, MS Office, HTML, XAML, TXT, TIFF etc.\n*        HTML to PDF Conversion",
  "iconFile": "images\\pdftron.png",
  "iconUrl": "https://pdftron.com/brand-assets/nuget.png",
  "id": "PDFNet",
  "isPrerelease": false,
  "lastEdited": "2020-09-08T21:08:41.507Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "Vg4bQ8VqfFyahYp9YvR5sJPL7JNz2iSBPn0viOFL/CMYr8U85/jhchvpM4eXR3ApPiBxm3etsLZNcS52nefJOw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 50615923,
  "projectUrl": "http://www.pdftron.com/pdfnet",
  "published": "2020-09-08T21:04:59.51Z",
  "releaseNotes": "New Features\nDigital Signature Verification is now out of beta.\nNew APIs for certificates (X509Certificate) and a number of other Digital Signature related classes.\nDigital Signing support for Embedding Secure Timestamps and Long Term Validation (LTV).\nAccessibility: built in office conversion now produces tagged PDFs.\nAdded native support for the xls format, rounding out our support of the 6 main \"office\" formats (docx, pptx, xlsx, doc, ppt, and now xls)\nAdded support for Right-to-left languages within office files.\nAdded options for converting Excel sheets into multiple PDF pages.\nAdded new API for text shaping, enabling support for visually complex scripts (like Thai and Hindi) using elementbuilder.\nSupport for Compressing Monochrome (1 bit per pixel) Images with CCITT Group 4 lossless compression in Optimizer or during PDF image creation.\nUtility functions to refresh all missing appearances and more easily create custom appearances. (PDFDoc.RefreshAnnotAppearances() and Annot.RefreshAppearance(RefreshOptions))\nSupport for Option Content Groups/Layers (SetOCGContext) in TextExtractor and TextSearch.\nAdded a new function PDFACompliance.GetDeclaredConformance which can get the conformance level specified in the document.\nNode.js: added support for TypeScript and Node versions 13 and 14.\nCAD module: added options to specify background color, color mode, handling of thin lines, and xref search paths.\nChanged Behaviour\nBy default Optimizer will now use CCITT Group 4 compression for monochrome images. This is because the previous default of JBIG2 caused a number of issues due to its lossless nature.\nThe display and appearance generation of Rectangle annotations has been adjusted to be more in line with other applications. It is recommended to test any custom creation or viewing logic for these annotations.\nThe display and appearance generation for FileAttachment annotations has been adjusted to be more in line with other applications. In particular the aspect ratio has been changed for certain icons. It is recommended to test any custom creation logic of these annotations and refer to the FileAttachment class documentation for more information about the new appearance aspect ratios.\nDuring PDFViewCtrl.OpenUrlAsync placeholder pages (for those which haven't finished downloading) will now throw an exception if they are edited. Most viewers handle this by disabling these edits during download.\nTextExtractor and TextSearch now use the default OCG/Layers by default.\nBy default the logic to skip the watermark layer for Text Extraction has been disabled.\nChanged Field.SetValue() to no longer turn on the current radio button when passing \"True\" \"Off\" or \"On\". The boolean version of SetValue() should be used instead for this.\nThe `Convert.StreamingPDFConversion` API will now throw an exception in the case where it is unable to initialize the conversion (previously returned a null or invalid object\nOther Changes\nRoughly categorized, not an exhaustive list.\nImprovements\n[pdf] PDFViewCtrl.OpenUrlAsync has been optimized significantly by reducing contention on the document lock.\n[html] Updated HTML2PDF module on MacOS, since the latest versions of the operating system no longer support 32-bit applications.\nNode.js builds no longer require a step to install or reference the library on Linux/Mac.\n[office] Improved .msg office interop conversion.\n[pdf] Copy over calculation order as appropriate during page import or merge. This is important to keep certain JavaScript actions working.\n[pdf] Fixed an infinite loop in linearized save when handling corrupt documents with a page-tree cycle.\n[pdf] Avoid throwing errors when encountering corrupt line operators that have non-number parameters.\n[xfdf] Support importing appearance image data in Signature Widgets.\n[pdf] Updated diff logic to reduce exceptions thrown on corrupt documents.\n[xfdf] Avoid throwing exceptions on XFDF export when encountering corrupt annotation objects.\n[pdf] Adjusted Optimizer to process existing annotation appearances. This gives a bit more room to reduce the document size in addition to fixing some problems with the subset option.\n[svg] Adjusted PDF2SVG logic to flatten paths filled with patterns, since these were not previously supported.\n[pdf] Adjustment to throw out integers that are over implementation limits during parsing. This better matches the behaviour of other PDF consumers.\n[pdf] The cache file provided to PDFViewCtrl.OpenURLAsync will now be written even if the server doesn't support byte ranges or Content-Length.\n[xfdf] Improved error handling for corrupt annotations during FDFUpdate.\n[xod] In error cases where temporary files cannot be opened throw exceptions to the user rather than failing silently.\n[pdf] Improved logic for rebuilding corrupt documents to better handle indirect length entries.\n[xfdf] Added repair logic in PDFDoc.FDFUpdate for corrupt Fields that are not in the Acroforms dictionary. This is important to allow the Field value to be updated.\n[xfdf] Improved identification of changed annotations in PDFDoc.FDFUpdate in order to keep more existing annotation appearances.\n[pdf] Updated FieldIterator to avoid returning Null objects on corrupt documents that utilize these in the field hierarchy.\n[pdf] Updated document Resource caching logic to provide much better performance on heavily multithreaded applications.\n[pdf] Improved error handling in the Node.js interface.\n[pdf] When importing objects into a new document (for example when merging) avoid throwing an exception if subobjects are corrupt.\n[xfdf] Added better handling for corrupt annotation Border entries in XFDF export.\n[pdf] ElementBuilder.CreateTextRunHelper will now just use the input as charcodes for some symbol fonts, since unicode input doesn't make much sense for such fonts.\n[pdf] Much improved handling of font substitution internal flow, resulting in more accurate matches and better performance.\n[pdf] Improved the performance of the Windows font substitution backend, making it better at finding Bold and Italic font variants in some situations.\n[tiff] Add support for extra tiff samples in the case where channels are arranged in a planar configuration.\n[pdf] More robust handling of (corrupt) files with non-embedded fonts and missing toUnicode maps.\n[pdf] Improved error messages for failed conversions.\n[pdf] More robust handling of (technically corrupt) type0 CID fonts with a CIDToGID map.\n[pdf] Improved pixel-hinting of thin rectangles that partially overlap clipping paths.\n[pdf] Improved support for extended unicode text (outside of the basic multilingual plane)\n[tiff] Added support for YCbCr colorspace images.\n[OCR/CAD] Better error messages from sub-modules\n[OCR] Improved logic for determining the \"native\" dpi of an incoming document, and added option to explicitly specify the dpi.\n[CAD] Now support referenced .gp4 images in CAD files.\nFixes\n[pdf] Fixed an occasional crash when flattening annotations on a specific type of file.\n[pdf] Updated hide action logic to also consider with the noview flag. This fixes actions on an uncommon type of document that relies on this flag.\n[pdf] Fixed occasional race condition crash when viewing some PDF prime documents.\n[pdf] Adjusted ContentReplacer to avoid introducing unrelated changes when updating certain PDF files.\n[xps] If PNG image has an invalid resolution the default DPI is now used in xps to pdf conversion.\n[xfdf] Fixed a problem on certain files during XFDF export where, in rare cases, annotation properties could be written on the wrong element.\n[office] Fixed a breakage in excel support through interop.\n[xfdf] Adjusting appearance rendering logic for stamp annotations during XFDF export to better support pattern transformations.\n[pdf] Adjusting reflow squiggly underline output to use a wavy underline rather than strikeout.\n[pdf] Fixed a bug in SDF.NameTree where the tree could be split incorrectly. (and certain values could become inaccessible)\n[pdf] Fixed a crash in Field.SetValue if called on a corrupt Widget without a connected field.\n[pdf] Fixed an issue setting the value of certain choice fields.\n[xfdf] Adjusted support for MaxLen property to use the value in the first Widget, which better matches behaviour in other viewers.\n[pdf] Fixed a potential crash calling CloseDoc() after there has been an error during download/PDFViewCtrl.OpenUrlAsync.\n[pdf] Fixed corrupt document repair to ensure that the last object of a given number is used.\n[pdf] Adding check for badly formed stream objects masquerading as Object Streams to avoid throwing them out on save.\n[pdf] Fixed a crash in FreeText.RefreshAppearance when encountering an empty DA entry.\n[xod] Fixed a problem where the first few thumbs would be included when streaming to XOD even if they were turned off.\n[pdf] Fixed an occasional crash in PDFViewCtrl.OpenUrlAsync, triggered by an early failure in the download process.\n[image] Fixed a crash when encountering problems in multipage tiff conversion.\n[xfdf] Fixed a bug where, in rare cases, field values could incorrectly end up with XML escaped output after XFDF import.\n[xod] Added basic support in XOD conversion for Image Soft Mask Matte entry.\n[pdf] Fixed an issue where calling ElementWriter.Begin could incorrectly throw an exception on certain types of documents.\n[pdf] Fixed a problem with image downsampling of annotation appearance streams. Previously these would rarely be downsampled.\n[xfdf] Fixed a problem with importing/merging fields with complex inheritance structure.\n[pdf] Fixed DigitalSignatureField.ClearSignature() so it would clear global document state if no signatures remain.\n[xps] Fixed a problem with extracting the dpi from jpeg or tiff files when they have dots-per-cm units.\n[html] Dropped the font size limit for html2pdf to work better with the latest macOS and retina displays.\n[pdf] Added default style parsing for text color in FreeText annotations. This fixes issues with text color when importing from XFDF.\n[xfdf] Fixed a problem handling corrupt Pages with duplicate annotation ids in PDFDoc.FDFUpdate.\n[pdf] Text extraction will now properly handle subforms even if a corruption is encountered in them.\n[pdf] When redacting the logical structure is now erased when to better ensure nothing relevant slips through.\n[pdf] Fixed a problem handling radio buttons with a non-unicode on state.\n[xfdf] Added support for Stream values in text fields when exporting XFDF.\n[pdf/xod] Fixed an issue with flattener where text that was covered by an almost transparent layer before being occluded would be displayed on top.\n[pdf] Resolved an issue with drawing rectangle annotations with the cloudy style.\n[bmp] Fix for handling of some transparent .bmp files where the background could remain uninitialized.\n[pdf] Fixed an issue with our handling of malformed cmaps that could result in bad memory accesses.\n[viewer] Fix for potential deadlock when calling PDFView.Update()\n[pdf] Fixed issue with separation blending not working correctly when the page blend space is RGB.\n[pdf] Fixed potential crash when rendering a softmask with an empty group entry.\n[pdf] Fixed a rare issue with resolving cmap entries within TrueType fonts that could lead to garbled text rendering.\n[OCR] Fixed a bug where we would not properly handle escaped backslashes within json input.\nNative Office Fixes and Improvements\n[office] More accurate reproduction of tinted theme colors\n[office] Many improvements to embedded font resolving, with powerpoint files seeing the most improvement.\n[pptx] Can now make use of docx \"resource documents\" when converting pptx files\n[office] Improvements to our handling of \"tricky\" font names that resemble other known fonts.\n[office] Change default checkbox rendering to use a box, rather than a windgdings glyph.\n[pptx]Added color override map support for each individual slide, as opposed to just the master and layout slides.\n[office] Chart improvements: data labels are now better supported, improved legend positioning, allow entries to be deleted from the legend.\n[docx] More precise handling of text-float overlap and interactions.\n[pptx] More accurate determination of text line height in powerpoint.\n[docx] Better resolving of floating content positions in complex documents.\n[docx] Added support for the \"dxa\" form of table margins.\n[docx] More accurate calculation of table row heights.\n[office] Added basic support for the multiLvlStrRef element in charts.\n[office] Added preliminary support for some math elements.\n[office] More robust handling of unsupported graphic data (attempt to use alternate content in more situations)\n[office] Added support for vertical text within table cells.\n[office] Added support for tiled image fills.\n[office] Added support for duotone image recoloring\n[docx] Added support for repeated table headers, where the header of a table is placed at the top of each page.\n[office] Now correctly resolve solid fill colors with an inherited \"noFill\" property.\n[doc] Fix for handling of .doc tables with mismatched content and column count.\n[docx] Fix for potential errors in mapping of individual symbol elements.\n[pptx] Fixed issue with decoding some embedded glyphs.\n[office] Fixed issues with resolving \"auto\" background colors in different contexts.\n[docx] Fix for oversize tables not properly overflowing their parent containers.\n[docx] Fixed error in treatment of individually set cell margins (under the 'tcMar' element)\n[docx] Fixed bug with resolving inherited hanging indent values.\n[docx] Relaxed the rules for placing floating content in footers, rather than skipping it.\n[office] Fix for bug where text styles were not fully resolved when determining the height of a line break.\n[xlsx] Fix for a bug where unresolved formatting codes would result in a failed conversion.\n[office] Now correctly handle vertically merged table cells in tables with the \"gridBefore\" property\n[office] Improved support for handling of embedded EMF files.\n[excel] Fix for our handling of cells with the special number format code \"General\"\n[excel] Fix for mishandling of table margins specified within the tblPrEx tag.\n[excel] Now allow conversion of xlsx sheets with no fonts defined.\n[docx] Fixed issue where a local \"auto\" line spacing rule would not properly override a global non-auto spacing.\n[docx] Now correctly handle NUMPAGES dynamic content within fldSimple elements.\n[excel] More robust handling of format codes with leading and trailing spaces.\n[docx] Correctly handle the case where numbered lists should inherit styles from the paragraph run properties.\n[docx] Fixed a bug where shapes were incorrectly constrained to the bounds of the page area.\n[pptx] Fix for occasional bad text positioning inside shapes.\n[pptx] Fixed incorrect cropping of transformed images.\n[office] Fixed handling of images with a global opacity value.\n[office] Fixed occasional incorrect handling of isolated symbols (list bullets, for example)\n[ppt] Fix for incorrect handling of default kerning values for ppt files.\n[doc] Fix incorrect positioning of grouped shapes within .doc files.\n[office] Fixed a number of issues with chart axis positioning\n[doc] Fixed incorrect handling of MS1252 encoded text in doc files.\n[office] Fixed a crash in pie chart drawing when trying to draw 0-size slices.\n[office] Fix for mishandling of some format codes with non-ascii values.\n[docx] Fixed a number of issues with content controls",
  "requireLicenseAcceptance": false,
  "summary": "PDFNet SDK is the ultimate PDF toolkit.\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000).",
  "title": "PDFNet SDK",
  "verbatimVersion": "8.0.0.76120",
  "version": "8.0.0.76120",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#dependencygroup/.netframework4.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#PDFNet.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 6865,
      "fullName": "PDFNet.nuspec",
      "length": 18305,
      "name": "PDFNet.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#lib/net40/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 15704184,
      "fullName": "lib/net40/PDFNet.dll",
      "length": 35884160,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#lib/net40/PDFNetLoader.dll",
      "@type": "PackageEntry",
      "compressedLength": 6897,
      "fullName": "lib/net40/PDFNetLoader.dll",
      "length": 11904,
      "name": "PDFNetLoader.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#build/net40/PDFNet.targets",
      "@type": "PackageEntry",
      "compressedLength": 496,
      "fullName": "build/net40/PDFNet.targets",
      "length": 1040,
      "name": "PDFNet.targets"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#build/net40/PDFNet/x86/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 15704184,
      "fullName": "build/net40/PDFNet/x86/PDFNet.dll",
      "length": 35884160,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#build/net40/PDFNet/x86/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 250555,
      "fullName": "build/net40/PDFNet/x86/PDFNet.xml",
      "length": 1783960,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#build/net40/PDFNet/x64/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 18462143,
      "fullName": "build/net40/PDFNet/x64/PDFNet.dll",
      "length": 43919488,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#build/net40/PDFNet/x64/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 250566,
      "fullName": "build/net40/PDFNet/x64/PDFNet.xml",
      "length": 1783960,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 141,
      "fullName": "tools/install.ps1",
      "length": 203,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 1575,
      "fullName": "readme.txt",
      "length": 4102,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#PDFNet_License.pdf",
      "@type": "PackageEntry",
      "compressedLength": 213378,
      "fullName": "PDFNet_License.pdf",
      "length": 242941,
      "name": "PDFNet_License.pdf"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#images/pdftron.png",
      "@type": "PackageEntry",
      "compressedLength": 1722,
      "fullName": "images/pdftron.png",
      "length": 1748,
      "name": "pdftron.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 60,
      "fullName": "LICENSE.txt",
      "length": 64,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.09.08.21.08.52/pdfnet.8.0.0.76120.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "PDF",
    "viewer",
    "control",
    "component",
    "reader",
    "print",
    "forms",
    "split",
    "merge",
    "stamp",
    "XPS",
    "SVG",
    "HTML",
    "convert",
    "optimize",
    "redact",
    "encrypt",
    "pdftron",
    "pdfviewer",
    "rasterizer",
    "pdf2image",
    "converter",
    "WPF",
    "WinForms",
    "extract",
    "sign",
    "annotate",
    "pdf2html",
    "html2pdf",
    "pdf2svg"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}