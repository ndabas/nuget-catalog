{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.19.42.36/virtualizingobservablecollection.0.8.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Andrewwhiddett",
  "catalog:commitId": "57f4981c-7851-4a79-aac2-3c68ae6484e3",
  "catalog:commitTimeStamp": "2015-02-07T19:42:36.6338985Z",
  "copyright": "(c) AlphaChi Technology 2015",
  "created": "2015-01-29T23:04:48.033Z",
  "description": "Using it\nFirst one time wire in the manager:-\n\n{\n    InitializeComponent();\n\n    if (!VirtualizationManager.IsInitialized)\n    {\n        //set the VirtualizationManager’s UIThreadExcecuteAction. In this case\n        //we’re using Dispatcher.Invoke to give the VirtualizationManager access\n        //to the dispatcher thread, and using a DispatcherTimer to run the background\n        //operations the VirtualizationManager needs to run to reclaim pages and manage memory.\n        VirtualizationManager.Instance.UIThreadExcecuteAction = \n            (a) => Dispatcher.Invoke(a);\n        new DispatcherTimer(\n            TimeSpan.FromSeconds(1),\n            DispatcherPriority.Background,\n            delegate(object s, EventArgs a)\n            {\n                VirtualizationManager.Instance.ProcessActions();\n            },\n            this.Dispatcher).Start();\n    }\n    //the rest of the constructor goes here\n}\n\nThen create a Paginated source:\npublic class TesterSource : IPagedSourceProvider<SimpleDataItem>\n{\n    public PagedSourceItemsPacket<SimpleDataItem> GetItemsAt(int pageoffset, int count, bool usePlaceholder)\n    {\n       return new PagedSourceItemsPacket<SimpleDataItem>() \n           { LoadedAt = DateTime.Now, \n             Items = (from items in SimpleDataSource.Instance.Items select items).Skip(pageoffset).Take(count) \n           };\n    }\n    public int Coun{\n        get { return SimpleDataSource.Instance.Items.Count; }\n    }\n    public int IndexOf(SimpleDataItem item)\n    { return SimpleDataSource.Instance.Items.IndexO; }\n\nThen use it :\n                _MyDataVirtualized =\n                    new VirtualizingObservableCollection<SimpleDataItem>(\n                        new PaginationManager<SimpleDataItem>(new TesterSource()));",
  "id": "VirtualizingObservableCollection",
  "isPrerelease": false,
  "language": "",
  "lastEdited": "2015-01-29T23:12:48.567Z",
  "packageHash": "sjliVXNj7I2M/UqKR9qO3W27yLayLwkMxxXJ8YpFIRTL33vg+IFz7udTe1432AgiExUhrQ4uGoNh6xQtEJaWbg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 42681,
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "ASync is not fully supported yet.",
  "requireLicenseAcceptance": false,
  "summary": "PCL Implementation of a VirtualizingObservableCollection that implements full editing and is highly performing.",
  "title": "Virtualizing Observable Collection",
  "version": "0.8.1",
  "tags": [
    "mvvm",
    "wpf",
    "windowsstore",
    "win8",
    "windowsphone",
    "windowsphone8",
    "xamarin",
    "xaramin.forms",
    "virtualization"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}