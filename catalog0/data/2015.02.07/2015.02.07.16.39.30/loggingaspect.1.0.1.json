{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.16.39.30/loggingaspect.1.0.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Lars Baldes",
  "catalog:commitId": "56b24723-8e3e-4f3f-bbb0-048c1eb5dd3a",
  "catalog:commitTimeStamp": "2015-02-07T16:39:30.9502291Z",
  "copyright": "Copyright  2015",
  "created": "2015-01-19T01:02:28.317Z",
  "description": "Assembly to allow logging via Attributes\n\nLogging for a class is enabled by decorating it with the [Loggable] attribute and deriving from ContextBoundObject.\n       Another option is to derive from LoggableObject.\n\n       The [Log] attribute will enable logging with de Default logger. The DefaultMessageLogger and DefaultExceptionLogger  in Loggers can be replaced with custom implementations.\n       The [LogWith(Type)] allowes to specify a logger type that should be used for logging the method. A Custom Logger specified by this attribute must have a parameterless constructor.\n       \n       Both Attributes can be used as class / method attributes. When used as class attributes loggers will be called for every external call to the object. It is possible to combine both variants.\n       \n       If the logger implements MethodLogger method entry and leaving will be logged.\n       If the logger implements ExceptionLogger than all exception will be logged.\n       It is possible to implement both interfaces and enable standard and exception logging with just 1 attribute.\n       It is possible to specify multiple loggers\n       In order to create complex Loggers (with parameters / Properties to be provided) you can provide an own ObjectResolver (Loggers.LoggerResolver). e.g. for using a Dependency-Injection container or service locator",
  "iconUrl": "https://nuget.org/Content/Images/packageDefaultIcon-50x50.png",
  "id": "LoggingAspect",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2015-01-20T16:13:29.92Z",
  "licenseUrl": "http://opensource.org/licenses/Apache-2.0",
  "packageHash": "qKpyUa8sXWvYvuRkOyZAY1eAIIBicd3p+cv3AjsJpvKchswkHNH5HVqGJ8ZAfl/cNt9zT3cZT2JieKsWqTUfGA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 14421,
  "projectUrl": "https://www.nuget.org/packages/LoggingAspect",
  "published": "2015-01-19T01:02:28.317Z",
  "releaseNotes": "LogAttributes as ClassAttributes enables the logging behind an interface without exposing the attributes in the interface. However the loggers themselves must distinguish between the methods themselves.\nLogWith attribute now supports multiple Loggers e.g. [LogWith(typeof(logger1), typeof(logger2) ...)]\n\nOpen issue:\nLog/LogWith attributes have to be specified on the implemented interface if calls to the object are made through this interface. I am trying to resolve this but i am not sure if it is possible to only work with the attributes in the implementation",
  "requireLicenseAcceptance": false,
  "summary": "Enables aspect oriented logging via attributes",
  "title": "LoggingAspect",
  "version": "1.0.1",
  "tags": [
    "Aspect",
    "Logging",
    "Log",
    "Trace",
    "Tracing"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}