{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.05.06.08.31/transformations.0.0.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dmitri Rechetilov",
  "catalog:commitId": "3b4e0503-fcf9-4bd4-bfa8-a16721c75462",
  "catalog:commitTimeStamp": "2015-02-05T06:08:31.3380914Z",
  "copyright": "Copyright 2014 by Dmitri Rechetilov",
  "created": "2014-04-23T15:04:22.877Z",
  "description": "Conversion between data types. Envisaged as a possible alternative to the Universal Type Converter http://www.codeproject.com/Articles/248440/Universal-Type-Converter, with the provision for default values, and some extra features.",
  "id": "Transformations",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "packageHash": "KupiiHKgFcqms5CeLhQvZhEGRXl9dENcsoyn+YySWhUR9jhvFuNBP1r3Ti2hnk8ivph5wc5WyhAmmT0HsFx40Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 43292,
  "published": "2014-04-23T15:04:22.877Z",
  "releaseNotes": "* You don't need to reference the transformations namespace with Using statement (conversions are meant to be universal if you choose to use this).\n\nGenerally you would just do:\n\n  var newValue = oldValue.ConvertTo<newType>(optionalDefaultValue);\n\n* You can use TryConvertTo if you need to get the result of the conversion process.\n\n* You can do some conversions on DataTables and Lists , for example convert a data table to an object list, if the names of the columns match the object properties.\n\n* The date conversion is set to British date format by default, not the project's current format. This may have to change to make the library more \"universal\".\n\n* From some basic tests I have performed on universal type converter and this library, I found it to be a bit baster than the universal type converter...\n\n\n\nSome examples of use: \n********************************************\nstring valueInput = \"7F8C14B6-B3A8-4F71-8EFC-E5A7B35923B6\";\nGuid actual = valueInput.ConvertTo<Guid>(Guid.Empty);\n********************************************\nstring valueInput = \"0.1\";\nfloat actual = valueInput.ConvertTo<float>(0.0f);\n// result = 0.1f;\n********************************************\nstring valueInput = \"15/02/2014\";\nDateTime actual = valueInput.ConvertTo<DateTime>(new DateTime(2000, 01, 01));\n// result = new DateTime(2014, 02, 15);\n********************************************",
  "requireLicenseAcceptance": false,
  "summary": "Conversion between data types. Envisaged as an alternative to the Universal Type Converter, with additional provision for setting the default values, DataTable to object list conversion, etc.",
  "title": "Transformations",
  "version": "0.0.2",
  "tags": [
    "typeconverter",
    "typeconversion",
    "typeconverting",
    "conversion",
    "converting",
    "converter",
    "convert",
    "convertible",
    "type",
    "types",
    "universal"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}