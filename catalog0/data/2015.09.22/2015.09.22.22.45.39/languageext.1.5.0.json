{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.22.22.45.39/languageext.1.5.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Paul Louth",
  "catalog:commitId": "f2b5390c-f841-4686-971d-e6711154dd52",
  "catalog:commitTimeStamp": "2015-09-22T22:45:39.5941852Z",
  "copyright": "Paul Louth 2015",
  "created": "2015-09-22T22:44:39.267Z",
  "description": "Use and abuse the features of C#, which, if you squint, can look like extensions to the language itself.  This package is a functional 'toolkit' and also solves some of the annoyances with C#, namely:\n\n            * Poor tuple support\n            * Null reference problem\n            * Lack of lambda and expression inference\n            * Void isn't a real type\n            * Mutable lists, dictionaries, sets, queues, etc.\n            * The awful 'out' parameter\n\n        The library very heavily focusses on correctness, to give you the tools needed to write safe declarative code.\n\n        Features:\n\n            Powerful 'prelude' which you include by `using static LanguageExt.Prelude` (in C# 6) that covers many of the basic functional language core library functions and types (from `using LanguageExt`):\n\n                Pattern matching\n                Lambda type-inference: `var fn = fun( (int x, int y) => x + y );`\n                `Option<T>`, `OptionUnsafe<T>`, `Either<L,R>`, `EitherUnsafe<L,R>` and `TryOption<T>` monads (probably the most complete implementations you'll find in the .NET world)\n                `tuple(a,b,...)` - `Tuple` construction without typing `Tuple.Create(a,b,...)` as well as `map` to project the `Item1..ItemN` properties onto named values.\n                `List` - immutable list \n                `Map` - immutable map                                                \n                `Set` - immutable set\n                `memo` - Memoization with auto-cache purging using weak-references\n                `Writer` monad\n                `Reader` monad\n                `State` monad\n                Partial application\n                Currying\n                Higher kinded type\n                Extension methods and replacement functions for dealing with `out` (Int32.TryParse, IDictionary.TryGetValue, etc.)",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.22.22.45.39/languageext.1.5.0.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://www.4four.org/images/lang-ext-logo.png",
  "id": "LanguageExt",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "https://github.com/louthy/language-ext/blob/master/LICENSE.md",
  "listed": true,
  "packageHash": "BML9yJclS/jFUxC3d7t/MoZNMJq+aVequnB3Sxl8qWLDil2zvR3bFIdB/tJaUahxlpl2001gPgV7u/tWzW4nvg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 595079,
  "projectUrl": "https://github.com/louthy/language-ext",
  "published": "2015-09-22T22:44:39.267Z",
  "releaseNotes": "This is a major new release of Language-Ext with tons of new features and improvements.  Much of this release is about refining and standardising the API.  \n\nStandardisation comes in the form:\n\n* Making all constructor functions start with a capital letter\n* Making all fold and scan functions use the same fold function signature\n* Creating a common set of functions that all of the monad types implement\n\nSo:\n\n* `tuple` becomes `Tuple`\n* `list` becomes `List`\n* `map` becomes `Map`\n* `cons` becomes `Cons`\n* etc.\n\nThis makes the constructors consistent with `Some`, `None`, `Left`, `Right`, ...  The only exception to this is the `unit` constructor, which stays as-is.\n\nWe also bring in a concept of a type of 'higher kinded type' for all of the monadic types.  It's not quite as effective or refined as a Haskell HKT, but it does create a standard interface (through extension methods) for all of the monadic types.  The standard interface includes the following functions:\n\n* `Sum`\n* `Count`\n* `Bind`\n* `Exists`\n* `Filter`\n* `Fold`\n* `ForAll`\n* `Iter`\n* `Map`\n* `Lift` / `LiftUnsafe`\n* `SelectMany`\n* `Select`\n* `Where`\n\nBecause of this standardised interface, it's also possible to use monad transformer functions (for up to a two-level deep generic type):\n\n* `SumT`\n* `BindT`\n* `CountT`\n* `ExistsT`\n* `FilterT`\n* `FoldT`\n* `ForAllT`\n* `IterT`\n* `MapT`\n\ni.e.\n\n```C#\n    var list = List(Some(1), None, Some(2), None, Some(3));    // Lst<Option<int>>\n    \n    var presum = list.SumT();                                // 6\n    \n    list  = list.MapT( x => x * 2 );\n    \n    var postsum = list.SumT();                               // 12\n```\n\n\n### New types\n\n* `Map<K,V>` - Replacement for `ImmutableDictionary<K,V>` that uses an AVL tree implementation\n* `Lst<T>` - Wrapper for `ImmutableList<T>`\n* `Set<T>` - Wrapper for `ImmutableSet<T>`\n* `Try<T>` - Like `TryOption<T>` but without the optional return value\n* `RWS<E,W,S>` - Reader/Writer/State monad\n* `ExceptionMatch` - Used for new `Exception` extension method `Match` for pattern matching on exception types.\n* `ActionObservable<T>` - Used by `IObservable<T>` extension method `PostSubscribe`.  Allows an action to be executed post-subscription.\n\n### New functions\n\n* `par` - Partial application\n* `curry` - Currying\n* `random` - Thread safe random number generator\n* `ifSome` added for `TryOption` - dispatches an action if the `TryOption` is in a `Some` state\n\n### Improvements\n\n* Improved `Unit` type - Implemented `IEquatable<Unit>` and equality operator overloads\n* Improved `IComparable` and `IEquatable` support for `Option` and `Either` types\n\n### Breaking changes\n\n* Standardised the `fold` and `scan` delegates to `Func<S,T,S>`\n\n### Deprecated (made obsolete)\n\n* `tuple` - becomes `Tuple`\n* `query` - becomes `Query`\n* `map` - becomes `Map`\n* `list` - becomes `List`\n* `array` - becomes `Array`\n* `stack` - becomes `Stack`\n* `failure` - becomes `ifNone` / `ifLeft`\n* `Prelude.empty` - becomes `List.empty` / `Set.empty` / `Map.empty`\n* `cons` - becomes `Cons`\n* `range` - becomes `Range`\n* `with` - becomes `map`",
  "requireLicenseAcceptance": false,
  "summary": "",
  "title": "C# Functional Language Extensions",
  "verbatimVersion": "1.5.0",
  "version": "1.5.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.22.22.45.39/languageext.1.5.0.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.22.22.45.39/languageext.1.5.0.json#dependencygroup/.netframework4.5/system.collections.immutable",
          "@type": "PackageDependency",
          "id": "System.Collections.Immutable",
          "range": "[1.1.36, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.09.22.22.45.39/languageext.1.5.0.json#dependencygroup/.netframework4.5/rx-main",
          "@type": "PackageDependency",
          "id": "Rx-Main",
          "range": "[2.2.5, )"
        }
      ],
      "targetFramework": ".NETFramework4.5"
    }
  ],
  "tags": [
    "C#",
    "Functional",
    "Language",
    "Extension",
    "Monad",
    "Option",
    "Either",
    "Reader",
    "Writer",
    "State",
    "List",
    "Set",
    "Map",
    "Queue",
    "Memo",
    "Memoization",
    "Immutable",
    "Lambda",
    "Pattern",
    "Matching",
    "Tuple"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}