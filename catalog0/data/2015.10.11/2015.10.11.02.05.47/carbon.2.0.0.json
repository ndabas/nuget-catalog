{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.10.11.02.05.47/carbon.2.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Aaron Jensen",
  "catalog:commitId": "bc86dabc-1f4f-4ea5-9dc4-324449aaea79",
  "catalog:commitTimeStamp": "2015-10-11T02:05:47.4137387Z",
  "copyright": "Copyright 2012",
  "created": "2015-10-11T02:05:13.917Z",
  "description": "Carbon is a DevOps PowerShell module for automating the configuration of Windows 2008, Windows 2008 R2, 7, 2012, and 2012 R2 computers. Carbon can configure and manage:\n\n * Local users and groups\n * IIS websites, virtual directories, and applications\n * Certificates\n * .NET connection strings and app settings\n * File system permissions, junctions, compressions\n * Hosts file\n * INI files\n * Performance counters\n * Services\n * Shares\n * Privileges\n * COM permissions\n * Registry keys/values",
  "id": "Carbon",
  "isPrerelease": false,
  "language": "en-us",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0",
  "listed": true,
  "packageHash": "yddAyk5Apa4/jSeE5/UEbO40LvKtseWngHAz1f0FM0YxdrEFOWlF9w5oxDy6Dh3l/RsB4cc+kHYqz/Q+cE4wIQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 1164555,
  "projectUrl": "http://get-carbon.org",
  "published": "2015-10-11T02:05:13.917Z",
  "releaseNotes": "## Overview\n\nCarbon version 2.0 is a *huge* release, with lots of new enhancements and bug fixes. We hope you like them. Carbon 2.0 now requires PowerShell 4, so it is not backwards-compatabile with Carbon 1.x. Because of this, we made some additional backwards-incompatible changes. See the `Upgrade Instructions` section for things to look out for.\n\nIf you're upgrading from a previous 2.0 alpha release, you'll want to review the changes since your alpha version (found after the *Upgrade Instructions* section). We improved backwards-compatability with Carbon 1.x since the last alpha release, but that broke compatability with the alphas. \n\n## Upgrade Instructions\n\nMake sure you're running PowerShell 4. \n\n`Install-Certificate`'s parameters have changed:\n\n * Remove the `Exportable` switch from any usages of `Install-Certificate` when installing from an `X509Certificate2` *object*, since that switch only gets used when installing a certificate from a file.\n\nSome functions now return different objects and/or the objects returned have changed:\n\n* Use the `Sid` property on objects returned by `Test-Identity` when using the `PassThru` switch: it now returns a `Carbon.Identity` object if the identity exists *and* you use the `-PassThru` switch, e.g. `Test-Identity -Name $userName -PassThru | Select-Object -Expand 'Sid'`.\n * Update usages of `Carbon.Computer.ProgramInstallInfo`'s `Version` property (returned by `Get-ProgramInstallInfo`). It was an `int` and is now a [Version](http://msdn.microsoft.com/en-us/library/y0hf9t2e.aspx) object.\n\nThe Carbon assembly was re-organized. If you were reaching into `Carbon.dll` (***NOT RECOMMENDED***), you'll want to:\n\n * Rename usages of `[Carbon.AdvApi32]` class to `[Carbon.Service.ServiceSecurity]`.\n * Rename usages of `[Carbon.Lsa]` class to `[Carbon.Security.Privilege]`.\n * Rename usages of `[Carbon.Win32]` class to `[Carbon.FileSystem.Path]`.\n * Rename usages of `[Carbon.HandleInfo]` class to `[Carbon.Win32.HandleInfo]`.\n * Remove usages of `[Carbon.Lsa]::LookupPrivilegeValue` class method. It was incorrectly exposed as a public method.\n * Remove usages of `[Carbon.Kernel32]::LocalFree` class method. It was incorrectly exposed as a public method.\n\nThe following commands no longer return the stdout output from the console applications each one calls. To see the old output, use the `-Verbose` switch. Remove any usage of the output you were processing.\n\n * All IIS functions.\n * `Disable-FirewallStatefulFtp`\n * `Enable-FirewallStatefulFtp`\n * `Install-Service`\n * `Install-SmbShare`\n * `Remove-SslCertificateBinding`\n * `Set-SslCertificateBinding`\n * `Uninstall-Service`\n\nThe following functions' internal behavior has changed. This may or may not impact you.\n\n * `Grant-Permission` now only grants permissions on an object if those permissions aren't present.  To preserve previous behavior, add the `-Force` switch to all `Grant-Permission` usages.\n * `Grant-Permission` now writes an error if you don't have access to a private key. Previously, it would skip the key without any messages.\n * `Install-Msi` (fka `Invoke-WindowsInstaller`) now only installs the MSI if it isn't already installed. To preserve the previous behavior and always install, add the `-Force` switch to all `Invoke-WindowsInstaller`\\`Install-Msi` usages.\n * All IIS functions were re-written to use the `Microsoft.Web.Administration` API instead of `appcmd.exe`.\n * `Install-IisWebsite` no longer deletes and re-creates websites. If a website exists, it updates its configuration to match parameters passed in. To preserve previous behavior and delete the website before installing, use the `-Force` switch.\n * `Install-IisVirtualDirectory` no longer deletes and re-creates virtual directories. If a virtual directory exists, its configuration is updated in place. To preserve previous behavior and delete the virtual directory before installing, use the `Force` switch.\n * `Install-FileShare` (fka `Install-SmbShare`) no longer deletes and re-creates the share, instead it modifies existing shares in place. To preserve previous behavior and delete existing shares before re-creating, use the `Force` switch.\n * `Set-RegistryKeyValue` only sets the value if the value doesn't exist or the current value is different than the desired value.\n\nWe've added parameter validation to some functions. This shouldn't impact anybody, since if you were passing data that breaks this new validation, the function wouldn't have worked even in previous versions of Carbon.\n\n * Ensure that all thumbprints passed to `Set-SslCertificateBinding` are valid (40 character hex strings), since it now validates thumbprints.\n * Check that all IP addresses passed to `Set-HostsEntry` are valid IP v4 or v6 addresses.  `Set-HostsEntry`'s IPAddress parameter is now a `System.Net.IPAddress` object.  Previously it was a string validated with a regular expression, so you *should* be OK.\n\nAll Carbon functions now respect each caller's common parameters (e.g. `-Verbose`, `-ErrorAction`, etc.). This means if you pass a common parameter to a script that calls a Carbon function, that Carbon function will use that common parameter. This may or may not impact you.\n\n## Bug Fixes\n\n * Carbon's `System.ServiceProcess.ServiceController` extended type data causes errors when PowerShell formats `System.ServiceProcess.ServiceController` objects that represent services on remote computers.\n * `Compress-Item` doesn't remove handled errors from global error array.\n * `Grant-Permission` fails with an unhelpful error message if it is unable to get the ACL on a private key.\n * `Install-Msi` didn't properly detect when installation failed.\n * `Install-ScheduledTask` fails under PowerShell 5 to create a scheduled task to run on Sunday.\n * `Install-Service`:\n   * No longer writes a warning about being unable to stop an already stopped service (fixes [issue #158](https://bitbucket.org/splatteredbits/carbon/issues/158/install-service-extraneous-warning-about)).\n   * Starting the service now respects caller's error action preference. Before, `Start-Service` would write an error even if somone called `Install-Service` with an `Ignore` or `SilentlyContinue` error action preference.\n   * Service arguments that are quoted still get quoted. Now, quotes are trimmed before arguments are quoted.\n * `Set-EnvironmentVariable` fails to set process-level environment variable. \n * `Set-HostsEntry` fails to preserve whitespace if existing lines end with a comment/description. Thanks to [Konstantin Ushenin](https://vk.com/kostanew) for the fix.\n\n\n## Enhancements\n\n### General\n\n * Carbon now requires PowerShell 4.\n * `Import-Carbon.ps1` is more intelligent about when it tries to re-load Carbon. It will force a re-import of Carbon if any of Carbon's files have changed or the version has changed.\n * Added new `FileIndex`, `LinkCount`, and `VolumeSerialNumber` extended type data on `System.IO.FileInfo` objects for getting a file's index, its hard link count, and volume serial number, respectively.\n * The product version of the Carbon assembly now includes pre-release version information, as defined by the [Semantic Versioning specification](http://semver.org). To get this version, run `Get-Item Carbon.dll | Select-Object -ExpandProperty 'VersionInfo' | Select-Object -ExpandProperty 'ProductVersion'`.\n * The Carbon NuGet package now supports installing and uninstalling under Chocolatey.\n * All IIS functions were re-written to use the `Microsoft.Web.Administration` API instead of `appcmd.exe`. As a side effect, they no longer return `appcmd.exe` console output.\n * The following functions no longer use `Write-Host`. Instead, they use `Write-Verbose`:\n   * `Disable-NtfsCompression`\n   * `Enable-NtfsCompression`\n   * `Grant-ComPermission`\n   * `Grant-Permission`\n   * `Install-Service` \n   * `Remove-SslCertificateBinding` \n   * `Revoke-ComPermission` \n * Created default, table-based display formats for `System.DirectoryServices.AccountManagement.UserPrincipal`, `System.DirectoryServices.AccountManagement.GroupPrincipal`, `Microsoft.Web.Administration.ApplicationPool`, `Microsoft.Web.Administration.Site`, and `Microsoft.Web.Administration.Application` objects.\n * Re-organized Carbon's internal directory structure. You shouldn't be reaching into Carbon's internals, so this shouldn't matter, but wanted to let everyone know just in case.\n \n### New Functions\n\n * `Clear-DscLocalResourceCache` clears the local LCM's DSC resource. This makes developing resources easier.\n * `Clear-MofAuthoringMetadata` removes authoring metadata from .mof files.\n * `Copy-DscResource` copies DSC resources (ZIP files, MSI archives, MOF files, etc.), including timestamps, checksums, and copying only changed files.\n * `ConvertTo-SecurityIdentifer` converts a binary, string, or `System.Security.Principal.SecurityIdentifier` object into a `System.Security.Principal.SecurityIdentifier` object.\n * `Get-DscError` gets any DSC errors that were written to a computer's DSC event log.\n * `Get-DscWinEvent` gets DSC events that were written to a computer's DSC event log.\n * `Get-FileSharePermission` gets the sharing permissions on a file/SMB share (*not* the NTFS file system permissions).\n * `Get-FileShare` uses WMI to get `Win32_Share` objects for the file shares installed on the local computer.\n * `Get-Group` gets a local group or all local groups.\n * `Get-Msi` reads installer information and properties from an MSI file.\n * `Get-PowerShellModuleInstallPath` gets the path where new module's should be installed. Beginning with PowerShell 4, modules should get installed into `$env:ProgramFiles\\Windows PowerShell\\Modules`. Under PowerShell 3, it is `$PSHome\\Modules`. This function returns the correct location for the version of PowerShell you're using.\n * `Get-User` gets a local user or all local users.\n * `Initialize-Lcm` configures the DSC Local Configuration Manager on computers, including installing the private key needed for decrypting credentials.\n * `Remove-GroupMember` removes a user/group from a local group. Thanks to [Philip Kluss](https://bitbucket.org/philkloose) for the contribution. \n * `Resolve-Identity` converts a system, local, or domain principal name or a SID (as a `SecurityIdentifer`, string SDDL, or byte array) into its canonical representation and includes extended identity information: domain, type, and SID.\n * `Start-DscPullConfiguration` starts a configuration check on a computer that is configured to use the PULL refresh mode.\n * `Test-DscTargetResource` compares target resource with desired resource. Helpful when writing `Test-TargetResource` functions.\n * `Test-Group` checks if a *local* group exists.\n * `Test-FileShare` uses WMI to check if a file/SMB share exists on the local computer.\n * `Test-TypeDataMember` tests if a type has an extended type member defined.\n * `Uninstall-FileShare` uninstalls/removes a file share, if it exists.\n * `Write-DscError` writes DSC `ErrorLogRecord` objects as errors.\n\n### New DSC Resources\n\n * `Carbon_EnvironmentVariable` creates/removes machine-level environment variables.\n * `Carbon_FirewallRule` configures firewall rules.\n * `Carbon_IniFile` manages the contents of INI files.\n * `Carbon_Permission` configures file, directory, registry, and certificate permissions.\n * `Carbon_Privilege` configures an identity's privileges.\n * `Carbon_ScheduledTask` configures scheduled tasks with `schtasks.exe`.\n * `Carbon_Service` configures Windows services.\n \n### Added `PassThru` Switches\n\nAdded a `PassThru` switch to the following functions, which will return objects of the given type:\n\n * `Grant-ComPermission`: `Carbon.Security.ComAccessRule`, representing the granted permission.\n * `Grant-Permission`: `System.Security.AccessControl.AccessRule`, representing the granted permission.\n * `Install-Group`: `System.DirectoryServices.AccountManagement.GroupPrincipal`, representing the group. \n * `Install-IisApplication`: `Microsoft.Web.Administration.Application`, representing the application.\n * `Install-IisWebsite`: `Microsoft.Web.Administration.Site`, representing the website.\n * `Install-Junction`: `System.IO.DirectoryInfo`, representing new target directories and any new/updated junctions.\n * `Install-Service`: `System.ServiceProcess.ServiceController`, representing the service.\n * `Install-User`: `System.DirectoryServices.AccountManagement.UserPrincipal`, representing the user.\n * `Set-SslCertificateBinding`: `Carbon.Certificates.SslCertificateBinding`, representing the configured binding.\n \n### No More Console Output\n\nThe following functions no longer return the console output of the program each one runs. Instead, the output is written to the verbose stream (i.e. use the `-Verbose` switch to see it).\n\n * `Disable-FirewallStatefulFtp`\n * `Enable-FirewallStatefulFtp`\n * `Install-Service`\n * `Remove-SslCertificateBinding`\n * `Set-SslCertificateBinding`\n * `Uninstall-Service`\n \n### Obsolete Functions and Parameters\n\nThe following functions are now obsolete. Please don't use them and stop using them if you are. They will be removed from a future major version of Carbon. You'll get warnings if you use them.\n\n * `Complete-Job`: It's total crap. Use PowerShell's `Wait-Job` cmdlet instead.\n * `Invoke-AppCmd`: Switch to Carbon's IIS functions, or use `Get-IisConfigurationSection` to get `ConfigurationElement` objects from the `Microsoft.Web.Administration` API that you can modify.\n * `Resolve-NetPath`: Switch to something else. Carbon doesn't use `net.exe` anymore.\n \nThe following functions now have obsolete parameters, which will be removed from a future major version of Carbon. You'll get warnings if you use them.\n\n * `Install-IisAppPool's` `UserName` and `Password` parameters. Use the new `Credential` parameter instead.\n * `Install-Msi's` `Quiet` switch. `Install-Msi` always installs in quiet mode. Please remove usages.\n * `Install-Service's` `Password` parameter. Use the new `Credential` parameter instead.\n * `Install-User's` `UserName` and `Password` parameters. Use the new `Credential` parameter instead.\n * `Set-RegistryKeyValue`'s `Quiet` parameter. Please remove usages.\n \n### Renamed Functions\n\nThe following functions were renamed, but with backwards-compatible aliases in place, so you shouldn't have to change any code.\n\n * `Invoke-WindowsInstaller` -> `Install-Msi`\n * `Install-SmbShare` -> `Install-FileShare`\n \n### Switch to System.DirectoryServices.AccountManagement API for User/Group Management\n\nThe following functions were re-written to use the `System.DirectoryServices.AccountManagement` API, introduced in .NET 3.5.\n\n * `Add-MemberToGroup`\n * `Install-Group`\n * `Install-User` \n * `Test-User`\n * `Uninstall-User`\n \n### Miscellaneous Changes\n\n * `Get-IisAppPool`\n    * Now return all application pools installed on the local computer when called with no parameters.\n    * Added a default table format for `Microsoft.Web.Administration.ApplicationPool` objects.\n * `Get-ProgramInstallInfo`\n    * Return object's `Version` property changed from an `int` to a [Version](http://msdn.microsoft.com/en-us/library/y0hf9t2e.aspx) object.\n    * Return object's now have `ProductCode` and `User` properties. If a program doesn't have a product code, it is set to `[Guid]::Empty`. The `User` property is only set for per-user software installs.\n * `Get-ServiceConfiguration` now supports services from remote computers.\n * `Grant-Permission` now only grants permissions on an object if those permissions aren't present.  To preserve previous behavior, add the `-Force` switch to all `Grant-Permission` usages.\n * `Install-Certificate's` `Exportable` switch is now only allowed when installing a certificate from a file. Previously, you could supply the switch when installing from an X509Certificate2 object but it was ignored.\n * `Install-Group's` `Members` parameter renamed to `Member` (with backwards-compatible alias).\n * Added `Credential` parameter to `Install-IisAppPool` for increased security and to follow PowerShell guidelines.\n * `Install-IisVirtualDirectory` no longer deletes and re-creates existing virtual directories, but modifies existing virtual directories in place.\n * `Install-IisWebsite`\n    * Added `SiteID` parameter tfor setting a website's IIS ID.\n    * No longer deletes and re-creates websites, but modifies existing websites in place. This may or may not be a breaking change in your environment.\n * `Install-Msi`\n    * `Path` parameter now supports wildcards.\n    * Now only installs an MSI if it isn't already installed. To preserve the previous behavior and always install, add the `-Force` switch to all `Invoke-WindowsInstaller`\\`Install-Msi` usages.\n * `Install-Service`\n    * Now supports service startup parameters/arguments via the `ArgumentList` parameter.\n    * Improved error handling and messages. It now uses `net helpmsg` to get helpful error messages based on sc.exe exit codes.\n    * Added `Credential` parameter for increased security and to follow PowerShell guidelines.\n    * Added `Description` parameter for setting a service's description.\n    * Added `DisplayName` parameter for setting a service's display name.\n * `Install-FileShare` (fka `Install-SmbShare`):\n    * Re-written to use WMI isntead of `net.exe`, so it no longer returns any console output.\n    * Modifies existing shares in place, instead of deleting and re-creating, *unless* the share's path changes. Changing a share's path requires the old share to be deleted and a new one created.\n * `Install-User`\n    * Added `PasswordExpires` switch for creating accounts with passwords that expire.\n    * Added `UserCannotChangePassword` to prevent user from changing his password.\n * `Remove-SslCertificateBinding` has better error handling.\n * Added `SID` parameter to `Resolve-IdentityName` to resolve a SID into its identity name.\n * `Set-HostsEntry's` `IPAddress` parameter is now a `System.Net.IPAddress` object. It used to be a string validated with a regular expression.\n * `Set-RegistryKeyValue`: \n    * Added `UDWord` and `UQWord` parameters for setting registry key values to unsigned integers (i.e. integer values greater than `[int]::MaxValue` and `[long]::MaxValue`). Fixes [issue #165: Set-RegistryKeyValue rejects unsigned integers larger than [int]::MaxValue](https://bitbucket.org/splatteredbits/carbon/issues/165/set-registrykeyvalue).\n    * Deprecated `Quiet` switch.\n    *  Only sets the value if the value doesn't exist or the current value is different than the desired value. Use the `Force` parameter to preserve previous behavior.\n * `Test-Identity` now returns a `Carbon.Identity` object if the identity exists *and* you use the `-PassThru` switch. It used to return the identity's SID. Update scripts to use the `FullName` property to get the old return value, e.g. `Test-Identity -Name $userName -PassThru | Select-Object -Expand 'FullName'`.\n * `Test-OSIs32Bit` now uses the Environment class's new [Is64BitOperatingSystem](http://msdn.microsoft.com/en-us/library/system.environment.is64bitoperatingsystem.aspx) property.\n * `Test-OSIs64Bit` now uses the Environment class's new [Is64BitOperatingSystem](http://msdn.microsoft.com/en-us/library/system.environment.is64bitoperatingsystem.aspx) property.\n * `Test-PowerShellIs32Bit` now uses the `Environment` class's new [Is64BitProcess](http://msdn.microsoft.com/en-us/library/system.environment.is64bitprocess.aspx) property.\n * `Test-PowerShellIs64Bit` now uses the `Environment` class's new [Is64BitProcess](http://msdn.microsoft.com/en-us/library/system.environment.is64bitprocess.aspx) property.\n * `Uninstall-ScheduledTask` now retries when un-installing a task fails with \"The function attempted to use a name that is reserved for use by another transaction.\" error.\n * `Unprotect-String`\n    * Added `AsSecureString` switch, which will return a secure string instead of a normal string.\n    * The `Password` parameter now accepts `SecureString` values.\n * `Initialize-Lcm`\n    * Added support for PowerShell 5: `RefreshIntervalMinutes` default value changed to from 15 to 30; `RefreshIntervalMinutes` minimum value is now 30; `ConfigurationFrequency`'s minimum value is now 1 (from 2).\n \n## Changes Since `alpha.26`\n\n### Enhancements\n\n * Includes all changes made in version 1.9.0.\n * PowerShell 4 is now required. Carbon won't even import under PowerShell 3.\n * Removed `Carbon_Script` resource. It only existed so I could pass values to my script blocks. Turns out, the built-in `Script` resource supports this with the `$using:` scope. Remember, your most important features is documentation!\n * Created a new `Carbon_ScheduledTask` DSC resource for managing scheduled tasks.\n * The `Version` property on the objects returned by `Get-ProgramInstallInfo` is now a proper .NET `Version` object instead of an integer.\n \n### Bug Fixes\n\n * `Carbon_Permission` DSC resource fails when assigning multiple permissions\n * Grant-Permission fails when clearing multiple existing, non-inherited permission on an item.\n \n## Changes Since `alpha.31`\n\n### Bug Fixes\n\n * `Set-HostsEntry` fails to preserve whitespace if existing lines end with a comment/description. Thanks to [Konstantin Ushenin](https://vk.com/kostanew) for the fix.\n * Carbon's `System.ServiceProcess.ServiceController` extended type data causes errors when PowerShell formats `System.ServiceProcess.ServiceController` objects that represent services on remote computers.\n * `Install-Msi` didn't properly detect when installation failed.\n * `Set-EnvironmentVariable` fails to set process-level environment variable.\n * `Compress-Item` doesn't remove handled errors from global error array.\n * `Grant-Permission` fails with an unhelpful error message if it is unable to get the ACL on a private key.\n \n### Enhancements\n\n * `Import-Carbon.ps1` is more intelligent about when it tries to re-load Carbon. It will force a re-import of Carbon if any of Carbon's files have changed or the version has changed.\n * Created `Uninstall-Junction` for uninstalling a junction in an idempotent way (i.e. without errors). Thanks to [Konstantin Ushenin](https://vk.com/kostanew) for the contribution.\n * Improved error handling in `Remove-Junction`.\n * `Install-Service`:\n   * Now supports service startup parameters/arguments.\n   * No longer returns `ServiceController` objects by default. This should improve backwards-compatability. Added a `PassThru` switch you can use to get a `ServiceController` object returned to you.\n   * Improved error handling. It now uses `net helpmsg` to get helpful error messages based on sc.exe exit codes.\n   * Improved handling of arguments/services with spaces in them under PowerShell 5.\n   * Added `Credential` parameter for increased security and to follow PowerShell guidelines.\n   * Now supports setting a service's description and display name.\n   * Starting the service now respects caller's error action preference. Before, `Start-Service` would write an error even if somone called `Install-Service` with an `Ignore` or `SilentlyContinue` error action preference.\n * New `Test-TypeDataMember` for testing if a type has an extended type member defined.\n * `Install-IisAppPool` no longer returns appcmd.exe output.\n * Added `PassThru` parameter to `Install-IisAppPool` to control when a `Microsoft.Web.Administration.ApplicationPool` for the installed app pool is returned.\n * `Get-ServiceConfiguration` and Carbon's extended type data for `System.ServiceProcess.ServiceController` objects now supports services from remote computers.\n * `Uninstall-ScheduledTask` now retries when un-installing a task fails with \"The function attempted to use a name that is reserved for use by another transaction.\" error.\n * Added new `FileIndex`, `LinkCount`, and `VolumeSerialNumber` extended type data on `System.IO.FileInfo` objects for getting a file's index, its hard link count, and volume serial number, respectively.\n * `Grant-Permission` now only returns an access rule object when the new `PassThru` switch is used. In previous 2.0 alpha releases, it only returned something when permissions on an object were added or changed.\n * `Install-User` only returns a user object when the new `PassThru` switch is used. In previous 2.0 alpha releases, it only returned an object if a user was created or updated.\n * `Grant-ComPermissions` only returns an access rule object when the new `PassThru` switch is used. In previous 2.0 alpha releases, it only returned an object if permissions were changed.\n * `Install-IisApplication` only returns an IIS application object when the new `PassThru` switch is used. In previous 2.0 alpha releases, it only returned an object if the application was created or modified.\n * Created `Get-Msi` function for reading MSI information and properties from an MSI file.\n * `Carbon.Computer.ProgramInstallInfo` objects (returned from `Get-ProgramInstallInfo`) now have `ProductCode` and `User` properties. If a program doesn't have a product code, it is set to `[Guid]::Empty`. The `User` property is only set for per-user software installs.\n * `Invoke-WindowsInstaller` renamed `Install-Msi`, with a backwards-compatibility-preserving alias.\n * `Install-Msi` now supports wildcards for MSI path to install.\n * `Install-Msi` now only installs an MSI if it isn't already installed. To preserve the previous behavior and always install, add the `-Force` switch to all `Invoke-WindowsInstaller`\\`Install-Msi` usages.\n * Added `SiteID` parameter to `Install-IisWebsite` for setting a website's IIS ID.\n * Put the `Resolve-IdentityName` function back. It was removed from previous alpha releases.\n * `Install-IisWebsite` no longer deletes and re-creates websites. This may or may not be a breaking change in your environment.\n * `Install-SmbShare` no longer returns net.exe output, instead writing it to the verbose stream. To see previous output, use the `-Verbose` switch.\n * Changed `-PasswordNeverExpires` switch to  `PasswordExpires` on `Install-User` for improved backwards-compatability.\n * `Set-SslCertificateBinding` no longer returns binding objects by default. Use new `PassThru` switch to get the old behavior.\n * The product version of the Carbon assembly now includes pre-release version information, as defined by the [Semantic Versioning specification](http://semver.org). To get this version, run `Get-Item Carbon.dll | Select-Object -ExpandProperty 'VersionInfo' | Select-Object -ExpandProperty 'ProductVersion'`\n * The Carbon NuGet package now supports installing and uninstalling using Chocolatey.\n * Added `AsSecureString` switch to `Unprotect-String` which causes `Unprotect-String` to return a secure string instead of a normal string.\n * `Unprotect-String` now accepts a `SecureString` as the value for the `Password` parameter, which is the password for the private key used to decrypt from password-protected RSA certificate file.\n * Added `Credential` parameter to `Install-IisAppPool` for increased security and to follow PowerShell guidelines.\n * Added `Credential` parameter to `Install-User` for increased security and to follow PowerShell guidelines.\n * `Install-IisVirtualDirectory` now modifies existing virtual directories in place, instead of deleting and re-creating.\n * `Invoke-AppCmd` is now obsolete and will be removed from a future version of Carbon. Switch to Carbon's IIS functions, or use `Get-IisConfigurationSection` to get `ConfigurationElement` objects from the `Microsoft.Web.Administration` API that you can modify.\n * Added `Description` and `DisplayName` properties to `Carbon_Service` for setting a service's description and display name.\n * `Grant-Permission` now writes an error if you don't have access to a private key. Previously, it would skip the key without any messages.\n * `Resolve-Identity` now converts SIDs to a `Carbon.Identity` object. The SID may be a string (SID in SDDL form), byte array, or a `SecurityIdentifier` object.\n * `Get-FileSharePermission` gets the sharing permissions on a file/SMB share (*not* the NTFS file system permissions).\n * Created `Get-FileShare` function. It uses WMI to get `Win32_Share` objects for the file shares installed on the local computer.\n * Renamed `Install-SmbShare` to `Install-FileShare`, with a backwards-compatible alias in place.\n * Added `SID` parameter to `Resolve-IdentityName` to resolve a SID into its identity name.\n * Created `ConvertTo-SecurityIdentifer` function to convert a binary, string, or `System.Security.Principal.SecurityIdentifier` object into a `System.Security.Principal.SecurityIdentifier` object.\n * `Install-FileShare` (fka `Install-SmbShare`):\n    * Re-written to use WMI isntead of `net.exe`.\n    * Modifies existing shares in place, instead of deleting and re-creating, *unless* the share's path changes. Changing a share's path requires the old share to be deleted and a new one created.\n * `Carbon_FirewallRule` now fails with an error if it finds multiple firewall rules with the same name.\n * `Set-RegistryKeyValue`: \n    * Added `UDWord` and `UQWord` parameters for setting registry key values to unsigned integers (i.e. integer values greater than `[int]::MaxValue` and `[long]::MaxValue`). Fixes [issue #165: Set-RegistryKeyValue rejects unsigned integers larger than [int]::MaxValue](https://bitbucket.org/splatteredbits/carbon/issues/165/set-registrykeyvalue).\n    * Deprecated `Quiet` switch.\n    * Only sets value if the value is changed. Use the `Force` parameter to preserve previous behavior.\n * `Uninstall-Service` no longer returns sc.exe stdout.",
  "requireLicenseAcceptance": false,
  "summary": "Carbon is a PowerShell DevOps setup/configuration automation module.",
  "verbatimVersion": "2.0.0",
  "version": "2.0.0",
  "tags": [
    "DevOps",
    "PowerShell",
    "setup",
    "computer",
    "automation",
    "admin"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}