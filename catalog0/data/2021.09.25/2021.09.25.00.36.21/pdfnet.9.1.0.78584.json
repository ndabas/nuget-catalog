{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "PDFTron Systems Inc.",
  "catalog:commitId": "0ec9cbe8-d8c4-4f15-acc9-15981bd71012",
  "catalog:commitTimeStamp": "2021-09-25T00:36:21.2107273Z",
  "copyright": "Copyright 2021",
  "created": "2021-09-25T00:33:41.96Z",
  "description": "[PDF Reader. PDF Control. PDF Component]\n\nPDFNet SDK is the ultimate PDF toolkit.\n\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\n\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000). The extensive PDF library API supports most common use-case scenarios such as:\n*        PDF Viewing & Collaboration\n*        PDF Rasterization\n*        PDF Printing\n*        PDF Form filling and flattening\n*        PDF Split & Merge\n*        PDF Stamping\n*        Dynamic PDF generation (e.g. FlowDocument & Xaml to PDF)\n*        PDF Text extraction and indexing\n*        PDF Packages\n*        PDF Layers (OCGs)\n*        PDF Editing\n*        PDF Encryption\n*        Manipulate PDF bookmarks, links, and annotations.\n*        PDF Optimization\n*        PDF conversion to XML, HTML, XPS, SVG, TIF, etc.\n*        PDF/A Validation and Conversion\n*        PDF Redaction\n*        PDF Conversion from XPS, MS Office, HTML, XAML, TXT, TIFF etc.\n*        HTML to PDF Conversion",
  "iconFile": "images\\pdftron.png",
  "iconUrl": "https://pdftron.com/brand-assets/nuget.png",
  "id": "PDFNet",
  "isPrerelease": false,
  "lastEdited": "2021-09-25T00:36:05.867Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "MD3zSfIiUpra8W5y1k5pWe1X3zMoLb+vqwgqyJzu3JkflUDc/n0CN3yq6B+xxMZU50WUTuyNnXTY90WByEufYg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 52812216,
  "projectUrl": "http://www.pdftron.com/pdfnet",
  "published": "2021-09-25T00:33:41.96Z",
  "releaseNotes": "New Features\nPDFTron Web Services (PWS) support to allow for pay-as-you-go licensing on Windows, Linux and Mac.\nAdvanced imaging: Added support for HEIF/HEIC formats (native to iOS devices), as well as camera raw formats for Canon, Nikon, Olympus, Minolta, Fuji, Sony, and Kodak cameras.\nAdded new custom signing API. (DigitalSignatureField.CalculateDigest(), DigitalSignatureField.CreateSigDictForCustomSigning/Certification(), PDFDoc.SaveWithCustomSignature()) This is especially helpful for cases where the signing step needs to be done separately such as Hardware Security Module (HSM) workflows.\nAdded support for embedding digital signature timestamps in CMS. (GenerateContentsWithEmbeddedTimestamp() and custom signing APIs).\nAdded an API to sign a signature digest outside of the PDF document. (DigitalSignatureField.SignDigest()).\nAdded support for exporting and importing PDF custom appearances in XFDF in a way that is largely compatible with other PDF processors. These appearances can be generated using XFDFExportOptions.SetWriteAnnotationAppearance(true). Appearances are also now shared this way during realtime collaboration.\nPDFDoc.AppendTextDiff now supports optional exclusion zones. (TextDiffOptions.AddIgnoreZonesForPage()).\nChanged Behaviour\nPDFTron SDK on desktop platforms now requires a license key. A demo/evaluation key can be found at https://www.pdftron.com/pws/get-key.\nCrypto.TimestampingTestResult was renamed to Crypto.TimestampingResult.\nHTML2PDF modules have been removed from packages by default. It is now available on the website instead.\nNo longer remove Digitally Signed Signature appearances when copying PDF pages from one document to another. This new behaviour is easier to use, though the original matches what some other PDF consumers do in this situation.\nC++ PDFViewCtrl was removed from the base C++ package, since its dependencies made it incompatible with Azure Functions. It is still available as part of a separate package.\nOther Changes\nImprovements\n[Node.js] Added support for Node 15 and 16 to npm.\n[Python] Added support for Python 3.9 to pip.\n[MacOS] Added support for MacOS to PDF2HtmlReflowParagraphs and PDF2Word conversion.\n[MacOS] Added support for Apple Silicon (arm64) slice in PDFTron SDK Python3 pip package and Node.js npm package.\n[Node.js] Various extraneous items, such as documentation and samples were removed from the npm packages by default. This makes the package smaller and more practical to use in serverless functions.\n[Node.js] A number of improvements or additions to the Node API and documentation.\n[pdf] Significant performance improvements for AppendTextDiff.\n[pdf] Extending XRef parsing logic to handle corrupt cases where initial XRef entries are not defined.\n[pdf] Added logic into Linearized save to prevent binary inconsistencies between runs.\n[C++] Adjusted PDFNet::Terminate to allow for the library to be initialized again later. Previously this flow was not supported.\n[MacOS] Adjusted minimum MacOS support for the SDK to 10.7. (was 10.15).\n[pdf] Taking shading usage better into account when making the decision to flatten. Previously it was possible to have a large number of shadings, but have the file not be flattened.\n[pdf] On signed PDF documents incremental save will now write exactly the same format (including the number of decimal places) for numbers that were not changed. This can help to prevent invalidation of existing signatures in rare cases where relevant numbers need to be re-written.\n[pdf] Improvement to Obj.IsFree() to return false rather than throw an exception if the object is direct.\n[jpeg] Added support for extracting embedded ICC Profiles in JPEG images and embedding them in the PDF. This mainly appears as more correct colors in the output image.\n[html] Various improvements and extensions to reflowable HTML support including integration with PDFTron.AI and the inclusion of document images.\n[windows] Removed dependency on newer versions of Windows. This dependency was removed because it prevented the SDK from running on Windows 7 and older versions of the OS.\n[pdf] Various improvements to realtime collaboration support.\n[pdf] Improved the reading order of text extraction when processing tables.\n[pdf] Adjusted Optimizer to throw out resources on a page basis rather than a document basis. While this doesn't automatically shrink the documents it produces smaller output when the optimized file is split.\nBugfixes\n[pdf] Fixed multi-threaded race condition in font processing when using multiple instances of TextExtractor on the same document. In rare cases this could actually cause a crash.\n[Node.js] Adjusted PDFNet.Convert.office2PDFBuffer to destroy the temporary PDFDoc object before returning the buffer. This removes the need for other logic to clean up the memory and ensures this memory cleanup is done more quickly.\n[jpeg] Fixed an error when converting JPEG files with rotation where the output page could have incorrect dimensions.\n[pdf] Fixed stack overflow crash in AppendTextDiff that would occur in some situations.\n[pdf] Adjusted text extraction to better handle negative font sizes when generating quads. This is important to ensure underlines appear on the bottom rather than the top.\n[xps] Fixed a crash when loading a rare type of font when converting xps to pdf.\n[xod] Fixed generation of annotation appearance documents to XML escape appearance states before putting them into XOD.\n[pdf] Fixed color and arrow size for zero-width callout annotations.\n[pdf] Adjusted font rendering to avoid using hinting if this results in a bad result where the glyph outline is out of the bounding box.\n[pdf] Fixed memory leaks in text extraction.\n[xod] Fixed an issue converting to XOD with potentially incorrect scaling on rare images that have both SMask and Mask entries.\n[xod] Fixed issues with XOD annotation appearance generation for different appearance and annotation states.\n[pdf] Ensure that invisible text with no bbox (generated by OCR) is still considered as text elements to be Flattener. This is relevant especially for various types of conversion, since this is required for the invisible text to be retained.\n[xfdf] Fixed xfdf import support for unicode filenames in FileAttachment annotations.\n[xfdf] Previously annotations added to rotated PDF pages could end up with the wrong orientation when using FDFUpdate. This has been resolved.\n[pdf] Fix for Digital Signature MDP verification: changing or adding signing preferences (Lock dict) on subsequent signature fields no longer causes verification to consider previous ones invalidated when signature permissions allow this operation.\n[xfdf] Fixed an issue on PDF documents with a very large number of objects where the appearance reference could be added incorrectly to exported XFDF.\n[epub] Corrected errors where, in some cases, stroked text would be displayed incorrectly after converting to Epub. It is now flattened to ensure it displays as expected.\n[pdf] Runtime check of XRef W entry validity. Previously a crash could occur on a corrupt document with negative values were included in this entry.\n[html] Fixed URL injection security bug in reflowable HTML output that could potentially be an issue if converting a certain type of malicious PDF file.\n[pdf] Fixed a crash when dealing with corrupt compressed object streams which are missing certain required entries.\n[pdf] Fixed incorrect memory access that could occur when dealing with certain corrupt PDF documents that have multiple objects with the same object number where one of the earlier instances was a compressed object streams.\n[pdf] Hardened XRef parsing code to avoid invalid memory access on a specific class of documents.\n[pdf] Adjusted text extraction to avoid extra spaces when processing Type3 fonts.\n[pdf] Detect text with opacity set to 0 as invisible during text extraction, since this is a less common way of including invisible text for OCR.\n[html] Fixed various issues with HTML Reflow including inconsistent HTML, incorrectly merged paragraphs and errors on broken Form XObjects.\n[pdf] Improved the reading order in Text Extraction when handling superscript characters.\n[pdf] Improving detection of character spacing when using the Tc entry in Text Extraction.\n[xfdf] Improved the ability for FDFUpdate to retain existing appearances when the original annotation is still in the PDF, but not in the same location on the page.\n[xfdf] Adjusting handling for XFDF generated by WebViewer that contain nonstandard rotation to work seamlessly with RefreshOptions.SetUseNonStandardRotation(true).\n[pdfview] Adjusting the selection of cloudy squares in PDF viewer components to be more intuitive.\n[pdf] Added support for rotating Redaction text on rotated pages.\n[pdf] Fix for some font subsititution cases where symbol font glyph resolving could fail.\n[pdf] Fix for bad access when processing corrupt xref trailer references.\n[pdfview] GetAnnotationAt now prioritizes link annotations when present.\n[pdf] More strictly enforce object and generation number limitations as laid out in the specification, avoiding potential instability caused by corrupt documents.\n[pdf] Fix for potentially accessing stale object references during a call to `Annotation::IsValid`.\n[pdf] Fix for potential out-of-bounds read when dealing with documents with very large encryption keys.\n[pdf] Removed some unavoidable stdout output when processing some PDF documents with embedded javascript.\n[pdf] Fixed bug in the undo manager that could occur when a full save is triggered before any snapshots.\n[pdf] Fix for internal overflow when processing some gradients, leading to visual artifacts.\n[tiff] Fix for some older multipage TIFF files with jpeg encoded data.\n[tiff] Fix incorrect tile processing for some uncommon pixel formats.\n[tiff] Now correctly import tiff images with more than one \"unspecified alpha\" channel.\n[convert] Make sure to treat file extensions case insensitively in all cases.\n[emf] Implement full support for the StretchBLT operation on Linux and Mac (and remove GDI dependence for the same on Windows).\n[OCR] Fix automatic coordinates rescaling so that it does not depend on a fixed dpi.\n[jpeg] fix for potential crash when processing corrupt jpeg files.\n[pdf] Optimized number writing routines, resulting in up to a 10% improvement in save performance for content with a lot of coordinates (complicated curves or text positioning).\nOffice-specific\n[office] General improvement in text layout performance on Windows system (5-10 percent on average).\n[office] Added support for equations in powerpoint and excel documents.\n[excel] Improved handling of damaged (binary) xls files.\n[excel] Fix for cases where a sheets local index and global index are not the same.\n[excel] A number of fixes for header and footer positioning.\n[excel] Fixed placement for some rotated images.\n[word] Fixed issues with page numbering when dynamic field values are nested.\n[excel] Fixed issues with some types of table formatting relating to particular table regions (first row, last column, etc.).\n[excel] Fixed bug with row height determination: row should be tall enough to fit the containing text when appropriate.\n[word] Added header size limit for documents produced in older versions of Word.\n[word] Fix for non-deterministic behaviour in some documents with a page break prior to any content.\n[office] Fix for some binary-format office files with empty data streams.\n[office] Improved layout for right-to-left text with mixed fonts.\n[word] Added missing picture bullet list support for the (binary) doc format.\n[excel] Correct page numbering when using the setApplyPageBreaksToSheet option on a document with hidden sheets.\n[excel] Fixed number rounding to more closely match Excel's very specific behaviour.\n[office] Added support for \"IsLgl\" numbering property (Display All Levels Using Arabic Numerals).\n[excel] Fixed potential parse error when processing full row and full column cell ranges.\n[excel] Added PMT, Floor, Ceiling, True, and False function implementations for Excel.\n[excel] Added handling of percentage operator to the Excel formula solver (for cases where the cached result is not present).\n[word] Fixed rare case where we could wrongly assume the text direction for RTL text.\n[word] Added support for the picture outline effect.\n[excel] Fixed an issue that could cause incorrect horizontal image positioning within a table cell.\n[word] Tweaked height calculation for paragraphs with no text.\n[word] Fix for potential incorrect vertical positioning of floating elements within overlarge headers.\n[word] When competing list styles are present, now correctly prioritize local properties.\n[word] Fixed issue with paragraph-relative floating content when attached to tet that does not occupy at least one line.\n[word] Added support for a number of missing visual properties with binary doc files.\n[office] Improved line breaking algorithms for Chinese, Japanese and Korean language text.\n[word] Corrected default font for Chinese text.\n[excel] Improved support for the `ExcelMaxAllowedCellCount` option when processing binary xls files -- will now stop as early as possible.\n[word] Fixed a bug with assuming that any text line filled entirely with tabs is a right-to-left line.\n[word] Fix a potential crash when handling negative numbering style indices.\n[word] More robustly handle the case where a section break has an invalid typ.\n[word] Added support for the KeepNext property in table rows.\n[word] Added support for unsplittable table rows.\n[word] Prioritize calculated page numbers over cached values for dynamic page numbering.\n[word] Fixed an issue with indents in roman numbered lists.\n[word] Tweaked justification and indentation of nested paragraphs.\n[word] Fixed calculation of the leading space for the first paragraph on a page, which previously incorrectly took the line-height multiplier into account.\n[word] Fixed an issue with a page break before the first paragraph in a section.\n[office] Added support for the \"Arabic\" format specifier for dynamic text runs.\n[word] Fixed various issues with chart titles.\n[office] Fixed issues with text highlighting within nested lists.\n[word] Tweaked positioning of centered floating tables.\n[word] Improved conversion fidelity for pie charts.\n[word] Fixed label placement for doughnut charts.\n[excel] Fixed a bug that could skip AlternateContent elements when they are the only thing present in a table cell.\n[word] Now correctly process colors for form field checkboxes.\n[word] Correctly prioritize the last paragraph style when mutiple styles are specified.\n[word] Fixed content placement for center-aligned tabs located off the page.\n[excel] Fixed style inheritance issue for text runs with no font specified.\n[word] Now correctly clip contents of fixed size text boxes.\n[word] Added ability to run a Text2PDF conversion with an in-memory buffer source.\n[office] Fixed bug that could result in excessive image processing during conversion.\n[excel] Tweaked the resolving of drawing text styles to more closely match Excel in some edge cases.\n[office] Fixed potential crash when applying image effects to jpeg images with embedded ICC profiles.\n[word] Better detection of overlapping text with floating content.\n[office] Fixed several issues with chart legends.\n[office] Fixed the default linear gradient angle (should be 90 degree rotated if not set).\n[office] A number of fixes for image placement within table cells.\n[office] Added support of the \"series overlap\" property for charts.\n[excel] Added partial support for pattern filling of cells.\n[excel] Added support for the 1904 datesystem.\n[word] Fixed a bug where the left indent of floating tables was incorrectly being reset.\n[word] Now correctly position and size tables based on the compatibility mode of the file.\n[word] Improved support for the allowOverlap property for anchor drawings when interacting with framed paragraphs.\n[office] Fixed a memory leak when converting binary office formats.\n[office] Fixed handling of empty glyph clusters when shaping Thai text with a non-thai font.",
  "requireLicenseAcceptance": false,
  "summary": "PDFNet SDK is the ultimate PDF toolkit.\nWith PDFNet components you can build reliable & speedy applications that can view, create, print, edit, and annotate PDFs ... across operating systems.\nDevelopers use PDFNet SDK to read, write, and edit PDF documents compatible with all published versions of PDF specification (including the latest ISO32000).",
  "title": "PDFNet SDK",
  "verbatimVersion": "9.1.0.78584",
  "version": "9.1.0.78584",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#dependencygroup/.netframework4.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETFramework4.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#PDFNet.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 7164,
      "fullName": "PDFNet.nuspec",
      "length": 18962,
      "name": "PDFNet.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#lib/net40/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 16422704,
      "fullName": "lib/net40/PDFNet.dll",
      "length": 38012384,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#lib/net40/PDFNetLoader.dll",
      "@type": "PackageEntry",
      "compressedLength": 6897,
      "fullName": "lib/net40/PDFNetLoader.dll",
      "length": 11904,
      "name": "PDFNetLoader.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#build/net40/PDFNet.targets",
      "@type": "PackageEntry",
      "compressedLength": 496,
      "fullName": "build/net40/PDFNet.targets",
      "length": 1040,
      "name": "PDFNet.targets"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#build/net40/PDFNet/x86/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 16422704,
      "fullName": "build/net40/PDFNet/x86/PDFNet.dll",
      "length": 38012384,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#build/net40/PDFNet/x86/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 263927,
      "fullName": "build/net40/PDFNet/x86/PDFNet.xml",
      "length": 1899187,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#build/net40/PDFNet/x64/PDFNet.dll",
      "@type": "PackageEntry",
      "compressedLength": 19200164,
      "fullName": "build/net40/PDFNet/x64/PDFNet.dll",
      "length": 45802976,
      "name": "PDFNet.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#build/net40/PDFNet/x64/PDFNet.xml",
      "@type": "PackageEntry",
      "compressedLength": 264123,
      "fullName": "build/net40/PDFNet/x64/PDFNet.xml",
      "length": 1899112,
      "name": "PDFNet.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 141,
      "fullName": "tools/install.ps1",
      "length": 203,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 1575,
      "fullName": "readme.txt",
      "length": 4102,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#PDFNet_License.pdf",
      "@type": "PackageEntry",
      "compressedLength": 207379,
      "fullName": "PDFNet_License.pdf",
      "length": 213950,
      "name": "PDFNet_License.pdf"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#images/pdftron.png",
      "@type": "PackageEntry",
      "compressedLength": 1722,
      "fullName": "images/pdftron.png",
      "length": 1748,
      "name": "pdftron.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 60,
      "fullName": "LICENSE.txt",
      "length": 64,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.09.25.00.36.21/pdfnet.9.1.0.78584.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "PDF",
    "viewer",
    "control",
    "component",
    "reader",
    "print",
    "forms",
    "split",
    "merge",
    "stamp",
    "XPS",
    "SVG",
    "HTML",
    "convert",
    "optimize",
    "redact",
    "encrypt",
    "pdftron",
    "pdfviewer",
    "rasterizer",
    "pdf2image",
    "converter",
    "WPF",
    "WinForms",
    "extract",
    "sign",
    "annotate",
    "pdf2html",
    "html2pdf",
    "pdf2svg"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}