{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Steve Gilham",
  "catalog:commitId": "5acf7cc3-c5d6-414c-b594-2d66044e18fd",
  "catalog:commitTimeStamp": "2021-11-27T16:32:29.9596655Z",
  "copyright": "Copyright © 2010-2021 by Steve Gilham <SteveGilham@users.noreply.github.com>",
  "created": "2021-11-27T16:30:04.213Z",
  "description": "A cross-platform pre-instrumenting code coverage tool set for .net/.net core and Mono",
  "iconFile": "AltCover_128.png",
  "iconUrl": "https://cdn.jsdelivr.net/gh/SteveGilham/altcover/Build/AltCover_128.png",
  "id": "altcover.fake",
  "isPrerelease": false,
  "lastEdited": "2021-11-27T16:32:04.31Z",
  "licenseFile": "LICENSE",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "fwxJkYfaY8aKo44qNMyBRKf0694pRFHjhV8IJDvic09yFNVH/nRfWAOWpqhVSctRV4LpZQFCOk1bKNmWrUicaQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 144086,
  "projectUrl": "https://github.com/SteveGilham/altcover/wiki",
  "published": "2021-11-27T16:30:04.213Z",
  "readmeFile": "README.fake.md",
  "releaseNotes": "This build from https://github.com/SteveGilham/altcover/tree/a9f3a871735349d557237d39d85cd9f7001483cc\n\nQ. Never mind the fluff -- how do I get started?\nA. Start with the Quick Start guide : https://github.com/SteveGilham/altcover/wiki/QuickStart-Guide\n8.2.831 (Habu series release 9)\n• [BUGFIX] Make the static-linked parts of the recorder assembly internal, so only the AltCover instrumentation API is exposed -- removes type duplications from the environment that may confuse run-time assembly creation e.g. by Marten (issue #133)\n• For CallContext, add async-aware tracking for all methods returning Task or Task<T> not just ones with the C# async shape.  This includes functions returning the new F#6 task{} computation expression.\n  ◦ Note there is a support gap : running this under .net Framework less than v4.6 (i.e. a test machine with a pre-2015-JUL-20 environment) will not work, even though Task is a .net 4.0 feature, as the tracking support relies on .net 4.6 async features.\n• Emit (a warning)[https://stevegilham.github.io/altcover/AltCover.Engine/AltCover/AltCover.LoggingOptions/Warn-apidoc] if any of the files input to the instrumentations have previously been instrumented, leaving those files untouched (apart from any Recorder assembly, which will still be overwritten).  For dotnet test this is an MSBuild warning, for powershell, it is delivered via Cmdlet.WriteWarning.\n  ◦ This behaviour is subject to change in future releases\n• Rework of the build process to keep artifacts out of the tracked directories\n8.2.828 (Habu series release 8)\n• Absorb .net 6 release into build tooling (awaiting a non-preview updated release of (fake.build)[https://fake.build/] to be able to upgrade to FSharp.Core 6.x -- still have to target the v5.x library even if the build uses the F#6 compiler)\n• Where the debug symbols used in the instrumentation contain embedded source (e.g. from source generators), represent that within the generated report --\n  ◦ for OpenCover format, as an altcover.embed attribute added to the File element\n  ◦ for NCover classic, altcover.file elements are added after the method records in a module, with attributes document and embed\n  ◦ and for the extended coverlet JSON format, as a type «AltCover.embed» with an empty method with name being the embedded text.\n• [VISUALIZER] Support the extended formats for display, using the embedded source in preference to the file system whenever present\n• Support these extensions in conversions between formats -- conversion to Lcov and Cobertura currently lose this information\n• Other fixes/enhancements to these conversions, esp. in the cases of partial classes and inlined code\n• Compute summary data correctly in the output from Json to OpenCover\n• Carry both recorder versions (net20 and net46) as resources to simplify self-test behaviour\n• Move baseline Cake support to v1.1.0 and Fake to v5.20.4\n8.2.825 (Habu series release 7)\n• Next release will be post .net 6 release to accomodate its impact, barring show-stoppers\n• [BUGFIX] As noted in Q&A discussion (#107), satellite assemblies, and in issue #47  platform specific library subfolders, were not being copied appropriately relative to the instrumented location; this is now resolved.\n• [BUGFIX] Prevent --localSource possibly excluding locally built assemblies using source generators.\n• [VISUALIZER] Fixes and updates\n  ◦ On the global tool, don't put expander icons (˃) on leaf nodes, i.e. most methods, all source -- such icons are an automatic feature in GTK, but are manual in Avalonia.\n  ◦ Don't throw while trying to determine if a file that doesn't exist is outdated\n8.2.824 (Habu series release 6c)\n• [VISUALIZER] Fixes and updates\n  ◦ [REGRESSION] Fix where multiple source file support broke JSON coverage support\n  ◦ Not all coverage reports are XML -- fix root node icon\n  ◦ Add more icons indicating non-default states (files missing, changed, via sourcelink &c)\n  ◦ Replace most of the annoying pop-ups with tool-tips\n8.2.823 (Habu series release 6b)\n• [VISUALIZER] Fixes and updates\n  ◦ [REGRESSION] Fix where multiple source file support broke methods with no source file\n  ◦ [BUGFIX] Fix where some types were erroneously shown as functions (ƒₓ)\n  ◦ Allow for TAB characters (which occupy 1 column only in the .PDB), and display → rather than ◻ in the global tool (TAB expands to 8 spaces in the GTK# build)\n  ◦ Update icons to VS2019 from VS2017 (except where taken from GTK in the GTK# build), which means slightly more colours in the tree view, and a small change to the branch indicator.\n8.2.822 (Habu series release 6a)\n• [VISUALIZER] Support OpenCover's output from C++/CLI assemblies compiled /Zi (line information only, zero column values)\n  ◦ account for (& simplify) the C++/CLI attribute decorations in method names\n  ◦ allow for (& simplify) gcroot<type::with::Cpp::namespacing ^> types in method names\n  ◦ allow source file selection for methods with code inlined from multiple source files\n8.2.821 (Habu series release 6)\n• Support deterministic builds /p:ContinuousIntegrationBuild=true, with or without --sourcelink//p:AltCoverSourceLink=true.  Note that assemblies created by deterministic builds will be excluded by -l//p:AltCoverLocalSource=true.\n• Experiment with the ReadMe feature recently added to NuGet\n• Internal refactoring of the JSON processing following the replacement of System.Text.Encodings.Web in the previous release.\n8.2.820 (Habu series release 5)\n• Replace System.Text.Encodings.Web for JSON-escaping module, class and method names\n• [BUGFIX] issue #125 -- prevent an NullReferenceException is some cases of computing cyclomatic complexity (a failure to exactly copy the algorithm from Mono.Gendarme)\n• [ENHANCEMENT; API] issue #126 -- further generalise the relative-directory support for CopyAlways/CopyIfNewer from v7.4; extends the ContingentCopy MSBuild task\n8.1.819 (Habu series release 4)\n• Adapt to recent F# compiler optimizations that make function objects static if they don't close over their environment -- properly detect their owner functions for exclusion and for JSON format output\n• If the report format is JSON, ensure that the coverage file doesn't end .xml, and if not JSON, that it doesn't end .json (case-blind comparison)\n8.1.817 (Habu series release 3)\n• Merge-OpenCover cmdlet and OpenCover.Merge API.  It should handle both strict (OpenCover, AltCover --reportFormat=OpenCover) and more relaxed (coverlet, ConvertFrom-CoverageJson, Write-OpenCoverDerivedState -Coverlet) interpretations\n• When --callContext indicates a method returning an F# async computation, then track all calls within the same async flow, just as with C# async methods from v7.2.800\n8.0.816 (Habu series release 2)\n• Move to Cake 1.0 as baseline for Cake support\n• [VISUALIZER] Support for LCov and Cobertura format reports\n• [VISUALIZER] For formats with only line-level information (e.g. LCov, Covertura or from coverlet), colour the whole line, and not just the line number gutter\n8.0.815 (Habu series release 1)\n• [BUGFIX] Issue 122 -- rework the method name tokenization for extracting the returnType (argumentList) signature values in the Cobertura output, fixing an off-by-one error that generated returnType argumentList) without the ( as well as the headline exception.\n• [NEW] Native JSON report formatting (--reportFormat=Json or equivalents), a superset of coverlet's JSON\n  ◦ AltCover classic mode -- just running the instrumented code and collecting results in the ProcessExit handler -- is not supported with --reportFormat=Json\n  ◦ ConvertFrom-CoverageJson cmdlet to convert from coverlet or AltCover JSON to a miminal OpenCover format\n  ◦ Preparing as Native JSON, to generate an LCov or Cobertura report at collection is supported\n• [VISUALIZER] Both versions will now consume and display from coverlet and AltCover JSON output\n• [BREAKING] the -x, --xmlReport argument or equivalent becomes just -r, --report since not all reports are XML\n• [BREAKING] the stop-gap --jsonReport collection option from v7.6 is withdrawn, and the related ConvertTo-CoverageJson cmdlet now produces the AltCover native JSON format\n• For both LCov and Cobertura output, coalesce cases of multiple sequence points per line into one entry per line\n• Extensions to coverlet's JSON format are as follows\n  ◦ Method has optional fields\n    ⁃ SeqPnts (array of SeqPnt)\n    ⁃ TId (integer tracking ID)\n    ⁃ Entry and\n    ⁃ Exit (arrays of timestamps)\n  ◦ BranchInfo has optional fields\n    ⁃ Id (integer unique ID)\n    ⁃ Times (array of timestamps) and\n    ⁃ Tracks (array of tracking IDs)\n  ◦ SeqPnt is VC (visit count), SL (start line), SC (start column), EL, EC (ditto for end), Offset, Id, all integers, and optional Times and Tracks as for BranchInfo\n  ◦ Because int64 doesn't fit as a double, tracking-related timestamps are represented as Base64Encoded strings of the ticks count as a network byte order quantity Convert.ToBase64String(BitConverter.GetBytes(IPAddresss.HostToNetworkOrder(ticks)))\n7.6.812 (Genbu series release 15)\n• [VISUALIZER] Move the global tool to the new 0.10 AvaloniaUI release\n• Monitor API\n  ◦ [BUGFIX] Harden the monitor API TryGetVisitTotals against race conditions in multi-threaded tests\n  ◦ Publish the AltCover.Monitor API as API (i.e. under lib/) in the main package altcover as well as in altcover.api (but not in altcover.global; global tools aren't library compatible to be accessed through a package add reference).  It's there next to the PowerShell assembly (per altcover ImportModule) if you want to manually link to it, though\n  ◦ Support writing unit tests involving the API back to net20 as well as netstandard2.0\n• Add --jsonReport option (and equivalents) to output the NCover or OpenCover data in a minified JSON format, like the existing --lcovReport option does for that format.  The JSON is a direct map of the XML, with values appropriately typed.\n• Add a ConvertTo-CoverageJson cmdlet and a ConvertToJson toolkit API to post-precess existing NCover/OpenCover reports\n7.5.809 (Genbu series release 14)\n• [NEW] AltCover.Monitor API to track current coverage from running unit tests.  Current implementation requires dotnet test, or other command-line testing with --defer set, in which the cumulative visit numbers are available, rather than everything having been dumped to file instead.\n• [BUGFIX] In OpenCover format output, only emit <File /> records relevant to the respective module, not for all source files encountered so far.\nFor previous releases (7.4.x and earlier) go here -- https://github.com/SteveGilham/altcover/blob/master/ReleaseNotes%20-%20Previously.md",
  "repository": "",
  "requireLicenseAcceptance": false,
  "summary": "",
  "title": "AltCover (FAKE task helpers)",
  "verbatimVersion": "8.2.830",
  "version": "8.2.830",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup/blackfox.commandline",
          "@type": "PackageDependency",
          "id": "BlackFox.CommandLine",
          "range": "[1.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup/fake.core.environment",
          "@type": "PackageDependency",
          "id": "FAKE.Core.Environment",
          "range": "[5.20.4, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup/fake.core.process",
          "@type": "PackageDependency",
          "id": "FAKE.Core.Process",
          "range": "[5.20.4, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup/fake.dotnet.cli",
          "@type": "PackageDependency",
          "id": "FAKE.DotNet.Cli",
          "range": "[5.19.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup/system.collections.immutable",
          "@type": "PackageDependency",
          "id": "System.Collections.Immutable",
          "range": "[1.7.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#dependencygroup/fsharp.core",
          "@type": "PackageDependency",
          "id": "FSharp.Core",
          "range": "[5.0.2, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#altcover.fake.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 5378,
      "fullName": "altcover.fake.nuspec",
      "length": 12712,
      "name": "altcover.fake.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#lib/netstandard2.0/AltCover.Fake.DotNet.Testing.AltCover.deps.json",
      "@type": "PackageEntry",
      "compressedLength": 15887,
      "fullName": "lib/netstandard2.0/AltCover.Fake.DotNet.Testing.AltCover.deps.json",
      "length": 100950,
      "name": "AltCover.Fake.DotNet.Testing.AltCover.deps.json"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#lib/netstandard2.0/AltCover.Fake.DotNet.Testing.AltCover.dll",
      "@type": "PackageEntry",
      "compressedLength": 78226,
      "fullName": "lib/netstandard2.0/AltCover.Fake.DotNet.Testing.AltCover.dll",
      "length": 211456,
      "name": "AltCover.Fake.DotNet.Testing.AltCover.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#lib/netstandard2.0/AltCover.Fake.DotNet.Testing.AltCover.xml",
      "@type": "PackageEntry",
      "compressedLength": 4171,
      "fullName": "lib/netstandard2.0/AltCover.Fake.DotNet.Testing.AltCover.xml",
      "length": 53893,
      "name": "AltCover.Fake.DotNet.Testing.AltCover.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#lib/netstandard2.0/BlackFox.CommandLine.dll",
      "@type": "PackageEntry",
      "compressedLength": 21379,
      "fullName": "lib/netstandard2.0/BlackFox.CommandLine.dll",
      "length": 64000,
      "name": "BlackFox.CommandLine.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#README.fake.md",
      "@type": "PackageEntry",
      "compressedLength": 1967,
      "fullName": "README.fake.md",
      "length": 4757,
      "name": "README.fake.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#README.fake.html",
      "@type": "PackageEntry",
      "compressedLength": 2044,
      "fullName": "README.fake.html",
      "length": 4695,
      "name": "README.fake.html"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#LICENSE",
      "@type": "PackageEntry",
      "compressedLength": 628,
      "fullName": "LICENSE",
      "length": 1069,
      "name": "LICENSE"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#AltCover_128.png",
      "@type": "PackageEntry",
      "compressedLength": 2088,
      "fullName": "AltCover_128.png",
      "length": 2088,
      "name": "AltCover_128.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.11.27.16.32.29/altcover.fake.8.2.830.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "codecoverage",
    ".net",
    "Mono",
    ".netcore",
    "cross-platform",
    "FAKE",
    "build"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}