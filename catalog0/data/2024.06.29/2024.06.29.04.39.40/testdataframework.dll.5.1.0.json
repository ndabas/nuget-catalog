{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Alexander Kuperman",
  "catalog:commitId": "108a6f93-126a-4786-a565-91454a6e43db",
  "catalog:commitTimeStamp": "2024-06-29T04:39:40.9657197Z",
  "copyright": "Copyright 2016, 2017, 2018",
  "created": "2024-06-29T04:37:29.86Z",
  "description": "Unit test data population tool.",
  "id": "TestDataFramework.dll",
  "isPrerelease": false,
  "lastEdited": "2024-06-29T04:39:33.41Z",
  "licenseExpression": "GPL-3.0-or-later",
  "licenseUrl": "https://licenses.nuget.org/GPL-3.0-or-later",
  "listed": true,
  "packageHash": "/J+hnx1HsahQ+GQQgwbb0unT3SsHYwrTdX/y2CNTVSpZmHgODXTOCQiPM+uR2PFpTfT36PmAibWwLAN1s7d5/A==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 205253,
  "projectUrl": "https://github.com/SashaKuperman1973/TestDataFramework",
  "published": "2024-06-29T04:37:29.86Z",
  "readmeFile": "readme.md",
  "releaseNotes": "5.1.0 Switching to .NET Standard 2.0 for compatibility\n\t5.0.1 Fixed floating point Max attribute bug. Was allowing values between Max and Max + 1.\n\t5.0 Removed method BindInATransaction from IPopulator and placed in IDbClientPopulator. Possibly a breaking change, if using BindInATransaction method.\n\t4.0\tUpgraded to .NET 6\n\t\n\t3.7.0 Explicit guaranteed value property setting for multiple properties on one output object.\n\t3.6.2 Adding readme.\n\t3.6.1 Added license information.\n\t3.6.0 Support for Fields as well as Properties.\n\t3.5.3\n\t\t- SetList and related methods which allow operations on collections fixed.\n\t\t- Power function on LargeInteger improved for efficiency.\n\t3.5.2\n\t\t- Bug fix: Using SetList and SelectListSet would prevent deferred setter code such as population of primary key.\n\t3.5.1\n\t\t- Random instantiated in static context so multiple instances of populator in quick succession don't repeat random sequences.\n\t- DeleteAll() now sends all Sql commands in a single batch.\n\t3.5.0\n\t\t- Added a DeleteAll() method to the populator. Implemented for the Sql Populator.\n\t\t  Caution: Will throw if foreign key violation because of dependencies on generated \n\t\t  rows introduced by external processes.\n\t3.4.1\n\t\t- DateTimeOffset works with Sql Server DB populator.\n\t3.4.0\n\t\t- Expicit foreign key / priamry key property assignment. Useful for foreign key records\n\t\t  that have multiple foreign keys pointing to different instances of the same table/type.\n\t\t- Works with DateTimeOffset\n\t\t- Can set max string length in Code Generator.\n\t\t\n\t3.3.5\n\t\t- Bug fix: Escaping single quote for explicitly set string property when using the Sql Server populator.\n\t\n\t3.3.4\n\t\t- Fixed: BindInATransaction method on the Memory populator now calls the existing Bind method.\n\t\tIt was doing just a no op.\t\t  \n\n\t3.3.3\n\t\t- Minor breaking change:\n\t\t- 1. Transation options parameter removed from the BindInATransaction method.\n\t\t- 2. Transaction options are now set on the Sql populator interface.\n\t\t- BindInATransaction method is now available in the IPopulator base interface. \n\t\t- Memory populator implements a No Op for it.\n\t\t- The pacakge now has the correct updated library. Previous package had an older version.\t\t   \n\t\n\t3.3.2\n\t\t- Array randomizer was calling ToString on a constructed value. Could cause an exception if thrown in ToString.\n\t\t- Direct call to Make on the Populators will remove the RecordReference from being tracked before returning.\n\t\t- Ability to remove a single Populatable (Record Reference or operable list of) on the populator.\n\t\t\n\t3.3.1\n\t\t- Bug fix: array/enumerable directly requested from the populator via Add or Make was throwing. \n\t\t- Deferred values now work on nested properties.\n\t\t\n\t3.3.0\n\t\t- BindInATransaction method off of the SQL populator returning an IDisposable transaction wrapper object.\n\t\t  Ie: Using a transaction scope with multuiple DBs such as for EF and TestDataFramework doesn't work in the cloud/Azure. \n\t\t  This is to fix it.\n\t\t\n\t\t- Improvements to bundled TestDataCodeGenerator. Eg: Load all table names in one click.\n\t\t  MaxAttribute added to numeric columns thatg can have small precision. Eg: The framework will respect maximums\n\t\t  for randomized values when number of significant digits is small in floating point DB types.\n\t\n\t3.2.1\n\t\t- long integer arguments to the Min and Max attributes now work with floating point value generation.\n\t\n\t3.2\n\t\t- Added Min and Max attribute handling to all scalar and floating point type handlers.\n\t\n\t3.1.4.1 No TestDataFramework changes.  TestDataCodeGenerator.exe utility bug fix.\n\t\n\t3.1.4\n\t\t- ToString on generated objects will not be called in the log messages. \n\t\t  Some ToString implementations were causing an an exception.\n\t\t\n\t\t- Catching exception on SetProperty in the property population code.\n\t\n\t3.1.3\t \n\t\t- Attempting constructors from least number of parameters to greatest number of parameters.\n\t\t- Swallowing exception if one occurs during constructor invocation on a target object.\n\t\t \n\t3.1.2\t\n\t\t- Added missing overload for GuaranteeByFixedQuantity in the derived OperableLists.\n\t\t  Was missing overload taking IEnumerable<T> and an explicit fixed quantity\n\t\t  \n\t3.1.0\t\n\t\t- Removing state from a service. Allows the same populator object to be used in generation\n\t\t  of an explicitly set property value.\n\n\t3.1\n\t \t- Deep setting of properties.\n\n\t\t- Deep setting of object graph properties beyond a collection.\n\n\t\t- Make an object in one line via Make and BindAndMake.\n\n\t\t- Ignore a property (to avoid possible side effects).\n\n\t\t- Exclusive range of possible values for a property.\n\n\t\t- Take and Skip operations for control of what subsets of a collection explicit setters apply to.\n\n\t\t- Better encapsulation. Less public/protected member exposure.\n\t\n\t2.4\n\t*\tBug fixes:\n\t\tValue type and enum constructor parameters were not being populated.\n\t\tUnsigned integer properties were causing code to break.\t\t\n\t\n\t2.3.1\n\t*\tBug fix. Constructor finder was finding a constructor for a string with a char array parameter.\n\t\tWas trying to invoke it. Now circumventing this for value/string types and arrays.\n\t\tPopulating those constructor arguments directly.\n\t\n\t2.3\n\t*\tPopulator will now attempt to resolve constructor with parameters.\n\t\tConstructors are attempted from least number of parameters (including zero) to most number of parameters.\n\t\n\t2.2.4.0\n\t*\tBug fix. When calling deferred value generator, was including record references that were not populatable, and therefore null.\n\t\tThis was causing a null reference exception when the generator tried to access a method (GetType()) off the null record.\n\t\n\t2.2.3.4\n\t*\tAbility to ignore properties. Useful to avoid side effects of properties with logic in the setter.\n\t\tNew RecordObjects convenience property on the OperableList<T> result collection type. Instead of \n\t\tuser having to write the LINQ statement to select out the RecordObjects.\n\t\n\t2.2.3.2\n\t*\tAll setters on a property are executed in turn.\n\t\n\t2.2.3.1\n\t*\tSupport for enums\n\t\n\t2.2.2.0\n\t\n\t*\tBug fix. A combination of explicit/deep property setting and collections in the target object were \n\t\tcausing a null ref exception.\n\t\n\t2.2.1.0\n\t\n\t*\tFixed bug in deep explicit property setting, same issue as in 2.0.4.4. It's a relatively rare edge case.\n\t\tCalling Make/BindAndMake on an operable list will call the persistence layer only once for entire list.\n\t\tWas calling once per element. Will save database round trips when DB populator is used.\n\t\n\t2.2.0.0\n\t\n\t*\tDeep explicit setting of properties.\n\t\n\t2.1.0.0\n\t\n\t*\tIntroduction of the ability to get a value immediately by calling Make() or BindAndMake().\n\t\tThis is without needing to call IPopulator.Bind() separately to get values on the whole set \n\t\tof requested objects.\n\t\n\t2.0.4.4\n\t\n\t*\tBug Fix. Setting explicit value off of an interface didn't identify the concrete object's\n\t\tactual (derived) type. Under these conditions, properties weren't being explicitly set\n\t\ton the object instance.\n\t\n\t2.0.4.3\n\t\n\t*\tAssembly version properties correction.\n\t\n\t2.0.4.2\n\t\n\t*\tSyncing C# and Sql Server DateTime values for the Sql Server populator.\n\t\tMilliseconds were being truncated on Sql Server but not in C#.\n\t\n\t2.0.4.1\n\t\n\t*\tExtra guard when accessing types from assemblies to be scanned. \n\t\tWas throwing a ReflectionTypeLoadException for a particular assembly/type.\n\t\n\t2.0.4\n\t\n\t*\tBug fix: Guid / uniqueidentifier in Sql Server now supported.\n\t\n\t2.0.3\n\t\n\t*\tForeign keys can be explicitly set. Framework will not enforce referential integrity for those \n\tproperties if so.\n\t\n\tAllows you to set a foreign key to null if the matching primary key table isn't in the C# model.\n\tReferential integrity errors on the database server can occur if you introduce them this way.\n\t\n\t*\tInternal methods/members of public facing types are marked as internal (or internal protected) \n\tto reduce user's intellisense noise.\n\t\n\t*\tSkipping assemblies that are not found in the file system during scannig of referenced\n\tassemblies for primary/foreign table class matches. An exception had been occuring for some\n\tassemblies, possibly becasue they were not in the bin folder due to being in the GAC.\n\t\n\t*\tAdding an AppSettings key to explicitly enable or disable log messages. The key is:\n\t\"TestDataFramework-EnableLogger\". The value to enable logging is \"true\".\n\t\n\t2.0.2\n\n\tDocumentation is up to date on GitHub.\n\t\n\t*  Guarantee methods work with primary keys properly.\n\t\n\t2.0.1.\n\t\n\t* RecordReference.Set method fix.\n\t\n\t* Guarantee... methods fix.",
  "requireLicenseAcceptance": false,
  "title": "Test Data Framework",
  "verbatimVersion": "5.1.0",
  "version": "5.1.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#dependencygroup/.netstandard2.0/castle.core",
          "@type": "PackageDependency",
          "id": "Castle.Core",
          "range": "[5.1.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#dependencygroup/.netstandard2.0/castle.windsor",
          "@type": "PackageDependency",
          "id": "Castle.Windsor",
          "range": "[6.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#dependencygroup/.netstandard2.0/log4net",
          "@type": "PackageDependency",
          "id": "log4net",
          "range": "[2.0.17, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#TestDataFramework.dll.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 4028,
      "fullName": "TestDataFramework.dll.nuspec",
      "length": 9867,
      "name": "TestDataFramework.dll.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#docs/NuGetDoc.txt",
      "@type": "PackageEntry",
      "compressedLength": 769,
      "fullName": "docs/NuGetDoc.txt",
      "length": 1575,
      "name": "NuGetDoc.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#docs/readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 769,
      "fullName": "docs/readme.txt",
      "length": 1575,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#exe/CodeGeneratorReadMe.txt",
      "@type": "PackageEntry",
      "compressedLength": 941,
      "fullName": "exe/CodeGeneratorReadMe.txt",
      "length": 2027,
      "name": "CodeGeneratorReadMe.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#exe/TestDataCodeGenerator.exe",
      "@type": "PackageEntry",
      "compressedLength": 18010,
      "fullName": "exe/TestDataCodeGenerator.exe",
      "length": 58368,
      "name": "TestDataCodeGenerator.exe"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#exe/TestDataCodeGenerator.pdb",
      "@type": "PackageEntry",
      "compressedLength": 17389,
      "fullName": "exe/TestDataCodeGenerator.pdb",
      "length": 75264,
      "name": "TestDataCodeGenerator.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#lib/netstandard2.0/TestDataFramework.deps.json",
      "@type": "PackageEntry",
      "compressedLength": 8108,
      "fullName": "lib/netstandard2.0/TestDataFramework.deps.json",
      "length": 47370,
      "name": "TestDataFramework.deps.json"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#lib/netstandard2.0/TestDataFramework.dll",
      "@type": "PackageEntry",
      "compressedLength": 86860,
      "fullName": "lib/netstandard2.0/TestDataFramework.dll",
      "length": 235520,
      "name": "TestDataFramework.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#lib/netstandard2.0/TestDataFramework.pdb",
      "@type": "PackageEntry",
      "compressedLength": 39393,
      "fullName": "lib/netstandard2.0/TestDataFramework.pdb",
      "length": 82580,
      "name": "TestDataFramework.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#readme.md",
      "@type": "PackageEntry",
      "compressedLength": 769,
      "fullName": "readme.md",
      "length": 1575,
      "name": "readme.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#docs/LICENSE",
      "@type": "PackageEntry",
      "compressedLength": 12307,
      "fullName": "docs/LICENSE",
      "length": 35815,
      "name": "LICENSE"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.06.29.04.39.40/testdataframework.dll.5.1.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12936,
      "fullName": ".signature.p7s",
      "length": 12936,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "unit",
    "test",
    "class",
    "type",
    "database",
    "POCO",
    "data",
    "population",
    "generation",
    "SQL",
    "Server"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}