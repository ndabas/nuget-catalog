{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.04.01.19.54.45/spreadsheetlight.3.4.9.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Vincent Tan",
  "catalog:commitId": "a663a666-3fe8-4f66-bfa2-de5217e232db",
  "catalog:commitTimeStamp": "2017-04-01T19:54:45.1386182Z",
  "copyright": "Vincent Tan",
  "created": "2017-04-01T19:54:24.167Z",
  "description": "SpreadsheetLight is an open source Open XML spreadsheet library for .NET Framework written in C#, and is released under the MIT License. You can create new Open XML spreadsheets, or work with existing Open XML spreadsheets that are compatible with Microsoft Excel 2007/2010/2013 and LibreOffice Calc.\n\nNo Office/Excel Interop needed. You do not need Microsoft Office/Excel to be installed.\n\nDependency: Open XML SDK 2.5",
  "iconUrl": "http://spreadsheetlight.com/images/spreadsheetlightlogo.png",
  "id": "SpreadsheetLight",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://spreadsheetlight.com/license/",
  "listed": true,
  "packageHash": "8WXzA6WFTUuKqrX2BhVrf1CsOgQoFJVQhzEImYPeK1U7MWhZskmiuWGrBLuoK9UnpkD3Y9Lf4jiq8uFbqT7DVQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 499793,
  "projectUrl": "http://spreadsheetlight.com/",
  "published": "2017-04-01T19:54:24.167Z",
  "releaseNotes": "You can read the full list of changes at http://spreadsheetlight.com/version-history/ Note that source code is only available up to minor releases, meaning Major.Minor.0 versions.\n\nVersion 3.4.9\n- Get filter range of a worksheet if a filter exists. See SLDocument.GetFilterRange().\n- On the Mono Framework, the error \"System.OverflowException : Arithmetic operation resulted in an overflow.\" no longer occurs. This was due to the System.Drawing.Bitmap not setting a default resolution (within Mono Framework. Running on .NET is fine. This part happens during the initialisation phase for setting the internal SLSimpleTheme class). Mono uses libgdiplus, which apparently assigns the Bitmap object zero for both horizontal and vertical resolutions. Hence the overflow error.\n- Bug fix: It was not possible to copy a cell style from a cell to another cell that's on the same row or column. It is now fixed (it was De Morgan's laws incorrectly implemented).\n- Bug fix: Creating a data validation that references another worksheet as a data source now works correctly.\n- Bug fix: Calling InsertRow() multiple times now work.\n- Bug fix: If a formula is passed as a parameter to HighlightCellsEqual() in SLConditionalFormatting class, it presents incorrect behaviour (something like $B$1 becomes \"$B$1\", with incorrectly double quoting). It is now fixed (along HighlightCellsBeginningWith(), HighlightCellsBetween(), HighlightCellsContainingText(), HighlightCellsEndingWith(), HighlightCellsGreaterThan(), HighLightCellsLessThan())\n- Bug fix: Copying a worksheet now returns true if successful.\n\nVersions 3.4.8\n- You can now check with SLDocument.HasCellError(). WARNING: SpreadsheetLight does not have a formula calculation engine, so only existing errors are reported.\n- Bug fix: SLStyle.Alignment.TextRotation now rotates text correctly.\n- Bug fix: Worksheet names are now (more? [Is that grammatically correct?]) correctly surrounded with single quotes in formulas and chart sheet formulas if they contain special characters (every special character on your keyboard except underscore and period).\n- Bug fix: GetCellValueAsString() now no longer contain the phonetic text (if it exists). As part of the correction, SLRstType.ToPlainString() also no longer contain the phonetic text.\n- Bug fix: Inline strings in existing Excel files will now be correctly loaded (and saved into the shared strings table if the particular worksheet with the inline strings is selected).\n\nThanks to these awesome people for sending feature and bug requests: Bodo F, JF, HK, Vincent D, Jerry S\n\nVersion 3.4.7\n- Bug fix: Selecting worksheets one after another that has row properties (such as custom row heights) will no longer cause an error. (The error is actually in WriteSelectedWorksheet(), where the iteration was over a combined list of row properties indices and cell row indices, and the error occurs if there's a row properties row without any cells.)\n\nThanks to David L for telling me about the bug.\n\nVersion 3.4.6\n- Shared string unique count is now written in the file. This makes opening the resulting Excel file faster if there are large number of text strings. Set the property SLDocument.WriteUniqueSharedStringCount to false if the file opens with an error.\n- Bug fix: Copy rows/columns now does not cause a runtime error (there were 2 separate cell stores and the wrong one was used, hence the reference index not found).\n\nVersion 3.4.5\n- SmartTags is now removed from consideration (not so smart now, are you? ;). Which means the code is now ready for Open XML SDK 2.5! And yes, it now works with Open XML SDK 2.5 (have I mentioned that? lol)\n- Internal cell storage structure is revamped. It used to be a 1-dimensional dictionary with a 2-dimensional key, but is now a 2-dimensional dictionary with a 1-dimensional key. Tech explanation: Dictionary<SLCellPoint, SLCell> to Dictionary<int, Dictionary<int, SLCell>>. This is done because a 1-dimensional key is at most 2^31 hash entries, which cannot contain the theoretical 1048576 (2^20) rows and 16384 (2^14) columns per worksheet supported by latest versions of Excel.\n- Bug fix: plotting separate data series on charts as different chart types now works (your typical combination chart such as a column chart with lines)\n- Breaking change: SLDocument.GetCells() now returns a Dictionary<int, Dictionary<int, SLCell>>\n\nVersion 3.4.4\n- Bug fix: Formulas will be correctly changed when columns are deleted (when the formula involves said deleted columns).\n\nVersion 3.4.3\n- Bug fix: Cell value/formula set on a shared cell formula base cell now works correctly. For example, setting on C3 when C3 holds a shared cell formula will work.\n- Bug fix: Setting filter on worksheet now works correctly. It failed to sort before (basically also need to set underlying defined name _xlnm._FilterDatabase. Gawdiggitty.)\n\nVersion 3.4.2\n- You can now get row/column grouping levels. See GetRowGroupLevel() and GetColumnGroupLevel() functions.\n- You can now get a list of the shared cell formulas in the currently selected worksheet. See GetSharedCellFormulas() function.\n- Cell formulas are now more correctly maintained when copying/inserting/deleting cells/rows/columns.\n- Catered for situation where cell reference ranges aren't in top-left to bottom-right format (such as E1:A7). See SLTool for translating reference sequences to SLCellPointRange and vice versa. Don't worry, you probably wouldn't have known about this anyway...\n- You can now draw borders on a cell range! And border grids! Try out the DrawBorder() and DrawBorderGrid() functions.\n- You can now merge cells and set style/border properties at the same time! No more manual border drawing on merged cells! Woohoo! See MergeWorksheetCells() function overloads.\n- You can now make SpreadsheetLight throw up, I mean, throw exceptions! When there are exceptions, of course. See ThrowExceptionsIfAny property. Not sure how much help this is though...\n- You can now forcibly get a boolean value if it looks like it's a boolean but actually stored as text. See the GetCellValueAsBoolean() functions.\n- Breaking change: SLCellFormula.Reference data type changed from string to List<SLCellPointRange> (but you shouldn't have been using this anyway...)\n- Bug fix: The properties \"count\" and \"uniqueCount\" removed from shared strings table part. It seems a high number of shared strings will cause the calculation to render a corrupt file. See when writing the shared strings table for details.\n- Bug fix: Outline (grouping) levels of rows and columns now limited to 0 to 7 (was allowed to go to 8 previously. See GroupRows() and GroupColumns() in RowColumnFunctions.cs)\n\nVersion 3.4.1\n- Removed optional argument use (specifically IsStylish) so that developers using Visual Studio 2008 (.NET Framework 3.5) can still compile the source code.\n- Optimised GetWorksheetStatistics(). It's now faster and less memory intensive.\n- Bug fix: autofitting rows with a smaller initial height now correctly autofit to content\n- Bug fix (?): SLStyle.MergeStyle() now takes on the new style object's format code regardless.",
  "requireLicenseAcceptance": false,
  "summary": "SpreadsheetLight is an open source Open XML spreadsheet library for .NET Framework written in C#, and is released under the MIT License.",
  "title": "SpreadsheetLight",
  "verbatimVersion": "3.4.9",
  "version": "3.4.9",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.04.01.19.54.45/spreadsheetlight.3.4.9.json#SpreadsheetLight.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3628,
      "fullName": "SpreadsheetLight.nuspec",
      "length": 8560,
      "name": "SpreadsheetLight.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.04.01.19.54.45/spreadsheetlight.3.4.9.json#lib/SpreadsheetLight.dll",
      "@type": "PackageEntry",
      "compressedLength": 423583,
      "fullName": "lib/SpreadsheetLight.dll",
      "length": 1427968,
      "name": "SpreadsheetLight.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.04.01.19.54.45/spreadsheetlight.3.4.9.json#lib/SpreadsheetLight.xml",
      "@type": "PackageEntry",
      "compressedLength": 69562,
      "fullName": "lib/SpreadsheetLight.xml",
      "length": 965107,
      "name": "SpreadsheetLight.xml"
    }
  ],
  "tags": [
    "excel",
    "spreadsheet",
    "openxml",
    "ooxml",
    "xlsx",
    "txt",
    "csv"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}