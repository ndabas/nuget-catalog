{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.13.10.28.05/snowinmars.extensions.1.0.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "snowinmars",
  "catalog:commitId": "20cc29fa-f0f1-4794-893e-6b4dc018e6b9",
  "catalog:commitTimeStamp": "2018-12-13T10:28:05.5849824Z",
  "copyright": "GNU GPL",
  "created": "2016-07-04T18:12:59.32Z",
  "description": "Some extensions.\n\n* EnumerableExtensions: \n    *IEnumerable<T> Shuffle<T>(this IEnumerable<T> source, Random rng)\n    *SequenceEqualWithoutOrder<T>(this IEnumerable<T> source, IEnumerable<T> sequence)\n\n* FastObjectAllocator\n\n* GraphicsDeviceExtension\n    * Texture2D CreateTexture(this GraphicsDevice device, int width, int height, Color color, byte transperity = byte.MaxValue)\n    * Texture2D CreateTexture(this GraphicsDevice device, int width, int height, Color textureColor, int borderThick, Color borderColor)\n\n* IComparableExtensions\n    * bool Between<T>(this T number, T bound1, T bound2)\n\n* IListExtensions\n    * SetWithRandomElements<T>(this IList<T> array, T min, T max, int capacity, Func<T, T, T> funcToGetNewRandomElement)\n\n* Singleton (use inside cctor)\n\n* StringBuilderExtension\n    * void Trim(this StringBuilder sb, bool saveFirst, bool saveLast)\n\n* StringExtensions\n    * string FirstLetterToUpper(this string str)\n    * bool IsComprisesOnlyLatinOrOnlyCyrillicSymbols(this string str, char[] canContains = null)\n    * bool IsComprisesWithLetters(this string str)\n    * bool IsFramedWith(this string str, string symbol)\n    * bool IsStartWithUpper(this string str)",
  "id": "snowinmars.Extensions",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2018-12-13T10:27:47.26Z",
  "licenseUrl": "https://github.com/SamirIskenderov/Algorithms/blob/master/LICENSE",
  "listed": false,
  "packageHash": "aKvpKZGB6AOifrWzqd1XWgDb4QaH54s7T8j6Af6aN0xvEFr8loeNvbEf/hJXsP9K4+ypalvt4P3MHoidjGEdFg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 20932,
  "projectUrl": "https://github.com/SamirIskenderov/Algorithms",
  "published": "1900-01-01T00:00:00Z",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.3",
  "version": "1.0.3",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.13.10.28.05/snowinmars.extensions.1.0.3.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.13.10.28.05/snowinmars.extensions.1.0.3.json#dependencygroup/monogame",
          "@type": "PackageDependency",
          "id": "monogame",
          "range": ""
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.13.10.28.05/snowinmars.extensions.1.0.3.json#snowinmars.Extensions.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 865,
      "fullName": "snowinmars.Extensions.nuspec",
      "length": 2045,
      "name": "snowinmars.Extensions.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.13.10.28.05/snowinmars.extensions.1.0.3.json#lib/Algorithms.Extensions.dll",
      "@type": "PackageEntry",
      "compressedLength": 6832,
      "fullName": "lib/Algorithms.Extensions.dll",
      "length": 14848,
      "name": "Algorithms.Extensions.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.13.10.28.05/snowinmars.extensions.1.0.3.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "extension",
    "sequenceEqual"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}