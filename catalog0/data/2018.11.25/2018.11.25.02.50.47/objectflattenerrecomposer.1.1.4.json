{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.02.50.47/objectflattenerrecomposer.1.1.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Dogu Arslan",
  "catalog:commitId": "6242294f-03e2-4084-93a1-38b176a64d56",
  "catalog:commitTimeStamp": "2018-11-25T02:50:47.9160384Z",
  "copyright": "Copyright 2016",
  "created": "2016-07-26T11:03:19.407Z",
  "description": "Integrated into Azure Storage SDK v8.0.0.0\nhttps://msdn.microsoft.com/en-us/library/mt775435.aspx\nhttps://msdn.microsoft.com/en-us/library/mt775432.aspx\n\nBlog: https://doguarslan.wordpress.com/2016/02/03/writing-complex-objects-to-azure-table-storage/\n\nProvides functionality to flatten complex objects into EntityProperty dictionary and functionality to recompose original complex object from the flattened property dictionary. One usage is that the API allows writing any complex object with nested properties into Azure Table Storage in flattened form wih individual columns.\nThe API also allows you to save Enum, TimeSpan, DateTimeOffset, Nullable property types to Azure Table Storage.\n\nWhat is the Minimum Requirement to flatten my complex object with ObjectFlattenerRecomposer API?\nThe minimum requirement is that your properties need to have both Getter and Setter. The Getter and Setter do not need to be public, they can be protected or private. If there is a property that you cannot/do not want to add a Setter even a private one, then you can exclude that property from being flattened by putting the [IgnorePropertyAttribute] to it as explained below.\nHow do I exclude some properties from being flattened?\nThere may be some use cases where you may want to exclude certain properties from being flattened ie. you have some Get only properties and you do not want to add even a private Setter for those or you do not want to write certain properties eventually to table storage in that case all you need to do is to add [IgnorePropertyAttribute] attribute to the top of the properties you want to exclude.\nFlattening Composite Objects and Recursive Referenced objects\nA composite object is an object that has a property of its own type. Object Flattener Recomposer API can flatten and recompose composite objects of any depth as long as the properties do not have recursive references ie. referring back to the root or a parent property.\nIn case of recursive referenced objects, v1.1.3 and above versions of the Object Flattener Recomposer API detects the recursive references anywhere along the object graph and exits from flattening operation, returning a null result. This avoids the flattener from going into an infinite loop traversing inside the recursive path in the object graph.\nBlog: https://doguarslan.wordpress.com/2016/02/03/writing-complex-objects-to-azure-table-storage/\nUsage:\nusing ObjectFlattenerRecomposer;\n//Flatten object and convert it to EntityProperty Dictionary\nDictionary<string, EntityProperty> flattenedProperties = EntityPropertyConverter.Flatten(complexObject);\n// Create a DynamicTableEntity and set its PK and RK\nDynamicTableEntity dynamicTableEntity = new DynamicTableEntity(partitionKey, rowKey);\ndynamicTableEntity.Properties = flattenedProperties;\n// Write the DynamicTableEntity to Azure Table Storage using client SDK\n//Read the entity back from AzureTableStorage as DynamicTableEntity using the same PK and RK\nDynamicTableEntity entity = [Read from Azure using the PK and RK];\n//Convert the DynamicTableEntity back to original complex object.\nImagine original complexObject was of type Order.\nOrder order = EntityPropertyConverter.ConvertBack<Order>(entity.Properties);",
  "id": "ObjectFlattenerRecomposer",
  "isPrerelease": false,
  "lastEdited": "2018-11-25T02:50:39.393Z",
  "listed": true,
  "packageHash": "m90Pmymn1QGnIErWhY0IO1w8VAvmoz6X123jSxiS3mlGPSStPwHNfCVQ39U/rLknfZ2jNSKRXYYP2tcX1ljcsg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 18862,
  "projectUrl": "https://doguarslan.wordpress.com/2016/02/03/writing-complex-objects-to-azure-table-storage/",
  "published": "2016-07-26T11:03:19.407Z",
  "releaseNotes": "Update to version 1.1.4 \n\t- Added Exceptions. Errors will be exposed by SerializationExceptions with useful error information instead of returning false.\n\t- Added EntityPropertyConverterOptions that allows users override the default property name delimiter which is \"_\".\n\t- Updated object flattening to omit read only properties. Properties need to have at least a private setter to be included as part of object flatenning.",
  "requireLicenseAcceptance": false,
  "summary": "Provides functionality to flatten complex objects into EntityProperty dictionary and functionality to recompose original complex object from the flattened property dictionary. One usage is that the API allows writing any complex object with nested properties into Azure Table Storage in flattened form.\nThe API also allows you to save Enum, TimeSpan, DateTimeOffset, Nullable and complex property types to Azure Table Storage.\n\nMore details: https://doguarslan.wordpress.com/2016/02/03/writing-complex-objects-to-azure-table-storage/\n",
  "title": "Object Flattener Recomposer",
  "verbatimVersion": "1.1.4",
  "version": "1.1.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.02.50.47/objectflattenerrecomposer.1.1.4.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.02.50.47/objectflattenerrecomposer.1.1.4.json#dependencygroup/windowsazure.storage",
          "@type": "PackageDependency",
          "id": "WindowsAzure.Storage",
          "range": "[4.3.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.02.50.47/objectflattenerrecomposer.1.1.4.json#ObjectFlattenerRecomposer.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1793,
      "fullName": "ObjectFlattenerRecomposer.nuspec",
      "length": 5113,
      "name": "ObjectFlattenerRecomposer.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.02.50.47/objectflattenerrecomposer.1.1.4.json#lib/net45/ObjectFlattenerRecomposer.dll",
      "@type": "PackageEntry",
      "compressedLength": 5658,
      "fullName": "lib/net45/ObjectFlattenerRecomposer.dll",
      "length": 13312,
      "name": "ObjectFlattenerRecomposer.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.25.02.50.47/objectflattenerrecomposer.1.1.4.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Object",
    "Flatten",
    "Recompose",
    "Azure",
    "Table",
    "Storage",
    "EntityProperty",
    "DynamicTableEntity",
    "POCO",
    "Converter"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}