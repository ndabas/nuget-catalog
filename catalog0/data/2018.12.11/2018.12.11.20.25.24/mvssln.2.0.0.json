{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "github.com/3F/MvsSln",
  "catalog:commitId": "81d7133e-264e-4c83-86a8-a22b849b3c1c",
  "catalog:commitTimeStamp": "2018-12-11T20:25:24.832704Z",
  "copyright": "Copyright (c) 2013-2017  Denis Kuzmin [entry.reg@gmail.com] :: github.com/3F ",
  "created": "2017-10-05T19:54:34.7Z",
  "description": "\n    \n        MvsSln provides logic for complex support of the Visual Studio .sln files and its projects (.vcxproj, .csproj., ...).\n\n        It was as a part of the https://github.com/3F/vsSolutionBuildEvent projects, but now it extracted into the new (specially for [DllExport](https://github.com/3F/DllExport/issues/38) and for others).\n        _ _ _ _ _ _\n        Source code and all details here: https://github.com/3F/MvsSln\n        \n        ~~~~~~~~\n        Get it via GetNuTool:\n        ==========================================\n        gnt /p:ngpackages=\"MvsSln/2.0.0\"\n        ==========================================\n        * https://github.com/3F/GetNuTool    \n\n        Build info:  \n  \n    S_NUM:          2.0.0    \n    S_REV:          24315    \n    S_NUM_REV:      2.0.0.24315    \n    bSha1:          edc72b3    \n    bName:          master    \n    bRevc:          38    \n    .NET version:   v4.0    \n    .NET stamp:     40    \n    Configuration:  PublicRelease    \n    Platform:       Any CPU    \n    cfgname:        Release    \n    revDeltaBase:   2017/06/22    \n    revDeltaMin:    1000    \n    revDeltaMax:    65534    \n    \n                    :: generated by a vsSolutionBuildEvent v0.12.10.10901\n        \n    ",
  "iconUrl": "https://raw.githubusercontent.com/3F/MvsSln/master/MvsSln/Resources/MvsSln_v1_96px.png",
  "id": "MvsSln",
  "isPrerelease": false,
  "lastEdited": "2018-12-11T20:25:12.103Z",
  "licenseUrl": "https://github.com/3F/MvsSln/blob/master/License.txt",
  "listed": true,
  "packageHash": "37fr8AtaK7bytPTqPkf/0Csvn/C1ZNS9EUIf+Ef5vlU5Hut8cCXb/CoGP317POj8e52FXRQrS9Mjmm5g4quURg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 138967,
  "projectUrl": "https://github.com/3F/MvsSln",
  "published": "2017-10-05T19:54:34.7Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/.json#gpref",
      "reference": {
        "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#gpref/ref/mvssln.dll",
        "file": "MvsSln.dll"
      }
    }
  },
  "releaseNotes": "Public release of the MvsSln - v2.0\n\n* NEW: Updated architecture now provides 2 types of handlers - readers (ISlnHandler) and writers (IObjHandler).\n        You also can use your custom reader or writer, just implement an `ISlnHandler` or `IObjHandler`:\n        \n        ```\n          class MyReader: LAbstract, ISlnHandler { ... }\n          class MyWriter: WAbstract, IObjHandler { ... }\n        ```\n        \n        Read the documentation for details.\n        \n* NEW: MvsSln now also may provide map of analyzed data. Parser will expose map through list of `ISection` for each line.\n       To enable this, define a bit 0x0080 for type of operations to parser.\n       This helps to get flexible control between readers and any writers.\n       \n       Example of using writer `WSolutionConfigurationPlatforms` together with calculated map:\n       \n        ```\n          var data = new List<IConfPlatform>() {\n              new ConfigSln(\"Debug\", \"Any CPU\"),\n              new ConfigSln(\"Release_net45\", \"x64\"),\n              new ConfigSln(\"Release\", \"Any CPU\"),\n          };\n          \n          var whandlers = new Dictionary<Type, HandlerValue>() {\n              [typeof(LSolutionConfigurationPlatforms)] = new HandlerValue(new WSolutionConfigurationPlatforms(data)),\n          };\n          \n          using(var w = new SlnWriter(\"<path_to>.sln\", whandlers)) {\n              w.Write(map);\n          }\n        ```\n        \n        Read the documentation for details.\n        \n* NEW: Implemented new writer `WProject`. \n* NEW: Implemented new writer `WProjectConfigurationPlatforms`.\n* NEW: Implemented new writer `WSolutionConfigurationPlatforms`.\n* NEW: Implemented new writer `WVisualStudioVersion`. \n* NEW: Implemented new writer `WProjectSolutionItems`.\n* NEW: Implemented new reader `LVisualStudioVersion`.\n* NEW: Implemented new reader `LProjectSolutionItems`.\n* FIXED: Fixed possible bug when SlnItems.All &~ SlnItems.Projects.\n* FIXED: Fixed possible null with PropertyItem.evaluatedValue:\n           MS describes this as 'the evaluated property value, which is never null'\n           But, this is not true: .NETFramework\\v4.0\\Microsoft.Build.dll - Version=4.0.0.0, PublicKeyToken=b03f5f7f11d50a3a\n           \n* FIXED: Fixed possible null for `IXProject.ProjectName` when project does not contain this property.\n* CHANGED: `IXProject.ProjectGuid` now will return value from ProjectItem.pGuid if project file does not contain an Guid at all. \n            It's actual for SDK-based projects.\n           \n* CHANGED: SlnParser now can be initialized without handlers at all.\n            ```\n              ISlnContainer sln = new SlnParser(false);\n              sln.SlnHandlers.Register(new LMySpec());\n              ...\n\n              // to reset and register all default:\n              sln.SetDefaultHandlers();\n            ```\n           \n* CHANGED: Updated SlnItems: added `Map` item to create map when processing sln data.\n* CHANGED: `IsolatedEnv.Load(...)` splitted and marked as virtual to leave the final implementation for user, \n            to avoid problems like in Issue #1 etc.\n            \n* CHANGED: Updated abstract layer with some types from ISlnResult & ISlnResultSvc.\n* CHANGED: Updated GetNuTool v1.6.1.10480_bde3e50 & hMSBuild v1.2.2.62992_3ee58c3.\n* KNOWN_PROBLEM: C++ projects and their initialization for Visual Studio 2017. Issue #1.",
  "requireLicenseAcceptance": false,
  "summary": "Complex support of the Visual Studio .sln files and its projects (.vcxproj, .csproj., ...) - https://github.com/3F/MvsSln",
  "title": "[ MvsSln ] VisualStudio .sln files and its projects",
  "verbatimVersion": "2.0.0",
  "version": "2.0.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#.version",
      "@type": "PackageEntry",
      "compressedLength": 7,
      "fullName": ".version",
      "length": 5,
      "name": ".version"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#build_info.txt",
      "@type": "PackageEntry",
      "compressedLength": 245,
      "fullName": "build_info.txt",
      "length": 521,
      "name": "build_info.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#changelog.txt",
      "@type": "PackageEntry",
      "compressedLength": 2437,
      "fullName": "changelog.txt",
      "length": 7273,
      "name": "changelog.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#License.txt",
      "@type": "PackageEntry",
      "compressedLength": 687,
      "fullName": "License.txt",
      "length": 1145,
      "name": "License.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#MvsSln.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2259,
      "fullName": "MvsSln.nuspec",
      "length": 5898,
      "name": "MvsSln.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#Readme.md",
      "@type": "PackageEntry",
      "compressedLength": 4240,
      "fullName": "Readme.md",
      "length": 11688,
      "name": "Readme.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#lib/net40/MvsSln.dll",
      "@type": "PackageEntry",
      "compressedLength": 39562,
      "fullName": "lib/net40/MvsSln.dll",
      "length": 90112,
      "name": "MvsSln.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#lib/net40/MvsSln.pdb",
      "@type": "PackageEntry",
      "compressedLength": 53366,
      "fullName": "lib/net40/MvsSln.pdb",
      "length": 251392,
      "name": "MvsSln.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#lib/net40/MvsSln.xml",
      "@type": "PackageEntry",
      "compressedLength": 11678,
      "fullName": "lib/net40/MvsSln.xml",
      "length": 134918,
      "name": "MvsSln.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#tools/gnt.bat",
      "@type": "PackageEntry",
      "compressedLength": 3714,
      "fullName": "tools/gnt.bat",
      "length": 10590,
      "name": "gnt.bat"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#tools/hMSBuild.bat",
      "@type": "PackageEntry",
      "compressedLength": 5967,
      "fullName": "tools/hMSBuild.bat",
      "length": 18435,
      "name": "hMSBuild.bat"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.20.25.24/mvssln.2.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9459,
      "fullName": ".signature.p7s",
      "length": 9459,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "sln",
    "visual-studio",
    "projects",
    "visualstudio",
    "sln-files",
    "csproj",
    "vcxproj",
    "vs",
    "vs2015",
    "vs2017",
    "MvsSln"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}