{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.11.23.20.29.40/bnaya.csharp.asyncextensions.1.0.12.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Bnaya.CSharp.AsyncExtensions",
  "catalog:commitId": "461423db-e00c-444f-9978-d5b4d6d0cd31",
  "catalog:commitTimeStamp": "2017-11-23T20:29:40.1891483Z",
  "copyright": "Bnaya Eshet Â©",
  "created": "2017-11-23T20:29:29.037Z",
  "description": "Useful extensions contribution by Bnaya Eshet\nBlog: http://blogs.microsoft.co.il/bnaya/\n\nSource Code:\nhttps://github.com/bnayae/Bnaya.CSharp.AsyncExtensions\n\n\n# NuGet\nthis library available on NuGet via\nInstall-Package Bnaya.CSharp.AsyncExtensions\n\n## This library have the following godies:\n* Exception Handlinfg\n  * ThrowAll (produce AggregateException when waiting on Task.WhenAll)\n  * Format (format async exception into friendlier callstack represantation)\n* Timeout (will apply timeout semantic for any Task)\n  * WithTimeout (will throw on timeout)\n  * IsTimeoutAsync (will return indication without throwing, ideal for SLA checks [prctice: check and produce warning])\n* Cancellation\n  * CancelSafe (will run the CancellationTokenSource.Cancel within try catch and prevent unexpected side effect which can happen when cancellation token registration throw)\n  * RegisterWeak (use week registration to cancellation token, letting the GC to collect the instance of the registration even when the token is still alive, can reduce potential for memory leaks)\n* Frendly async locking facilities (which can replace the clasical lock statement).\n  * Extensions\n    * TryAcquireAsync\n    * AcquireAsync\n  * Instance-able\n    * AsyncLock",
  "iconUrl": "https://github.com/bnayae/BeyondAsyncAwait/blob/master/20. Cool Extensions/async-ex.png?raw=true",
  "id": "Bnaya.CSharp.AsyncExtensions",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "listed": true,
  "packageHash": "tvBaJEBbOjt0z20cy5KwZnKnRfeoUcXMPSFkaVsn0yLPDVxEtSzjCMtSaF/sWIZrnfc7UhdT4K8B1OSE61aPHg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 15636,
  "projectUrl": "http://blogs.microsoft.co.il/bnaya/",
  "published": "2017-11-23T20:29:29.037Z",
  "repository": "",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.12",
  "version": "1.0.12",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.11.23.20.29.40/bnaya.csharp.asyncextensions.1.0.12.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.11.23.20.29.40/bnaya.csharp.asyncextensions.1.0.12.json#Bnaya.CSharp.AsyncExtensions.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1045,
      "fullName": "Bnaya.CSharp.AsyncExtensions.nuspec",
      "length": 2205,
      "name": "Bnaya.CSharp.AsyncExtensions.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.11.23.20.29.40/bnaya.csharp.asyncextensions.1.0.12.json#lib/netstandard2.0/Bnaya.CSharp.AsyncExtensions.dll",
      "@type": "PackageEntry",
      "compressedLength": 12273,
      "fullName": "lib/netstandard2.0/Bnaya.CSharp.AsyncExtensions.dll",
      "length": 28160,
      "name": "Bnaya.CSharp.AsyncExtensions.dll"
    }
  ],
  "tags": [
    "async",
    "Parallel",
    "await",
    "task",
    "timeout",
    "deadlock",
    "cancel",
    "cancellation",
    "bnaya"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}