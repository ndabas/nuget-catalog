{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "MagicDatabase",
  "catalog:commitId": "e4d234fc-57c7-4a3d-9c2a-f4a5c8b65a4e",
  "catalog:commitTimeStamp": "2024-09-20T23:27:27.7483802Z",
  "created": "2024-09-20T23:24:50.8Z",
  "description": "Warning, this is a database designed for small tables, or in any case for applications without the need for large old records.\nEvery operation goes through the static SpellBook class.\nThe entities that the db uses must extend the Trick interface, which makes their primary key uniform with an unsigned long.\nFurthermore, at startup you must set the DatbaseName with the InitiationToArcane command, which together chooses other functions, \nsuch as logs, data position and the possibility of formatting the database in runtime.\nAlthough it is designed to have little data, the db saves a record every day it is used, allowing you to track old data deleted later.\n\n<<< Bonds >>>\nThe database also provides bonds between entities of three types: mystics, evocations and twins.\nMystics are one-to-many bonds, nullable or not, and allow you to throw exceptions if the many are created without a one, or the one wants \nto be deleted when there are many associated with it. Summons work the same way, but with two differences: many must necessarily have a \nlink to one, so their field linked to the id of one cannot be nullable. Second, when one is deleted, all the summons associated with it \nare deleted in a cascade. Finally, twins are a one-to-one link. Nullable on one side or both. If it is linked on one side it is linked \non both, allowing for quick exchanges of twins.\nIf there is a non-nullable side, it throws an exception in any case you try to make it stay alone.\nTo bind objects dynamically, instantiate, together with the bindings to decorators, also Scrolls of the bound type.\n\n<<< Jobs >>>\nThe database allows you to set up parallel processes called spells. Spells can be cast and uncast, defining the time interval between one \ncasting and another. Spells have a trigger tied to a type of object and every time an object hits it, an action starts with that object as \ninput. By default MagicDatabase has some deletion spells, called DeathSpell, to delete objects when they meet a certain condition.\n\n<<< Transaction >>>\nTransactions are done with TimePortals. Using the NET keyword \"using\", you can create a block in which to do safe operations, which will be \ncanceled in case of error. Remember to use AcceptChanges to apply the changes at the end of the block.\n\nTo report bugs or ask questions contact marvin.sincini@studenti.unicam.it\nAn example of the use of the MagicDatabase can be found at the following link: https://github.com/Sassas98/DataServiceExample",
  "id": "MagicDatabase",
  "isPrerelease": false,
  "lastEdited": "2024-09-20T23:27:25.463Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "dNuECq7vb9p5vJLnlIYirYJhBXJs3gknvTfVml6kyO6+iraBxFIvWP8h/cvand5b4VhX9PZU8AZd8u5rwiEPUQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 50076,
  "published": "2024-09-20T23:24:50.8Z",
  "readmeFile": "README.md",
  "releaseNotes": "Added unique index for the entities.",
  "repository": "",
  "title": "Magic Database",
  "verbatimVersion": "2.2.0",
  "version": "2.2.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json#dependencygroup/net8.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": "net8.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json#MagicDatabase.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1609,
      "fullName": "MagicDatabase.nuspec",
      "length": 3258,
      "name": "MagicDatabase.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json#lib/net8.0/MagicDatabase.dll",
      "@type": "PackageEntry",
      "compressedLength": 30567,
      "fullName": "lib/net8.0/MagicDatabase.dll",
      "length": 75776,
      "name": "MagicDatabase.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 641,
      "fullName": "LICENSE.txt",
      "length": 1090,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json#README.md",
      "@type": "PackageEntry",
      "compressedLength": 1223,
      "fullName": "README.md",
      "length": 2501,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.09.20.23.27.27/magicdatabase.2.2.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12927,
      "fullName": ".signature.p7s",
      "length": 12927,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}