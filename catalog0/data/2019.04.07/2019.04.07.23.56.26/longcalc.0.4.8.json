{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "b7c96f3d-e664-421e-9664-8967209aa701",
  "catalog:commitTimeStamp": "2019-04-07T23:56:26.974049Z",
  "copyright": "Copyright 2019",
  "created": "2019-04-07T23:51:45.16Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2019-04-07T23:55:56.743Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "qkkOFHBojA2Km8Y9Hw7pOJ4LOd9IZVD0iRggqPrmoMU9qDvMJ6Ue0FrFiEs+wY9eXJ6kthULeOBF5zU4Li12mg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 449097,
  "published": "2019-04-07T23:51:45.16Z",
  "releaseNotes": "Unsigned Assembly\n\nThrow an error on ('type')x for a bf or bcr x, when x is out of range of type 'type'. The user should be aware that no such error is thrown for an integer-type explicit cast ('type')x for an mpz_t x.\n\nThe long-to-mpz_t and mpz_t-to-long Mpz_tVal and LongVal conversion functions have been re-done in such a way that parsing of strings for numeric value is avoided.   \n\nCorrect an inefficiency in x.toString and x.Round for x very large or x near 1 and Precision large.\n\nAdded an optional parameter ZeroOrPiMatchPrecision to the trigonometric functions which, if greater than 0, returns (as appropriate) 1, 0, or -1 if the input matches a multiple of Pi/2 to ZeroOrPiMatchPrecision decimal digits.\n\nA likely natural limitation (of which I am not certain) on the underlying Mpir.NET software is that the bitlength of an mpz_t variable cannot be greater than long.MaxValue. Operating under this assumption, the Bitlength, doBitlength, doIndexofOne are made to be of type long. The shiftLeft and shiftRight functions 'shift' parameter is now of type long.\n\nThe bf object is modified such that x.mant is now readonly for a bf x, and an internal long parameter 'BL' equal to x.Bitlength is included and tracked. BL is then re-calculated on the conclusion of any bf Add, Subtract, Multiply, or Divide or any 'new bf(...)' (other than 'new bf(x)' for a bf 'x'). This approach turns out to result in increased efficiency since the commonly used functions FloorLog2(x) and Log..(x) (among others) use the bitlength value. Operating under the assumption that an mpz_t Add, Subtract, Multiply or Divide result is (however briefly) fully contained in Process Memory, an estimate of the corresponding bf calculation memory requirements is made. If that estimate indicates the BL limitation would be exceeded, an error is thrown. If the estimate exceeds 3 gigabytes, garbage collection is forced and then memory availability is checked and an error is thrown if available memory is insufficient for the operation. This approach avoids the problem of an impasse which previously occurred in situations such as x.Add(y) when x is very large (or very small) compared to y (for bf 'x' and 'y').   \n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2017) and using Mpir.NET for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.NET and a base 2 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.4.8",
  "version": "0.4.8",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 2022,
      "fullName": "LongCalc.nuspec",
      "length": 4277,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 35510,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 110080,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#content/xmpir32.dll",
      "@type": "PackageEntry",
      "compressedLength": 176893,
      "fullName": "content/xmpir32.dll",
      "length": 320000,
      "name": "xmpir32.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#content/xmpir64.dll",
      "@type": "PackageEntry",
      "compressedLength": 220506,
      "fullName": "content/xmpir64.dll",
      "length": 441856,
      "name": "xmpir64.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.04.07.23.56.26/longcalc.0.4.8.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}