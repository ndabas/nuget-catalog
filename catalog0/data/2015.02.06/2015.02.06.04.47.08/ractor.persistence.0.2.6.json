{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.04.47.08/ractor.persistence.0.2.6.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Victor Baybekov",
  "catalog:commitId": "3822375f-9395-424c-834c-491ce488768b",
  "catalog:commitTimeStamp": "2015-02-06T04:47:08.1008423Z",
  "copyright": "Copyright 2014",
  "created": "2014-08-21T06:38:23.1Z",
  "description": "Ractor.Persistence is a collection of APIs for POCOs and blobs persistence and a strongly typed Redis\nclient based on excellent Stackexchange.Redis library.\nThe typed Redis client has strong opinion about keys schema inside Redis and uses a \nconcept of root/owner objects to store dependent objects/collections. POCO/database \npersistor base implementation wraps around ServiceStack.ORMLite, however there is no \nbinary dependency and any ORM could be plugged in. Blob persistor saves large data \nobjects to files or S3.",
  "iconUrl": "https://raw.githubusercontent.com/buybackoff/Ractor.CLR/master/docs/files/img/logo.png",
  "id": "Ractor.Persistence",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://github.com/buybackoff/Ractor.CLR/blob/master/LICENSE.txt",
  "packageHash": "Cxn0BYVWwygFUWysbXfb8dae8xsObMzsoNl3yVmNVQyaughSgSQuHgT1+Q+qeXH8nnaMCo5odKBXzu7hS3so4g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 143420,
  "projectUrl": "https://github.com/buybackoff/Ractor.CLR",
  "published": "2014-08-21T06:38:23.1Z",
  "releaseNotes": "Fixed resultId naming bug when the same actor 'x' runs like: `(x.ParallelWith(x)).ContinueWith(x.ParallelWith(x))` or like `(x.ContinueWith(x)).ParallelWith(x.ContinueWith(x))`, etc. Now continuations and parallels must work always at least from the resultId naming perspective.",
  "requireLicenseAcceptance": false,
  "summary": "Ractor.Persistence is a collection of APIs for POCOs and blobs persistence and a strongly typed Redis\nclient based on excellent Stackexchange.Redis library.",
  "version": "0.2.6",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.04.47.08/ractor.persistence.0.2.6.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.04.47.08/ractor.persistence.0.2.6.json#dependencygroup/stackexchange.redis",
          "@type": "PackageDependency",
          "id": "StackExchange.Redis",
          "range": ""
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.04.47.08/ractor.persistence.0.2.6.json#dependencygroup/servicestack.ormlite.sqlserver",
          "@type": "PackageDependency",
          "id": "ServiceStack.OrmLite.SqlServer",
          "range": ""
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.06.04.47.08/ractor.persistence.0.2.6.json#dependencygroup/fsharp.core.microsoft.signed",
          "@type": "PackageDependency",
          "id": "FSharp.Core.Microsoft.Signed",
          "range": ""
        }
      ]
    }
  ],
  "tags": [
    "F#",
    ".NET",
    "fsharp",
    "redis",
    "akka",
    "distributed",
    "JVM",
    "interop",
    "persistence",
    "DB",
    "database",
    "shards"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}