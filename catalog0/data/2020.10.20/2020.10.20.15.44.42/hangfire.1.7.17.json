{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Sergey Odinokov",
  "catalog:commitId": "67f96ecf-4d78-4943-8f10-0292773e6226",
  "catalog:commitTimeStamp": "2020-10-20T15:44:42.1492913Z",
  "copyright": "Copyright © 2013-2020 Sergey Odinokov",
  "created": "2020-10-20T15:42:57.42Z",
  "description": "An easy and reliable way to perform fire-and-forget, delayed and recurring, long-running, short-running, CPU or I/O intensive tasks inside ASP.NET applications. No Windows Service / Task Scheduler required. Even ASP.NET is not required.\nBacked by Redis, SQL Server, SQL Azure or MSMQ. This is a .NET alternative to Sidekiq, Resque and Celery.\nhttps://www.hangfire.io/",
  "id": "Hangfire",
  "isPrerelease": false,
  "lastEdited": "2020-10-20T15:44:30.533Z",
  "licenseUrl": "https://raw.github.com/HangfireIO/Hangfire/master/LICENSE.md",
  "listed": true,
  "packageHash": "JYtOizU8P4CeJBRjO2WlmfxxY5yZc9Xdmuvucskm+jQSQBMSTj8FmBABNWUVazDiEGO1TB/zDRupnEeC931ZiQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 21203,
  "projectUrl": "https://www.hangfire.io/",
  "published": "2020-10-20T15:42:57.42Z",
  "releaseNotes": "https://www.hangfire.io/blog/\n\nPlease see https://docs.hangfire.io/en/latest/upgrade-guides/upgrading-to-hangfire-1.7.html to learn how to upgrade from 1.6.X.\n\n1.7.17\n\nHangfire.SqlServer\n\n• Fixed – SqlException \"Incorrect syntax near 'throw'\" after upgrading to 1.7.15 when using SQL Server 2008 or 2008R2.\n\n1.7.16\n\nHangfire.SqlServer\n\n• Fixed – Blocking problems when using multiple storages with the same queue names in the same process (appeared in 1.7.9).\n\n1.7.15\n\nHangfire.Core\n\n• Added – `IGlobalConfiguration.UseMaxLinesInExceptionDetails` option to cap the size of stack traces.\n• Changed – Only the first 100 lines of a stack trace will be preserved now by default in Failed state.\n• Fixed – Don't let exceptions with huge stack traces take up too much storage space.\n\nHangfire.SqlServer\n\n• Fixed – Avoid deadlocks when using the `SetJobParameter` method without introducing issues for older schemas.\n• Fixed – Remove duplicate sorting in the `SqlServerMonitoringApi.GetJobs` method which is used by a lot of queries.\n\n1.7.14\n\nHangfire.SqlServer\n\n• Fixed – Duplicate entries in the `JobParameters` table after upgrading to version 1.7.13.\n• Fixed – Extensive retries on a method that has a retry attribute after upgrading to 1.7.13.\n• Fixed – \"ArgumentException: An item with the same key has already been added. Key: RetryCount\" in `SqlServerMonitoringApi`.\n\n1.7.13\n\nHangfire.Core\n\n• Added – Catalan translation for Dashboard UI (based on Spanish translation, by @agausachs).\n• Added – Support for configuring recommended serializer settings via callback (by @Yaevh).\n• Fixed – Use correct wording for job parameters in Job Details page, add it to resources.\n• Fixed – Don't push negative points to the realtime graph in dashboard.\n• Fixed – Don't depend on history collection type returned from Storage API.\n• Project – Execute tests one by one to ensure exit code isn't being lost (by @willchis).\n\nHangfire.SqlServer\n\n• Added – `UseIgnoreDupKeyOption` for SQL Server storage configuration (changes to [Set] and [Hash] tables required).\n• Fixed – Don't truncate too long keys silently, throw exceptions instead.\n• Fixed – Add missing null checks for methods in the `SqlServerWriteOnlyTransaction` class.\n• Fixed – Change `holdlock` hint to `xlock` in `merge` statements in transaction to prevent deadlocks.\n• Fixed – Don't rethrow \"Lock request time out period exceeded\" exceptions from expiration manager.\n• Fixed – Increase [Server].[Id] column's length to 200 for new installations.\n\n1.7.12\n\nHangfire.Core\n\n• Added – Display actual job payload and exception message on job details page when could find the method.\n• Added – French translation for Dashboard UI (by @PaulARoy).\n• Added – Expose IStorageConnection.GetRecurringJobs(IEnumerable ids) to public.\n• Changed – Bump thread priority in heartbeat process for constrained environments.\n• Changed – Display job properties in a dedicated row in job details page.\n• Fixed – Avoid storage round-trip when displaying continuations on job details page.\n\n1.7.11\n\nHangfire.Core\n\n• Added – Display recurring job exceptions directly in the Dashboard UI.\n• Added – Add built-in support for reliable shutdown detection of ASP.NET apps.\n• Changed – Unify exception handling in recurring job scheduler.\n• Changed – Internal feature to perform state changes without calling any filters.\n• Changed – Decrease the number of retry attempts for recurring jobs to 5.\n• Fixed – Let workers to ignore any state change filters when all previous attempts to call them failed.\n• Fixed – Don't let `RecurringJobScheduler` to stall the pipeline when extension filters throw an exception.\n• Fixed – Don't let `DelayedJobScheduler` to stall the pipeline when state filters throw an exception.\n• Fixed – `JobLoadException` when new methods deployed, caused by overlapped recycles in ASP.NET applications.\n• Fixed – Configuration changes aren't taken into account, caused by overlapped recycles in ASP.NET.\n• Fixed – Zombie servers shown on the \"Servers\" page that aren't stopped automatically unless app pool is recycled.\n• Fixed – Pass the whole exception to the `Error` field of a recurring job.\n• Fixed – Re-schedule recurring jobs with unsupported versions, instead of stopping the pipeline.\n• Fixed – Don't stumble over non-existing recurring jobs in a scheduler.\n• Fixed – Add another check before removing non-existing jobs from delayed jobs to avoid race conditions.\n• Fixed – Avoid throwing `NullReferenceException` instead of `InvalidOperationException` when deserializing a job.\n• Fixed – Don't transform queue names to upper case in the Dashboard UI.\n\n1.7.10\n\nHangfire.Core\n\n• Added – Farsi translation for Dashboard UI (by @sepehr1101).\n• Added – Portuguese translation for Dashboard UI (by @GeErghon).\n• Added – `PrefixPath` in `DashboardOptions` (by @shenjielx).\n• Added – Allow `PageUrl` to be overridden by subclass (by @brendonparker).\n\nHangfire.SqlServer\n\n• Changed – Use `XACT_ABORT` option for `ExpirationManager` queries.\n• Changed – Don't rely on implicit rollback when disposing transactions.\n• Fixed – `NullReferenceException` in logs thrown from `SqlInternalTransaction.Rollback` method.\n\n1.7.9\n\nHangfire.Core\n\n• Fixed – Additional Chinese translation for Dashboard UI (by @brookqin).\n• Fixed – Added `null` checks for expired failed jobs in Dashboard UI (by @ppkale1995-cimpress).\n• Fixed – Add word break to definition lists for state cards in Dashboard UI.\n• Fixed – Render long recurring job identifiers correctly in Dashboard UI.\n\nHangfire.SqlServer\n\n• Changed – Implement long polling fetch for sub-second polling delays without `sp_getapplock`.\n• Fixed – Don't leak `DbConnection` instance when an exception occurs during its opening.\n• Fixed – Can not obtain connection from the pool exception after database was offline.\n• Fixed – High number of waits in SQL Server when Hangfire Servers are idle.\n\nDocumentation\n\n• Changed – Update \"Making ASP.NET Applications Always Running\" for .NET Core (by @unionthugface).\n• Fixed – Fix typo in the README.md file (by @tawfikkh).\n\n1.7.8\n\nHangfire.Core\n\n• Added – `IGlobalConfiguration.UseResultsInContinuations` method to globally enable results for continuations.\n• Added – Ability to push antecedent job's result to continuations via job parameters with `ContinuationsSupport`.\n• Added – `JobParameterInjectionFilter` server filter to inject job parameters as arguments.\n• Added – Allow to specify a custom thread factory in `UseBackgroundPool` methods.\n• Changed – Add retry attempts for recurring jobs instead of immediately disabling them.\n• Fixed – `CultureInfo.InvariantCulture` is now restored properly in background jobs.\n• Fixed – Recurring jobs aren't triggered early after changing their cron expressions.\n• Fixed – Don't trigger recurring job when it can't be scheduled due to errors.\n• Fixed – Argument with a `null` value is skipped when displaying job arguments in Dashboard UI.\n• Fixed – Add a workaround for resolving `System.Diagnostics.Debug` type in .NET Core 3.0.\n• Deprecated – Deprecate the `JobActivatorScope.InnerScope` property as it wasn't implemented.\n\nHangfire.SqlServer\n\n• Added – Support for Microsoft.Data.SqlClient package when using a custom connection factory (Part II).\n• Fixed – Remove `System.Data.SqlClient` dependency from `SqlCommandBatch` and `ExpirationManager`.\n\nHangfire.AspNetCore\n\n• Added – `IAppBuilder.MapHangfireDashboard` method for ASP.NET Core 3.0 endpoint routing (by @kendaleiv).\n• Changed – Add explicit `netcoreapp3.0` target with \"Microsoft.AspNetCore.App\" framework reference (by @stebueh).\n\nHangfire.NetCore\n\n• Changed – Add explicit `netcoreapp3.0` target with reference to \"3.0.0\" packages.\n\nDocumentation\n\n• Added – Making ASP.NET Core application always running on IIS (by @bamotav).\n• Fixed – Small typo on the \"Getting Started in ASP.NET Core applications\" page (by @msynk).\n• Fixed – Small spelling correction in \"Throttling & Rate Limiters\" (by @Bert-R).\n• Fixed – Small typo in the \"Sending Email\" tutorial (by @nabeelvalley).\n• Fixed – Correct spelling of 'prerequisites' in README.md (by @lgirvin).\n\n1.7.7\n\nHangfire.Core\n\n• Changed – Produce a trace log message with details when updating a recurring job.\n• Changed – Return early from `CoreBackgroundJobFactory.Create` when storage returns `null`.\n• Project – Minor changes for the `Readme.md` file (by @231293).\n• Project – Add `netcoreapp3.0` target framework for Hangfire.Core.Tests.\n• Project – Add support for MSBuild 15.0 (VS 2019) when building `*.cshtml` files.\n\nDashboard UI\n\n• Added – Allow modification of the Dashboard UI title (by @tbertenshaw).\n• Added – Support for HTML tags on the Dashboard UI title (by @caioproiete).\n• Added – Buttons for 1,000 and 5,000 items per page in dashboard.\n• Added – Links to previous/next pages to the top of the dashboard page.\n• Changed – Expose the `RazorPage.Context` property as a public member.\n• Fixed – Supplementary Chinese translation (by @mccj).\n• Fixed – Don't update real-time chart when too much time passed since the last update.\n\nHangfire.SqlServer\n\n• Added – Add support for Microsoft.Data.SqlClient package when using custom connection factory (Part I).\n• Added – Add `UseFineGrainedLocks` option to avoid deadlocks in some theoretical cases.\n• Added – Add missing overload for `UseSqlServerStorage` with connection factory parameter only.\n• Added – Expose the SqlServerObjectsInstaller.GetInstallScript method (by @altso).\n• Fixed – Make command batching working on .NET Core when using System.Data.SqlClient 4.7.0 and higher.\n• Fixed – Permit dash characters (`-`) in schema names (by @kendaleiv).\n• Fixed – Escape square bracket characters in schema names.\n• Project – Add support for `netcoreapp3.0` target in Hangfire.SqlServer.Tests.\n• Project – Take schema name from constant in Hangfire.SqlServer.Tests (by @kendaleiv).\n• Project – Make Hangfire.SqlServer.Tests work on Linux in Travis CI environment.\n\nHangfire.AspNetCore\n\n• Fixed – Add missing `AddHangfireServer` method for .NET Framework 4.6.1 and higher (by @danstur).\n\n1.7.6\n\nHangfire.Core\n\n• Changed – Add support for dash characters (`-`) in queue names (by @caioproiete).\n• Fixed – Show actual error in Dashboard UI when recurring job can't be scheduled.\n• Fixed – Ensure backward compatibility when JSON payloads are serialized with field names only.\n• Fixed – Non-awaited continuations can bring down the whole app when `TaskScheduler` is set to `null`.\n• Fixed – Timeout value is not respected in some cases in the `WaitOneAsync` method.\n\n1.7.5\n\nHangfire.Core\n\n• Fixed – Show error message when there's an error loading the statistics in Dashboard UI (by @prochnowc).\n• Fixed – Properly handle recurring jobs with null or empty 'Job' field.\n• Fixed – Disable recurring job when we can't schedule it due to an error.\n• Fixed – Use `LazyThreadSafetyMode.PublicationOnly` to avoid caching \"JobStorage.Current is null\" exceptions.\n\nHangfire.AspNetCore & Hangfire.NetCore\n\n• Fixed – Add missing overload for the `AddHangfireServer` method with \"options\" action.\n\n1.7.4\n\nHangfire.Core\n\n• Added – `BackgroundJobClient.RetryAttempts` property to make job creation resilient to transient exceptions.\n• Added – Dashboard localization support in `pt-BR` (by @candidodmv).\n• Changed – Protect background dispatchers from moving from stopped state to non-stopped one.\n• Changed – Unify `WaitOne` and `WaitOneAsync` methods with timeout and cancellation token for `WaitHandle` class.\n• Fixed – Don't hide an original fatal exception occurred in dispatchers in some cases.\n• Fixed – Dashboard UI to display \"await\" keyword on all task-like methods.\n• Fixed – Display links properly in an informational message on the Servers page in Dashboard UI.\n• Fixed – Wait for the heartbeat process before shutting down a server.\n\nHangfire.SqlServer\n\n• Fixed – Potential deadlocks cause by suboptimal queries when using `SlidingInvisibilityTimeout` fetching.\n• Fixed – Prevent zero delays between fetch retry attempts when lock acquisition failed without blocking.\n• Fixed – Specify float precision explicitly for the `Score` column in the `AddToSet` method.\n\n1.7.3\n\nHangfire.Core\n\n• SECURITY – Use `HtmlEncode` in all remaining places in Dashboard UI to prevent XSS attacks.\n\n• Added – Added Dutch language, and updated missing translation on \"Servers\" page (by @r-win).\n• Added – `Cron.Never` method for adding manual recurring jobs that never fire (by @michaltalaga).\n• Fixed – Add missing `AddOrUpdate` extension methods for the `IRecurringJobManager` interface.\n• Deprecated – Unused `HtmlHelper.FormatProperties` method is now obsolete.\n\nHangfire.SqlServer\n\n• Fixed – Wrong error message in migration script, when @CurrentSchemaVersion has a NULL value (by @penenkel).\n\n1.7.2\n\nHangfire.Core\n\n• Added – `DashboardOptions.TimeZoneResolver` property to handle custom time zone resolvers in Dashboard UI.\n• Fixed – `RecurringJob.AddOrUpdate` method is now able to update a broken recurring job.\n• Fixed – Recurring job scheduler now properly handles recurring jobs whose job method or time zone is wrong.\n• Fixed – Don't throw an exception on Recurring Jobs page when time zone can't be resolved.\n\nHangfire.AspNetCore & Hangfire.NetCore\n\n• Added – Automatically resolve `ITimeZoneResolver` service for the `DashboardOptions.TimeZoneResolver` property.\n• Fixed – Allow to resolve `IJobFilterProvider` service from the `AddHangfire` method.\n\nHangfire.SqlServer\n\n• Fixed – Occasional \"DataException: Error parsing column\" error when using blocking fetch.\n\n1.7.1\n\nHangfire.Core\n\n• Added – `DashboardOptions.IgnoreAntiforgeryToken` property to disable token validation in Dashboard UI.\n• Added – Display hints regarding server status on Servers page in Dashboard UI.\n• Added – Highlight recurring jobs with no next execution in Dashboard UI.\n• Added – Show actual error in Dashboard UI when recurring job has an invalid Cron expression.\n• Fixed – `InvalidOperationException` when `AllowSynchronousIO` option isn't set in ASP.NET Core 3.0.\n• Fixed – Set `NextExecution` value to `null` when existing recurring job has an invalid Cron expression.\n• Fixed – Make dashboard charts to be more culture-specific to use correct time format.\n• Fixed – Obsolete `UseSerializationSettings` comment now contains correct method name (by @PaitoAnderson).\n• Project – `resx` files now re-generated automatically when building a project.\n\nHangfire.NetCore\n\n• Added – Worker Service host support for .NET Core without unnecessary dependencies to ASP.NET Core.\n\nHangfire.SqlServer\n\n• Changed – Use blocking fetch implementation only for sub-second polling intervals.\n• Fixed – Don't fail with an exception when can't connect to MSSQL instance during start-up.\n• Fixed – Don't access the `JobQueue` table when using blocking query and don't have results.\n\n1.7.0\n\nHangfire.Core\n\n• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.\n• Added – `IGlobalConfiguration.SetDataCompatibilityLevel` to enable rolling upgrades from version 1.6.\n• Added – `IGlobalConfiguration.UseRecommendedSerializerSettings` method for new installations.\n• Added – Assemblies now loaded automatically when resolving a type when using default type resolver.\n• Added – Custom `TaskScheduler` can now be specified in `BackgroundJobServerOptions` for workers.\n• Added – `IdempotentCompletionAttribute` filter to enforce strict order for continuations.\n• Added – `IBackgroundJobClient.ContinueJobWith` methods to replace `ContinueWith` ones in future for clarity.\n• Added – `JobStorage.LinearizableReads` virtual property to avoid unnecessary waits in state changer.\n• Added – Allow async methods to run their continuations on worker thread by disabling `TaskScheduler`.\n• Added – Multi-stage shutdown to wait for graceful completion before starting to abort jobs.\n• Added – Asynchronous checks for job cancellation, `IJobCancellationToken` can be replaced with `CancellationToken` (by @pieceofsummer).\n• Added – Possibility to create millions of recurring jobs without stressing the scheduler.\n• Added – Second-based recurring jobs are fully supported now with 6-part cron expressions.\n• Added – Support for custom `TimeZoneInfo` resolvers in recurring jobs for interoperability purposes.\n• Added – Package now explicitly targets .NET Standard 2.0, and .NET Framework 4.6 target added as well.\n• Added – Type roundtrip support between .NET Core and .NET Framework for most common types.\n• Added – Allow to specify queue names based on job arguments with `QueueAttribute` via patterns.\n• Added – `PerformContext.Storage` property to allow server filters to spawn connections.\n• Added – `GetFirstByLowestScoreFromSet` connection method overload that returns multiple items (by @cdschneider).\n• Added – Entry point for custom job naming strategies available for dashboard (by @pieceofsummer).\n• Added – `JobDisplayNameAttribute` class for displaying jobs in dashboard, available on .NET Core (by @pieceofsummer).\n• Added – Support for async jobs returning ValueTask<T> (by @pieceofsummer).\n• Added – Support for asynchronous background processes, opens the road toward async storage.\n• Added – Circuit breaker pattern for background processes to reduce the logging pressure.\n• Added – Processing server is now able to detect it was expired, and restart itself with the new id.\n• Added – Ability to use custom delays for automatic retries of a background job.\n• Added – `ThreadAbortException` and `ThreadInterruptedException` handling to keep the background process running.\n• Added – Support for complex Cron expressions, including the `L`, `W`, `#` characters.\n• Added – `JobActivator.BeginScope` method overload with the full `PerformContext` (by @jeroenvervaeke).\n• Added – Support for read-only view for dashboard (by @mikechamberlain).\n• Added – Storage property to control the job expiration time (by @rsilvanet).\n• Added – Decrease the size of serialized type payloads and remove version information.\n• Changed – Make `TaskScheduler.Default` the default scheduler for async jobs to avoid breaking changes.\n• Changed – Split serializer setting to Internal and User scopes to isolate them (Version_170 Switch).\n• Changed – Don't allow to affect internal serialization even by `JsonConvert.DefaultSettings` (Version_170 Switch).\n• Changed – Share the same type binder between Hangfire itself and Newtonsoft.Json (Version_170 Switch).\n• Changed – Use more compact representation of dates when using `SerializeDateTime` (Version_170 Switch).\n• Changed – Stop using special case for `DateTime` argument serialization (Version_170 Switch).\n• Changed – Don't serialize unused `AwaitingState.Expiration` field (Version_170 Switch).\n• Changed – Specify parameter type when serializing arguments to allow using `TypeNameHandling.Auto` option.\n• Changed – Use case sensitive search when resolving a type as by default in .NET.\n• Changed – Make `SucceededState` constructor public to allow state serialization.\n• Changed – Add `IBackgroundJobFactory.StateMachine` property (breaking change for low level API).\n• Changed – Replace Rickshaw with Chart.js to have beautiful charts with less headache.\n• Changed – `DelayedJobScheduler` is able to use the new storage method to query multiple jobs at once.\n• Changed – `RecurringJobScheduler` now uses index-based checks to fetch only those jobs that should be scheduled.\n• Fixed – Worker now logs an error, when all the state change attempts failed due to an exception.\n• Fixed – Don't serialize arguments multiple times when showing job details in dashboard.\n• Fixed – `DateTimeOffset` conversion error when it was serialized with `TypeConverter`.\n• Fixed – Remove duplicate of argument deserialization code for obsolete `Job` class methods.\n• Fixed – Decorate all the exceptions with the `SerializableAttribute`.\n• Fixed – `ArgumentNullException` when job class contains method with non-resolvable generic arguments.\n• Fixed – \"Failed to initialize CoreCLR\" error, by removing reference to `Microsoft.NETCore.Portable.Compatibility`.\n• Fixed – Possible race conditions in `RecurringJobScheduler` that may lead to job duplicates.\n• Fixed – Configuration inconsistency introduced in 1.6.18 leading to issues with custom `JobActivator`.\n• Fixed – Triggering the recurring task doesn't update its last execution time.\n• Fixed – Recurring job which don't have next execution (intentionally or not) don't cause exception.\n• Fixed – Dashboard recurring jobs sorting is random (now it's based on next execution time).\n• Fixed – Performance problems with huge amount of recurring jobs.\n• Fixed – `NextExecution` field of a recurring job has delay in value getting set.\n• Fixed – Dashboard graphs have improper sizing.\n• Fixed – Server disappears from the list, but still performing the background processing.\n• Fixed – Logging is too aggressive on transient errors.\n• Fixed – Daylight saving time transitions now handled perfectly in recurring jobs thanks to Cronos.\n• Fixed – Confusing Cron scheduling, when both day-of-week and day-of-month fields set.\n• Project – Add `DataCompatibilityRangeFact` and `DataCompatibilityRangeTheory` classes for compatibility checks.\n• Project – Reduce test execution time by removing unnecessary waits.\n\nHangfire.AspNetCore\n\n• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.\n• Added – An overloaded AddHangfire method with `IServiceProvider` parameter (by @ericgreenmix and @denis-ivanov).\n• Added – `BackgroundJobServerHostedService` class based on `IHostedService` interface.\n• Added – `IServiceCollection.AddHangfireServer` method to register the server during configuration.\n• Changed – Custom services for factory, performer and state changer interfaces will be picked up only when all of them registered.\n\nHangfire.SqlServer\n\n• Added – Full .NET Core 2.0 support by explicitly targeting .NET Standard 2.0.\n• Added – `Schema 7` migration to fix the `IX_HangFire_Set_Score` index to include the `Key` column.\n• Added – `Schema 6` migration with less indexes, better physical layout and `bigint` support (disabled by default).\n• Added – Blocking fetch support for sliding expiration-based fetch to avoid excessive polling.\n• Added – `SqlServerStorageOptions.EnableHeavyMigrations` switch to automatically install even heavy migrations.\n• Added – `SqlServerStorageOptions.DisableGlobalLocks` property to avoid custom locking scheme.\n• Added – `SqlServerStorageOptions.UsePageLocksOnDequeue` property to use less CPU consuming fetch.\n• Added – Callback method to allow to open the database with impersonation (by @BjoernHund).\n• Added – `SqlServerStorageOptions.UseRecommendedIsolationLevel` option to set the minimum possible level.\n• Changed – Identity columns either converted to the `bigint` type, or entirely removed.\n• Changed – Clustered indexes were organized according to the access patterns of their tables.\n• Changed – Most of secondary indexes were either removed or made filtered.\n• Changed – Optimize sliding-expiration-based fetching to use even less CPU time.\n• Changed – Use write reordering and fine-grained locking scheme to improve parallelism.\n• Changed – Monitoring API doesn't check state data to see state transition time.\n• Changed – Allow to use zero-based poll interval when sliding invisibility timeout.\n• Changed – Short paths for the `CreateExpiredJob` method to avoid some round-trips.\n• Changed – Set `SqlParameter` types explicitly to not to duplicate query plans.\n• Changed – Batch support for `AddToQueue` method when default provider is used.\n• Changed – Check `FetchedAt` has expected value to prevent prolonging others' work.\n• Changed – Use more recent Dapper 1.50.7 on all platforms except .NET Framework 4.5.\n• Changed – Dapper package is internalized now even on .NET Core to avoid possible conflicts.\n• Fixed – Avoid unnecessary waits in state changer when job was already expired.\n• Fixed – Cannot resolve the collation conflict in `CountersAggregator`.\n• Fixed – Background processing stops when identity columns exceed the `Int32.MaxValue`.\n• Fixed – Slowdown of scheduled jobs due to the missing index on the `[Set]` table.",
  "requireLicenseAcceptance": false,
  "summary": "An easy way to perform fire-and-forget, delayed and recurring tasks inside ASP.NET applications. No Windows Service required.",
  "title": "Hangfire",
  "verbatimVersion": "1.7.17",
  "version": "1.7.17",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netframework4.5",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netframework4.5/hangfire.core",
          "@type": "PackageDependency",
          "id": "Hangfire.Core",
          "range": "[1.7.17, 1.7.17]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netframework4.5/hangfire.sqlserver",
          "@type": "PackageDependency",
          "id": "Hangfire.SqlServer",
          "range": "[1.7.17, 1.7.17]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netframework4.5/microsoft.owin.host.systemweb",
          "@type": "PackageDependency",
          "id": "Microsoft.Owin.Host.SystemWeb",
          "range": "[3.0.0, )"
        }
      ],
      "targetFramework": ".NETFramework4.5"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard1.3",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard1.3/hangfire.core",
          "@type": "PackageDependency",
          "id": "Hangfire.Core",
          "range": "[1.7.17, 1.7.17]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard1.3/hangfire.sqlserver",
          "@type": "PackageDependency",
          "id": "Hangfire.SqlServer",
          "range": "[1.7.17, 1.7.17]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard1.3/hangfire.aspnetcore",
          "@type": "PackageDependency",
          "id": "Hangfire.AspNetCore",
          "range": "[1.7.17, 1.7.17]"
        }
      ],
      "targetFramework": ".NETStandard1.3"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard2.0/hangfire.core",
          "@type": "PackageDependency",
          "id": "Hangfire.Core",
          "range": "[1.7.17, 1.7.17]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard2.0/hangfire.sqlserver",
          "@type": "PackageDependency",
          "id": "Hangfire.SqlServer",
          "range": "[1.7.17, 1.7.17]"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#dependencygroup/.netstandard2.0/hangfire.aspnetcore",
          "@type": "PackageDependency",
          "id": "Hangfire.AspNetCore",
          "range": "[1.7.17, 1.7.17]"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#Hangfire.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 9136,
      "fullName": "Hangfire.nuspec",
      "length": 27686,
      "name": "Hangfire.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#readme.txt",
      "@type": "PackageEntry",
      "compressedLength": 681,
      "fullName": "readme.txt",
      "length": 1846,
      "name": "readme.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.10.20.15.44.42/hangfire.1.7.17.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9464,
      "fullName": ".signature.p7s",
      "length": 9464,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Hangfire",
    "AspNet",
    "MVC",
    "AspNetCore",
    "SqlServer",
    "Long-Running",
    "Background",
    "Fire-And-Forget",
    "Delayed",
    "Recurring",
    "Tasks",
    "Jobs",
    "Scheduler",
    "Threading",
    "Queues"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}