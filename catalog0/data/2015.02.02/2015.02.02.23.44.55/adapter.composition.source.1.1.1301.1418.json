{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.23.44.55/adapter.composition.source.1.1.1301.1418.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Daniel Cazzulino",
  "catalog:commitId": "a40df712-e988-4386-a433-c64b2c43f9c6",
  "catalog:commitTimeStamp": "2015-02-02T23:44:55.238628Z",
  "created": "2013-01-14T18:47:48.81Z",
  "description": "The provided ComposedAdapterService exports the IAdapterService interface, and \"imports many\" IAdapter implementations.\n            \n            Initialize your composition container so that it contains both the exported adapters and the adapter service, and it \n            will be initialized automatically for use.\n            \n            ======= Example =======\n            // Initialize container with your assemblies/types/catalogs\n            CompositionContainer container = new CompositionContainer(catalog);\n            \n            // Retrieve initialized adapter service\n            IAdapterService service = container.GetExportedValue<IAdapterService>();\n            \n            // Initialize the adapter facade with the service\n            Adapters.SetService(service);\n            \n            // Use adapter extension method As as needed, i.e.            \n            // say we need to use it as an MSBuild project, if possible\n            IMSBuildProject msbuild = project.As<IMSBuildProject>();\n            if (msbuild != null)\n                // do MSBuild stuff with it.\n                \n            ======= Adapters =======\n            [Export(typeof(IAdapter))]\n            public class ProjectToMsBuildAdapter : IAdapter<IProject, IMSBuildProject>\n            {\n                // Implement actual conversion.\n            }\n\n            Simply by exporting the right contract, the adapter service will locate it.\n            Note that to create adapter implementations, you need to install the Adapter.Sdk package.",
  "iconUrl": "https://github.com/clariuslabs/adapter/raw/master/Common/ClariusLabsIcon.png",
  "id": "Adapter.Composition.Source",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/BSD-2-Clause",
  "packageHash": "p8QH11Imq6y1v30VwkZMc6ICaf3avmVGfoEcv523actSPRzjMzUu1YHTqymY2KOwoCRBkB7QTnK703d8Q1I+yA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 9444,
  "projectUrl": "https://github.org/clariuslabs/adapter",
  "published": "2013-01-14T18:47:48.81Z",
  "releaseNotes": "v1.1\n* Additional support for source packages, like Adapter.Interfaces.Source,\n  which also use token replacement and adopt the containing project \n  root namespace.\n\nv1.0\n* Initial version, with support for flexible matching of from and to types\n* Support for MEF in separate Adapter.Composition package\n* Proper split of: Adapter.Interfaces, Adapter.Sdk and Adapter (implementation).",
  "requireLicenseAcceptance": false,
  "summary": "Provides a MEF-friendly implementation that can be automatically initialized with exported adapters in the container.",
  "title": "Adapter Pattern - Composition (Source Code)",
  "version": "1.1.1301.1418",
  "tags": [
    "patterns",
    "adapter"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}