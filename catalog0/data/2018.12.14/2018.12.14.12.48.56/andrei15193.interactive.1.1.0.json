{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.14.12.48.56/andrei15193.interactive.1.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Andrei Fangli",
  "catalog:commitId": "01924629-0b88-4b4f-a2ec-3b19a4236411",
  "catalog:commitTimeStamp": "2018-12-14T12:48:56.0445964Z",
  "copyright": "Copyright 2016",
  "created": "2016-09-26T20:52:48.593Z",
  "description": "A library for creating interactive applications using state machines and asynchronous programming.",
  "id": "Andrei15193.Interactive",
  "isPrerelease": false,
  "lastEdited": "2018-12-14T12:48:39.773Z",
  "licenseUrl": "https://bitbucket.org/Andrei15193/andrei15193.interactive/raw/v1.0/license.md",
  "listed": true,
  "packageHash": "kaVZF1iBYKNCeYNF5RRhb5oCxSYXj0eJ3bXCFcvCwg4jT6Q8yeTt+sKytjhiJJactQ37JXQDnzAyXk9uB2r4NA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 62073,
  "projectUrl": "https://bitbucket.org/Andrei15193/andrei15193.interactive",
  "published": "2016-09-26T20:52:48.593Z",
  "releaseNotes": "Added DynamicPropertyEquatable, some collection controls, such as combo boxes, require that the selected item that we bind to to be in the collection we provide as ItemsSource. The DynamicPropertyEquatable and DynamicPropertyEquatableConverter help resolve this issue allowing a property path to be specified, in XAML, which should be used to compare items. this will allow the selected item to not necessarily be \"part\" (as in the exact same instance) of the collection provided to ItemsSource.\n\nAdded ProjectedObservableCollection, which is the equivalent of applying LINQ's Select on an ObservableCollection, used by DynamicPropertyEquatableConverter.\n\nAdded StatePageNavigators attached property which allows for page transitions to happen when an InteractiveViewModel chnages its state. The view model itself is obtained from the DataContext of the Page onto which IPageNavigator items are added.\n\nAdded ConfirmDialogCommand, a wrapper command that first displays a confirmation MessageDialog. If the user confirms then the wrapped command is executed.\n\nAdded MappingConverter, this is useful to map various InteractiveViewModel states to the same visual state.\n\nAdded ResourceMap. Sometimes it is useful to provide resources (e.g.: other interactive view models) through properties rather than have a huge parameter list on the constructor, not to mention that for store and windows phone apps action parameter-less public constructor needs to be provided in order specify its instantiation in XAML. Awaitable resources\naim to solve that problem by providing a task that can be awaited in an asynchronous method (e.g. the loading method of an InteractiveViewModel). The task will resume once a value has been set (which can happen after constructor has done initializing and the InteractiveViewModel is left in the loading state).\n\nAdded void returning methods for transitioning to initial states. Calling async methods in the constructor and having the operation fail or canceled may result in unexpected, difficult to debug, cases. Through this methods one can transition to an initial state. If it is an action state then an additional canceled and faulted state names (that must be quiet states) need to be specified in case the operation fails or is canceled.\n\nAdded CannotExecuteDialogCommand to accommodate for the bottom app bar button cases when a button does not change its enabled state eventhough the CanExecuteChanged event has been raised. This usually happens when there is a control covering the phone screen completely such as a ComboBox with many items. If the selected item is bound to an InteractiveViewModel property and upon selecting an item an ICommand that is bound to an AppBarButton on the BottomAppBar becomes enabled the button will not update.\n\nErrorContext and all methods using it have been marked with Obsolete. Allowing InteractiveViewModels to not transition to any state (because of an uncaught exception) and remain \"stuck\" in an action state leads to \"partial\" transitions and inconsistencies when using commands to trigger transitions.\n\nContentDialogPage has been marked with Obsolete. Asynchronous commands may trigger page navigation when it is not desired. Use StatePageNavigators instead to trigger page navigation when an InteractiveViewModel reaches a specific state.\n\nConstraints has been marked with Obsolete. Having a static class to act as a container for constraints raises more issues than it solves (When and where should constraint registration happen? How is it ensured that it only happens once?). Instead of having a static container which increases coupling as it would be used extensively, have each constraint provided to consumers (dependency injection is one way to do it).",
  "requireLicenseAcceptance": false,
  "title": "Andrei15193.Interactive",
  "verbatimVersion": "1.1.0.0",
  "version": "1.1.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.14.12.48.56/andrei15193.interactive.1.1.0.json#Andrei15193.Interactive.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1998,
      "fullName": "Andrei15193.Interactive.nuspec",
      "length": 4646,
      "name": "Andrei15193.Interactive.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.14.12.48.56/andrei15193.interactive.1.1.0.json#lib/portable-net45%2Bwin%2Bwpa81%2Bwp80%2BMonoAndroid10%2Bxamarinios10%2BMonoTouch10/Andrei15193.Interactive.dll",
      "@type": "PackageEntry",
      "compressedLength": 32877,
      "fullName": "lib/portable-net45%2Bwin%2Bwpa81%2Bwp80%2BMonoAndroid10%2Bxamarinios10%2BMonoTouch10/Andrei15193.Interactive.dll",
      "length": 81408,
      "name": "Andrei15193.Interactive.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.14.12.48.56/andrei15193.interactive.1.1.0.json#lib/portable-net45%2Bwin%2Bwpa81%2Bwp80%2BMonoAndroid10%2Bxamarinios10%2BMonoTouch10/Andrei15193.Interactive.XML",
      "@type": "PackageEntry",
      "compressedLength": 14420,
      "fullName": "lib/portable-net45%2Bwin%2Bwpa81%2Bwp80%2BMonoAndroid10%2Bxamarinios10%2BMonoTouch10/Andrei15193.Interactive.XML",
      "length": 154138,
      "name": "Andrei15193.Interactive.XML"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.14.12.48.56/andrei15193.interactive.1.1.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "interactive",
    "library",
    "asynchronous",
    "ui",
    "user",
    "interface"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}