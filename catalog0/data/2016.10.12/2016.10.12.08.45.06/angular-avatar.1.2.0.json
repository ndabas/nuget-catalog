{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.12.08.45.06/angular-avatar.1.2.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Andres J Soria R",
  "catalog:commitId": "8eff0b1e-1423-493b-9382-285294e3ebc9",
  "catalog:commitTimeStamp": "2016-10-12T08:45:06.9297956Z",
  "copyright": "",
  "created": "2016-10-12T08:44:45.8Z",
  "description": "Angular Avatar is a simple and lightweight AngularJS directive that generates a letter's avatar like Microsoft or Google do in their web apps. First letter of each word in a string or a group of initials will be used to generate the avatar. The image of the avatar will be rendered in an html img tag as a real png or jpeg. The image data can be retrieved using javascript to be stored in back-end giving you an initial profile picture in your web or mobile apps when the user does not upload one. Several angular atributes are available to configure the output: size, shape, resolution, colors, etc. More info at: https://github.com/ajsoriar/angular-avatar",
  "iconUrl": "https://github.com/ajsoriar/angular-avatar/blob/master/demo/angular-avatar-logo.png?raw=true",
  "id": "angular-avatar",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://opensource.org/licenses/MIT",
  "listed": true,
  "packageHash": "JJdvRfnmLFDKs4gMwZES/u1TfwN9wcx4SXR7K2vilaYDY5y6SiUDoNJ2BnyX2Nm9B9EuCSZiIZiwgu9B+1TSfw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 8432,
  "projectUrl": "https://github.com/ajsoriar/angular-avatar",
  "published": "2016-10-12T08:44:45.8Z",
  "releaseNotes": "- New setting auto-color=\"true\" will automatically assign a color to the avatar's background depending on the combination of characters used. An example here: https://plnkr.co/edit/bhnvU3?p=preview\n- Avatar image can be generated as a jpeg or png.\n- Custom palette of colours.",
  "requireLicenseAcceptance": false,
  "summary": "Simple and lightweight AngularJS directive that generates a letter's avatar like Google does in several apps. First letters in a string or a group of initials will be used to generate an avatar image.",
  "title": "angular-avatar",
  "verbatimVersion": "1.2.0",
  "version": "1.2.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.12.08.45.06/angular-avatar.1.2.0.json#angular-avatar.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 925,
      "fullName": "angular-avatar.nuspec",
      "length": 2085,
      "name": "angular-avatar.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.12.08.45.06/angular-avatar.1.2.0.json#content/Scripts/angular-avatar.js",
      "@type": "PackageEntry",
      "compressedLength": 2331,
      "fullName": "content/Scripts/angular-avatar.js",
      "length": 9687,
      "name": "angular-avatar.js"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2016.10.12.08.45.06/angular-avatar.1.2.0.json#content/Scripts/angular-avatar.min.js",
      "@type": "PackageEntry",
      "compressedLength": 1876,
      "fullName": "content/Scripts/angular-avatar.min.js",
      "length": 4769,
      "name": "angular-avatar.min.js"
    }
  ],
  "tags": [
    "avatar",
    "angular-avatar",
    "ng-avatar",
    "directive",
    "js-avatar",
    "avatar-generator",
    "string-avatar",
    "profile",
    "picture",
    "initials"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}