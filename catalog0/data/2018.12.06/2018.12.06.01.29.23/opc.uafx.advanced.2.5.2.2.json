{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Traeger Industry Components GmbH",
  "catalog:commitId": "143acd85-e318-4cbd-a336-eb46b1fb0b2d",
  "catalog:commitTimeStamp": "2018-12-06T01:29:23.4414573Z",
  "copyright": "Traeger Industry Components GmbH",
  "created": "2018-07-24T09:43:43.807Z",
  "description": "A framework to implement OPC UA conform client / server applications.\n\nThis framework does provide all mechanisms required to implement OPC UA conform client / server applications with just a few lines of code.\nThe framework is based on the latest version of the OPC UA Stack V1.03.351.0 released by the OPC Foundation.\n\nWorks very well with: SIMATIC S7-1500 / S7-1200, SIMOTION, SINUMERIC and other OPC UA Servers from Siemens.\n- EASY - FAST - PROFESSIONAL-",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#frameworkassemblygroup/.netframework4.6",
    "assembly": [
      "System",
      "System.Configuration",
      "System.Core",
      "System.Data",
      "System.Drawing",
      "System.IdentityModel",
      "System.IO.Compression.FileSystem",
      "System.Numerics",
      "System.Runtime.Serialization",
      "System.ServiceModel",
      "System.ServiceModel.Web",
      "System.ServiceProcess",
      "System.Xml",
      "System.Xml.Linq"
    ],
    "targetFramework": ".NETFramework4.6"
  },
  "iconUrl": "https://www.traeger.de/pub/downloads/opc.uafx.advanced-icon.png",
  "id": "Opc.UaFx.Advanced",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2018-12-06T01:28:54.327Z",
  "licenseUrl": "http://www.traeger.de/pub/downloads/license_opc.uafx.advanced.pdf",
  "listed": true,
  "packageHash": "HGCodVVYaGjbk3aWjtL8H94qQjrgeuYv/nsHKyvVGO7oPrHBtPbBgS9KTDl0jkZoSkuFBONEmbLD0ITm/cI0Bg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 12401547,
  "projectUrl": "https://wiki.traeger.de/en/software/sdk/opc-ua/opc-ua.framework.advanced/",
  "published": "2018-07-24T09:43:43.807Z",
  "releaseNotes": "= 2.5.2.2 (released 2018-07-23) =\nFIXED: InvalidCastException when the assembly was loaded with Assembly.LoadFrom().\n\n= 2.5.2.1 (released 2018-07-13) =\nFIXED: DllNotFoundException when trying to use specific types before creating an OpcClient or OpcServer.\n\n= 2.5.2.0 (released 2018-07-06) =\nNEW: Activated .NET Standard licensing support.\n\n= 2.5.1.1 (released 2018-07-03) =\nNEW: Renewed the demo license to provide a new license period.\n\n= 2.5.1.0 (released 2018-06-15) =\nNEW: MimeType-Support in OpcFileNode and OpcFileInfo.\nNEW: Improved performance when accessing OpcContext references in OpcNodes (internally).\nNEW: Improved performance / memory usage when accessing the children of a OpcNode (internally).\nNEW: Removed inline and by default always prepared history configuration nodes for all variable nodes. Instead it is now created on-demand.\nNEW: Removed internal cross-references and use of heavy OnXy callbacks defined by the foundation. Instead we use now a provider pattern.\nNEW: Introduced IOpcNodeInfo to not longer create temporary OpcNode instances. This improves performance and memory usage.\nNEW: IOpcNodeInfo which is used in scenarios there a reference to the origin node is not required. This also reduces the amount of memory required to process internal node operations / evaluations.\nNEW: Introduced cache for custom data types to not longer repeatedly reflect their attribute to improve performance.\nNEW: Exceptions which are thrown during the execution of CreateNodes(...) are now passed to the source there OpcServer.Start has been called.\nCHANGED: IsNodeAccessible(..., IOpcNode node) to IsNodeAccessible(..., IOpcNodeInfo node)\n\n= 2.5.0.3 (released 2018-05-24) =\nFIXED: Issue with not working external references when using multiple node managers which share the same custom node as the root of the nodes provided.\n\n= 2.5.0.2 (released 2018-05-23) =\nFIXED: Issue with missing nodes when using multiple node managers referencing the same system node.\n\n= 2.5.0.1 (released 2018-05-16) =\nFIXED: NullReferenceException in OpcMethodNode when using a predefined node as the parent of the method node.\nFIXED: Not longer displayed OpcDataVariableNode in servers address space, when using the ctor(parent : IOpcNode, name : OpcName).\nCHANGED: Downgraded sample projects to C# language version 6.0 to ensure that the samples will compile in older versions of Visual Studio.\n\n= 2.5.0.0 (released 2018-05-10) =\nNEW: Added support for creating nodes using a custom node identifier.\nNEW: Streamlined constructor overloads in all node classes.\nNEW: Added many so far missed code documentation on node classes.\nNEW: Implemented for each property of a node a according XyNode property which provides the reference to the property-node that represents the value of the so far available Xy properties.\nNEW: Implemented support for lazy initialiation of nodes which allows to define the Xy property-values to be set-up while they are applied to their property-nodes on server-startup.\nCHANGED: Corrected misspelled members.\nCHANGED: Streamlined API through added additional descriptive parts to class and delegates names. In general changed the naming of Data to DataSet, DataItem to DataSetItem and EventRaise to Event.\nNEW: Completely reviewed implementation of OpcNodeId and OpcNamespace. Partially re-implemented both classes to ensure a maximum of compatibility to foundation defined node identifier standards including the features provided by this framework.\nNEW: The OpcNodeId now supports identifiers using byte-arrays, Guid's and unsigned integers.\nNEW: The OpcNodeId now expresses the type of identifier value in its string representations generated using OpcNodeId.ToString.\nNEW: The OpcNodeId now supports UTF8 encoded special characters in an url-formatted node identifier.\nNEW: The OpcNodeId now support parsing a foundation formatted node identifiers.\nNEW: The OpcNodeId now provides additional properties like OriginalString and OriginalFormat.\nCHANGED: OpcNodeId.ToString formats now by default using the OpcNodeIdFormat.Foundation format.\nFIXED: Wrong name of method GetOutpuArguments to GetOutputArguments in OpcMethodNodeInfo class.\nFIXED: Issue with DBNull values used in case there is no default value for an argument specified in method nodes.\nNEW: Reworked OpcName implementation to not longer combine the BrowseName, DisplayName and SymbolicName into one instance / class.\nNEW: IOpcNode, OpcNode and OpcNodeInfo now provide direct properties for the DisplayName (and SymbolicName) of a node.\nNEW: OpcNodeInfo now supports the Children and Parent browsing using a combination of the OpcNodeCateogry enum members.\nNEW: OpcClient.SubscribeEventRaise methods and OpcSubscribeEventRaise now support an OpcEventFilter instance for event filtering.\nNEW: Reviewed existing API regarding UA Alarm + Events and adjusted it for a more fluent / intuitive interface including some changes to use lazy initialization to improve performance.\nCHANGED: Order of subscription events from MonitoredItem -> Client -> Subscription to Monitored -> Subscription -> Client. To ensure a more logic event order using bubbling.\nNEW: Reworked OpcEventRaiseEventArgs to define the Event property for EventNode snapshot information using event raw data.\nCHANGED: Renamed OpcMonitoredItem.ReceivedDataChange to OpcMonitoredItem.DataChangeReceived.\nCHANGED: Renamed OpcMonitoredItem.ReceivedEventRaise to OpcMonitoredItem.EventRaiseReceived.\nNEW: Added MonitoredItem property to OpcDataChangeEventArgs and OpcEventRaiseEventArgs.\nNEW: Added events DataChangedReceived and EventRaiseReceived to OpcSubscription.\nNEW: Implemented OpcEventType enumeration and OpcEventTypes to simplify access to the different event types supported.\nNEW: Implemented different state machine and state / transition variable nodes.\nNEW: Implemented DialogRequested event in OpcClient to provide a simple way to process OpcDialogConditionNode instances.\nNEW: Implemented support for foundation specified event types. This are: OpcConditionNode, OpcAcknowledgeableConditionNode, OpcDialogConditionNode, OpcAlarmConditionNode, OpcDiscreteAlarmNode, OpcLimitAlarmNode, OpcOffNormalAlarmNode, OpcSystemOffNormalAlarmNode, OpcTripAlarmNode, OpcExclusiveLimitAlarmNode, OpcNonExclusiveLimitAlarmNode, OpcExclusiveDeviationAlarmNode, OpcExclusiveLevelAlarmNode, OpcExclusiveRateOfChangeAlarmNode, OpcNonExclusiveDeviationAlarmNode, OpcNonExclusiveLevelAlarmNode and OpcNonExclusiveRateOfChangeAlarmNode.\n\nBREAKING CHANGES (through renaming):\n* OpcSubscribeEventRaise -> OpcSubscribeEvent\n* OpcDataChangeEventArgs -> OpcDataChangeReceivedEventArgs\n* OpcDataChangeEventHandler -> OpcDataChangeReceivedEventHandler\n* OpcEventRaiseEventArgs -> OpcEventReceivedEventArgs\n* OpcEventRaiseEventHandler -> OpcEventReceivedEventHandler\n* OpcNotificationEventArgs -> OpcNotificationReceivedEventArgs\n* OpcNotificationEventHandler -> OpcNotificationReceivedEventHandler\n* OpcDataChangeCallback -> OpcDataChangeReceivedCallback\n* OpcEventRaiseCallback -> OpcEventReceivedCallback\n* IOpcNotificationData -> IOpcNotificationDataSet\n* OpcNotificationData -> OpcNotificationDataSet\n* OpcNotificationDataCollection -> OpcNotificationDataSetCollection\n* OpcNotificationDataReadOnlyCollection -> OpcNotificationDataSetReadOnlyCollection\n* OpcNotificationDataItem -> OpcNotificationDataSetItem\n* OpcNotificationDataItemCollection -> OpcNotificationDataSetItemCollection\n* OpcNotificationDataItemReadOnlyCollection -> OpcNotificationDataSetItemReadOnlyCollection\n* OpcDataChange -> OpcDataChangeSet\n* OpcDataChangeItem -> OpcDataChangeSetItem\n* OpcEventRaise -> OpcEventDataSet\n* OpcEventRaiseItem -> OpcEventDataSetItem\n* OpcMonitoredItem\n * .EventRaiseReceived -> EventReceived\n * .LastEventRaise -> LastEvent\n * .OnEventRaiseReceived -> OnEventReceived\n* OpcSubscription\n * .EventRaiseReceived -> EventReceived\n* .ReceivedEventRaiseCallback -> ReceivedEventCallback\n* .OnEventRaiseReceived -> OnEventReceived\n* OpcClient\n * .EventRaiseReceived -> EventReceived\n * .OnEventRaiseReceived -> OnEventReceived\n * .SubscribeEventRaise -> SubscribeEvent\n\n\n= 2.3.2.0 (released 2018-03-13) =\nFIXED: Issue with wrong use of DebuggerDisplayAttribute in OpcVariableNode and OpcNodeInfo.\nFIXED: Issue with reading / writing custom DataType attribute values on OpcVariableNodes.\nCHANGED: OpcVariableNode to define an abstract base class.\nCHANGED: Removed multiple local foundation node references to reduce memory usage.\nNEW: Enhanced implementation of OpcVariableNode especially for enumeration types.\nNEW: Implemented new nodes OpcTypeNode and OpcDataTypeNode. The OpcDataTypeNode does support the definition of custom enumeration types.\nNEW: Implemented enhanced support to simplify browsing of enumerated data types. Using the new OpcTypeNodeInfo.GetEnumMembers() method provides all the information available on an enumerated type (also see the new OpcTypeNodeInfo.IsEnum property).\n\n\n= 2.3.1.1 (released 2018-02-26) =\nFIXED: Issue with loading the OpcApplicationConfiguration from a file, because of a required DataContract attribute on the OpcApplicationConfiguration class which was not required in older framework versions.\nNEW: Implemented additional ctor overloads in OpcEngineeringUnitInfo to simplify initialization of a specific unit.\nNEW: Implemented ToString overloads in OpcEngineeringUnitInfo and OpcValueRange.\nNEW: CommonCode property in OpcEngineeringUnitInfo + static GetCommonCode(int unitId) method.\nNEW: DefaultNamespaceUri in OpcEngineeringUnitInfo when using a constructor without an explicit namespace parameter. This is not the case using the default constructor.\n\n\n= 2.3.1.0 (released 2018-02-22) =\nATTENTION: Starting with this version a reference to the NuGet package Portable.BouncyCastle (at least V1.8.1.3) or BouncyCastle.Crypto assembly (at least V1.8.1.146)  is required.\nATTENTION: Using a server address with the scheme 'https' requires references to the NuGet packages 'Microsoft.AspNetCore.Server.Kestrel (1.1.3)' and 'Microsoft.AspNetCore.Server.Kestrel.Https (1.1.3)'.\nNEW: Implemented the Range DataType as OpcValueRange.\nNEW: Implemented the EUInformation DataType as OpcEngineeringUnitInfo.\nNEW: Implemented new node type AnlogItemType as OpcAnalogItemNode.\nNEW: Support of DataValues using the data types Range and EUInformation.\nNEW: Advanced support for browsing nodes using the AnalogItemType-Definition thorugh the new OpcAnalogItemNodeInfo.\nNEW: Updated to target framework .NET Framework 4.6.\n\n\n= 2.3.0.0 (released 2018-02-13) =\nNEW: Updated to foundation stack V1.03.351.0.\nNEW: Implemented new Security option for client / server to define additional certificate validation rules (see OpcClient/OpcServer.Security.CertificateValidationRules).\nCHANGED: The framework does not longer support Windows based authentication using WinLogon-API for OPC UA server authentication.\nCHANGED: Application certificates a now created using SHA256 (the default defined by the foundation). This does not influence any running code. This change will only have an effect when a new certificate is generated.\n\n\n= 2.2.2.0 (released 2017-12-11) =\nFIXED: Issue with missing use of configured operation timeout using OpcClient.Connect() while discovering the server endpoints.\nNEW: Enhanced filter construction using operator overloads to get a more natural API.\nCHANGED: OpcValue -> Simplified ToString implementation to just provide \"null\" for null references or the Value.ToString().\nNEW: Introduced OpcText to represent localized human readable string values.\n\n\n= 2.2.1.0 (released 2017-09-06) =\nNEW: Added support for incomplete certificate chains in cases when the opponent provides a certificate which is signed by an unknown issuer. This is for example the case when trying to connect to a Siemens SIMOTION.\nNEW: Enhanced support for failed certificate validations using the CertificateValidationFailed events in the OpcClient and OpcServer class.\n\n\n= 2.2.0.0 (released 2017-09-01) =\nNEW: Added the GetReferenceType to resolve the according OpcReferenceType for a given OpcNodeId of the type of reference.\nCHANGED: Removed special handling of the attribute DataType in the OpcNodeInfo.Attribute(). This means that there is no longer an OpcDataType value provided. Instead, the data type dependent OpcNodeId is provided.\nNEW: Implemented basic support for object Nodes and extended support for variable Nodes, also implemented generic support for type Nodes (including ObjectTypes, VariableTypes and DataTypes) while browsing Nodes.\nNEW: Using the OpcVariableNodeInfo, OpcObjectNodeInfo and OpcTypeNodeInfo, it is now possible to browse the address space using additional information about the Nodes provided. This also includes e.g. the type information of a variable Node including all its type specific metadata including super- und subtypes.\nNEW: Prepared the framework for use under .NET Standard and .NET Core 2.0.\nNEW: Introduced the LicenseInfo property on all Licenser classes to provide some information about the license conditions used.\n\n\n= 2.1.0.0 (released 2017-08-01) =\nNEW: Updated to OPC UA Foundation stack V1.3.342.0.\n\n\n= 2.0.1.1 (released 2017-06-05) =\nNEW: RegisterAddress / UnregisterAddress methods and new Addresses method to maintain the different base addresses of an OpcServerBase instance.\nFIXED: Wrong naming of IsNodeAccessable in OpcNodeManager to IsNodeAccessible.\nFIXED: Issue with malformed Node namespaces using a namespace URI just built from a scheme in case the OpcNamespace.ToString() is called (= FormatException).\nFIXED: Issue with wrong implicit interpretation of status codes to result information.\n\n\n= 2.0.1.0 (released 2017-05-24) =\nNEW: Added much more details to the message of an OpcException and to the description of an OpcStatus / OpcResult instance to better indicate the source / reason / outcome of an operation.\n\n\n= 2.0.0.0 (released 2017-05-21) =\nNEW: Changed the Assembly Version to 2.0.0.0.\nNEW: Implemented OpcCertificateSettings to configure an application instance certificate which can be created through the OpcCertificateManager.\nFIXED: Issue with wrongly configured application certificates using a store path in cases when the certificate can not be located under such a path.\nFIXED: Issue with wrongly stored username-password pair in the UserName ACL that led to unsuccessful user authentication.\nFIXED: Issue when creating an OpcNodeId using the string+int32 pair, where the int32 was not used for the namespace index of the new Node identifier.\nFIXED: Issue with OpcServerBase.Certificate and OpcClient.Certificate in the case that the certificate is not stored in the ApplicationStore of the certificate stores.\nNEW: Introduced OpcClientCertificateStores (available through OpcClient.CertificateStores) and OpcServerCertitificateStores (available through OpcServerBase.CertificateStores) to provide a fluent API for Client and Server to manage and maintain their certificate stores.\nNEW: Introduced OpcClientServices (available through OpcClient.Services) to provide a service based API to set up the different services used by the Client.\nREMOVED: \"OpcValue.SourceLabel\" and \"OpcValue.ServerLabel\". This also includes that the \"OpcValueLabel\" class does no longer exist. The provided properties are now provided directly via the \"OpcValue\" class. Just make use of the \"OpcValue.ServerXy\" and \"OpcValue.SourceXy\" properties.\nNEW: IOpcWriteNodesService does now support an automatic discovery of which value the Server does expect for the SourceTimestamp of an OpcValue. The automatic determination can be disabled by setting an explicit OpcTimestampSource using the IOpcWriteNodesService.TimestampSource property. Note: The IOpcWriteNodesService instance can be accessed using the OpcClient.Services.WriteNodes property.\nNEW: Removed usage of the obsolete ResolveNodeId method and implemented the new Resolve method on the OpcNodeId instead to determine the fully qualified Node identifier using the Server's namespaces array on demand. This does now support the Node access using the fully qualified Node identifier without the need to know the index of the dedicated Node namespace.\nNEW: Implemented an additional overload of the UpdateCertificate method to manually define whether a certificate is to be created in case there is a certificate missing or not valid. So far this was only possible by using the static AutoCreateCertificate property.\nNEW: Implemented the new properties OpcClient.Certificate (to directly the define a custom Client certificate) and OpcClient.Security (to set up Client security options within one class).\nCHANGED: Renamed property \"OpcSecurity.Policies\" to \"OpcSecurity.EndpointPolicies\" to match the \"OpcClientSecurity.EndpointPolicy\" model.\nCHANGED: Defined the default value of \"OpcCertificateManager.AutoCreateCertificate\" as true.\nNEW: Implemented the new properties in Opc.UaFx.Server.OpcSecurity: AutoAcceptUntrustedCertificates and AutoCreateCertificate.\nNEW: Implemented the new OpcServer.Certificate property to match the same API model as the OpcClient implements.\nCHANGED: Behavior used to select an endpoint to connect to in order to no longer to be negotiable in case there is an explicit endpoint policy defined.\nCHANGED: Default of AutoAcceptUntrustedCertificates in SecurityConfiguration to true.\nNEW: Implemented support for a DefaultNodeManager - this is either the first manager in the list of managers defined or the internally defined default Node manager which defines the namespace as \"<serveraddress>/nodes/\". There is now also the possibility to define just a callback method to provide the Nodes for the default Node manager's address space.\nMOVED: \"OpcClient.PreferredPolicy\" property to \"OpcClient.Security.EndpointPolicy\".\nMOVED: \"OpcClient.UseDomainChecks\" property to \"OpcClient.Security.VerifyServersCertificateDomains\" and changed its default value to false.\nMOVED: \"OpcClient.UserIdentity\" property to \"OpcClient.Security.UserIdentity\" and changed its type from the foundation type IUserIdentity to OpcUserIdentity.\nMOVED: \"OpcClient.UseOnlySecureEndpoints\" property to \"OpcClient.Security.UseOnlySecureEndpoints\" and changed its default value to false.\nREMOVED: Obsolete \"OpcClient.UseAutoNodeIdResolution\" property.\nNEW: Reworked / reviewed OpcIdentity derivates and defined the OpcCertificateIdentity, OpcWindowsIdentity, OpcServerIdentity and OpcClientIdentity as new derivates of OpcUserIdentity (so far they just used the OpcIdentity as their base class). Also changed their construction behavior to simplify the process of identity creation on Client and Server side.\nFIXED: OpcRequestType.Call has been defined as OpcRequestType.Cancel so far. This lead to a nonfunctional use of the OpcRequestType.Call, because it has then been used like the OpcRequestType.Cancel.\nREMOVED: OpcCertificateManager.AutoCreateCertificate property, because it is now used per instance using OpcClient.Security.AutoCreateCertificate or OpcServer.Security.AutoCreateCertificate. Also these properties are by default set to the value true.\nREMOVED: OpcServer.Security.Owner property to reduce redundant reference information and simplify the API.\nRENAMED: \"Server.OpcSecurity\" to \"Server.OpcServerSecurity\".\nRENAMED: \"OpcServerSecurity.Anonymous\" to \"OpcServerSecurity.AnonymousAcl\"\nRENAMED: \"OpcServerSecurity.Certificate\" to \"OpcServerSecurity.CertificateAcl\"\nRENAMED: \"OpcServerSecurity.IssuedToken\" to \"OpcServerSecurity.IssuedTokenAcl\"\nRENAMED: \"OpcServerSecurity.UserName\" to \"OpcServerSecurity.UserNameAcl\"\nRENAMED: \"OpcClient.PreferredLocales\" to \"OpcClient.Locales\"\nRENAMED: \"OpcClient.ReceivedNotification\" to \"OpcClient.NotificationReceived\"\nRENAMED: \"OpcClient.OnReceivedNotification\" to \"OpcClient.OnNotificationReceived\"\nRENAMED: \"OpcSubscription.ReceivedNotification\" to \"OpcSubscription.NotificationReceived\"\nRENAMED: \"OpcSubscription.OnReceivedNotification\" to \"OpcSubscription.OnNotificationReceived\"\nMOVED: OpcNodeCommand from Opc.UaFx.Client to Opc.UaFx.Services.\nMOVED: OpcNodeAttributeCommand from Opc.UaFx.Client to Opc.UaFx.Services.\nRENAMED: \"OpcNodeCommand\" to \"OpcNodeServiceCommand\".\nRENAMED: \"OpcNodeAttributeCommand\" to \"OpcNodeAttributeServiceCommand\".\nRENAMED: OpcStatusCode members with \"Bad\", \"Good\" and \"Uncertain\" prefixes like the OPC Foundation does use them to differ status codes into these three categories.\nNEW: Implemented additional ReadNode overloads to define a numeric Node identifier together with a namespace index and attribute to read.\nNEW: Implemented new ReadNodes methods to read multiple Nodes using a specific attribute.\n\n\n= 1.6.5.2 (released 2017-02-07) =\nCHANGED: Removed implicit interpretation of a numeric Node identifier encoded as string.\n\n\n= 1.6.5.1 (released 2016-12-08) =\nNEW: Implemented enhanced timeout handling for read history requests produced by the OpcClient. This is necessary to give the Server additional time to collect the historical data in case it will take more time than usual and the Server does provide successive continuation points until the data collection has been completed.\n\n\n= 1.6.5.0 (released 2016-12-07) =\nNEW: Enhanced Node History Navigation in case of a fixed time window (there StartTime and EndTime are not equals to MinDate). Therefore Node history values are collected on each page request as long as the Server provides a continuation point either until the Server does no longer provide a continuation point or until the page has reached its page size.\n\n\n= 1.6.4.0 (released 2016-10-12) =\nNEW: Updated IOpcNode interface definition in respect to the current public OpcNode API.\nNEW: Implemented new method Children() : IEnumerable<IOpcNode> in IOpcNode to determine physical children in the Node tree.\n\n\n= 1.6.3.0 (released 2016-10-06) =\nNEW: Implemented the new method OpcFileMethods.IsFileNode to determine if a Node is accessible in the manner of a FileType.\nFIXED: Out of memory issue when using OpcFile.ReadAllText and OpcFile.ReadAllLines.\nNEW: Improved performance of OpcFile.ReadAllText to no longer construct the text using the lines of the file, instead it now uses the binary stream of the file.\nNEW: Generally optimized the speed of reading and writing file contents by using the Client configured MaxByteStringLength.\nFIXED: Issue when browsing Nodes containing remote Nodes which led to the exception: 'Cannot cast an absolute ExpandedNodeId to a NodeId. Use ExpandedNodeId.ToNodeId instead.'\n\n\n= 1.6.2.0 (released 2016-10-04) =\nNEW: Implemented the new method CreateTempCertificate which is also used in cases where AutoCreateCertificate is set to true and where the certificate generator utiltity is not installed. Therefore there is no longer a need to have the certificate generator utility implemented for testing / development besides OPC applications.\nFIXED: Issue with opening files for writing - the access mask has been verified in the wrong way.\nNEW: Implemented a new Session Resource Manager to dispose of any session related resources whenever a session times out or closes. Such a resource is the internal file handle when accessing file Nodes via OPC. In case the Client discards the connection to the Server upon any reason the Session Manager now releases all resources by the session acquired.\n\n\n= 1.6.1.0 (released 2016-09-14) =\nNEW: Implemented the OpcNodeManager.Browse method to support custom browsing in subclassing scenarios.\n\n\n= 1.6.0.0 (released 2016-08-25) =\nNEW: Excluded non-value attributes from automatically updating the source label of the value when writing Node values. Workarounds to use an explicit OpcValue are now obsolete.\nNEW: Introduced new derivate OpcBrowseNodeContext especially for Node browsing and reduced previous OpcNodeContext to a more generic implementation for further subclassing. The new OpcBrowseNodeContext does now also include the Node identifier of the Node from which the browsing operation has been originally introduced.\nNEW: Introduced OpcValue.As<T> method to retrieve the represented value as a specific type by converting the value to the type specified by T.\nNEW: Implemented the new OpcResult class to represent ServiceResult instances.\nNEW: Implemented the subclass OpcMethodContext of OpcContext to determine method call sensitive system information including the method Node being called and its target. This does also include storing the outcome of the callback routine invocation.\nNEW: Implemented file system accessibility support for OpcFileNode objects from the Client point of view. This does include a simple 1:1 API layer implemented by the OpcFileMethods class, a SafeOpcFileHandle to ensure allocated file handles are freed, the OpcFile class to implement an OPC based System.IO.File class like set of service methods, the OpcFileInfo class to implement an OPC based System.IO.FileInfo class like object and the OpcFileStream class to implement an OPC based System.IO.FileStream like object which is a derivated of the System.IO.Stream class and can therefore used by all StreamReader and StreamWriter classes provided by the .NET Framework.\nNEW: Implemented the new OpcPropertyNode and OpcPropertyNode<T>.\nCHANGED: The type OpcVariableValue does now require a generic type parameter for the type of value represented. The OpcVariableNode class has been adopted regarding this type parameter.\nNEW: Implemented the new OpcFileNode including its child Nodes like the method Nodes Open, Close, GetPosition, SetPosition, Read and Write.\n\n\n= 1.5.11.7 (released 2016-07-28) =\nFIXED: Issue with remote Node identifiers in OpcNodeId.\nFIXED: Issue with comparing Node identifiers of different types in OpcNodeId.\n\n\n= 1.5.11.6 (released 2016-06-17) =\nNEW: Implemented the Child method on OpcNodeInfo to retrieve the successors of a Node using its OpcName. This does include the BrowseName, DisplayName and SymbolicName of a Node.\nNEW: Implemented the Parent method on OpcNodeInfo to retrieve the ancestors of a Node using its OpcName. This does include the BrowseName, DisplayName and SymbolicName of a Node.\nNEW: Implemented the Children method on OpcNodeInfo to retrieve successors of a Node of a specific OpcNodeCategory.\nNEW: Implemented the Parents method on OpcNodeInfo to retrieve ancestors of a Node of a specific OpcNodeCategory.\n\n\n= 1.5.11.5 (released 2016-06-13) =\nNEW: Implemented implicit cast operator for ExpandedNodeId's.\nNEW: Implemented additional Get method overload on OpcNamespace to retrieve Node namespaces using an Uri and Index.\nFIXED: Issue with ExpandedNodeId's in OpcValue's and simplified the handling of them.\n\n\n= 1.5.11.4 (released 2016-05-30) =\nNEW: Minimized lock conditions when reading / writing Nodes.\n\n\n= 1.5.11.3 (released 2016-05-02) =\nNEW: Renewed the demo license to provide a new license period.\n\n\n= 1.5.11.2 (released 2016-04-18) =\nFIXED: Issue with monitored items when reading the initial value of a Node (the Server ran into a NullReferenceException in case of unfiltered monitored items).\n\n\n= 1.5.11.1 (released 2016-03-31) =\nNEW: Implemented the Changed event on OpcStatus.\nFIXED: Issue with the not synchronized OPC Status from SDK to the foundation stack (on OpcValue and OpcVariableNode).\n\n\n= 1.5.11.0 (released 2016-03-23) =\nNEW: OpcNamespace which represents the whole namespace information of a Node identifier (Namespace Index and Namespace Uri).\nNEW: IOpcNamespaceResolver which is implemented by OpcNodeManager, OpcClient and OpcServer. This interface does provide late bound namespace resolution after the OpcServer is started or the OpcClient is connected. Each OpcNodeId whose namespace has been resolved does provide the fully qualified URL of the namespace together with the Node identifier.\nNEW: OpcNodeId.Namespace property to provide the associated OpcNamespace.\nCHANGED: Renamed OpcAttribute.Historizing to OpcAttribute.IsHistorizing.\nNEW: OpcNode: Implemented Node change tracking through the properties HasPendingChanges and PendingChanges including the method IsChangePending.\nNEW: Implemented history support for OpcVariableNode and its subclasses.\nNEW: Enhanced constructor overloads of OpcStatusCollection to much simpler setup of a new instance using OpcStatusCodes.\nNEW: HDA methods on the Client to read and update Node history.\nNEW: HDA interface on the Server to provide the required logic to handle historical data access.\nNEW: HDA services: IOpcReadNodesHistoryService and IOpcUpdateNodesHistoryService.\nNEW: HDA commands: OpcCreateNodeHistory, OpcDeleteNodeHistory, OpcDeleteNodeHistoryAtTime, OpcDeleteNodeHistoryModified, OpcReadNodeHistory, OpcReplaceNodeHistory and OpcUpdateNodeHistory. All of them are subclasses of the OpcNodeHistoryCommand.\n\n\n= 1.5.10.0 (released 2016-02-03) =\nADDED: OPC Watch application to assembly archive.\n\n\n= 1.5.9.1 (released 2016-01-25) =\nFIXED: Issue with wrongly released session although it can be reused in case of a reconnect.\n\n\n= 1.5.9.0 (released 2016-01-21) =\nFIXED: Possible multithreading issues in session keep alive in OpcClient.\nCHANGED: The BreakDetected event is now being raised only if the reconnect timeout equals zero.\nFIXED: In case of releasing an OPC Client session which has already been disposed of in some cases it could lead to an undesired reconnect to the Server upon a thrown ObjectDisposedException by the already disposed Client session.\n\n\n= 1.5.8.0 (released 2016-01-18) =\nNEW: Updated the licensing logic.\n\n\n= 1.5.7.1 (released 2016-01-14) =\nFIXED: Issue with the minimum possible PublishingInterval in the OpcSubscription class.\n\n\n= 1.5.7.0 (released 2016-01-09) =\nFIXED: Issue with the null reference exception in OpcCertificateManager.CreateCertificate when passing an applicationUri as a null reference (Nothing in Visual Basic).\nFIXED: Issue with not uniquely generated OpcNodeId's for InputArguments and OutputArguments of OpcMethodNode instances. This led to the behavior that only the arguments of the most recently provided OpcMethodNode were published when browsing / reading the method argument properties.\nCHANGED: The OpcNodeId for InputArgument and OutputArgument Nodes of OpcMethodNode instances, for more information see the topic before.\nCHANGED: The OpcReadOnlyNodeCollection class does now provide IOpcNode instances instead of the internal foundation NodeState instances.\nNEW: An OpcNodeId can now be constructed from OpcName instances whose SymbolicName is a null reference (Nothing in Visual Basic). In this case the BrowseName is used instead of the SymbolicName.\nNEW: The OpcReadNodesRequest does now by default return both timestamps (source and Server).\nNEW: Implemented new OpcNodeManager methods: AddNode, RemoveNode and IsNodeAccessable.\nFIXED: Issue with duplicate ACEs some of the time in case of requesting an ACE which has been already added to an ACL.\n\n\n= 1.5.6.8 (released 2015-12-17) =\nFIXED: Issue with missed TimeStamp update on writing Node values.\nFIXED: Issue with missed TimeStamp data on reading Node values.\n\n\n= 1.5.6.7 (released 2015-12-17) =\nNEW: Implemented the ChangePassword method on OpcServerIdentity to change the user password after an identity has been created.\nNEW: Implemented the protected SystemContext property on OpcNodeManager to provide an alternative context within system internal changes can be performed.\nNEW: The OpcWriteNode class does now automatically set the source label timestamp when writing a Node.\nCHANGED: The OpcValueLabel is now no longer defined as a struct, instead it is now a class.\n\n\n= 1.5.6.6 (released 2015-12-16) =\nNEW: Implemented AddNode and RemoveNode in OpcNodeManager to support dynamically providing Nodes after CreateNodes has been called.\n\n\n= 1.5.6.5 (released 2015-12-10) =\nNEW: Added additional session information to OpcOperationContext calling IsNodeAccessable on OpcNodeManager.\n\n\n= 1.5.6.4 (released 2015-12-09) =\nNEW: Implemented IsNodeAccessable method on OpcNodeManager to customly specify whether a Node is accessible within the view.\n\n\n= 1.5.6.3 (released 2015-12-08) =\nFIXED: Issue with duplicate ACE's when manually adding additional entries on demand.\n\n\n= 1.5.6.2 (released 2015-10-12) =\nFIXED: Issue with reading and writing OpcValue instances and arrays as Node values on Client and Server sides.\nFIXED: Issue with anonymous user login on Server side when creating an OpcSession object.\nNEW: Implemented redirection in case the string value passed to the constructor (string, int) of the OpcNodeId class does indicate a numeric identifier. Now an OpcNodeId will be initialized with the numeric identifier instead of using the string value.\n\n\n= 1.5.6.1 (released 2015-09-08) =\nFIXED: Issue with Anonymous and UserName ACL's enabled at the same time.\nNEW: Implemented additional CreateCertificate overloads in OpcCertificateManager.\n\n\n= 1.5.6.0 (released 2015-09-07) =\nCHANGED: Renamed BuiltInType property to DataType on OpcAttributeInfo.\nNEW: Browsing the DataType attribute does now result into a member of the OpcDataType enumeration value.\nNEW: Implemented OpcValue as a surrogate of the DataValue class.\nNEW: Implemented the static CreateCertificate method on OpcCertificateManager to create certificates out of the box.\nNEW: OpcStatus class does not provide the new OpcStatusCode enumeration as Code.\nNEW: Implemented support for OpcDataTypes: ExtensionObject, Value and Variant.\nCHANGED: Renamed DataValue to Value in OpcDataTypes.\nNEW: Implemented support to directly start browsing using a method Node.\nCHANGED: Moved OpcDiscoveryClient to Opc.UaFx.Client namespace.\nFIXED: Issue with NullReferenceException when noncached Nodes are browsed.\nNEW: Implemented support using a null reference for an application URI to create certificates.\nNEW: Implemented a new abstraction layer for different OPC Server types (OpcServerBase).\nNEW: Implemented a new OPC Server specialization: OPC Discovery Server.\nFIXED: Issue in OPC Client with accessing the internal session instance although it has been disposed of.\n\n\n= 1.5.5.3 (released 2015-08-25) =\nNEW: Simplified the use of OpcVariableClass in Read / Write callbacks through determining the status and timestamp (if no other has been specified) from the Node instance.\n\n\n= 1.5.5.2 (released 2015-08-24) =\nFIXED: Issue with Anonymous and UserName ACL's enabled at the same time.\nNEW: Removed OpcAccessControlMode member 'Default' and replaced its use with Blacklist.\n\n\n= 1.5.5.1 (released 2015-08-24) =\nFIXED: Issue with Null DataType in VariableNodes.\n\n\n= 1.5.5.0 (released 2015-08-24) =\nNEW: Implemented different callback properties to read / write OpcNode attributes.\nNEW: Implemented protected virtual methods to read / write OpcNode attributes.\nNEW: Implemented specific callback properties to read / write OpcVariableNode attributes.\nNEW: Implemented protected virutal methods to read / write OpcVariableNode value attributes.\nNEW: The OpcSession class does now provide the properties UsedIdentity and SuppliedIdentity.\nNEW: Implemented the Update method on OpcStatus.\nNEW: The OpcContext does now provide an Identity property.\nNEW: Implemented the new OpcMonitoredItem class in the Server namespace.\nNEW: OnMonitoredItemCreated/Deleted/Modified does now provide non-foundation classes.\nCHANGED: Moved Identity and ImpersonationContext classes from Opc.UaFx.Server to Opc.UaFx namespace.\n\n\n= 1.5.2.0 (released 2015-06-18) =\nNEW: Excluded the auto update of the endpoint before the connect in cases where a preferred endpoint is defined in OpcClient.\nNEW: Implemented new endpoint identity security on OpcSecurity to enable / disable different endpoints for one or more ACEs. Additionally renamed some existing methods.\nNEW: Implemented StateChanged events in OpcClient.\n\n\n= 1.5.1.1 (released 2015-06-16) =\nNEW: Implemented InvokeService method in OpcClient to invoke service routines using a try-catch-finally block to ensure that the Client's state property does also handle its connection state in case of an exception, which indicates that the connection has been timeout, lost, etc.\nFIXED: Issue with null references as DisplayName and BrowseName in OpcReferenceDescription.\n\n\n= 1.5.1.0 (released 2015-06-15) =\nNEW: Implemented the SaveCertificate method on OpcCertificateManager.\nNEW: Reworked the complete argument binding to also support out and ref parameters in OpcMethodNode.\nNEW: Implemented ByRef Type support in OpcMethodNode.\nNEW: Implemented the local Server CertificateValidationFailed event to support custom failed certificate validation actions.\nNEW: Implemented the new OpcNodeInfo derivated from OpcMethodNodeInfo to browse the method Nodes arguments.\nNEW: Implemented the new OpcCertificateValidationFailedEventArgs and OpcCertificateValidationFailedEventHandler.\nNEW: Implemented the DataType property on OpcDataVariableNode.\nNEW: Implemented InputArguments and OutputArguments properties on OpcMethodNode class. Additionally extended the support of OpcArgument instances with the OpcArgumentAttribute on custom delegates.\nNEW: Implemented support for null references in all implicit cast operators which are working with reference types.\n\n\n= 1.5.0.0 (released 2015-06-10) =\nNEW: Implemented logic to generate Server fulfilled configuration on start.\nNEW: Completely reworked the endpoint selection using the OpcDiscoveryClient and custom preferred OpcSecurityPolicy.\nNEW: Improved the auto complete of the configuration depending on its application type.\nNEW: Introduced transport profile information.\nNEW: Moved the configuration of UserTokenPolicies to OpcServer on startup and improved the transparency of the IsEnabled property.\nFIXED: Issue with empty certificate store paths.\nNEW: Completely reworked the Node referencing mechanism to provide more information while building the Node references and to also remove OPC internals from the user API.\nNEW: Completely reworked existing Node implementations and moved their base class reference to an internal reference to improve the experience with the framework and become more CLSCompliant by also providing more useful APIs.\nNEW: Implemented support for discovery Server base address configuration.\nNEW: Improved configuration defaults, also when loading configuration through one of the Load methods. Additionally implemented default support for DiscoveryServerConfigurations.\nNEW: Simplified the API further.\nNEW: Introduced replacement for StatusCode -> OpcStatus.\nNEW: Reworked OpcDiscoveryClient from factory methods to constructor use to provide a fluent interface between all Server and Client classes.\n\n\n= 1.4.0.0 (released 2015-06-09) =\nNEW: Merged Opc.ClientFx.Advanced and Opc.ServerFx.Advanced together to Opc.UaFx.Advanced.\n\n\n= 1.0.0.0 (released 2015-01-11) =\nNEW: Created Opc.ClientFx.Advanced and Opc.ServerFx.Advanced.",
  "requireLicenseAcceptance": false,
  "summary": "A framework to implement OPC UA Client / Server applications in minutes.",
  "title": "OPC UA Framework Advanced for .NET",
  "verbatimVersion": "2.5.2.2",
  "version": "2.5.2.2",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netframework4.6",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netframework4.6/microsoft.aspnetcore.server.kestrel",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Server.Kestrel",
          "range": "[1.1.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netframework4.6/microsoft.aspnetcore.server.kestrel.https",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Server.Kestrel.Https",
          "range": "[1.1.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netframework4.6/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[10.0.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netframework4.6/portable.bouncycastle",
          "@type": "PackageDependency",
          "id": "Portable.BouncyCastle",
          "range": "[1.8.1.3, )"
        }
      ],
      "targetFramework": ".NETFramework4.6"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/microsoft.aspnetcore.server.kestrel",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Server.Kestrel",
          "range": "[2.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/microsoft.aspnetcore.server.kestrel.https",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Server.Kestrel.Https",
          "range": "[2.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/newtonsoft.json",
          "@type": "PackageDependency",
          "id": "Newtonsoft.Json",
          "range": "[10.0.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/portable.bouncycastle",
          "@type": "PackageDependency",
          "id": "Portable.BouncyCastle",
          "range": "[1.8.1.3, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.data.common",
          "@type": "PackageDependency",
          "id": "System.Data.Common",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.servicemodel.primitives",
          "@type": "PackageDependency",
          "id": "System.ServiceModel.Primitives",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.net.nameresolution",
          "@type": "PackageDependency",
          "id": "System.Net.NameResolution",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.reflection.typeextensions",
          "@type": "PackageDependency",
          "id": "System.Reflection.TypeExtensions",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.diagnostics.process",
          "@type": "PackageDependency",
          "id": "System.Diagnostics.Process",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.runtime.loader",
          "@type": "PackageDependency",
          "id": "System.Runtime.Loader",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.xml.xmldocument",
          "@type": "PackageDependency",
          "id": "System.Xml.XmlDocument",
          "range": "[4.3.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#dependencygroup/.netstandard2.0/system.xml.xmlserializer",
          "@type": "PackageDependency",
          "id": "System.Xml.XmlSerializer",
          "range": "[4.3.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#Opc.UaFx.Advanced.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 12462,
      "fullName": "Opc.UaFx.Advanced.nuspec",
      "length": 43609,
      "name": "Opc.UaFx.Advanced.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#lib/net46/Opc.UaFx.Advanced.dll",
      "@type": "PackageEntry",
      "compressedLength": 2165737,
      "fullName": "lib/net46/Opc.UaFx.Advanced.dll",
      "length": 5840104,
      "name": "Opc.UaFx.Advanced.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#lib/net46/Opc.UaFx.Advanced.xml",
      "@type": "PackageEntry",
      "compressedLength": 626082,
      "fullName": "lib/net46/Opc.UaFx.Advanced.xml",
      "length": 10889876,
      "name": "Opc.UaFx.Advanced.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#lib/netstandard2.0/Opc.UaFx.Advanced.dll",
      "@type": "PackageEntry",
      "compressedLength": 1795303,
      "fullName": "lib/netstandard2.0/Opc.UaFx.Advanced.dll",
      "length": 5090536,
      "name": "Opc.UaFx.Advanced.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#lib/netstandard2.0/Opc.UaFx.Advanced.xml",
      "@type": "PackageEntry",
      "compressedLength": 623494,
      "fullName": "lib/netstandard2.0/Opc.UaFx.Advanced.xml",
      "length": 10829074,
      "name": "Opc.UaFx.Advanced.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#lib/netstandard2.0/Opc.UaFx.Advanced.deps.json",
      "@type": "PackageEntry",
      "compressedLength": 12631,
      "fullName": "lib/netstandard2.0/Opc.UaFx.Advanced.deps.json",
      "length": 79892,
      "name": "Opc.UaFx.Advanced.deps.json"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#content/Opc.UaFx.Advanced/Opc.UaFx.Advanced.chm",
      "@type": "PackageEntry",
      "compressedLength": 4487265,
      "fullName": "content/Opc.UaFx.Advanced/Opc.UaFx.Advanced.chm",
      "length": 4811623,
      "name": "Opc.UaFx.Advanced.chm"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#content/Opc.UaFx.Advanced/Version.txt",
      "@type": "PackageEntry",
      "compressedLength": 11396,
      "fullName": "content/Opc.UaFx.Advanced/Version.txt",
      "length": 39108,
      "name": "Version.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#content/Opc.UaFx.Advanced/OpcWatch.exe",
      "@type": "PackageEntry",
      "compressedLength": 2653932,
      "fullName": "content/Opc.UaFx.Advanced/OpcWatch.exe",
      "length": 7247560,
      "name": "OpcWatch.exe"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 530,
      "fullName": "tools/install.ps1",
      "length": 1261,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.06.01.29.23/opc.uafx.advanced.2.5.2.2.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9477,
      "fullName": ".signature.p7s",
      "length": 9477,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "C#",
    "VB.NET",
    "OPC-UA",
    "OPC",
    "Unified",
    "Architecture",
    "OPC-UA-Framework",
    "S7-1500-OPC-UA-Client",
    "S7-1200-OPC-UA-Client",
    "S7-OPC-UA-Server",
    "OPC-UA-FileType"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}