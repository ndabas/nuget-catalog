{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.18.12.37.43/percolatormatching.1.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jim_Varney",
  "catalog:commitId": "898f131e-f2d7-4fb1-9af2-80ab89638ee1",
  "catalog:commitTimeStamp": "2018-12-18T12:37:43.4917362Z",
  "copyright": "CoopDigity",
  "created": "2015-04-07T03:11:45.457Z",
  "description": "A simple dll that contains a matching class to match strings and to calculate the score of similarity between the two strings using the Ratcliff-Obershelp algorithm.",
  "iconUrl": "http://www.coopdigity.com/wp-content/uploads/2014/04/logo3.png",
  "id": "PercolatorMatching",
  "isPrerelease": false,
  "lastEdited": "2018-12-18T12:37:06.637Z",
  "licenseUrl": "http://opensource.org/licenses/MIT",
  "listed": true,
  "packageHash": "44XtKldmEE8O+QfBd/mR6TKMhZWNOpzF5OY3P9pYxacM5kZelht+RCehoD6SUY4C1p06i6TNdPgvPLVBEzXtug==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 18341,
  "projectUrl": "http://www.coopdigity.com/",
  "published": "2015-04-07T03:11:45.457Z",
  "releaseNotes": "I originally built this when I found out that the fuzzy lookup and fuzzy grouping components of SSIS were only available on enterprise editions of SQL server.  I've used this to scan over database tables to search for possible duplicate entries, and output the results to another table for a user to look over at a later time, and other applications as well.\n\nReference the dll and expose the namespace \"Percolator.Matching\". Make a new instance of \"Fuzzylator.\"\n\nThe \"ThresholdPercentage\" is the threshold that the two strings must meet in order to be deemed as similar. This can be set while creating the new object, or later. If no threshold is set, then it will default to the \"Zero\" percent.\n\nThere are several overloads of the \"IsSimilar\" method to accomodate a couple different scenarios.\n--Durring every check a score is calculated. The optional out parameter can be used to grab that score out of the check if he or she wishes to use it later rather than having to calculate the same score later on. --An optional ThresholdPercentage can be used on a single method to use that percentage rather than the one set by the instance for that one method call.\n\nThe \"IsUPCSimilar\" is a specialized UPC scanner that is streamlined specifically for a upc string. It does not calculate longest common subsequences, rather just looks at each digit in order and returns the score.\n\n\"GetScore\" returns the score between the two strings, using the Ratcliff/Obershelp algorithm.\n\n\"GetUPCScore\" again is a streamlined algorithm specifically for a UPC string.\n\nExamples =>\n\nusing the similarty bools:\n\nvar fuz = new Fuzzylator(ThresholdPercentage.Eighty);\n\nstring str1 = \"Test String\"; \nstring str2 = \"A Test String\";\n\nif (fuz.IsSimilar(str1, str2)) \n{ \n//Do something \n}\n\ndouble score; if (fuz.IsSimilar(str1, str2, out score)) \n{ \n//Do something \nConsole.WriteLine(score); //score now contains the score of the two strings \n}\n\nif (fuz.IsSimilar(str1, str2, ThresholdPercentage.Ninety)) \n{ \n//Do something \n//The IsSimilar check uses a Ninety percent threshold for this one time. \n}\n\ndouble score = fuz.GetScore(str1, str2, true); //the score variable now holds the value of the score between str1 and str2, optionally ignoring the case.",
  "requireLicenseAcceptance": true,
  "summary": "A simple dll that contains a matching class to match strings and to calculate the score of similarity between the two strings using the Ratcliff-Obershelp algorithm.",
  "title": "Percolator Matching",
  "verbatimVersion": "1.1",
  "version": "1.1.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.18.12.37.43/percolatormatching.1.1.0.json#PercolatorMatching.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1452,
      "fullName": "PercolatorMatching.nuspec",
      "length": 3384,
      "name": "PercolatorMatching.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.18.12.37.43/percolatormatching.1.1.0.json#content/_._",
      "@type": "PackageEntry",
      "compressedLength": 2,
      "fullName": "content/_._",
      "length": 0,
      "name": "_._"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.18.12.37.43/percolatormatching.1.1.0.json#lib/PercolatorMatching.dll",
      "@type": "PackageEntry",
      "compressedLength": 3451,
      "fullName": "lib/PercolatorMatching.dll",
      "length": 8704,
      "name": "PercolatorMatching.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.18.12.37.43/percolatormatching.1.1.0.json#lib/PercolatorMatching.xml",
      "@type": "PackageEntry",
      "compressedLength": 895,
      "fullName": "lib/PercolatorMatching.xml",
      "length": 7196,
      "name": "PercolatorMatching.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.18.12.37.43/percolatormatching.1.1.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9467,
      "fullName": ".signature.p7s",
      "length": 9467,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "matching",
    "fuzzy",
    "similarity",
    "mini",
    "pattern",
    "percolator"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}