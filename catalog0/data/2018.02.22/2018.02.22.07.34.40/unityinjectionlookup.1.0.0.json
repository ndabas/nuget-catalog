{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.22.07.34.40/unityinjectionlookup.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "stop-cran",
  "catalog:commitId": "94270465-fa0a-4fb6-8730-cb9d9248d5d3",
  "catalog:commitTimeStamp": "2018-02-22T07:34:40.8777652Z",
  "copyright": "Copyright stop-cran, 2016",
  "created": "2016-07-19T19:45:38.493Z",
  "description": "The package defines a custom Unity's InjectionMember - InjectionCOnstructorLookup. It resolves a provided type between several inheritors of some basis type, depending on their constructor parameter signatures.\n\nEach inheritor should have a constructor with a certain signature - each parameter should be inherited from a type passed to InjectionCOnstructorLookup's constructor.\n\nHere is an example. Suppose we have following types:\n\n    interface IConfig { ... }\n    interface IReport { ... }\n\n    class ConfigA : IConfig { ... }\n    class ConfigB : IConfig { ... }\n\n    class ReportA : IReport\n    {\n        public ReportA (ConfigA config)\n        { ... }\n    }\n\n    class ReportB : IReport\n    {\n        public ReportB (ConfigB config)\n        { ... }\n    }\n\nThe problem is - we have a IConfig as an input and we want to decide which report to create.\nSuppose then, we have registered both reports:\n\n    var unityContainer = new UnityContainer();\n    \n    unityContainer.RegisterType<IReport, ReportA>(\"ReportA\");\n    unityContainer.RegisterType<IReport, ReportB>(\"ReportB\");\n\nDo make things work we just add another registration of `IReport` with the `InjectionMember`:\n\n    unityContainer.RegisterType<IReport>(new InjectionConstructorLookup<IConfig>());\n\nHere `IConfig` type parameters says that we'll look for `IReport`-inherited objects with a single constructor argument, inherited from `IConfig`.\n\nThen there are two ways of resolving `IReport`.\n\n    var reportA = unityContainer.Resolve<IReport>(new DependencyOverride<IConfig>(new ConfigA())); // Should be ReportA\n    var reportB = unityContainer.Resolve<IReport>(new DependencyOverride<IConfig>(new ConfigB())); // Should be ReportB\n\nThe second one is a delegate factory:\n\n    var factory = unityContainer.Resolve<Func<IConfig, IReport>>();\n    \n    var reportA1 = factory(new ConfigA()); // Should be ReportA\n    var reportB1 = factory(new ConfigB()); // Should be ReportB\n\nCall to the factory is faster due to result caching.",
  "id": "UnityInjectionLookup",
  "isPrerelease": false,
  "lastEdited": "2018-02-22T07:33:44.477Z",
  "licenseUrl": "https://opensource.org/licenses/Apache-2.0",
  "listed": true,
  "packageHash": "tc37sdNmqcL+QQ5G5apFpli4D8Q9ZW9img2CExzmh7SnbWq5dGTTJgT0KO9UeOIwyG99rMOL7n18rtUCysqifA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 10834,
  "projectUrl": "https://github.com/stop-cran/UnityInjectionLookup",
  "published": "2016-07-19T19:45:38.493Z",
  "releaseNotes": "First one.",
  "requireLicenseAcceptance": true,
  "summary": "Looks up a type by its constructor argument types.",
  "title": "UnityInjectionLookup",
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.22.07.34.40/unityinjectionlookup.1.0.0.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.22.07.34.40/unityinjectionlookup.1.0.0.json#dependencygroup/unity",
          "@type": "PackageDependency",
          "id": "Unity",
          "range": "[4.0.1, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.22.07.34.40/unityinjectionlookup.1.0.0.json#UnityInjectionLookup.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1142,
      "fullName": "UnityInjectionLookup.nuspec",
      "length": 2966,
      "name": "UnityInjectionLookup.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.22.07.34.40/unityinjectionlookup.1.0.0.json#lib/net45/UnityInjectionLookup.dll",
      "@type": "PackageEntry",
      "compressedLength": 8033,
      "fullName": "lib/net45/UnityInjectionLookup.dll",
      "length": 17920,
      "name": "UnityInjectionLookup.dll"
    }
  ],
  "tags": [
    "Unity",
    "container",
    "DI",
    "IoC"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}