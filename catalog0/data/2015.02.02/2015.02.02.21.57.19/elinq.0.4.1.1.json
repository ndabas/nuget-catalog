{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.57.19/elinq.0.4.1.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "netcasewqs",
  "catalog:commitId": "ffb64b80-ec06-424e-a8ba-db31cd92e3ff",
  "catalog:commitTimeStamp": "2015-02-02T21:57:19.4906762Z",
  "created": "2012-12-15T05:36:08.547Z",
  "description": "ELinq 是一个轻量简单易用的开源Linq ORM数据访问组件，支持Nullable类型和枚举类型，对Linq的谓词提供了完美的支持，旨在让绝大部份的主流数据库都使用 Linq 来进行程序开发，让开发人员访问数据库从SQL中解放出来，易学易用上手快，配置简单，并且提供了源代码下载，方便定制。支持多数据库，目前支持Access、SQLServer、SqlCE、SQLite、MySQL、ORACLE，未来还会支持更多的数据库。\n\n \n\n         特点： 简单、高效、易用、灵活、快捷\n\n       \n        1.  配置简单，支持多数据库\n        2.  支持Linq\n        3.  支持集合对象的批量添加、删除、修改\n        4.  灵活的批量删除（通过Linq表达式）功能\n        5.  灵活的批量更新（通过Linq表达式）功能\n        6.  支持一对一映射（不需要配置映射关系自动映射）\n        7.  支持一对多（不需要配置映射关系自动映射）\n        8.  支持多对一（不需要配置映射关系自动映射）\n        9.  遵从数据库的设计理念，不支持多对多，可以把多对多转化成两个一对多\n       10. 不支持级联更新、级联删除，开发人员完全手工维护外键引用完整性\n       11. 不支持LazyLoad机制，默认就不会加载，除非指定Include方可\n       12. 不支持Session缓存机制\n       13. 不支持二级缓存\n       14. OR映射不支持任何配置文件\n       15. OR映射可以不需要任何Attribute配置\n       16. OR映射的方式：a. Fluent API 方式，b. Attribute 方式，c. 约定方式，d. 混合方式（可以混合a、b、c 三种方式，映射的优先级a>b>c)，e. Xml方式\n       17. 字符串配置简单，遵从.net 的配置规范，没有另起灶炉，比如EF，或者NH\n       18. 只要有有数据库关系理念、懂得Linq表达式就能马上上手\n       19. ELinq 主要对字符串类型做了参数化，数值类型没有做参数化处理，由于有些数据库函数不支持数值类型的参数化参数。\n\n         设计理念 \n\n        一： 约定胜于配置    \n\n              连接字符串的配置完全遵循.Net 的连接字符串配置规范。 \n\n             表名映射原则： 默认情况下表名和实体类名完全一致，如果不一致那么可以通过TableAttribute标签来制定，或者通过SetClassNameToTalbeName策略方法来进行，也可以通过自定义ClassMap来进行 \n\n             列名映射原则：默认情况下实体的属性或字段和表中列名完全一致（不区分大小写），如果不一致那么可以通过ColumnAttribute标签来制定，也可以通过自定义ClassMap来进行 \n\n             单一主键映射原则：默认情况下实体的ID属性或”实体名称\"+ID的属性自动映射为表的主键，当字段或属性的类型是Int型或Long类型时，那么该字段在数据库中应是自动增一或基于序列的方式 \n\n            多主键映射原则：如果表中有联合主键那么需要在是实体类中把对应的字段或属性添加IdAttribute标签即可 \n\n           一对多映射原则：假设有两个实体Customer 和 Order两个实体,Customer 里面包含一个Order的列表属性，那么只需要在Order类里面包含一个CustomerID 的属性或字段即可自动完成一对多映射，当然也可以通过AssociationAttribute标签来指定映射的ThisKey 和ThatKey来手动建立关联（建议自动建立）。 \n\n          多对一映射原则：假设有两个实体Customer 和 Order两个实体,Order里面包含一个Customer的属性引用，那么只需要在Order类里面包含一个CustomerID 的属性或字段即可自动完成一对多映射，当然也可以通过AssociationAttribute标签来指定映射的ThisKey 和ThatKey来手动建立关联（建议自动建立），其实一对多和多对一的映射完全一致都需要在多方的那里添加一个属性（一方的类名名称+“ID”）。\n         多对多映射原则：不支持，需要转换成两个一对多映射，和数据库完",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.57.19/elinq.0.4.1.1.json#frameworkassemblygroup",
    "assembly": [
      "System.Core",
      "System.Data",
      "System.Xml",
      "System.Configuration",
      "System.Xml.Linq"
    ]
  },
  "id": "ELinq",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://elinq.codeplex.com/license",
  "packageHash": "N45+rCUGWYcosloVAGp/vpPJAikt5yPuqW7X6UvllAkjmsl+kVv/czNwEAlJc9nTVIgJYpHsfDw1lTxJaZFgTQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 3541661,
  "projectUrl": "http://elinq.codeplex.com/",
  "published": "2012-12-15T05:36:09.55Z",
  "releaseNotes": "基于http://elinq.codeplex.com/SourceControl/changeset/98305版本\n1. 解决多对一映射的Bug\n2. 支持XML 映射\n3. 统一处理错误消息字符串\n4. 在DbContext 中缓存DbSet\n5. 修改事务支持的Bug\n6. 增加扩展方法UsingTransaction 方便自动支持事务",
  "requireLicenseAcceptance": false,
  "summary": "",
  "title": "ELinq",
  "version": "0.4.1.1",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.57.19/elinq.0.4.1.1.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.02.21.57.19/elinq.0.4.1.1.json#dependencygroup/nlite",
          "@type": "PackageDependency",
          "id": "NLite",
          "range": "[0.9.3.11, )"
        }
      ]
    }
  ],
  "tags": [
    "ELinq",
    "ORM",
    "Linq",
    "NLite",
    "ObjectRelationalMapping",
    "DAL",
    "SQL",
    "DB",
    "POCO"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}