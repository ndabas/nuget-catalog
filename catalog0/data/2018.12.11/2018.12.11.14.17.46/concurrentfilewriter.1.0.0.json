{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Tom Brewer",
  "catalog:commitId": "a931194b-9481-452b-8e51-5fd710f8b91d",
  "catalog:commitTimeStamp": "2018-12-11T14:17:46.4965837Z",
  "copyright": "Â©2015 Tom Brewer",
  "created": "2015-11-28T13:47:08.477Z",
  "description": "A class library for managing multi-threaded sequential write access to one or more files.\nIt is capable of flushing writes from multiple threads in batches by either hitting a specified size threshold or a specified inactivity time limit. It is also possible to write this batching information within the output file(s).\nNote: This class should be injected as a single or static instance shared across all process threads.\nFiles will be locked exclusively from the first Write() call until FlushAndClose() is called or the class is disposed.\n\nThe ConcurrentFileWriter class can be found as an extension of System.IO\n\n*** Full debugging source/symbols are available from http://srv.symbolsource.org/pdb/Public\n\nUsage Example:\n\nvar cfw = new ConcurrentFileWriter(new ConcurrentFileWriterSettings {\n             flushTimeInMilliseconds = 5000,\n             flushSizeInBytes = 10000,\n             showWriteBatchingMarkers = true\n                });\n\n//Pre-lock file (not required)\ncfw.Write(@\"c:\\temp\\test.log\", null);\n\n//Append a string (byte arrays can also be directly written)\ncfw.WriteUtf8Line(@\"c:\\temp\\test.log\", \"Test Line\");\n\n//Flush and unlock specified file (stop managing)\ncfw.CloseManagedFile(@\"c:\\temp\\test.log\");\n\n//Flush and unlock all managed files\ncfw.Dispose();",
  "id": "ConcurrentFileWriter",
  "isPrerelease": false,
  "lastEdited": "2018-12-11T14:17:12.69Z",
  "listed": true,
  "packageHash": "ZC70KPfYQ3R6Zwb9df9d7ey9sEU4dapoJefT/ua5+1RQDHxwPpXrQtU3HW7wIQdnB5iiCsQki9Es0qnvYVVjug==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 19124,
  "published": "2015-11-28T13:47:08.477Z",
  "releaseNotes": "* Dispose: Presently you need to explicitly dispose the ConcurrentFileWriter when the application is closing to ensure that all data is flushed before the process ends.",
  "requireLicenseAcceptance": false,
  "summary": "A class library for managing multi-threaded sequential write access to one or more files.",
  "title": "ConcurrentFileWriter",
  "verbatimVersion": "1.0.0.0",
  "version": "1.0.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.0.json#ConcurrentFileWriter.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1087,
      "fullName": "ConcurrentFileWriter.nuspec",
      "length": 2301,
      "name": "ConcurrentFileWriter.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.0.json#lib/net40/ConcurrentFileWriter.dll",
      "@type": "PackageEntry",
      "compressedLength": 5780,
      "fullName": "lib/net40/ConcurrentFileWriter.dll",
      "length": 12288,
      "name": "ConcurrentFileWriter.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.11.14.17.46/concurrentfilewriter.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9463,
      "fullName": ".signature.p7s",
      "length": 9463,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "log",
    "logging",
    "sequential",
    "append",
    "appender",
    "file",
    "writer",
    "parallel",
    "concurrent",
    "multi-thread",
    "thread-safe",
    "cross-thread",
    "managed",
    "manager",
    "fast",
    "optimized",
    "high-performance",
    "batch",
    "batches",
    "batched",
    "batching",
    "auto",
    "flush",
    "timer"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}