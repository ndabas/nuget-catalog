{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.07.05.13.10.17/dirtybase.app.1.0.30.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Pieter Koornhof",
  "catalog:commitId": "b3be6598-e9c8-4c0f-aea3-ba3bde3d51e9",
  "catalog:commitTimeStamp": "2015-07-05T13:10:17.5618845Z",
  "copyright": "Copyright 2015",
  "created": "2015-07-05T07:57:02.573Z",
  "description": "Dirtybase is a persistence version/migration command line tool. Dirtybase will compare version files in a folder to the version of a data store, then apply the version files in order to migrate the data store to the latest version. This is useful for keeping data stores on different environments up to date and automating deployments.",
  "id": "Dirtybase.App",
  "isPrerelease": false,
  "lastEdited": "2015-07-05T13:09:52.24Z",
  "licenseUrl": "https://github.com/SneakyPeet/Dirtybase/blob/master/LICENSE",
  "packageHash": "W+UoSE12t67jr+JcJF3uQHWFlLD5TX3tIEW8JDEK/cDjDPpFLcUKbuOb0pSLlDjVmQtWlGvdaiKtpHlxyTCMpw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 5988,
  "projectUrl": "https://github.com/SneakyPeet/Dirtybase/",
  "published": "1900-01-01T00:00:00Z",
  "requireLicenseAcceptance": false,
  "summary": "Persistence version/migration command line tool",
  "title": "Dirtybase.App",
  "version": "1.0.30",
  "tags": [
    "Persistence",
    "Versioning",
    "Migration",
    "Database"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}