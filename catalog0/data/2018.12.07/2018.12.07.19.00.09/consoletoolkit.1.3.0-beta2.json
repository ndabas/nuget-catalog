{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.07.19.00.09/consoletoolkit.1.3.0-beta2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Jamie Davis",
  "catalog:commitId": "06469be3-ab76-418f-acb2-48a08dd38562",
  "catalog:commitTimeStamp": "2018-12-07T19:00:09.3327664Z",
  "copyright": "Copyright 2014-2016",
  "created": "2017-08-20T11:00:50.463Z",
  "description": "A library providing a framework that allows you focus on the functionality you want to build rather than wasting your effort on the necessary but time consuming elements such as interpreting command line parameters, formatting help text, validating interactive input, and displaying data in a readable way. The toolkit contains extensive support in all these areas, presented in a way that requires minimal effort to use, and reduces your overall workload while ensuring that your application is a good command line citizen and has all the features command line users expect.\n\nConsole output can be word wrapped, and formatted into tables with full control over the formatting of table columns. The formatting services take the width of the console output window into account and will size table columns intelligently to make sure the output is readable.\n\nColours can be applied with exceptionally simple extension methods. For example:\n\nconsole.WrapLine($\"Displaying data from: {source.Yellow()}\");\n\nInstead of:\n\nConsole.Write(\"Displaying data from: \");\nConsole.ForegroundColor = ConsoleColor.Yellow;\nConsole.Write(source);\nConsole.ForegroundColor = ConsoleColor.White;\n\nInput can be accepted from the user in a variety of ways from a simple confirmation question:\n\nif (console.Confirm(\"Are you sure?\")) \n{\n...\n\nTo more advanced use cases involving accepting whole data structures worth of data or presenting menus.\n\nCommand line parameters can be specified using a straightforward attribute based mechanism in which you define a command class and decorate it to specify which of its properties represent parameters and options. For example:\n\n    [Command]\n    [Description(\"List directories\")]\n    public class DirCommand\n    {\n        [Positional]\n        [Description(\"Optional path to list.\")]\n        public string Path { get; set; }\n\n        [CommandHandler]\n        public void Handle(IConsoleAdapter console, IErrorAdapter error)\n        {\n            console.FormatTable(Directory.EnumerateFileSystemEntries(Path).Select(d => new { Directory = d }));\n        }\n    }\n\nAttributes in the command definition are used to automatically generate command line help and to automatically validate the arguments supplied on the command line. No further work is required beyond defining the command handler class.\n",
  "id": "ConsoleToolkit",
  "isPrerelease": true,
  "lastEdited": "2018-12-07T18:59:46.457Z",
  "licenseUrl": "http://jamie-davis.github.io/ConsoleTools/LICENSE",
  "listed": true,
  "packageHash": "ib37QDQC7Flw9OvglK1HPueGXM3U5lB7errz1niuOUyzaOJRbHtxQFi03HW6FbPMhwZHhbBfjMCkYPlabpFajQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 150694,
  "projectUrl": "http://jamie-davis.github.io/ConsoleTools/",
  "published": "2017-08-20T11:00:50.463Z",
  "releaseNotes": "Support for command keywords. This allows groups of commands to be specified e.g. \"user add\", \"user block\", \"user delete\". Here, \"user\" is the keyword and is associated with \"add\", \"block\" and \"delete\". \n    Conversly, it could be speocified as \"add user\", \"block user\" and \"delete user\", in which the keywords are \"add\", \"block\" and \"delete\", each of which is associated with a discrete command with the name \"user\".",
  "requireLicenseAcceptance": false,
  "summary": "A library providing a framework that allows you focus on the functionality you want to build rather than wasting your effort on the necessary but time consuming elements such as interpreting command line parameters, formatting help text, validating interactive input, and displaying data in a readable way. The toolkit contains extensive support in all these areas, presented in a way that requires minimal effort to use, and reduces your overall workload while ensuring that your application is a good command line citizen and has all the features expert command line users expect. Complete and easy to follow documentation is available on the project site.",
  "title": "Console Toolkit",
  "verbatimVersion": "1.3.0-beta2",
  "version": "1.3.0-beta2",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.07.19.00.09/consoletoolkit.1.3.0-beta2.json#dependencygroup",
      "@type": "PackageDependencyGroup"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.07.19.00.09/consoletoolkit.1.3.0-beta2.json#ConsoleToolkit.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1670,
      "fullName": "ConsoleToolkit.nuspec",
      "length": 4182,
      "name": "ConsoleToolkit.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.07.19.00.09/consoletoolkit.1.3.0-beta2.json#lib/net40/ConsoleToolkit.dll",
      "@type": "PackageEntry",
      "compressedLength": 110330,
      "fullName": "lib/net40/ConsoleToolkit.dll",
      "length": 261120,
      "name": "ConsoleToolkit.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.07.19.00.09/consoletoolkit.1.3.0-beta2.json#lib/net40/ConsoleToolkit.xml",
      "@type": "PackageEntry",
      "compressedLength": 26202,
      "fullName": "lib/net40/ConsoleToolkit.xml",
      "length": 197572,
      "name": "ConsoleToolkit.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.12.07.19.00.09/consoletoolkit.1.3.0-beta2.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Console",
    "Toolkit",
    ".NET"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}