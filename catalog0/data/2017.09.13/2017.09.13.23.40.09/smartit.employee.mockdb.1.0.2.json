{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.13.23.40.09/smartit.employee.mockdb.1.0.2.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "SmartIT by John Kocer",
  "catalog:commitId": "cfa7d298-1659-444b-b948-89e7e71bd7ef",
  "catalog:commitTimeStamp": "2017-09-13T23:40:09.4181942Z",
  "copyright": "Copyright 2017 (c) SmartIT. All rights reserved.",
  "created": "2017-09-13T23:36:36.947Z",
  "description": "SmartIT.Employee.MockDB\nDevelopment Employee Mock Database, Fast API Development/Test Training",
  "id": "SmartIT.Employee.MockDB",
  "isPrerelease": false,
  "lastEdited": "2017-09-13T23:38:49.577Z",
  "listed": true,
  "packageHash": "PbSva80fSOCajKgbmSllNrexAg99pWoD4SpdmPgxjfBFAsnJSvopjF9PjfAsyhZoOGPLef1F9gz6xwElEhLFsg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 6175,
  "published": "2017-09-13T23:36:36.947Z",
  "releaseNotes": "Usage Example\nusing SmartIT.DebugHelper;\nusing SmartIT.Gr.DataAccess;\nusing System;\nusing System.Diagnostics;\n\nnamespace SmartIT.Gr\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n            var employees = new EmployeeRepository();\n            employees.Add(new Employee() { DepartmentId = 1, Gender = \"Male\", Name = \"Jen\", Salary = 3000 });\n\n            var departments = new DepartmentRepository();\n            departments.Add(new Department() { Head = \"Roky\", Name = \"Development\", Location = \"Istanbul\" });\n            departments.Update(new Department() { Id = 2 });\n            //ConsoleHelper.DDump(departments, \"Hi\");\n            Debug.WriteLine(\"Before DDUMP\");\n            departments.Items.DDump(\"Department.Items 01-------:\");\n            args.DDump(\"Args\");\n        }\n    }\n}\n",
  "requireLicenseAcceptance": false,
  "summary": "Development Employee Mock Database, Fast API Development/Test Training",
  "title": "SmartIT.Employee.MockDB By john Kocer",
  "verbatimVersion": "1.0.2",
  "version": "1.0.2",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.13.23.40.09/smartit.employee.mockdb.1.0.2.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.13.23.40.09/smartit.employee.mockdb.1.0.2.json#dependencygroup/.netstandard2.0/system.componentmodel.annotations",
          "@type": "PackageDependency",
          "id": "System.ComponentModel.Annotations",
          "range": "[4.4.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.13.23.40.09/smartit.employee.mockdb.1.0.2.json#SmartIT.Employee.MockDB.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 853,
      "fullName": "SmartIT.Employee.MockDB.nuspec",
      "length": 1965,
      "name": "SmartIT.Employee.MockDB.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.13.23.40.09/smartit.employee.mockdb.1.0.2.json#lib/netstandard2.0/SmartIT.Employee.MockDB.dll",
      "@type": "PackageEntry",
      "compressedLength": 3607,
      "fullName": "lib/netstandard2.0/SmartIT.Employee.MockDB.dll",
      "length": 9216,
      "name": "SmartIT.Employee.MockDB.dll"
    }
  ],
  "tags": [
    "Development",
    "Employee",
    "Mock",
    "Database",
    "Fast",
    "API",
    "Development/Test",
    "Training"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}