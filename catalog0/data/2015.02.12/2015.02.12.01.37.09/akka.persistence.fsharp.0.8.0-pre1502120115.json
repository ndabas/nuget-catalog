{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.12.01.37.09/akka.persistence.fsharp.0.8.0-pre1502120115.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Akka.NET Team",
  "catalog:commitId": "0cd45e88-0d6a-42ee-81bf-397f4427b526",
  "catalog:commitTimeStamp": "2015-02-12T01:37:09.4305423Z",
  "copyright": "Copyright Â© 2013-2015 Akka.NET Team",
  "created": "2015-02-12T01:36:39.573Z",
  "description": "F# API for persistence actors in Akka.NET",
  "iconUrl": "https://raw.githubusercontent.com/akkadotnet/akka.net/gh-pages/images/icon-32x32.png",
  "id": "Akka.Persistence.FSharp",
  "isPrerelease": true,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://github.com/akkadotnet/akka.net/blob/master/LICENSE",
  "packageHash": "QrXS+HhYQv3I8Cr8vnvmkYYlKkDxFZoZmCXQLgNWyxt0PbJvK9ZQP8FRaAJK5fBR1fKiPcvivQ9fKLSysC1Irg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 24002,
  "projectUrl": "https://github.com/akkadotnet/akka.net",
  "published": "2015-02-12T01:36:39.573Z",
  "releaseNotes": "__Dependency Injection support for Ninject, Castle Windsor, and AutoFac__. Thanks to some amazing effort from individual contributor (**[@jcwrequests](https://github.com/jcwrequests \"@jcwrequests\")**), Akka.NET now has direct dependency injection support for [Ninject](http://www.ninject.org/), [Castle Windsor](http://docs.castleproject.org/Default.aspx?Page=MainPage&NS=Windsor&AspxAutoDetectCookieSupport=1), and [AutoFac](https://github.com/autofac/Autofac).\nHere's an example using Ninject, for instance:\n// Create and build your container\nvar container = new Ninject.StandardKernel();\n\tcontainer.Bind().To(typeof(TypedWorker));\n\tcontainer.Bind().To(typeof(WorkerService));\n// Create the ActorSystem and Dependency Resolver\n\tvar system = ActorSystem.Create(\"MySystem\");\n\tvar propsResolver = new NinjectDependencyResolver(container,system);\n\t//Create some actors who need Ninject\n\tvar worker1 = system.ActorOf(propsResolver.Create<TypedWorker>(), \"Worker1\");\n\tvar worker2 = system.ActorOf(propsResolver.Create<TypedWorker>(), \"Worker2\");\n\t//send them messages\n\tworker1.Tell(\"hi!\");\nYou can install these DI plugins for Akka.NET via NuGet - here's how:\nNinject** - `install-package Akka.DI.Ninject`\nCastle Windsor** - `install-package Akka.DI.CastleWindsor`\nAutoFac** - `install-package Akka.DI.AutoFac`\nRead the [full Dependency Injection with Akka.NET documentation](http://getakka.net/wiki/Dependency%20injection \"Dependency Injection with Akka.NET\") here.**\n__Persistent Actors with Akka.Persistence (Alpha)__. Core contributor **[@Horusiath](https://github.com/Horusiath)** ported the majority of Akka's Akka.Persistence and Akka.Persistence.TestKit modules.\n> Even in the core Akka project these modules are considered to be \"experimental,\" but the goal is to provide actors with a way of automatically saving and recovering their internal state to a configurable durable store - such as a database or filesystem.\nAkka.Persistence also introduces the notion of *reliable delivery* of messages, achieved through the `GuaranteedDeliveryActor`.\nAkka.Persistence also ships with an FSharp API out of the box, so while this package is in beta you can start playing with it either F# or C# from day one.\nIf you want to play with Akka.Persistence, please install any one of the following packages:\nAkka.Persistence** - `install-package Akka.Persistence -pre`\nAkka.Persistence.FSharp** - `install-package Akka.Persistence.FSharp -pre`\nAkka.Persistence.TestKit** - `install-package Akka.Persistence.TestKit -pre`\nRead the [full Persistent Actors with Akka.NET documentation](http://getakka.net/wiki/Persistence \"Persistent Actors with Akka.NET\") here.**\n__Remote Deployment of Routers and Routees__. You can now remotely deploy routers and routees via configuration, like so:\nDeploying _routees_ remotely via `Config`**:\n\tactor.deployment {\n\t    /blub {\n\t      router = round-robin-pool\n\t      nr-of-instances = 2\n\t      target.nodes = [\"\"akka.tcp://${sysName}@localhost:${port}\"\"]\n\t    }\n\t}\n\tvar router = masterActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>()), \"blub\");\nWhen deploying a router via configuration, just specify the `target.nodes` property with a list of `Address` instances for each node you want to deploy your routees.\n> NOTE: Remote deployment of routees only works for `Pool` routers.\nDeploying _routers_ remotely via `Config`**:\n\tactor.deployment {\n\t    /blub {\n\t      router = round-robin-pool\n\t      nr-of-instances = 2\n\t      remote = \"\"akka.tcp://${sysName}@localhost:${port}\"\"\n\t    }\n\t}\n\tvar router = masterActorSystem.ActorOf(Props.Create<Echo>().WithRouter(FromConfig.Instance), \"blub\");\nWorks just like remote deployment of actors.\nIf you want to deploy a router remotely via explicit configuration, you can do it in code like this via the `RemoteScope` and `RemoteRouterConfig`:\nDeploying _routees_ remotely via explicit configuration**:\nvar intendedRemoteAddress = Address.Parse(\"akka.tcp://${sysName}@localhost:${port}\"\n.Replace(\"${sysName}\", sysName)\n.Replace(\"${port}\", port.ToString()));\nvar router = myActorSystem.ActorOf(new RoundRobinPool(2).Props(Props.Create<Echo>())\n.WithDeploy(new Deploy(\n\t\tnew RemoteScope(intendedRemoteAddress.Copy()))), \"myRemoteRouter\");\nDeploying _routers_ remotely via explicit configuration**:\nvar intendedRemoteAddress = Address.Parse(\"akka.tcp://${sysName}@localhost:${port}\"\n.Replace(\"${sysName}\", sysName)\n.Replace(\"${port}\", port.ToString()));\nvar router = myActorSystem.ActorOf(\n\t\tnew RemoteRouterConfig(\n\t\tnew RoundRobinPool(2), new[] { new Address(\"akka.tcp\", sysName, \"localhost\", port) })\n.Props(Props.Create<Echo>()), \"blub2\");\nImproved Serialization and Remote Deployment Support**. All internals related to serialization and remote deployment have undergone vast improvements in order to support the other work that went into this release.\nPluggable Actor Creation Pipeline**. We reworked the plumbing that's used to provide automatic `Stash` support and exposed it as a pluggable actor creation pipeline for local actors.\nThis release adds the `ActorProducerPipeline`, which is accessible from `ExtendedActorSystem` (to be able to configure by plugins) and allows you to inject custom hooks satisfying following interface:\ninterface IActorProducerPlugin {\n\t    bool CanBeAppliedTo(ActorBase actor);\n\t    void AfterActorCreated(ActorBase actor, IActorContext context);\n\t    void BeforeActorTerminated(ActorBase actor, IActorContext context);\n}\n- **CanBeAppliedTo** determines if plugin can be applied to specific actor instance.\n- **AfterActorCreated** is applied to actor after it has been instantiated by an `ActorCell` and before `InitializableActor.Init` method will (optionally) be invoked.\n- **BeforeActorTerminated** is applied before actor terminates and before `IDisposable.Dispose` method will be invoked (for disposable actors) - **auto handling disposable actors is second feature of this commit**.\nFor common use it's better to create custom classes inheriting from `ActorProducerPluginBase` and `ActorProducerPluginBase<TActor>` classes.\nPipeline itself provides following interface:\nclass ActorProducerPipeline : IEnumerable<IActorProducerPlugin> {\n\t    int Count { get; } // current plugins count - 1 by default (ActorStashPlugin)\n\t    bool Register(IActorProducerPlugin plugin)\n\t    bool Unregister(IActorProducerPlugin plugin)\n\t    bool IsRegistered(IActorProducerPlugin plugin)\n\t    bool Insert(int index, IActorProducerPlugin plugin)\n}\n- **Register** - registers a plugin if no other plugin of the same type has been registered already (plugins with generic types are counted separately). Returns true if plugin has been registered.\n- **Insert** - same as register, but plugin will be placed in specific place inside the pipeline - useful if any plugins precedence is required.\n- **Unregister** - unregisters specified plugin if it has been found. Returns true if plugin was found and unregistered.\n- **IsRegistered** - checks if plugin has been already registered.\nBy default pipeline is filled with one already used plugin - `ActorStashPlugin`, which replaces stash initialization/unstashing mechanism used up to this moment.\nMultiNodeTestRunner and Akka.Remote.TestKit**. The MultiNodeTestRunner and the Multi Node TestKit (Akka.Remote.TestKit) underwent some drastic changes in this update. They're still not quite ready for public use yet, but if you want to see what the experience is like you can [clone the Akka.NET Github repository](https://github.com/akkadotnet/akka.net) and run the following command:\n````\nC:\\akkadotnet> .\\build.cmd MultiNodeTests\n````\nThis will automatically launch all `MultiNodeSpec` instances found inside `Akka.Cluster.Tests`. We'll need to make this more flexible to be able to run other assemblies that require multinode tests in the future.\nThese tests are not enabled by default in normal build runs, but they will at some point in the future.\nHere's a sample of the output from the console, to give you a sense of what the reporting looks like:\n![image](https://cloud.githubusercontent.com/assets/326939/6075685/5f7c56b2-ad8c-11e4-9d93-8216a8cbabaf.png)\nThe MultiNodeTestRunner uses XUnit internally and will dynamically deploy as many processes are needed to satisfy any individual test. Has been tested with up to 6 processes.",
  "requireLicenseAcceptance": false,
  "title": "Akka.Persistence.FSharp - BETA",
  "version": "0.8.0-pre1502120115",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.12.01.37.09/akka.persistence.fsharp.0.8.0-pre1502120115.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.12.01.37.09/akka.persistence.fsharp.0.8.0-pre1502120115.json#dependencygroup/akka.persistence",
          "@type": "PackageDependency",
          "id": "Akka.Persistence",
          "range": "[0.8.0-pre1502120115, )"
        }
      ]
    }
  ],
  "tags": [
    "akka",
    "actors",
    "actor",
    "model",
    "Akka",
    "concurrency",
    "F#",
    "FSharp",
    "persistence",
    "eventsource"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}