{
  "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "MLL",
  "catalog:commitId": "7e70e8a2-08cc-4a30-85c0-34a1f8724f5b",
  "catalog:commitTimeStamp": "2024-07-26T08:53:31.3508243Z",
  "copyright": "MLL",
  "created": "2024-07-26T08:37:53.37Z",
  "deprecation": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#deprecation",
    "reasons": [
      "Legacy",
      "CriticalBugs"
    ]
  },
  "description": "原生Socket实现用于TCP监听 TCPServer监听 UDP监听 HTTP 监听\n\n\n使用方式：\n\n```\n //TCP监听\n var listener = new TCPServer(2020);\n listener.StartListen(s => {\n     s.OnConnection = e => Console.WriteLine($@\"OnConnection：{e.RemoteEndPoint}\");\n     s.OnReceived = (e, data) =>\n     {\n         Random random = new Random();\n         int randomNum = random.Next(0, 1000000);\n         s.Send(Encoding.UTF8.GetBytes($@\"ok>{s.RemoteEndPoint.ToString()}>>{randomNum}\"));\n         Console.WriteLine($@\"OnData：{e.RemoteEndPoint}，data：{Encoding.UTF8.GetString(data)}\");\n         };\n     s.OnClosed = e => Console.WriteLine($@\"OnClosed：{e.RemoteEndPoint}\");\n     s.OnError = (conn, str, e) => Console.WriteLine($@\"{conn.OnConnection} {str}：{e.Message}\");\n });\n\n //UDP监听\n var UDPlistener = new UDPServer(2020);\n UDPlistener.StartListen(s => {\n     s.OnReceived = (e, data) =>\n     {\n         Random random = new Random();\n         int randomNum = random.Next(0, 1000000);\n         s.Send(s.RemoteEndPoint,Encoding.UTF8.GetBytes($@\"ok>{s.RemoteEndPoint.ToString()}>>{randomNum}\"));\n         Console.WriteLine($@\"UDP OnData：{e.RemoteEndPoint}，data：{Encoding.UTF8.GetString(data)}\");\n     };\n     s.OnError = (conn, str, e) => Console.WriteLine($@\"{conn.RemoteEndPoint.ToString} {str}：{e.Message}\");\n });\n\n//HTTP监听：\n\npublic Class ClassName{\n  public ClassName()\n  {\n     var httplistener = new HTTPServer(2021);\n      httplistener.StartListen();\n  }\n  [Router(\"/start1\", MethodEnum.GET)]\n   public static void Tests(HTTPRequest body) {\n         Console.WriteLine(\"start\");\n     }\n     \n\n}\n或者：\npublic Class ClassName{\n  public ClassName()\n  {\n     var httplistener = new HTTPServer(2021);\n        httplistener.SetPath(MethodEnum.GET, \"/start\");\n        httplistener.SetPath(MethodEnum.POST, \"/start\");\n      httplistener.StartListen(s =>{\n       s.OnReceived = (e, Req) =>\n    {\n        Random random = new Random();\n        int randomNum = random.Next(0, 1000000);\n        s.Send($@\"ok>{s.RemoteEndPoint.ToString()}>>{randomNum}\");\n       Console.WriteLine($@\"OnData：{e.RemoteEndPoint}，data：{Req.Body}\");\n    };\n      });\n  }\n  [Router(\"/start1\", MethodEnum.GET)]\n   public static void Tests(HTTPRequest body) {\n         Console.WriteLine(\"start\");\n     }\n}\n```",
  "id": "ServerListerner",
  "isPrerelease": false,
  "lastEdited": "2024-07-26T08:53:01.86Z",
  "listed": false,
  "packageHash": "2oPXaEYF4OggK3MDturzRc8ehn+M4BueCzdt6vOBLcMomH6NQtxORqc2IojZK+nbBjv6p/NsY2f/Z6lZaAkqtw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 31397,
  "published": "1900-01-01T00:00:00Z",
  "readmeFile": "使用方式.md",
  "releaseNotes": "使用方式：\n\n```\n //TCP监听\n var listener = new TCPServer(2020);\n listener.StartListen(s => {\n     s.OnConnection = e => Console.WriteLine($@\"OnConnection：{e.RemoteEndPoint}\");\n     s.OnReceived = (e, data) =>\n     {\n         Random random = new Random();\n         int randomNum = random.Next(0, 1000000);\n         s.Send(Encoding.UTF8.GetBytes($@\"ok>{s.RemoteEndPoint.ToString()}>>{randomNum}\"));\n         Console.WriteLine($@\"OnData：{e.RemoteEndPoint}，data：{Encoding.UTF8.GetString(data)}\");\n         };\n     s.OnClosed = e => Console.WriteLine($@\"OnClosed：{e.RemoteEndPoint}\");\n     s.OnError = (conn, str, e) => Console.WriteLine($@\"{conn.OnConnection} {str}：{e.Message}\");\n });\n\n //UDP监听\n var UDPlistener = new UDPServer(2020);\n UDPlistener.StartListen(s => {\n     s.OnReceived = (e, data) =>\n     {\n         Random random = new Random();\n         int randomNum = random.Next(0, 1000000);\n         s.Send(s.RemoteEndPoint,Encoding.UTF8.GetBytes($@\"ok>{s.RemoteEndPoint.ToString()}>>{randomNum}\"));\n         Console.WriteLine($@\"UDP OnData：{e.RemoteEndPoint}，data：{Encoding.UTF8.GetString(data)}\");\n     };\n     s.OnError = (conn, str, e) => Console.WriteLine($@\"{conn.RemoteEndPoint.ToString} {str}：{e.Message}\");\n });\n\n//HTTP监听：\n\npublic Class ClassName{\n  public ClassName()\n  {\n     var httplistener = new HTTPServer(2021);\n      httplistener.StartListen();\n  }\n  [Router(\"/start1\", MethodEnum.GET)]\n   public static void Tests(HTTPRequest body) {\n         Console.WriteLine(\"start\");\n     }\n     \n\n}\n或者：\npublic Class ClassName{\n  public ClassName()\n  {\n     var httplistener = new HTTPServer(2021);\n        httplistener.SetPath(MethodEnum.GET, \"/start\");\n        httplistener.SetPath(MethodEnum.POST, \"/start\");\n      httplistener.StartListen(s =>{\n       s.OnReceived = (e, Req) =>\n    {\n        Random random = new Random();\n        int randomNum = random.Next(0, 1000000);\n        s.Send($@\"ok>{s.RemoteEndPoint.ToString()}>>{randomNum}\");\n       Console.WriteLine($@\"OnData：{e.RemoteEndPoint}，data：{Req.Body}\");\n    };\n      });\n  }\n  [Router(\"/start1\", MethodEnum.GET)]\n   public static void Tests(HTTPRequest body) {\n         Console.WriteLine(\"start\");\n     }\n}\n```",
  "repository": "",
  "title": "ServerListener",
  "verbatimVersion": "1.0.4",
  "version": "1.0.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#dependencygroup/.netstandard2.1",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#dependencygroup/.netstandard2.1/system.text.json",
          "@type": "PackageDependency",
          "id": "System.Text.Json",
          "range": "[8.0.4, )"
        }
      ],
      "targetFramework": ".NETStandard2.1"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#ServerListerner.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1061,
      "fullName": "ServerListerner.nuspec",
      "length": 5487,
      "name": "ServerListerner.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#lib/netstandard2.1/ServerListerner.dll",
      "@type": "PackageEntry",
      "compressedLength": 14250,
      "fullName": "lib/netstandard2.1/ServerListerner.dll",
      "length": 35328,
      "name": "ServerListerner.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.md",
      "@type": "PackageEntry",
      "compressedLength": 652,
      "fullName": "使用方式.md",
      "length": 2308,
      "name": "使用方式.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2024.07.26.08.53.31/serverlisterner.1.0.4.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 12930,
      "fullName": ".signature.p7s",
      "length": 12930,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "TCP监听",
    "TCPServer",
    "UDP监听",
    "HTTP监听"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}