{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.04.42.42/unmanagedexports.1.2.4.23262.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Robert Giesecke",
  "catalog:commitId": "0c571d58-2388-4e57-a9f2-7dabc820013e",
  "catalog:commitTimeStamp": "2015-02-03T04:42:42.1889241Z",
  "created": "2013-03-11T12:20:49.877Z",
  "description": "A set of compile-time libraries (nothing to deploy) and a build task that enable you to export functions from managed code to native applications.\n      That means, you can create plugins in a managed language like C# or F# for native applications that only have a C-Api (like Notepad++).\n      The nuget package is all you need. Just mark your methods with [DllExport] and build for x86, x64 or ia64.\n\n      Hints:\n      - You have to set your platform target to either x86, ia64 or x64. AnyCPU assemblies cannot export functions.\n      - The export name defaults to the method name and the calling convention to stdcall. If that's all what you want, you can just use [DllExport] without parameters.\n      - You cannot put your exports in generic types or export generic methods. (The CLR wouldn't know what type parameters to use)",
  "id": "UnmanagedExports",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/mit-license.php",
  "packageHash": "Au546V+plF7fkgb4mJTrGNxQ1Ut2Ps3adc7mOIUe6yethgegKMF+Wd3wK1mQbfCPrZQe7QqmcgDvsQ1vA4qnEw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 248623,
  "projectUrl": "https://sites.google.com/site/robertgiesecke/Home/uploads/unmanagedexports",
  "published": "2013-03-11T12:20:49.877Z",
  "references": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.04.42.42/unmanagedexports.1.2.4.23262.json#references",
    "group": {
      "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.04.42.42/.json#gpref",
      "reference": {
        "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.04.42.42/unmanagedexports.1.2.4.23262.json#gpref/ref/rgiesecke.dllexport.metadata.dll",
        "file": "RGiesecke.DllExport.Metadata.dll"
      }
    }
  },
  "releaseNotes": "- The Metadata assemby is signed now. (So you can create signed assemblies with exports)\n      - Placing [DllExport] on non-static methods will now yield an error.\n      - Placing [DllExport] on methods in generic types (or types nested in generic types) will yield an error.\n      - Errors regarding lib.exe will no longer break the build.\n      - Added support for generic return types. Even the most esotheric corner cases (obfuscated types) should work.\n      - Made the code that checks method names and class names much more resilient and faster.\n      - Most messages are localizable now (and I translated them to German).",
  "requireLicenseAcceptance": false,
  "summary": "Adds the ability to declare unmanaged function exports.\n      IOW: the exact opposite of how DllImport works.",
  "title": "Unmanaged Exports (DllExport for .Net)",
  "version": "1.2.4.23262",
  "tags": [
    "dllexport",
    "unmanaged",
    "exports",
    "export"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}