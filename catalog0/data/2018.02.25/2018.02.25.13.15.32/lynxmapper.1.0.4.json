{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "gromanev",
  "catalog:commitId": "6d6bd31a-f23c-49a1-8dcf-db023f1d00a2",
  "catalog:commitTimeStamp": "2018-02-25T13:15:32.3175844Z",
  "copyright": "gromanev",
  "created": "2018-02-25T13:10:53.693Z",
  "description": "Faster Mapper (Transformator) for .NET Core 2 (.NET Standart 2)\n\n# LynxMapper\n[![Travis](https://img.shields.io/travis/gromanev/LynxMapper.svg)](https://travis-ci.org/gromanev/LynxMapper)\n[![NuGet](https://img.shields.io/nuget/v/LynxMapper.svg)](https://www.nuget.org/packages/LynxMapper/)\n[![license](https://img.shields.io/github/license/gromanev/lynxmapper.svg)](https://github.com/gromanev/LynxMapper)\n[![GitHub repo size in bytes](https://img.shields.io/github/repo-size/gromanev/lynxmapper.svg)](https://github.com/gromanev/LynxMapper)\n\nFaster Mapper (Transformator) for .NET Core 2 (.NET Standart 2)\n\n## Description\n\nA simple library for comparing models (mapping) to .NET Core for use in real production.\n\nMapping is carried out with the help of special methods - transformers (transformators), which gives greater flexibility in use for solving real problems.\n\n## Install\n\nInstall LynxMapper and it's dependencies using NuGet.\n\n`Install-Package LynxMapper`\n\nAll versions can be found [here](https://www.nuget.org/packages/LynxMapper/)\n\n## Use\n\nUse LinxMapper is very simple.\n\n### 1. Create Transformator:\n\n#### 1.1 Create Transformator Abstractions:\n```csharp\nusing LynxMapper;\n\nnamespace Services.Abstractions.Transformators\n{\n    public interface IUserTransformator: ILynxTransformator\n    {\n        UserViewModel ToUserViewModel(Users user);\n    }\n}\n```\n\n#### 1.2 Create Transformator Implementations:\n```csharp\nnamespace Services.Implementations.Transformators\n{\n    public class UserTransformator : IUserTransformator\n    {\n        public UserViewModel ToUserViewModel(Users user)\n        {\n            try\n            {\n                return new UserViewModel\n                {\n                    Name = $\"{user.LastName} {user.FirstName} {user.Patronimic}\",\n                    Age = (int) ((DateTime.Now - user.YearOfBirth).TotalDays / 365.2425)\n                };\n            }\n            catch (Exception)\n            {\n                return null;\n            }\n        }\n    }\n}\n```\n\n### 2. Register Transformators in Startup.cs:\n```csharp\npublic class Startup\n{\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddTransient<IUserTransformator, UserTransformator>();\n        \n        var build = services.BuildServiceProvider();\n        \n        services.AddLynxMapper(options =>\n        {\n            options.RegisterTransformator<UserViewModel, Users>(build.GetService<IUserTransformator>().ToUserViewModel);\n        });\n    }\n}\n```\n\n### 3. Use it!\n```csharp\nusing LynxMapper;\n\nnamespace SimpleWebApi.Controllers\n{\n    [Produces(\"application/json\")]\n    [Route(\"api/users/[action]\")]\n    public class UserController: Controller\n    {\n        private readonly IUserService _userService;\n        private readonly ILynxMapper _mapper;\n\n        public TripController(ILynxServiceProvider LynxServiceProvider, ILynxMapper mapper)\n        {\n            _userService = LynxServiceProvider.UserService;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// Get list all users\n        /// </summary>\n        /// <returns></returns>\n        [HttpGet]\n        [Produces(\"application/json\", Type = typeof(ICollection<UserViewModel>))]\n        public async Task<IActionResult> GetAllUsers()\n        {\n            try\n            {\n                var users = await _userService.GetAllUsersAsync();\n\n                var result = users.Select(x => _mapper.Map<UserViewModel, Users>(x)).ToList();\n\n                return Ok(result);\n            }\n            catch (Exception)\n            {\n                return BadRequest(\"Users bad request.\");\n            }\n        }\n    }\n}\n```",
  "iconUrl": "https://avatars0.githubusercontent.com/u/16578024",
  "id": "LynxMapper",
  "isPrerelease": false,
  "lastEdited": "2018-02-25T13:13:54.92Z",
  "licenseUrl": "https://github.com/gromanev/LynxMapper/blob/master/LICENSE",
  "listed": true,
  "packageHash": "Jh9xkCBMLFZ8mjr0wmtni6+H+rvKbGB82Dgdmcs399HUE7RUKTabVKCuGcHVNhiZ6UbWtDzl3HFOZK9y7M0Hfw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 10481,
  "projectUrl": "https://github.com/gromanev/LynxMapper",
  "published": "2018-02-25T13:10:53.693Z",
  "repository": "",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.4",
  "version": "1.0.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#dependencygroup/.netstandard2.0/microsoft.aspnetcore.http.abstractions",
          "@type": "PackageDependency",
          "id": "Microsoft.AspNetCore.Http.Abstractions",
          "range": "[2.0.1, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#dependencygroup/.netstandard2.0/microsoft.extensions.dependencyinjection",
          "@type": "PackageDependency",
          "id": "Microsoft.Extensions.DependencyInjection",
          "range": "[2.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#dependencygroup/.netstandard2.0/microsoft.extensions.dependencyinjection.abstractions",
          "@type": "PackageDependency",
          "id": "Microsoft.Extensions.DependencyInjection.Abstractions",
          "range": "[2.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#dependencygroup/.netstandard2.0/microsoft.extensions.options.configurationextensions",
          "@type": "PackageDependency",
          "id": "Microsoft.Extensions.Options.ConfigurationExtensions",
          "range": "[2.0.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#LynxMapper.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1777,
      "fullName": "LynxMapper.nuspec",
      "length": 5267,
      "name": "LynxMapper.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.02.25.13.15.32/lynxmapper.1.0.4.json#lib/netstandard2.0/LynxMapper.dll",
      "@type": "PackageEntry",
      "compressedLength": 5845,
      "fullName": "lib/netstandard2.0/LynxMapper.dll",
      "length": 17920,
      "name": "LynxMapper.dll"
    }
  ],
  "tags": [
    "mapper",
    "transformator",
    "netstandart20",
    "netcore",
    "net-core",
    "asp",
    "asp-net-core",
    "mapping",
    "model",
    "modelmapper"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}