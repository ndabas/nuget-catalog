{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.07.10.04.41/classical.0.1.11.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Doug Rubino, Chris Klimas",
  "catalog:commitId": "fa1e67cc-d61e-46c6-98e9-c7a32811bb0a",
  "catalog:commitTimeStamp": "2015-02-07T10:04:41.4645557Z",
  "copyright": "Copyright 2014",
  "created": "2014-12-21T02:21:04.317Z",
  "description": "A TypeScript Base Class Library.",
  "iconUrl": "http://classical-resources.azurewebsites.net/images/classicallogo.png",
  "id": "Classical",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "http://opensource.org/licenses/Apache-2.0",
  "packageHash": "5QxGttKFAb1Jasfpun2Ac7HtB1i53qAXj6n4dAc4NwZc1BycbnJK6kFd/wTKsjzW4pb/CB077yFd+JZBuQqBvg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 27914,
  "projectUrl": "https://github.com/drubino/Classical",
  "published": "2014-12-21T02:21:04.317Z",
  "releaseNotes": "- The Watch.js polyfill was added to classical.js.\n- The MutationObserver.js polyfill was added to classical.js\n- JsMin was used to minify classical.js\n- Added Intro.ts for getting started\n- Added a minified version of classical.js: classical.min.js\n- Added two methods to the Type class in Reflection\n- getFieldsOf\n- getFieldOf\n- All tests continue to pass\n\n//Write your first few lines of Classical.js\nmodule Classical.Introduction {\n\n    import Assert = Classical.Assert;\n    import Expression = Classical.Expression;\n    import u = Utilities;\n    import r = Classical.Reflection;\n    import e = Classical.Events;\n    import b = Classical.Binding;\n    import cc = Classical.Collections;\n    import bc = Classical.Binding.Collections;\n\n    //1. Read through the Classical.js code below\n    //2. Inspect the results in the browser console\n    //3. Explore each of the modules above using intellisense\n    //4. Have fun!\n\n    //Array extensions\n    export var array = []\n    .add(0).add(0.5).add(1)\n    .addRange([1.5, 2, 2.5])\n    .set(6, 3)\n    .query()\n    .concat(\n    cc.Enumerable\n    .range(3.5, .5, 10))\n    .where(x => x < 5)\n    .select(x => Math.round(x * 2))\n    .array();\n\n    //Query Comprehension\n    export var aggregation =\n        array.query()\n        .sum(x =>\n            Math.pow(Math.sin(x), 2) +\n            Math.pow(Math.cos(x), 2)) /\n        array.length;\n\n    //Query Information\n    export var queryType = typeOf(cc.Queryable);\n    export var queryMethods = queryType\n        .getMethods(r.Modifier.Public, r.Modifier.Instance)\n        .dictionary(\n            m => m.name,\n            m => u.format('{0}({1})',\n                m.name,\n                m.getParameters()\n                .select(p => p.name)\n                .array()));\n\n    //Reflection Classes\n    export var reflectionModule = moduleOf(r.Type);\n    export var reflectionClasses = reflectionModule\n        .getTypes().select(t => t.name)\n        .array();\n\n    //Type Members\n    export var typeType = queryType.getType();\n    export var typeMembers = typeType\n        .getProperties(r.Modifier.Public, r.Modifier.Instance, r.Modifier.Static)\n        .select(m => m.name)\n        .array();\n}",
  "requireLicenseAcceptance": false,
  "summary": "A TypeScript Base Class Library with a powerful set of tools for constructing Framework-Scale JavaScript.",
  "title": "Classical.js",
  "version": "0.1.11",
  "tags": [
    "TypeScript",
    "JavaScript",
    "Tools",
    "ES6",
    "BCL"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}