{
  "@id": "https://api.nuget.org/v3/catalog0/data/2020.06.12.08.44.24/bnaya.csharp.asyncextensions.1.0.27.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Bnaya.CSharp.AsyncExtensions",
  "catalog:commitId": "7c7e9342-d606-4773-b4cd-27a49cfcb4b3",
  "catalog:commitTimeStamp": "2020-06-12T08:44:24.7849005Z",
  "copyright": "Bnaya Eshet Â©",
  "created": "2020-06-12T08:41:11.517Z",
  "description": "Useful extensions contribution by Bnaya Eshet\nBlog: http://blogs.microsoft.co.il/bnaya/\n\nSource Code:\nhttps://github.com/bnayae/Bnaya.CSharp.AsyncExtensions\n\n\n# NuGet\nthis library available on NuGet via\nInstall-Package Bnaya.CSharp.AsyncExtensions\n\n## This library have the following godies:\n* Exception Handlinfg\n  * ThrowAll (produce AggregateException when waiting on Task.WhenAll)\n  * Format (format async exception into friendlier callstack represantation)\n* Timeout (will apply timeout semantic for any Task)\n  * WithTimeout (will throw on timeout)\n  * IsTimeoutAsync (will return indication without throwing, ideal for SLA checks [prctice: check and produce warning])\n* Cancellation\n  * CancelSafe (will run the CancellationTokenSource.Cancel within try catch and prevent unexpected side effect which can happen when cancellation token registration throw)\n* Frendly async locking facilities (which can replace the clasical lock statement).\n  * Extensions\n    * TryAcquireAsync\n    * AcquireAsync\n  * Instance-able\n    * AsyncLock \n* WhenN: use to complete task aftern n task succeed\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "iconUrl": "https://github.com/bnayae/BeyondAsyncAwait/blob/master/20. Cool Extensions/async-ex.png?raw=true",
  "id": "Bnaya.CSharp.AsyncExtensions",
  "isPrerelease": false,
  "lastEdited": "2020-06-12T08:44:15.467Z",
  "licenseUrl": "https://www.apache.org/licenses/LICENSE-2.0",
  "listed": true,
  "packageHash": "O0F/pr0JRpc/TmhaMJOknrIHtmuppROOoKYXxIJxGu+g92gawf6Fu7cAZkGep45lUIsz8NwKoDU+FDcXWoMIhQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 35165,
  "projectUrl": "http://blogs.microsoft.co.il/bnaya/",
  "published": "2020-06-12T08:41:11.517Z",
  "releaseNotes": "Release 1.0.27 (Breaking Changes)\nRemove obsolete api of exception fomatting.\n\nAdd FormatLazy which is better citizen for modern logger scenatios.\nIt will do the formatting on the ToString time i.e won't format logs which was filtered out.\n\nexample:\nlogger.LogError(ex.FormatLazy(), \"Fault execution\");",
  "repository": "",
  "requireLicenseAcceptance": true,
  "verbatimVersion": "1.0.27",
  "version": "1.0.27",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.06.12.08.44.24/bnaya.csharp.asyncextensions.1.0.27.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2020.06.12.08.44.24/bnaya.csharp.asyncextensions.1.0.27.json#dependencygroup/.netstandard2.0/system.threading.tasks.extensions",
          "@type": "PackageDependency",
          "id": "System.Threading.Tasks.Extensions",
          "range": "[4.5.0, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.06.12.08.44.24/bnaya.csharp.asyncextensions.1.0.27.json#Bnaya.CSharp.AsyncExtensions.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1573,
      "fullName": "Bnaya.CSharp.AsyncExtensions.nuspec",
      "length": 3061,
      "name": "Bnaya.CSharp.AsyncExtensions.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.06.12.08.44.24/bnaya.csharp.asyncextensions.1.0.27.json#lib/netstandard2.0/Bnaya.CSharp.AsyncExtensions.dll",
      "@type": "PackageEntry",
      "compressedLength": 21455,
      "fullName": "lib/netstandard2.0/Bnaya.CSharp.AsyncExtensions.dll",
      "length": 52224,
      "name": "Bnaya.CSharp.AsyncExtensions.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2020.06.12.08.44.24/bnaya.csharp.asyncextensions.1.0.27.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9462,
      "fullName": ".signature.p7s",
      "length": 9462,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "async",
    "Parallel",
    "await",
    "task",
    "timeout",
    "deadlock",
    "cancel",
    "cancellation",
    "bnaya"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}