{
  "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.10.17.16.58/codetiger.codeanalysis.0.8.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Chris Dahlberg",
  "catalog:commitId": "c7245a23-803d-4f07-b152-84d7ee2cc0a5",
  "catalog:commitTimeStamp": "2017-09-10T17:16:58.1936449Z",
  "copyright": "Copyright 2015 Â© Chris Dahlberg",
  "created": "2017-09-10T17:14:09.19Z",
  "description": "General purpose Roslyn-based static code analysis rules for C#.\n\nWhile not intended to be an exact replacement for StyleCop, many of the individual diagnostics are similar to StyleCop rules.",
  "developmentDependency": "true",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.10.17.16.58/codetiger.codeanalysis.0.8.0.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://www.codetiger.net/images/tigerpaw64.png",
  "id": "CodeTiger.CodeAnalysis",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2017-09-10T17:16:18.29Z",
  "licenseUrl": "https://github.com/csdahlberg/CodeTiger.CodeAnalysis/wiki/License",
  "listed": true,
  "minClientVersion": "2.8",
  "packageHash": "MmwY7DP4RC0paFa3lCiHLiYzewsxPnNVwdzoF5mHH7UDEE6TE0SZiYN9aT+hVbII+7ucDYnNV9+EC5LLgw/Rsw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 47597,
  "projectUrl": "https://github.com/csdahlberg/CodeTiger.CodeAnalysis",
  "published": "2017-09-10T17:14:09.19Z",
  "releaseNotes": "Fixed CT1002 to allow hiding base methods with a return type of 'object'.\nFixed two possible NullReferenceExceptions in ExceptionUsageAnalyzer.\nModified all analyzers to disable analysis on generated code and enable concurrent execution.\nChanged InitializationPerformanceAnalyzer to only flag variables that are always (instead of sometimes) initialized twice.\nModified CT1702 to report non-interface type names prefixed with 'I'.\nAdded CT1007 to identify types that have finalizers but no unmanaged state.\nAdded CT1008 to identify empty finalizers.\nAdded CT1701 to identify files without pascal-cased names.\nAdded CT1704 to identify incorrectly-cased private field names.\nAdded CT1705 to identify incorrectly-cased event names.\nAdded CT1706 to identify incorrectly-cased delegate names.\nAdded CT1707 to identify incorrectly-cased property names.\nAdded CT1708 to identify incorrectly-cased method names.\nAdded CT1709 to identify incorrectly-cased enumeration member names.\nAdded CT1710 to identify incorrectly-cased variable names.\nAdded CT1711 to identify incorrectly-cased interface names.\nAdded CT1714 to identify when property names begin with the name of the containing type.\nAdded CT1715, CT1716, and CT1717 to identify incorrectly-cased, non-descriptive, or incorrectly-suffixed generic type parameter names.\nAdded CT1718 to identify property names prefixed with Get or Set.\nAdded CT1719 and CT1720 to identify class names prefixed or suffixed with 'Abstract' or 'Base'.\nAdded CT1721 and CT1722 to identify type names with incorrect 'Attribute' suffix usage.\nAdded CT1723 and CT1724 to identify type names with incorrect 'Exception' suffix usage.\nAdded CT1725 and CT1726 to identify type names with incorrect 'EventArgs' suffix usage.\nAdded CT1727 and CT1728 to identify method names with incorrect use of the `Async` suffix.\nAdded CT1729 to identify source file names that don't match the primary type name in the file.\nAdded CT2203 to identify usage of Environment.Exit.\nAdded CT3113 to identify literals on the left side of comparison operators.\nAdded CT3114 to identify constants on the left side of comparison operators.\nAdded CT3500 to identify namespaces defined on a single line.\nAdded CT3501 to identify braces for multi-line elements that are not on a new line.\nAdded CT3502 to identify types that are defined on a single line.\nAdded CT3503 to identify auto-properties defined on multiple lines.\nAdded CT3504 to identify non-auto-properties defined on a single line.\nAdded CT3505 to identify trivial accessors defined on multiple lines.\nAdded CT3506 to identify non-trivial accessors defined on a single line.\nAdded CT3507 to identify methods defined on a single line.\nAdded CT3508 to identify Try statements defined on a single line.\nAdded CT3509 to identify non-trivial catch clauses defined on a single line.\nAdded CT3510 to identify catch clauses that do not begin on a new line.\nAdded CT3511 to identify finally clauses defined on a single line.\nAdded CT3512 to identify finally clauses that do not begin on a new line.\nAdded CT3513 to identify if statements defined on a single line.\nAdded CT3514 to identify else clauses defined on a single line.\nAdded CT3515 to identify else clauses that do not begin on a new line.\nAdded CT3516 to identify for statements defined on a single line.\nAdded CT3517 to identify foreach statements defined on a single line.\nAdded CT3518 to identify switch statements defined on a single line.\nAdded CT3519 to identify while statements defined on a single line.\nAdded CT3520 to identify do statements defined on a single line.\nAdded CT3521 to identify using statements defined on a single line.\nAdded CT3522 to identify fixed statements defined on a single line.\nAdded CT3523 to identify lock statements defined on a single line.\nAdded CT3524 to identify non-trivial switch sections defined on a single line.\nAdded CT3525 to identify code blocks without braces.\nAdded CT3526 to identify multiple attributes declared in the same attribute list.\nAdded CT3527 to identify multiple attribute lists declared on the same line.\nAdded CT3530 to identify multi-line expressions that are split after a dot or member access token.\nAdded CT3531 to identify lines of code that exceed the maximum length.",
  "requireLicenseAcceptance": false,
  "summary": "Roslyn-based static code analysis for C# projects.",
  "title": "CodeTiger Code Analysis",
  "verbatimVersion": "0.8.0",
  "version": "0.8.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.10.17.16.58/codetiger.codeanalysis.0.8.0.json#CodeTiger.CodeAnalysis.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1784,
      "fullName": "CodeTiger.CodeAnalysis.nuspec",
      "length": 5691,
      "name": "CodeTiger.CodeAnalysis.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.10.17.16.58/codetiger.codeanalysis.0.8.0.json#analyzers/dotnet/cs/CodeTiger.CodeAnalysis.dll",
      "@type": "PackageEntry",
      "compressedLength": 42958,
      "fullName": "analyzers/dotnet/cs/CodeTiger.CodeAnalysis.dll",
      "length": 122880,
      "name": "CodeTiger.CodeAnalysis.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.10.17.16.58/codetiger.codeanalysis.0.8.0.json#tools/install.ps1",
      "@type": "PackageEntry",
      "compressedLength": 400,
      "fullName": "tools/install.ps1",
      "length": 1341,
      "name": "install.ps1"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2017.09.10.17.16.58/codetiger.codeanalysis.0.8.0.json#tools/uninstall.ps1",
      "@type": "PackageEntry",
      "compressedLength": 426,
      "fullName": "tools/uninstall.ps1",
      "length": 1475,
      "name": "uninstall.ps1"
    }
  ],
  "tags": [
    "C#",
    "Static",
    "Code",
    "Analysis",
    "Roslyn",
    "Analyzers",
    "Style",
    "Format",
    "Formatting",
    "StyleCop",
    "FxCop"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}