{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.03.04.37.53/otp-sharp.1.0.4.1.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Devin Martin",
  "catalog:commitId": "b898b399-4883-4a01-89f8-1efa08aaa92a",
  "catalog:commitTimeStamp": "2015-02-03T04:37:53.4949991Z",
  "copyright": "Copyright (C) 2012 Devin Martin",
  "created": "2013-03-08T23:02:37.853Z",
  "description": "This project is depricated, switch to OtpSharp for the current version\n\n\nThis is an implementation of HOTP and TOTP which are commonly used for multi factor authentication by using a shared key between the client and the server to generate and verify one time use codes.  This library is capable of generating and verifying both TOTP and HOTP authentication codes.  The calculations in this library are known to be compatible with Google 2-Step Verification and consequently the Google Authenticator smartphone app.  It is also known to be able to generate codes for Amazon Web Services Multi Factor Authentication and Dropbox 2 step authentication.  It should work with any other service or client that is RFC compliant.\n\nThis library is released under an MIT license. No warranty is provided as to the correctness of the library and the consumer of the library assumes all risk for the use thereof, as per the MIT license.\n\nEvery effort has gone into implementing this library in accordance with the RFCs mentioned above. However it is up to the users of this library to read through the RFCs and ensure that this implementation is in accordance with the security procedures outlined therein.\n\nThe implementation includes the code calculation as well as simple verification. Persistence of the keys, secure key storage, ensuring that a single code can't be validated multiple times and other things are not a part of this library. Thus far those functions (and any others mentioned in the RFCs) are up to the consumer of this library.\n\nFor documentation please visit the project website.",
  "id": "OTP-Sharp",
  "isPrerelease": false,
  "lastEdited": "0001-01-01T00:00:00Z",
  "licenseUrl": "https://s3.amazonaws.com/OtpSharp/LICENSE.txt",
  "packageHash": "+IUNXTGfvgY0yS6Bqqq4LumQDFkMcY+1/N8ZsY0PYgnuqHNDnJ7Okfx16JhPeu+7mcpAZjb2zUY8H0lGHuf4GQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 123261,
  "projectUrl": "https://bitbucket.org/devinmartin/otp-sharp/wiki/Home",
  "published": "1900-01-01T00:00:00Z",
  "releaseNotes": "This project is depricated, switch to OtpSharp for the current version\n\n1.0.4 Changed the Protected Key API to be more explicit (may break existing direct useage of the protected key)\n\nThe protected key no longer implicitly causes side effects (destroying the plaintext key provided must be done explicitly)\n\nAdded a time correction class with experimental NTP abilities.\n\nSupport for .net 3.5 as well as client profiles with some minor limitations.\n\n1.0.3 Fixed unexpected behavior where the plaintext key provided to an HOTP or TOTP object will be scrambled.  Now it will remain intact.  Added constructor overloads to provide a protected key instead of a byte array if desired.",
  "requireLicenseAcceptance": true,
  "summary": "This project is depricated, switch to OtpSharp for the current version\n\nAn implementation of HOTP or HMAC One Time Paswords (RFC 4226) and TOTP or Timed One Time Passwords (RFC 6238) in C#.",
  "title": "OTP Sharp",
  "version": "1.0.4.1",
  "tags": [
    "authentication",
    "totp",
    "otp",
    "hotp",
    "base32",
    "multi-factor",
    "two-factor",
    "factor",
    "security",
    "login"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}