{
  "@id": "https://api.nuget.org/v3/catalog0/data/2016.03.18.11.02.45/haljsondeserializer.1.1.5.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mamadou Samba DIALLO",
  "catalog:commitId": "851237c1-f712-4396-a3d6-4525ed4aba25",
  "catalog:commitTimeStamp": "2016-03-18T11:02:45.1144272Z",
  "created": "2016-03-18T10:39:05.44Z",
  "description": "This package can deserialize any String, Stream, or StreamReader (On HAL+JSON format or not) provided by a web api response.  \nInstallation:\nOn the package console run :\nInstall-Package HALJSonDeserializer\nUsage:\nAfter installation you must include the namespace of the package where you will use it:\nusing haljson;\nSo now: suppose that you want to call a web api via \"http://localhost:8080/customer\" in your c# code and to parse it into your custom type called \"Customer\". This can be done simply as follows:\n Customer theCustomer =  HALJSonDeserializer.GetAndParse<Customer>(\"http://localhost:8080/customer\");\nFor async call you can do this:\n Customer theCustomer = await HALJSonDeserializer.GetAndParseAsync<Customer>(\"http://localhost:8080/customer\");\nIf you have to retrieve a specific customer with FirstName and LastName as Arguments:\nGetCustomerRequest arg = new GetCustomerRequest{FirstName=\"Bart\",LastName=\"Hansen\"};\nvar fullNameGet = await HALJSonDeserializer .GetAndParseAsync<GetCustomerRequestArgument, GetCustomerResponse>(\"http://localhost:8080/customer\", arg);\nWhat about the post request?\nTo post a request with parametters and receive a response you can do so:\nCreate a Class For your request arguments here \"GetFullNameRequest\" and an other Class for the response here \"GetFullNameResponse\".\nGetFullNameRequest arg = new GetFullNameRequest{FirstName=\"Bart\",LastName=\"Hansen\"};\nGetFullNameResponse fulName = await HALJSonDeserializer.PostAndParseResponseAsync<GetFullNameRequest,GetFullNameResponse>(\"http://localhost:8080/GetFullName\",arg);\n\nIf you just want to deserialize a Stream, a StreamReader or a string, there are three extension methods for them. You can do that as follows:\nCustomer  theCustomer = myStream.ToObject<Customer>();  //For a Stream\nCustomer  theCustomer = myStreamReader.ToObject<Customer>();  //For a StreamReader\nCustomer  theCustomer = myString.ToObject<Customer>(); //For a string",
  "id": "HALJSonDeserializer",
  "isPrerelease": false,
  "language": "en-US",
  "lastEdited": "2016-03-18T10:44:33.507Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "listed": true,
  "packageHash": "wsM/9EcecGwOfops+3Ybs2fCCAFiC4mHCX84vrGr+bXXc3C2cVahvhFuzNjLo6WgIuO8seyA+zSKB2DX2UC02Q==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 257078,
  "published": "2016-03-18T10:39:05.44Z",
  "requireLicenseAcceptance": false,
  "summary": "Parckage for deserializing HAL+JSon response datas",
  "title": "HALJSonDeserializer",
  "verbatimVersion": "1.1.5.3",
  "version": "1.1.5.3",
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}