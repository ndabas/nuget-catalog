{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "justim.odendaal",
  "catalog:commitId": "be67fc6f-23dc-4320-bc44-ad98fb720479",
  "catalog:commitTimeStamp": "2021-10-28T20:44:03.385552Z",
  "contentFiles": "",
  "created": "2021-10-28T01:42:55.677Z",
  "description": "# GraphQL.SQL.Builder for .NET\n[![.NET](https://github.com/jodendaal/GraphQL.SQL.Builder/actions/workflows/dotnet.yml/badge.svg?branch=main)](https://github.com/jodendaal/GraphQL.SQL.Builder/actions/workflows/dotnet.yml)\n\nSQL Query Builder Utility \n\nUseful for scenarios where dynamic SQL is required. Supports multiple condition set logic.\n\nGenerate Select, Insert, Update and Delete statements with parameters.\n\nAdditional features include : Paging, Advanced Condition Sets, Auto Parameter Naming\n\nCurrently used in  [GraphQL.SQL](https://github.com/jodendaal/GraphQL.SQL) for dynamically generating SQL statements.\n\n## Getting Started\n\n#### Install Package\n```\nInstall-Package GraphQL.SQL.Builder\n```\n\n## Simple Usage\n   ```csharp\n    public DataTable GetUser(int userId)\n    {\n        var query = new SelectQueryCommand(\"Users\", \"U\");\n        query.Field(\"UserId\", \"Id\").\n              Field(\"UserName\").\n              Field(\"Password\").\n              Condition(\"U.UserId\", ColumnOperator.Equals, query.AddParam(userId,\"UserId\"));\n        var sqlCommand = query.ToCommand();\n\n        var table = new DataTable();\n        using (var connection = new SqlConnection(\"connection_string\"))\n        {\n            connection.Open();\n            sqlCommand.Connection = connection;\n\n            using (var dataAdapter = new SqlDataAdapter(sqlCommand))\n            {\n                dataAdapter.Fill(table);\n            }\n        }\n\n        return table;\n    }\n   ```\n##### Output\n```sql\n    SELECT\n          UserId AS Id,\n          UserName,\n          Password\n    FROM Users U\n    WHERE U.UserId = @UserId\n    \n    --Parameters\n    @UserId=1\n```\n## Paging\n```csharp\n    SelectQueryCommand query = new SelectQueryCommand(\"Users\");\n    query.Field(\"UserId\").\n          Field(\"UserName\").\n          Condition(\"UserId\", ColumnOperator.Equals, query.AddParam(1,\"UserId\")).\n          Page(query.AddParam(1, \"_PageNumber\"), query.AddParam(10, \"_PageSize\"), \"UserId\");\n```    \n##### Output\n```sql\n    SELECT\n        UserId,\n        UserName\n    FROM Users\n    WHERE UserId = @UserId\n    ORDER BY UserId\n    OFFSET @_PageSize * (@_PageNumber - 1)\n    ROWS FETCH NEXT @_PageSize ROWS ONLY\n\n    --Parameters\n    @_PageNumber=1,@_PageSize=10,@UserId=1\n```\n## Condition Sets Usage\n```csharp\n    //Find users who are admins and username is either tim or connor\n      SelectQueryCommand query = new SelectQueryCommand(\"Users\");\n      query.Field(\"UserId\").\n            Field(\"UserName\").\n            Field(\"IsAdmin\").\n            Condition(\"IsAdmin\", ColumnOperator.Equals, query.AddParam(true,\"IsAdmin\")).\n            ConditionSet(1, SetOperator.And, (set) =>\n            {\n                set.OrCondition(\"UserName\", ColumnOperator.Equals, query.AddParam(\"tim\")).\n                OrCondition(\"UserName\", ColumnOperator.Equals, query.AddParam(\"connor\"));\n            });\n```    \n##### Output\n```sql\n    SELECT\n         UserId,\n         UserName,\n         IsAdmin\n     FROM Users\n     WHERE (IsAdmin = @IsAdmin) AND (UserName = @p_1 OR UserName = @p_2)\n\n    --Parameters\n    @IsAdmin=1,@p_1='tim',@p_2='connor'\n```\n## Select\n```csharp\n    var query = new SelectQueryBuilder(\"Users\", \"U\");\n    query.Field(\"UserId\", \"Id\").\n          Field(\"UserName\").\n          Field(\"Password\").\n          Condition(\"U.UserId\", ColumnOperator.Equals, \"1\");\n```\n##### Output\n```sql\n    SELECT\n          UserId AS Id,\n          UserName,\n          Password\n    FROM Users U\n    WHERE U.UserId = 1\n```",
  "id": "GraphQL.SQL.Builder",
  "isPrerelease": false,
  "lastEdited": "2021-10-28T20:43:50.44Z",
  "licenseFile": "LICENSE",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": false,
  "packageHash": "TbXVxXPa38enJtKTtgb3BVimLwvx6zwagVnwjLQnuMpRm7UY5mdCL/jNP7vPsXMt4PJd/0lFZyui0zOH/i1hVQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 29959,
  "projectUrl": "https://github.com/jodendaal/GraphQL.SQL.Builder",
  "published": "1900-01-01T00:00:00Z",
  "repository": "",
  "verbatimVersion": "1.0.4",
  "version": "1.0.4",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#dependencygroup/.netstandard2.0/system.data.sqlclient",
          "@type": "PackageDependency",
          "id": "System.Data.SqlClient",
          "range": "[4.8.3, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#GraphQL.SQL.Builder.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1521,
      "fullName": "GraphQL.SQL.Builder.nuspec",
      "length": 4324,
      "name": "GraphQL.SQL.Builder.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#lib/netstandard2.0/GraphQL.SQL.Builder.dll",
      "@type": "PackageEntry",
      "compressedLength": 11707,
      "fullName": "lib/netstandard2.0/GraphQL.SQL.Builder.dll",
      "length": 31744,
      "name": "GraphQL.SQL.Builder.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#content/README.md",
      "@type": "PackageEntry",
      "compressedLength": 1716,
      "fullName": "content/README.md",
      "length": 7458,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#contentFiles/any/netstandard2.0/README.md",
      "@type": "PackageEntry",
      "compressedLength": 1716,
      "fullName": "contentFiles/any/netstandard2.0/README.md",
      "length": 7458,
      "name": "README.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#LICENSE",
      "@type": "PackageEntry",
      "compressedLength": 627,
      "fullName": "LICENSE",
      "length": 1066,
      "name": "LICENSE"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.10.28.20.44.03/graphql.sql.builder.1.0.4.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9471,
      "fullName": ".signature.p7s",
      "length": 9471,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}