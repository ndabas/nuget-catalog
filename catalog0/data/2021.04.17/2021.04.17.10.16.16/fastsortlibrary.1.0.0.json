{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.04.17.10.16.16/fastsortlibrary.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Shuji Kaya",
  "catalog:commitId": "7329b002-dc3d-406c-af1c-6fa26222dbba",
  "catalog:commitTimeStamp": "2021-04-17T10:16:16.9693235Z",
  "copyright": "Shuji Kaya",
  "created": "2021-04-17T10:13:48.87Z",
  "description": "Sort faster than Array.Sort(). [Not finished]\n\nBothSidesNowSort()\t: Multitask. Time is less than half on my intel i5 note(2 core 4 threads).\nMiceSort()\t\t\t: Single-task. Time is a little faster.\n\n(Time sample: same random number array)\nArray.Sort(): sorted 1000000elements in 13538msec.\nLinQ OrderBy: sorted 1000000elements in 14598msec.\nMice Sort: sorted 1000000elements in 13070msec.\nBoth Sides Now Sort: sorted 1000000elements in 5721msec.\n\n1. Usage\n\n\tvar\t\tsort = new SortEnvironment<T>() {\t\t// Change T -> class or value type of array\n\t\tData = {T[] Data},\t\t\t\t\t// Sort array name\n\t\tCompare = {Comparison<T> Compare},\t// Compare function\n//\t\tInverseOrder = true,\t\t\t// Set true if Decending\n//\t\tAlmostSorted = true,\t\t\t// Set true if the array is almost sorted (Time may be shortened. Normally time becomes longer.)\n//\t\tCoreCacheAmount = 256,\t\t\t// Data amount that can be stored each core cache. This is my PC experimental value. It is used if this setting is omitted.\n// Below setting is only for 'BothSidesNowSort'\n//\t\tTaskAmount = 4\t\t\t\t\t// Parallel task amount. Environment.ProcessorCount (Thread amount) is used if this setting is omitted.\n\t};\n\tsort.BothSidesNowSort(); // or sort.MiceSort();\n\nOr call like one of below. Array<T>.Sort() compatible parameter.\n\tArraySort<T>.BothSidesNowSort(T[] Data);\n\tArraySort<T>.BothSidesNowSort(T[] Data, IComparer<T> Comparer);\n\tArraySort<T>.BothSidesNowSort(T[] Data, Comparison<T> Compare);\n\n2. Character\n Method  : In-place merge sort, Bottom-up approach. \n Stable\t : Yes\n Memory\t : [log2(N/M) * 3 * int size * task amount] stack is used. (N is Data length. M is CoreCacheAmount.)\n         : I set 100 instead of log2(N/M). [I think it is sufficient safty value and present PC don't mind this size.]\n\t\t : For BothSidesNowSort() multi-core control, [N/M * int size] array is used.\n Time    : Comparison: O(NlogN)\n         : Move: O(NlogN^2) when N is small, O(NlogN) when N is large.[My persume. No decision]\n\n3. Notice\n - For chalenger and human sacrifice to brand new technology only\n   This is good tool for confirming your PC CPU core/thread true ability.\n   In my continuous test about 3 days, present version always worked right. (No sort miss. No lock up. No break down.)\n   But I have not finished this program theoretical verification. (Timing problem is very difficult.)\n   You may meet some kind trouble. I wish not to so.\n - If the comparison function is only subtraction like common sort benchmark, these are slower than Array.Sort().\n   Only when comparison function is time consuming, this sort is faster than Array.Sort().\n - List<T>, IEnumerable<T> don't provide necessary function for that user can attach sort process.\n   So I give up though I am sure that parallel process may make these sorting faster.\n - I don't use ManagementObjectCollection. It is very slow and prevent benchmark and I have not found the relation between cache size and cachable data amount.\n   By that, this is large range adaptable .NET Standard library. \n - When it becomes C-language shape, it will be the fastest sort function of all and after. That will be after deciding C# shape.\n\n4. Algorithm\n   Below article includes almost theory I using but the list in it includes many bugs. (A little previous version)\nhttps://www.codeproject.com/Articles/5275988/Fastest-Sort-Algorithm",
  "id": "FastSortLibrary",
  "isPrerelease": false,
  "lastEdited": "2021-04-17T10:15:50.877Z",
  "listed": true,
  "packageHash": "7Jd0sXtxI6rCu7u1e9/udfvTA9P3ElfNJOenIi+CvK6g13A2ojTgg8cd+CP3z/wY6K5XrBe7EKx8Ig2PoCggGQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 25174,
  "published": "2021-04-17T10:13:48.87Z",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.04.17.10.16.16/fastsortlibrary.1.0.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.04.17.10.16.16/fastsortlibrary.1.0.0.json#FastSortLibrary.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1893,
      "fullName": "FastSortLibrary.nuspec",
      "length": 3918,
      "name": "FastSortLibrary.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.04.17.10.16.16/fastsortlibrary.1.0.0.json#lib/netstandard2.0/SortLibrary.dll",
      "@type": "PackageEntry",
      "compressedLength": 10491,
      "fullName": "lib/netstandard2.0/SortLibrary.dll",
      "length": 23552,
      "name": "SortLibrary.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.04.17.10.16.16/fastsortlibrary.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9465,
      "fullName": ".signature.p7s",
      "length": 9465,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}