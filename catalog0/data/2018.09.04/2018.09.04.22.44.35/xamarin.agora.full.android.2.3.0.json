{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.04.22.44.35/xamarin.agora.full.android.2.3.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "dreamteammobile",
  "catalog:commitId": "97cda3f7-369f-45df-9a41-8b90cfaddbdc",
  "catalog:commitTimeStamp": "2018-09-04T22:44:35.3490914Z",
  "created": "2018-09-04T22:02:48.767Z",
  "description": "Xamarin bindings to the native Android Agora.io Full SDK.",
  "id": "Xamarin.Agora.Full.Android",
  "isPrerelease": false,
  "lastEdited": "2018-09-04T22:44:29.703Z",
  "listed": true,
  "packageHash": "Q3MnYVs6Rbd/TXiTIXoubcHYLrpuD1dP183j9ttRDPeEh2QTs3bSC5tIwWtS9+rXz9NL/6o8wNyiEpZ8NkkNQA==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 18496810,
  "projectUrl": "http://www.agora.io/",
  "published": "2018-09-04T22:02:48.767Z",
  "releaseNotes": "v2.3.0 (Released Aug 31st, 2018)\nBefore Reading\nTo support scenarios with video rotation and enable better quality for custom video source, this release deprecates the setVideoProfile interface and uses setVideoEncoderConfiguration instead to set the video encoding configurations. You can still use setVideoProfile, but Agora recommends using setVideoEncoderConfiguration to set the video profile because:\n\nDuring a live broadcast, users can set the video orientation mode as adaptive, under which the SDK can transfer rotated video frames without cropping them, thus avoiding the “big headshot” or blurry images at the Player.\nIn scenarios involving external video source, the SDK adjusts the width and height of the output video frames on basis of the inputting video frames, avoiding unnecessary cropping and thereby renderering more image frames at the Player.\nFrom v2.3.0, the LiveTranscoding Class was relocated from the io.agora.live Package to the io.agora.rtc.live package.\n\nA spelling mistake was corrected in API constants.java in v2.3.0.\n\nBefore:\npublic static final int SOFEWARE_ENCODER = 1;\nAfter:\npublic static final int SOFTWARE_ENCODER = 1;\nThe security keys are improved and updated in v2.1.0. If you are using an Agora SDK version below v2.1.0 and wish to migrate to the latest version, see Token Migration Guide.\n\nNew Features\n1. Fallback options for a live broadcast under unreliable network conditions\nThe audio and video quality of a live broadcast will deteriorate under unreliable network conditions. To improve the efficiency of a live broadcast, the setLocalPublishFallbackOption and setRemoteSubscribeFallbackOption interfaces are added. These interfaces allow the SDK to automatically disable the video stream when the network condition cannot support both audio and video, and enable the video when the network conditions improve. onLocalPublishFallbackToAudioOnly or onRemoteSubscribeFallbackToAudioOnly is triggered when the stream falls back to audio-only or when the stream switches back to the video.\n\n2. Notifies the user that the Token will expire in 30 seconds\nThe SDK returns the onTokenPrivilegeWillExpire callback 30 seconds before a Token expires to notify the app to renew it. When this callback is received, you need to generate a new Token on your server and call renewToken to pass the newly-generated Token to the SDK.\n\n3. Returns user-specific upstream and downstream statistics, including the bitrate, frame rate, packet loss rate and time delay\nThe onRemoteAudioTransportStats and onRemoteVideoTransportStats callbacks are added to provide user-specific upstream and downstream statistics, including the bitrate, frame rate, and packet loss rate. During a call or a live broadcast, these callbacks are triggered every two seconds after the user receives audio/video packets from a remote user. The callbacks include the user ID, audio bitrate at the receiver, packet loss rate, and time delay (ms).\n\n4. Sets the video encoder configurations\nTo support scenarios with video rotation and enable better quality for custom video source, this release deprecates the setVideoProfile interface and uses setVideoEncoderConfiguration instead to set the video encoding configurations. You can still use setVideoProfile, but Agora recommends using setVideoEncoderConfiguration to set the video profile because:\n\nDuring a live broadcast, users can set the video orientation mode as adaptive, under which the SDK can transfer rotated video frames without cropping them, thus avoiding the “big headshot” or blurry images at the Player.\nIn scenarios involving external video source, the SDK adjusts the width and height of the output video frames on basis of the inputting video frames, avoiding unnecessary cropping and thereby renderering more image frames at the Player.\nThe VideoEncoderConfiguration class provides a set of configurable video parameters, including the dimension, frame rate, bitrate, and orientation. For more information on the API, see descriptions in Set the Video Encoder Configuration.\n\n6. Adds support for background image settings in setLiveTranscoding\nThe backgroundImage parameter is added to the setLiveTranscoding method allowing you to set the background image in the combined video of a live broadcast.\n\nImprovements\nImproved the quality for one-on-one voice/video scenarios with optimized latency and smoothness, especially for areas like Southeast Asia, South America, Africa and Middle East.\nImproved the audio encoder efficiency in a live broadcast to reduce user traffic while ensuring the call quality.\nImproved the audio quality during a call or a live broadcast using the deep-learning algorithm.\nIssues Fixed\nIncreased memory usage when multiple delegated hosts broadcast in the channel.\nOccasional crashes on some Android devices.\nThe remote view does not display on some devices.\nThe local video cannot be enabled on some Android devices.\nOccasional ghost images.\nOccasional green line at the bottom of the video when a user switches from low stream to high stream in the communication mode.\nOccassional crashes after interoperating with devices of other platforms from some Android devices.\nExcessive increase in memory usage associated with a host when he/she frequently joins and leaves a channel of multiple delegated hosts.\nOccasional black screens on some Android devices.\nOccasional issue that the remote user cannot hear the host when the host swithces to AUDIENCE and then back to BROADCASTER.\nOccasional issue that settings to the background image of live transcoding do not take effect.\nOccasional issue that some devices have video height and width swapped in communication mode.\nOccasional failure to respond to the destroy method after a user enables video and joins a channel.\nOccasional crashes on the Android devices when the remote users frequently join and leave the channel.\nBlack screen due to failure to render the remote video on some Android devices.\nThe audience cannot adjust the channel volume on some special occasions.\nOccasional issue that applications do not respond on some Android devices.\nOccasional crashes on some Android devices when switching video resolution in a live broadcast.\nA delegated host cannot see the video of the other hosts in the channel on some Android devices.\nThe bitrates cannot reach the target values on some Android devices when a user frequently joins and leaves the communication channel with different video profiles.\nOccasional failure to capture video of the delegated host when the hosts and the audience frequently change roles.\nOccasional failure to capture videos or publish streams on some Android devices when a user frequently joins and leaves a communication channel with different video profiles.\nOccasional crashes when calling the setCameraFocusPositionInPreview method on some devices.\nOccasional failure to enable the camera during communication on some Android devices.\nVideo freezes and stream publishing hangs on some Android devices a while after a user joins a communication or live broadcast channel.\nOccasional crashes when one of the two broadcasters mutes or disables the local audio while playing the background music.\nA user cannot join a communication channel after frequently changing his/her video encoder profiles.\nOccasional crashes on some devices when preloading the sound effects.\nFailure to render videos of lower resolutions on some Android devices.\nOccasional issue that an Android client can still interoperate in a communication channel when removed from the dashboard.\nVideo resolution inconsistency between the encoder end and the decoder end in the live broadcast mode.\nFailure to enable the hardware encoder on some Android devices.\nOccasional video freeze in the communication or live broadcast mode.\nOccasional crashes when calling the muteRemoteVideoStream method after joinning the channel.\nFixed occasional video freeze on some Android devices when switching from the communication mode to the live broadcast mode.\nOccasional crashes on some Android devices when frequently turning on and off the flashlight during a live broadcast.\nThe host cannot receive the A/V stream of the delegated host on some Android devices.\nOccasional crashes on some Android devices when setting the video encoder profile of an external video source during a live broadcast.\nIncorrect video orientation on some Android devices when setting the video profile of an external video source during a live broadcast.\nOccasional issue on some Android devices that the video fallback option does not take effect in the case of weak network.\nOccasional crashes on some Android devices when a user frequently changes the Token.\nOccasional failure to split the screen on some Android devices.\nThe CDN audience on some Android devices cannot see the video of the host.\nOccasional video freezes when tswitching from multiple hosts to one single host.\nOccasional interoperability failures between the SIP devices and the SDK.\nOccasional issue on Mi 8 that the local video cannot be seen locally or remotely.\nOccasional issue on some Android devices that the users cannot see each other.\nOccasional echoes when using a specific audio card.\nOccasional video delay on some Android devices.\nOccaional crashes on some Android devices when transmitting the video streams.\nAPI Changes\nTo improve user experience, Agora has cleaned up and made the following changes to its APIs:\n\nTo avoid adding too many users with the same UID into the CDN publishing channel, the following API is deleted in v2.3.0, and the type of the return value of addUser is changed from void to int.\n\nsetUser\nThe following APIs are deleted and no longer supported in v2.3.0. Agora provides the Recording SDK for better recording services. For more information on the Recoding SDK, see Release Notes for Agora Recording SDK.\n\nstartRecordingService\nstopRecordingService\nrefreshRecordingServiceStatus\nThe following deprecated APIs are deleted and no longer supported from v2.3.0:\n\nmonitorConnectionEvent\nmonitorBluetoothHeadsetEvent\nmonitorHeadsetEvent\nsetPreferHeadset\nswitchView\nsetSpeakerphoneVolume\nBackwards Compatibility Breaking Changes\nNone.\n\nKnown Issues\nNone.\n\norigin: https://docs.agora.io/en/2.4/product/Video/Product%20Overview/release_android_video",
  "requireLicenseAcceptance": false,
  "summary": "Xamarin Agora Full Android SDK lets you use Agora.in-powered video sessions in apps",
  "title": "Xamarin bindings to the native Android Agora Video SDK",
  "verbatimVersion": "2.3.0",
  "version": "2.3.0",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.04.22.44.35/xamarin.agora.full.android.2.3.0.json#Xamarin.Agora.Full.Android.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3584,
      "fullName": "Xamarin.Agora.Full.Android.nuspec",
      "length": 11125,
      "name": "Xamarin.Agora.Full.Android.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.04.22.44.35/xamarin.agora.full.android.2.3.0.json#lib/MonoAndroid/Xamarin.Agora.Full.Android.dll",
      "@type": "PackageEntry",
      "compressedLength": 18481920,
      "fullName": "lib/MonoAndroid/Xamarin.Agora.Full.Android.dll",
      "length": 19453952,
      "name": "Xamarin.Agora.Full.Android.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.04.22.44.35/xamarin.agora.full.android.2.3.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9499,
      "fullName": ".signature.p7s",
      "length": 9499,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "Agora",
    "Agora.io",
    "Full",
    "SDK",
    "Xamarin",
    "Android",
    "Xamarin.Android",
    "MonoDroid",
    "Binding",
    "DreamTeam",
    "DreamTeamMobile"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}