{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.03.21.21.42.21/t4webformsinjection.0.1.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Richard Pringle",
  "catalog:commitId": "328d7ce5-0914-4eb7-a5bf-2170b7467d55",
  "catalog:commitTimeStamp": "2015-03-21T21:42:21.6521506Z",
  "created": "2015-03-18T14:16:35.623Z",
  "description": "T4 WebForms Injection generates default parameterless constructors for asp.net pages, user controls, handlers and modules. It is DI container independant with the only requirement being that a container (or method to it) is accesible statically.\n\nWhile not a true dependency injection framework, it does have the added benefit of not having any additional overhead of replacing the asp.net factories and by its nature will work without exception.\n\nThe package consists of a T4 template that will scan the current project for configurable class descendants with a parameterised constructor and then generate a default constructor which will call the parameterised constructor with instantiated objects created by the designated DI framework.\n\nExample:\nIn Default.aspx.cs:\npublic partial class _Default : Page\n{\n\tpublic _Default(ISomething something)\n\t{\n\t\t...\n\t}\n}\n\nIn T4 generated template:\npublic partial class _Default\n{\n\tpublic _Default()\n\t\t: this(ObjectFactory.GetInstance<IDoSomething>())\n\t{\n\t\t...\n\t}\n}",
  "id": "T4WebFormsInjection",
  "isPrerelease": false,
  "language": "en-ZA",
  "lastEdited": "2015-03-21T21:42:04.26Z",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0",
  "packageHash": "+2IDbBADCkXYbgk15jR2yXVnvBxEQz6fqNYHBsCrvcU1ualIgr/2swL/rsknDpLuztCbGW6c0ujHugNbJ+sznw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 10590,
  "projectUrl": "https://github.com/EtherZa/T4WebFormsInjection",
  "published": "2015-03-18T14:16:35.623Z",
  "requireLicenseAcceptance": false,
  "summary": "T4 WebForms Injection generates default parameterless constructors for asp.net pages, user controls, handlers and modules via a T4 template. It is DI container independant with the only requirement being that a container (or method to it) is accesible statically.",
  "title": "T4 WebForms Injection",
  "version": "0.1.0",
  "tags": [
    "t4",
    "webforms",
    "t4webformsinjection",
    "dependency",
    "injection"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}