{
  "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Arlo Godfrey",
  "catalog:commitId": "bacd3c7a-dd69-4858-baee-0ccb0d13cd1f",
  "catalog:commitTimeStamp": "2022-09-06T05:12:20.6006596Z",
  "created": "2022-09-06T05:07:12.093Z",
  "description": "Coordinated, high-latency IPoAC == A bad hard drive comprised entirely of Owls (see rfc6214)\n\t\t\n\t\tThis package enables early adoption of CommunityToolkit.Storage, a proposed package in Toolkit Labs, eventually to end up in CommunityToolkit/dotnet on GitHub.",
  "iconFile": "logo.png",
  "id": "OwlCore.Storage",
  "isPrerelease": false,
  "lastEdited": "2022-09-06T05:12:13.997Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "AkK+RYkt58NNlO5sKfrYszjIfDuguoDh94nhUc36Vc4E37nB3QGWmKUInt607o+Yo3YJqzBtmtHDr0PAz6+XSQ==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 51065,
  "published": "2022-09-06T05:07:12.093Z",
  "releaseNotes": "--- 0.5.0 ---\nTHIS IS A BREAKING RELEASE\nUpdate asap, and do not use older versions.\n\n[Breaking]\nItems in a folder always have a parent, so they're always addressable. We've updated the interfaces and inbox implementations to reflect this.\n\nIFolder.GetItemsAsync() now returns IAddressableStorable instead of IStorable.\nIModifiableFolder.CreateCopyOfAsync now returns IAddressableFile instead of IFile.\nIModifiableFolder.MoveFromAsync now returns IAddressableFile instead of IFile.\nIModifiableFolder.MoveFromAsync now takes IAddressableFile instead of IFile as the first parameter.\nIModifiableFolder.CreateFileAsync now returns IAddressableFile instead of IFile.\nIModifiableFolder.CreateFolderAsync now returns IAddressableFolder instead of IFolder.\nIModifiableFolder.DeleteAsync now takes IAddressableStorable instead of IStorable as the first parameter.\n\n--- 0.4.0 ---\nTHIS IS A BREAKING RELEASE\nUpdate asap, and do not use older versions.\n\n[Breaking]\nIAddressableStorable.GetParentAsync() now returns IFolder? instead of IAddressableFolder?. Any type of folder could yield an IAddressableStorable, so we've made sure the parent of any IAddressableStorable can be any type of folder.\n\nTo migrate, simply change the return type of IAddressableStorable.GetParentAsync() to IFolder? in your implementations. No other changes are required.\n\n--- 0.3.2 ---\n[Fixes]\nFixed SystemFolder not extracting the folder name from the path correctly.\nFixed SystemFile.OpenStreamAsync failing when call on a file returned from System.CreateFileAsync\nFixed an issue with SystemFileWatcher where it couldn't reliably determine if an arbitrary path is a File or a Folder.\n\n--- 0.3.1 ---\n[Fixes]\nFixed a crash that may occur when calling SystemFolder.CreateCopyOfAsync, when the stream of the file being copied doesn't support seeking.\n\n--- 0.3.0 ---\n[New]\nAdded MemoryFile and MemoryFolder under OwlCore.Storage.Memory.\n\n--- 0.2.0 ---\nTHIS IS A BREAKING RELEASE.\nUpdate asap, and do not use older versions.\nWe will switch to pure semver2.0 once a stable 1.0.0 released is made.\n\n[Breaking]\nDue to the wildly different strategies that could be used for generic recursive folder moving/copying, IModifiableFolder.CreateCopyOfAsync and IModifiableFolder.MoveFromAsync now exclusively handle files. This may be added back later as a fast-path interface + extension method.\n\nA new property has been added to the IFolderWatcher interface. Supplying the folder which is being observed is now a requirement. The \"sender\" in the INotifyCollectionChanged handler should be the watcher instead of the folder, meaning the folder can't be accessed from event handlers unless the watcher supplies it. \n\n[New]\nOwlCore.Storage.SimpleStorableItem has been added, a minimum possible implementation of IStorable. This is useful in scenarios when you need to identify a resource but shouldn't supply any access to it, such as when a file or folder is removed.\n\nWe've started adding inbox interface implementations, starting with System.IO, under the namespace OwlCore.Storage.SystemIO.\n\n--- 0.1.0 ---\n[New]\nAdded all missing interfaces and extension methods from proposal.\n      \n--- 0.0.0 ---\n[New]\nInitial release of OwlCore.Storage.",
  "repository": "",
  "verbatimVersion": "0.5.0",
  "version": "0.5.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#dependencygroup/.netstandard2.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#dependencygroup/.netstandard2.0/microsoft.bcl.asyncinterfaces",
          "@type": "PackageDependency",
          "id": "Microsoft.Bcl.AsyncInterfaces",
          "range": "[6.0.0, )"
        },
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#dependencygroup/.netstandard2.0/system.linq.async",
          "@type": "PackageDependency",
          "id": "System.Linq.Async",
          "range": "[6.0.1, )"
        }
      ],
      "targetFramework": ".NETStandard2.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#OwlCore.Storage.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1815,
      "fullName": "OwlCore.Storage.nuspec",
      "length": 4327,
      "name": "OwlCore.Storage.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#lib/netstandard2.0/OwlCore.Storage.dll",
      "@type": "PackageEntry",
      "compressedLength": 22155,
      "fullName": "lib/netstandard2.0/OwlCore.Storage.dll",
      "length": 38400,
      "name": "OwlCore.Storage.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#lib/netstandard2.0/OwlCore.Storage.xml",
      "@type": "PackageEntry",
      "compressedLength": 3327,
      "fullName": "lib/netstandard2.0/OwlCore.Storage.xml",
      "length": 28796,
      "name": "OwlCore.Storage.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#logo.png",
      "@type": "PackageEntry",
      "compressedLength": 11396,
      "fullName": "logo.png",
      "length": 13506,
      "name": "logo.png"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 691,
      "fullName": "LICENSE.txt",
      "length": 1135,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2022.09.06.05.12.20/owlcore.storage.0.5.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}