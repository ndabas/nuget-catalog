{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.11.23.16.41.53/excelautomationwrapper.1.0.4.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Brad Wood",
  "catalog:commitId": "e63c0a46-c02f-4771-9047-258045c19bed",
  "catalog:commitTimeStamp": "2015-11-23T16:41:53.9345011Z",
  "copyright": "Copyright 2015",
  "created": "2015-11-23T16:39:35.823Z",
  "description": "Working with large Excel files is problematic.  After reading an article by Joel Spolsky which advocated using Excel to work with Excel files because nobody else has put in everything necessary to optimize the experience like the real thing, I decided to try it out.  It turns out that the Excel automation object is difficult to work with, but does some amazing things.  It was able to copy/paste columns of data in huge files (200K rows) around fast while not spiking memory at all.  The same operation using EPPlus brought the server down.\\n\n\nRelative to running on the server, there are some caveats (http://tinyurl.com/ookezz3), but I believe if you test a process and it works, it will be fine.  You can't run Excel automation under a service and do just anything.\n\nThis package has never actually been in production, but has gone through a fair amount of testing - the main concern always being whether it's leaving the automation object behind (it seems to clean up consistently).\\n\n\nThere is the obvious dependency on Excel being installed on the machine where executing.\\n\n\nYou can use this as your wrapper for the automation object and do anything Excel does, but unfortunately I can't expose that directly, e.g., I can't expose a function that provides you with a live automation application object that will be closed when finished because you can't expose a COM object across library bounds.  In order to build your own functionality you will have to descend your own class from ExcelApplicationBase, but built in are these functions:\\n\n� ColumnReorder (as mentioned above): new ColumnReorderer().Reorder( newPath, (string list of columns the way you want ordered) ) \n� Sort: new Sorter().SortByColumn( columnIndex, path )\n� CSV to XLSX: new CSVtoXLSXConverter().CSVto_XLSX( path ) \n� XLSX to CSV: new XLSXtoCSVConverter().XLSXto_CSV( path )",
  "id": "ExcelAutomationWrapper",
  "isPrerelease": false,
  "lastEdited": "2015-11-23T16:41:52.41Z",
  "licenseNames": "",
  "licenseReportUrl": "",
  "listed": true,
  "packageHash": "dWSIUIgU/9Lz/VAKKgjkyqq18iDyMQzSykQDgktvnJTAb1uEC0EprnZBPs6UojKXGFnqBNEELWLbp5/nW/HyVw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 637892,
  "projectUrl": "https://excelautomationrunner.codeplex.com",
  "published": "2015-11-23T16:39:35.823Z",
  "releaseNotes": "",
  "requireLicenseAcceptance": false,
  "summary": "Wrapper for assuring startup / shutdown of Excel automation object. Nothing manipulates large Excel files like Excel. Ready functions: Sort, CSV to XLSX, XLSX to CSV, Column Reordering.",
  "verbatimVersion": "1.0.4",
  "version": "1.0.4",
  "tags": [
    "Excel",
    "Automation"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}