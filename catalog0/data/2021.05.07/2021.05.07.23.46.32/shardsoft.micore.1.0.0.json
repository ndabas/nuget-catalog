{
  "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Michael Furlong",
  "catalog:commitId": "2d2f5566-dbc1-490c-9b77-34eac1e818c5",
  "catalog:commitTimeStamp": "2021-05-07T23:46:32.9968667Z",
  "copyright": "Copyright (c) Michael Furlong 2021",
  "created": "2021-05-07T23:45:00.673Z",
  "description": "Core library for the MiFramework.",
  "id": "ShardSoft.MiCore",
  "isPrerelease": false,
  "lastEdited": "2021-05-07T23:46:32.373Z",
  "licenseFile": "licence.md",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "U/Kk1HJSLNtVQSQwHWPCnk0KyoNev0K7n01f6Y5AMjoPdVFXYoZJLm/XSXgXXJ7M5syFf14E5Ndu7CLV4BRYkw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 60710,
  "projectUrl": "https://github.com/BrokenShards/MiCore",
  "published": "2021-05-07T23:45:00.673Z",
  "releaseNotes": "# Version 1.0.0\n- The supplied project and release binaries now target .Net 5 and not the .Net Framework.\n- Updated coding style throughout to use newer C# features brought with the change to .Net 5.\n- `MiJob`, `JobList` and `JobManager` have been removed temporarily as the async functionality is not stable.\n\n# Version 0.11.0\n- Fixed issue where `Namable.AsValid(string,char)` was not using the assigned replacement character and always used an underscore.\n- Minor performance improvements by using a `for` rather than `foreach` loop in certain cases.\n\n# Version 0.10.0\n- Added generic `TypeRegister` class that is used for registering string IDs to types and using the IDs to create objects of the registered types. `ComponentRegister` inherits from this.\n- Added `SubscribeEvents(Window)` and `UnsubscribeEvents(Window)` virtual methods to `MiObject` to replace `MiComponent` and `MiEntity`'s `TextEntered(TextEventArgs)` method and expand for other events.\n- `MiComponent` now contains virtual functions `OnAdd()` and `OnRemove()` that are triggered when the component is added to and removed from an entity; these are intended to initialize the new parent entities' other components.\n- Added virtual `Refresh()` method to `MiComponent` that is called before `OnUpdate(float)` for refreshing a components' visual elements without updating runtime logic. `MiEntity.Refresh()` is also included as a passthrough. This is so components and entities can be visualized without being interacted with.\n\n# Version 0.9.1\n- Fixed bug where `MiEntity.LoadFromStream(BinaryReader)` would report failure even when it succeeded.\n\n# Version 0.9.0\n- Added functionality to `MiEntity` for retrieving children by component.\n- Fixed bug with `MiEntity.AddComponent` where if the component is added successfully, but adding one of the required components fails, the leftover components are not removed.\n- Fixed bug where `MiNode<T>` was not saving and loading its ID in `LoadFromStream(BinaryReader)`, `SaveToStream(BinaryWriter)` and `LoadFromXml(XmlElement)`.\n- Fixed bug where `MiNode<T>.ToString()` and `MiEntity.ToString()` mixed up the value for `Visible` with `Enabled`.\n- `MiNode<T>` is no longer `INamable` and no longer has `Name` as `IIdentifiable<string>` with 'ID'  does the job.\n- `MiNode.HasChild(string,bool)`, `MiNode.GetChild(string,bool)`, `MiNode.RemoveChild(string,bool)` and `MiNode.ReleaseChild(string,bool)` now all support path-like syntax to access children.\n\n# Version 0.8.0\n- When adding a component to an entity, its required components are now added after the component rather than before to prevent component order issues. Due to this, all `Entity.Insert*` methods have been removed.\n- Removed `Paths.Executable` and `Paths.ExecutableFolder` due to unforseen reflection issues.\n\n# Version 0.7.0\n- Now `MiComponent.RequiredComponents` and `MiComponent.IncompatibleComponents` are readonly and are assigned on construction with the `MiComponent.GetRequiredComponents()` and `MiComponent.GetIncompatibleComponents()` methods respectively.\n- Merged some path methods from `MiGfx`.\n\n# Version 0.6.0\n- `ComponentStack` has been merged back into `MiEntity` and the methods and properties have been renamed to show they interact with components.\n- Added `MiEntity.ReleaseAllComponents()` that removes all components from an entity without disposing of them and returns an array containing them.\n- Now `MiComponent` implements `IEquatable<MiComponent>` as a base for deriving classes.\n\n# Version 0.5.0\n- Changed SFML source to latest official SFML.Net repository.\n\n# Version 0.4.0\n- `MiEntity` objects now require a reference to the render window, `MiEntity.Window` to be assigned in order to contain components that need it. When setting `MiEntity.Window`, it will be applied to all child entities too.\n- `MiComponent` now contains methods for handling text entered events. `TextEntered(TextEventArgs)` is to be called and passed the event args when the event happens and will then call the virtual `OnTextEntered(TextEventArgs)` which you would override to handle the event. Because of this, `MiEntity.TextEntered(TextEventArgs)` is provided to call the event on all components and all components of all children.\n- `ComponentStack.Add<T>(bool)` has been renamed to `AddNew<T>(bool)` and has been replaced with `Add<T>(T, bool)` to add an object of the given type to the stack.\n- Added methods `Insert(int, MiComponent, bool)`, `Insert<T>(int, T, bool)`, `InsertNew<T>(int, bool)` and 'AddRange(IEnumerable<MiComponent>, bool)` to `ComponentStack` for inserting components into perticular indicies in the stack. `AddRange(IEnumerable<MiComponent>, bool)` has also been added to easily add a range of components from a collection.\n\n# Version 0.3.0\n- `Entity`, `Component` classes have been renamed to `MiEntity` and `MiComponent`.\n- Added `MiNode<T>` abstract class to provide a parent-child relationship tree of type `T` for dervied classes.\n- Added both sync and async ECS job functionality. `MiJob` objects contain job delegates and info, `JobList` objects are used to manage jobs into different priorities, and a `JobManager` object contains the job lists in priority order and is designed to run the jobs in order.\n- Component related functionality has been moved from `MiEntity` to a new class `ComponentStack`. An entities components are now accessed through `MiEntity.Components`.\n- Now `MiObject` and `MiEntity` implement `ICloneable`, this means all classes that inherit from `Component` must return a deep copy of the object via `Clone()`. This is so that entities can be cloned without knowing the actual type of their components.\n- `MiObject.Dispose()` is no longer meant to be overridden, instead override `MiObject.OnDispose()`, this ensures the object is only disposed of once.\n- `MiEntity` now inherits from and implements `MiNode<MiEntity>`.\n- Added `MiEntity.Release<T>()`, `MiEntity.Release(int)` and `MiEntity.Release(string)` methods for removing and extracting components without disposing of them.\n\n# Version 0.2.0\n- Removed the need for `DataT` type in `ISerializable` and removed `ISerializable.FileData`. Because of this, default behaviour for `TextSerializable.SaveToStream(StreamWriter)` will write the result of `ToString()` to the stream instead of `FileData` and `BinarySerializable.SaveToStream(BinaryWriter)` is now completely abstract.\n- Added `IXmlSerializable` interface and `XmlSerializable` class for classes that are serialized and deserialized in xml files node by node.\n- `MiObject.Dispose()` is now virtual rather than abstract so classes that inherit from it no longer need to implement it.\n- `Component.RequiredComponents` and `Component.IncompatibleComponents` now default to null instead of an empty string array.\n\n# Version 0.1.0\n- Initial release.",
  "requireLicenseAcceptance": false,
  "verbatimVersion": "1.0.0",
  "version": "1.0.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#dependencygroup/net5.0",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#dependencygroup/net5.0/sfml.net",
          "@type": "PackageDependency",
          "id": "SFML.Net",
          "range": "[2.5.0, )"
        }
      ],
      "targetFramework": "net5.0"
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#ShardSoft.MiCore.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 3035,
      "fullName": "ShardSoft.MiCore.nuspec",
      "length": 7825,
      "name": "ShardSoft.MiCore.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#lib/net5.0/MiCore.dll",
      "@type": "PackageEntry",
      "compressedLength": 23915,
      "fullName": "lib/net5.0/MiCore.dll",
      "length": 62464,
      "name": "MiCore.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#lib/net5.0/MiCore.xml",
      "@type": "PackageEntry",
      "compressedLength": 10046,
      "fullName": "lib/net5.0/MiCore.xml",
      "length": 119522,
      "name": "MiCore.xml"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#licence.md",
      "@type": "PackageEntry",
      "compressedLength": 12300,
      "fullName": "licence.md",
      "length": 35826,
      "name": "licence.md"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2021.05.07.23.46.32/shardsoft.micore.1.0.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9468,
      "fullName": ".signature.p7s",
      "length": 9468,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "c#"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "packageTypes": {
      "@id": "packageType",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "vulnerabilities": {
      "@id": "vulnerability",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    },
    "reasons": {
      "@container": "@set"
    }
  }
}