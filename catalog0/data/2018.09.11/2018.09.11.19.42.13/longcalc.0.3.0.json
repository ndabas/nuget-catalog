{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.11.19.42.13/longcalc.0.3.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "6b124fac-5837-4e08-9d79-82a15a0a9ae4",
  "catalog:commitTimeStamp": "2018-09-11T19:42:13.4025844Z",
  "copyright": "Copyright 2018",
  "created": "2018-09-11T19:37:50.16Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2018-09-11T19:42:03.287Z",
  "licenseUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/LICENSE.txt",
  "listed": true,
  "packageHash": "i8ChWZNKQ3+RYM73U527fkX2FEsJYdKpjwkHIiOUhvDB2oSOBIP7+zLZP7FOgNzeGH/+Ebz/Iu3qNaQLK/Kulw==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 39847,
  "published": "2018-09-11T19:37:50.16Z",
  "releaseNotes": "With this revision, the twoexp (bf object two's exponent) has been made a long (Int64) variable. Also, Precisions (which are always represented as number of decimal digits) are specifically limited to no more than 323,000,000 digits. This is not much less than the natural limitation on precisions when multiplying the underlying mpz_t objects.\n\nAn effort has been made to check for overflows of the underlying mpz_t object when performing a bf 'Add' function. If an overflow were to occur, the user can now set the new bf.GlobalAllowAddTruncates flag to 'true' to allow the software objects to behave more like true 'floating-point' variables in which truncation of results of adds occurs on underflow or overflow of mantissa. \n\nMany integers less than the maximum value of a bf object, which is ((2 ^ (int.MaxValue - 1)) - 1) * (2 ^ (long.MaxValue)), are not representable by this software. As a result, the bf Floor() function returns an error when applied to bf objects greater than (2 ^ (int.MaxValue - 1) - 1).\n\nThe bf function Normalize1() has been deprecated, and will return an error when applied to bf's greater than (2 ^ (int.MaxValue - 2)). Instead, use Normalize2(), which returns an equivalent bf with the mantissa minimized and the twoexp maximized.\n\nA number of corrections and performance enhancements have been applied. For example, the bf Exp() exponential function now appears to work well up to inputs ~ 6.0E+18.\n\nScientific notation usage is now automatically applied to bf 'toString' outputs which would otherwise exceed 2,000,000,000 digits.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2017) and using Mpir.net for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.net and a base 2 int64 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.3.0",
  "version": "0.3.0",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.11.19.42.13/longcalc.0.3.0.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.11.19.42.13/longcalc.0.3.0.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.11.19.42.13/longcalc.0.3.0.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1653,
      "fullName": "LongCalc.nuspec",
      "length": 3585,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.11.19.42.13/longcalc.0.3.0.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 27013,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 79360,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.09.11.19.42.13/longcalc.0.3.0.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}