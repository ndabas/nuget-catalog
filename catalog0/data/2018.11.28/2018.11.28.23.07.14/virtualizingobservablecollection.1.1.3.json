{
  "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.28.23.07.14/virtualizingobservablecollection.1.1.3.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Andrewwhiddett",
  "catalog:commitId": "cd70ece5-eec0-4178-b2bf-7a8813df86b1",
  "catalog:commitTimeStamp": "2018-11-28T23:07:14.6030242Z",
  "copyright": "(c) AlphaChi Technology 2015",
  "created": "2015-03-11T17:43:27.773Z",
  "description": "See:\n\nhttp://alphachitech.wordpress.com/2015/01/31/virtualizing-observable-collection/\n\nGitHub is here: https://github.com/anagram4wander/VirtualizingObservableCollection\n\nThere are no performant large data set observable collections that support write operations in .NET, so we wrote the VirtualizingObservableCollection, which does the following:\n◾Implements the same interfaces as ObsevableCollection<T> so you can use it anywhere you’d use an ObsevableCollection<T> – no need to change any of your existing controls.\n◾Supports true multi-user read/write without resets (maximizing performance for large-scale concurrency scenarios).\n◾Manages memory on its own so it never runs out of memory, no matter how large the data set is (especially important for mobile devices).\n◾Natively works asynchronously – great for slow network connections and occasionally-connected models.\n◾Works great out of the box, but is flexible and extendable enough to customize for your needs.\n◾Has a data access performance curve nearly as good as the regular ObsevableCollection – the cost of using it is negligible.\n◾Works in any .NET project because it’s implemented in a Portable Code Library (PCL).",
  "iconUrl": "http://alphachitech.files.wordpress.com/2015/01/voc_logo_300x300.png",
  "id": "VirtualizingObservableCollection",
  "isPrerelease": false,
  "language": "",
  "lastEdited": "2018-11-28T23:06:47.89Z",
  "listed": true,
  "packageHash": "e1AUhXigDGpx30euOAxYEXuNAzNhXWtKKDhnZnwsyoRT243fMqhnizsKJ1W56LqM7oruzZY3U5OuHH30OTg69g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 68945,
  "projectUrl": "https://alphachitech.wordpress.com/2015/01/31/virtualizing-observable-collection/",
  "published": "2015-03-11T17:43:27.773Z",
  "releaseNotes": "1.1.3\n\nCan now support the insert and remove of millions of rows without effecting performance (yes - this is a real use case we needed).\n\nAdded ResetAsync which causes it to get it all again. This is great for filters.\n\n\n1.0.2.0\n\nFixed broken count on non-async version.\n\n1.0.1.0\n\nAdded base paged source, including MakeASync and MakeSync versions.\n\nFixed count bug when Async and the count returns instantly.\n\nFixed all Async to Sync context bugs (wrapped all .Results in Task.Run).\n\n0.9.3.0\n\nGreatly optimized if you do a lot of Inserts or Removes at the head of the VOC.\n\nImplemented BulkMode:-\n\nusing(myVOC.EnterBulkMode())\n{\n   : do lots of add/insert/removes\n} // Now does a reset.\n\n0.9.1.0:\n\nRewrote the core page/offset getter - works much better with large updates now.\n\nAdded AddRange.\n\nFixed a couple of ASync bugs related to cancelation.\n\nImplemented Clear - so it does a reset/get count.\n\n0.9.0.0:\nMinor change to Async GetPlaceHold to pass in the index\n\nRe-worked the Add/Append implementation to create new pages..\n\nAsync seems stable now: Implement IPagedSourceProviderAsync<T> and pass that to the PagingManager constructor.\n\nChanged rest of the DateTimes to Object so you can implement any type of IPageExpiryComparer you want.",
  "requireLicenseAcceptance": false,
  "summary": "PCL Implementation of a VirtualizingObservableCollection that implements full editing and is highly performing.",
  "title": "Virtualizing Observable Collection",
  "verbatimVersion": "1.1.3",
  "version": "1.1.3",
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.28.23.07.14/virtualizingobservablecollection.1.1.3.json#VirtualizingObservableCollection.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1719,
      "fullName": "VirtualizingObservableCollection.nuspec",
      "length": 3529,
      "name": "VirtualizingObservableCollection.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.28.23.07.14/virtualizingobservablecollection.1.1.3.json#lib/AlphaChiTech.Virtualization.dll",
      "@type": "PackageEntry",
      "compressedLength": 21215,
      "fullName": "lib/AlphaChiTech.Virtualization.dll",
      "length": 48640,
      "name": "AlphaChiTech.Virtualization.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.28.23.07.14/virtualizingobservablecollection.1.1.3.json#lib/AlphaChiTech.Virtualization.pdb",
      "@type": "PackageEntry",
      "compressedLength": 32418,
      "fullName": "lib/AlphaChiTech.Virtualization.pdb",
      "length": 144896,
      "name": "AlphaChiTech.Virtualization.pdb"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2018.11.28.23.07.14/virtualizingobservablecollection.1.1.3.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9471,
      "fullName": ".signature.p7s",
      "length": 9471,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "mvvm",
    "wpf",
    "windowsstore",
    "win8",
    "windowsphone",
    "windowsphone8",
    "xamarin",
    "xaramin.forms",
    "virtualization"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}