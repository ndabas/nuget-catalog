{
  "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.14.23.47.18/asyncfixer.0.9.0.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Semih Okur",
  "catalog:commitId": "a8b6855a-0e62-48ea-a352-681bf926e00a",
  "catalog:commitTimeStamp": "2015-02-14T23:47:18.0301244Z",
  "copyright": "Copyright 2015",
  "created": "2015-02-14T23:14:02.72Z",
  "description": "AsyncFixer helps developers in finding and removing 3 common async/await misuses (anti-patterns). AsyncFixer was tested with hundreds of C# apps and successfully handles many corner cases. \n\nIf you want AsyncFixer to work as an analyzer on every project you open in Visual Studio, please download the extension: https://visualstudiogallery.msdn.microsoft.com/03448836-db42-46b3-a5c7-5fc5d36a8308\n\nHere are 3 misuses that AsyncFixer detects:\n\n1) Unnecessary async/await Methods\n\nThere are some async methods where there is no need to use async/await. It is important to detect this kind of misuse because adding the async modifier comes at a price.\n\nAsyncFixer removes async/await keywords from these methods. \n\n\n2) Using Long-running Operations under Async Methods\n\nDevelopers use some potentially long running or blocking operations under async methods even though there are corresponding asynchronous versions of these methods in .NET or third-party libraries. Some example for such operations: Task.Wait(), Task.Result, Task.WaitAll(...), StreamReader.ReadToEnd(...), Thread.Sleep(...),  etc. \n\nAsyncFixer automatically replaces these operations with their corresponding asynchronous operations and inserts 'await' expression. For instance, it converts Thread.Sleep(...) to await Task.Delay(...).\n\n\n3) Fire & Forget Methods\n\nSome async methods are 'fire&forget', which return void. Unless a method is only called as an event handler, it must be awaitable. Otherwise, it is a code smell because it complicates control flow and makes error detection & correction difficult. \n\nAsyncFixer replaces the return type of the (non-event handler) method with 'Task'.\n\n\n*** Important ***\n\nThe detection and fixing of more async/await misuses are being implemented.\nPlease send your bug report or feedback to semih.okur@gmail.com\nLearn more information about these misuses from our website: LearnAsync.NET",
  "frameworkAssemblyGroup": {
    "@id": "https://api.nuget.org/v3/catalog0/data/2015.02.14.23.47.18/asyncfixer.0.9.0.json#frameworkassemblygroup",
    "assembly": "System"
  },
  "iconUrl": "http://learnasync.net/icon.png",
  "id": "AsyncFixer",
  "isPrerelease": false,
  "lastEdited": "2015-02-14T23:46:46.35Z",
  "licenseUrl": "http://learnasync.net/license.txt",
  "packageHash": "4lc4dCa1IVcDT9QYFhJ3vZ3VymngDQQbGQzFHhQiy/0m/P1BkjeQuvRjG4/simEGZqsmUnrd4tQb2P9Q/F4dvg==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 16989,
  "projectUrl": "http://learnasync.net/",
  "published": "2015-02-14T23:14:02.72Z",
  "releaseNotes": "First beta release.",
  "requireLicenseAcceptance": false,
  "summary": "AsyncFixer helps developers in finding and removing 3 common async/await misuses (anti-patterns)",
  "title": "AsyncFixer",
  "version": "0.9.0",
  "tags": [
    "async/await",
    "diagnostics",
    "asynchronous",
    "codefix",
    "roslyn",
    "async",
    "codeanalysis",
    "c#"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}