{
  "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json",
  "@type": [
    "PackageDetails",
    "catalog:Permalink"
  ],
  "authors": "Mark Carlson",
  "catalog:commitId": "265a2714-d63e-4318-9bf1-8bc6ca99671c",
  "catalog:commitTimeStamp": "2019-01-23T23:07:33.1121178Z",
  "copyright": "Copyright 2018",
  "created": "2019-01-23T23:03:15.457Z",
  "description": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "iconUrl": "http://markknowsnothing.weebly.com/uploads/2/7/0/7/27073737/custom_themes/820134448677229004/files/Logo50x50.png",
  "id": "LongCalc",
  "isPrerelease": false,
  "lastEdited": "2019-01-23T23:07:31.287Z",
  "licenseFile": "LICENSE.txt",
  "licenseUrl": "https://aka.ms/deprecateLicenseUrl",
  "listed": true,
  "packageHash": "vJWl9PGIvO/xscbU66MwLNX1TrTv5yzhkvXLH1cYHIaflBTh0gaRJYp4LPrUIfWVNcCT/81Nu/6AKue5fHGP5g==",
  "packageHashAlgorithm": "SHA512",
  "packageSize": 446172,
  "published": "2019-01-23T23:03:15.457Z",
  "releaseNotes": "Unsigned Assembly\n\nSome further investigation was done into the curious output of Mpir.NET functions such as .BitLength, .IndexOfOne, etc which could return negative results. Eventually (like about now), an understanding arose as to what those values represented and how to interpret them. In previous versions my interpretation was flat-out wrong. As a results, inaccurate results for most any of the LongCalc functions were bound to happen if the Precision setting was high enough or the output values were of high enough order of magnitude.\n\nWith this version, those errors have hopefully been resolved. I have included my own x.Bitlength property function which returns a long data type whose value might be more understandable to me. The GlobalAllowAddTruncates parameter is now gone since the x.Add function problems have been resolved. bf mantissa widths up to 2 ^ long.MaxValue bits should work, and the problem of x.Floor() function failures should be over and the x.Normalize1() function problems resolved.\n\nIn addition, functions 'public static long LongVal(mpz_t x)' and 'public static mpz_t Mpz_tVal(long x)' have been added to facilitate changes between mpz_t and long data types, as Mpir.NET version 0.4.0 has difficulties with long input data for mpz_t type initialization, casts from mpz_t to long, and comparison operators or functions between mpz_t and long values.\n\nAlso, the x.Round and x.toString functions are much faster now for the most part.\n\nIn this version also: the bf, bcr, and bcp data type intializer functions which had a boolean CloneMant parameter are gone as a bad idea in the first place.\n\nThe bad news: In this version, any attempts at x.Exp for x larger than about 1.E+9 will likely bring this software to a slow-motion crash, while x.Exp in previous versions for x even as large as 6.E+18 might quickly produce results, but they are quite possibly wrong results.\n\nChecks for arithmetic overflow or underflow are again compiler-included in this release.",
  "requireLicenseAcceptance": true,
  "summary": "This library, built with and accessible by Visual Studio (2017) and using Mpir.net for the underlying integer math, supplies a variety of math functions and utilities with precisions at least as large as 2,000,000 base 10 digits. The underlying objects are bf (for 'big float' real values comprised of an mpz_t extended integer part from Mpir.net and a base 2 int64 exponent), bcr (for complex numbers expressed in the rectangular coordinates of a bf real part and a bf imaginary part), and bcp (for complex numbers expressed in the polar coordinates of a bf radius and a bf angle). Functions supported include real and complex versions of: basic arithmetic, trigonometric functions, log and exponential functions, hyperbolic functions and the inverses of all of these, base conversions between bases up to 64, conversions between rectangular and polar coordinates, and some special functions such as Euler, Bernoulli, Gamma, Zeta, and BesselJ.",
  "title": "LongCalc Arbitrary Precision Float and Complex Number Library",
  "verbatimVersion": "0.3.22",
  "version": "0.3.22",
  "dependencyGroups": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#dependencygroup",
      "@type": "PackageDependencyGroup",
      "dependencies": [
        {
          "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#dependencygroup/mpir.net",
          "@type": "PackageDependency",
          "id": "Mpir.NET",
          "range": "[0.4.0, )"
        }
      ]
    }
  ],
  "packageEntries": [
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#LongCalc.nuspec",
      "@type": "PackageEntry",
      "compressedLength": 1899,
      "fullName": "LongCalc.nuspec",
      "length": 3989,
      "name": "LongCalc.nuspec"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#LICENSE.txt",
      "@type": "PackageEntry",
      "compressedLength": 2659,
      "fullName": "LICENSE.txt",
      "length": 7814,
      "name": "LICENSE.txt"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#lib/net45/LongCalc.dll",
      "@type": "PackageEntry",
      "compressedLength": 32706,
      "fullName": "lib/net45/LongCalc.dll",
      "length": 97792,
      "name": "LongCalc.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#content/xmpir32.dll",
      "@type": "PackageEntry",
      "compressedLength": 176893,
      "fullName": "content/xmpir32.dll",
      "length": 320000,
      "name": "xmpir32.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#content/xmpir64.dll",
      "@type": "PackageEntry",
      "compressedLength": 220506,
      "fullName": "content/xmpir64.dll",
      "length": 441856,
      "name": "xmpir64.dll"
    },
    {
      "@id": "https://api.nuget.org/v3/catalog0/data/2019.01.23.23.07.33/longcalc.0.3.22.json#.signature.p7s",
      "@type": "PackageEntry",
      "compressedLength": 9466,
      "fullName": ".signature.p7s",
      "length": 9466,
      "name": ".signature.p7s"
    }
  ],
  "tags": [
    "arbitrary",
    "precision",
    "float",
    "complex",
    "number",
    "math",
    "library"
  ],
  "@context": {
    "@vocab": "http://schema.nuget.org/schema#",
    "catalog": "http://schema.nuget.org/catalog#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "dependencies": {
      "@id": "dependency",
      "@container": "@set"
    },
    "dependencyGroups": {
      "@id": "dependencyGroup",
      "@container": "@set"
    },
    "packageEntries": {
      "@id": "packageEntry",
      "@container": "@set"
    },
    "supportedFrameworks": {
      "@id": "supportedFramework",
      "@container": "@set"
    },
    "tags": {
      "@id": "tag",
      "@container": "@set"
    },
    "published": {
      "@type": "xsd:dateTime"
    },
    "created": {
      "@type": "xsd:dateTime"
    },
    "lastEdited": {
      "@type": "xsd:dateTime"
    },
    "catalog:commitTimeStamp": {
      "@type": "xsd:dateTime"
    }
  }
}